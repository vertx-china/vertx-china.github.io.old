{"pageProps":{"slug":"3.9.4/vertx-config/ruby","title":"Vert.x Config","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_concepts\">Concepts</a></li>\n<li><a href=\"#_using_the_config_retriever\">Using the Config Retriever</a></li>\n<li><a href=\"#_overloading_rules\">Overloading rules</a></li>\n<li><a href=\"#_using_the_retrieve_configuration\">Using the retrieve configuration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_configuring_a_single_verticle\">Configuring a single verticle</a></li>\n<li><a href=\"#_configuring_a_set_of_verticles\">Configuring a set of verticles</a></li>\n<li><a href=\"#_configuring_vert_x_itself\">Configuring Vert.x itself</a></li>\n<li><a href=\"#_propagating_configuration_changes_to_the_event_bus\">Propagating configuration changes to the event bus</a></li>\n</ul>\n</li>\n<li><a href=\"#_available_configuration_stores\">Available configuration stores</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_structure_of_the_configuration\">Structure of the configuration</a></li>\n<li><a href=\"#_file\">File</a></li>\n<li><a href=\"#_json\">JSON</a></li>\n<li><a href=\"#_environment_variables\">Environment Variables</a></li>\n<li><a href=\"#_system_properties\">System Properties</a></li>\n<li><a href=\"#_http\">HTTP</a></li>\n<li><a href=\"#_event_bus\">Event Bus</a></li>\n<li><a href=\"#_directory\">Directory</a></li>\n<li><a href=\"#_properties_file_and_raw_data\">Properties file and raw data</a></li>\n</ul>\n</li>\n<li><a href=\"#_listening_for_configuration_changes\">Listening for configuration changes</a></li>\n<li><a href=\"#_retrieving_the_last_retrieved_configuration\">Retrieving the last retrieved configuration</a></li>\n<li><a href=\"#_reading_configuration_as_a_stream\">Reading configuration as a stream</a></li>\n<li><a href=\"#_processing_the_configuration\">Processing the configuration</a></li>\n<li><a href=\"#_retrieving_the_configuration_as_a_future\">Retrieving the configuration as a Future</a></li>\n<li><a href=\"#_extending_the_config_retriever\">Extending the Config Retriever</a></li>\n<li><a href=\"#_additional_formats\">Additional formats</a></li>\n<li><a href=\"#_additional_stores\">Additional stores</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Config</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Config provides a way to configure your Vert.x application.\nIt:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>offers multiple configuration syntaxes (JSON, properties, Yaml (extension), Hocon\n(extension)&#8230;&#8203;</p>\n</li>\n<li>\n<p>offers multiple configuration stores such as files, directories, HTTP, git (extension), Redis\n(extension), system properties and environment properties.</p>\n</li>\n<li>\n<p>lets you define the processing order and overloading</p>\n</li>\n<li>\n<p>supports runtime reconfiguration</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_concepts\"><a class=\"anchor\" href=\"#_concepts\"></a>Concepts</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The library is structured around:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>a*Config Retriever<strong> instantiated and used by the Vert.x application. It\nconfigures a set of configuration store\n</strong>Configuration store** defines a location from where the configuration data is read and also a format (JSON by default)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The configuration is retrieved as a JSON Object.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_config_retriever\"><a class=\"anchor\" href=\"#_using_the_config_retriever\"></a>Using the Config Retriever</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Config Retriever, add the following dependency to the\n<em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:3.9.4'</span>\n----</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once done, you first need to instantiate the <code><a href=\"../../yardoc/VertxConfig/ConfigRetriever.html\">ConfigRetriever</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>require 'vertx-config/config_retriever'\nretriever = VertxConfig::ConfigRetriever.create(vertx)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>By default, the Config Retriever is configured with the following stores (in\nthis order):</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The Vert.x verticle <code>config()</code></p>\n</li>\n<li>\n<p>The system properties</p>\n</li>\n<li>\n<p>The environment variables</p>\n</li>\n<li>\n<p>A <code>conf/config.json</code> file. This path can be overridden using the <code>vertx-config-path</code> system property or\n<code>VERTX_CONFIG_PATH</code> environment variable.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>You can configure your own stores:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>require 'vertx-config/config_retriever'\nhttpStore = {\n  'type' =&gt; \"http\",\n  'config' =&gt; {\n    'host' =&gt; \"localhost\",\n    'port' =&gt; 8080,\n    'path' =&gt; \"/conf\"\n  }\n}\n\nfileStore = {\n  'type' =&gt; \"file\",\n  'config' =&gt; {\n    'path' =&gt; \"my-config.json\"\n  }\n}\n\nsysPropsStore = {\n  'type' =&gt; \"sys\"\n}\n\n\noptions = {\n  'stores' =&gt; [\n    httpStore,\n    fileStore,\n    sysPropsStore\n  ]\n}\n\nretriever = VertxConfig::ConfigRetriever.create(vertx, options)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More details about the overloading rules and available stores are available below. Each store can be marked as\n<code>optional</code>. If a failure is caught while retrieving (or processing) the configuration from an optional store, the failure\nis logged, but the processing does not fail. Instead, an empty JSON object is returned (<code>{}</code>). To mark a store as\noptional, use the <code>optional</code> attribute:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>require 'vertx-config/config_retriever'\nfileStore = {\n  'type' =&gt; \"file\",\n  'optional' =&gt; true,\n  'config' =&gt; {\n    'path' =&gt; \"my-config.json\"\n  }\n}\nsysPropsStore = {\n  'type' =&gt; \"sys\"\n}\n\noptions = {\n  'stores' =&gt; [\n    fileStore,\n    sysPropsStore\n  ]\n}\n\nretriever = VertxConfig::ConfigRetriever.create(vertx, options)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you have the instance of the Config Retriever, <em>retrieve</em> the configuration\nas follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>retriever.get_config() { |ar_err,ar|\n  if (ar_err != nil)\n    # Failed to retrieve the configuration\n  else\n    config = ar\n  end\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_overloading_rules\"><a class=\"anchor\" href=\"#_overloading_rules\"></a>Overloading rules</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The declaration order of the configuration store is important as it defines the\noverloading. For conflicting key, configuration stores arriving <em>last</em> overloads the\nvalue provided by the previous configuration stores. Let&#8217;s take an example. We have 2\nconfiguration stores:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>A</code> provides <code>{a:value, b:1}</code></p>\n</li>\n<li>\n<p><code>B</code> provides <code>{a:value2, c:2}</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Declared in this order (A, B), the resulting configuration would be:\n<code>{a:value2, b:1, c:2}</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you declare them in the reverse order (B, A), you will get: <code>{a:value, b:1, c:2}</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_retrieve_configuration\"><a class=\"anchor\" href=\"#_using_the_retrieve_configuration\"></a>Using the retrieve configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The retrieve configuration allows:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>configuring verticles,</p>\n</li>\n<li>\n<p>configure ports, clients, locations and so on,</p>\n</li>\n<li>\n<p>configuring Vert.x itself</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This section gives a few examples of usage.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuring_a_single_verticle\"><a class=\"anchor\" href=\"#_configuring_a_single_verticle\"></a>Configuring a single verticle</h3>\n<div class=\"paragraph\">\n<p>The following example can be placed in the <code>start</code> method of a verticle. It retrieves the configuration (using the\ndefault stores), and configure an HTTP server with the content of the configuration.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>require 'vertx-config/config_retriever'\nretriever = VertxConfig::ConfigRetriever.create($vertx)\nretriever.get_config() { |json_err,json|\n  result = json\n\n  $vertx.create_http_server().request_handler() { |req|\n    result['message']\n  }.listen(result['port'])\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuring_a_set_of_verticles\"><a class=\"anchor\" href=\"#_configuring_a_set_of_verticles\"></a>Configuring a set of verticles</h3>\n<div class=\"paragraph\">\n<p>The following example configures 2 verticles using the configurations contained in the <code>verticles.json</code> file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>require 'vertx-config/config_retriever'\nretriever = VertxConfig::ConfigRetriever.create(@vertx, {\n  'stores' =&gt; [\n    {\n      'type' =&gt; \"file\",\n      'config' =&gt; {\n        'path' =&gt; \"verticles.json\"\n      }\n    }\n  ]\n})\n\nretriever.get_config() { |json_err,json|\n  a = json['a']\n  b = json['b']\n  @vertx.deploy_verticle(Java::Examples::GreetingVerticle::class.get_name(), {\n    'config' =&gt; a\n  })\n  @vertx.deploy_verticle(Java::Examples::GreetingVerticle::class.get_name(), {\n    'config' =&gt; b\n  })\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuring_vert_x_itself\"><a class=\"anchor\" href=\"#_configuring_vert_x_itself\"></a>Configuring Vert.x itself</h3>\n<div class=\"paragraph\">\n<p>You can also configure Vert.x directly. For this, you need a temporary Vert.x instance used to retrieve the\nconfiguration. Then the actual instance is created:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>require 'vertx/vertx'\nrequire 'vertx-config/config_retriever'\n# Create a first instance of Vert.x\nvertx = Vertx::Vertx.vertx()\n# Create the config retriever\nretriever = VertxConfig::ConfigRetriever.create(vertx, {\n  'stores' =&gt; [\n    {\n      'type' =&gt; \"file\",\n      'config' =&gt; {\n        'path' =&gt; \"vertx.json\"\n      }\n    }\n  ]\n})\n\n# Retrieve the configuration\nretriever.get_config() { |json_err,json|\n  result = json\n  # Close the vert.x instance, we don't need it anymore.\n  vertx.close()\n\n  # Create a new Vert.x instance using the retrieve configuration\n  options = result\n  newVertx = Vertx::Vertx.vertx(options)\n\n  # Deploy your verticle\n  newVertx.deploy_verticle(Java::Examples::GreetingVerticle::class.get_name(), {\n    'config' =&gt; result['a']\n  })\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_propagating_configuration_changes_to_the_event_bus\"><a class=\"anchor\" href=\"#_propagating_configuration_changes_to_the_event_bus\"></a>Propagating configuration changes to the event bus</h3>\n<div class=\"paragraph\">\n<p>Vert.x Config notifies you when the configuration changes. If you want to react to this event, you need to implement\nthe reaction yourself. For instance, you can un-deploy and redeploy verticle or send the new configuration on the event bus.\nThe following example shows this latter case. It sends the new configuration on the event bus. Interested verticles can\nlisten for this address and update themselves:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>require 'vertx-config/config_retriever'\nretriever = VertxConfig::ConfigRetriever.create(@vertx, {\n  'stores' =&gt; [\n    {\n      'type' =&gt; \"file\",\n      'config' =&gt; {\n        'path' =&gt; \"verticles.json\"\n      }\n    }\n  ]\n})\n\nretriever.get_config() { |json_err,json|\n  #...\n}\n\nretriever.listen() { |change|\n  json = change['newConfiguration']\n  @vertx.event_bus().publish(\"new-configuration\", json)\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_available_configuration_stores\"><a class=\"anchor\" href=\"#_available_configuration_stores\"></a>Available configuration stores</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Config Retriever provides a set of configuration stores and formats.\nMore are available as extensions, and you can also implement your own.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_structure_of_the_configuration\"><a class=\"anchor\" href=\"#_structure_of_the_configuration\"></a>Structure of the configuration</h3>\n<div class=\"paragraph\">\n<p>Each declared data store must specify the <code>type</code>. It can also define the <code>format</code>. If\nnot set JSON is used.</p>\n</div>\n<div class=\"paragraph\">\n<p>Some configurations tore requires additional configuration (such a path&#8230;&#8203;). This\nconfiguration is passed as a Json Object using <code><a href=\"../dataobjects.html#ConfigStoreOptions#set_config-instance_method\">config</a></code></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_file\"><a class=\"anchor\" href=\"#_file\"></a>File</h3>\n<div class=\"paragraph\">\n<p>This configuration store just read the configuration from a file. It supports all\nsupported formats.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">file = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"file\"</span>,\n  <span class=\"hljs-string\">'format'</span> =&gt; <span class=\"hljs-string\">\"properties\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'path'</span> =&gt; <span class=\"hljs-string\">\"path-to-file.properties\"</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>path</code> configuration is required.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_json\"><a class=\"anchor\" href=\"#_json\"></a>JSON</h3>\n<div class=\"paragraph\">\n<p>The JSON configuration store serves the given JSON config as it is.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">json = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"json\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'key'</span> =&gt; <span class=\"hljs-string\">\"value\"</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The only supported format for this configuration store is JSON.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_environment_variables\"><a class=\"anchor\" href=\"#_environment_variables\"></a>Environment Variables</h3>\n<div class=\"paragraph\">\n<p>This configuration store transforms environment variables to a JSON Object contributed to\nthe global configuration.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">json = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"env\"</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This configuration store does not support the <code>format</code> configuration. By default, the retrieved value is\ntransformed into JSON compatible structures (number, string, boolean, JSON object and JSON array). To avoid this\nconversion, configure the <code>raw-data</code> attribute:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">json = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"env\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'raw-data'</span> =&gt; <span class=\"hljs-literal\">true</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can configure the <code>raw-data</code> attribute (<code>false</code> by default). If <code>raw-data</code> is <code>true</code> no attempts to convert\nvalues is made, and you&#8217;ll be able to get raw values using <code>config.getString(key)</code>. It is useful when manipulating\nlarge integers.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to select the set of keys to import, use the <code>keys</code> attributes. It filters out all non selected keys. Keys\nmust be listed individually:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">json = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"env\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'keys'</span> =&gt; [\n      <span class=\"hljs-string\">\"SERVICE1_HOST\"</span>,\n      <span class=\"hljs-string\">\"SERVICE2_HOST\"</span>\n    ]\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_system_properties\"><a class=\"anchor\" href=\"#_system_properties\"></a>System Properties</h3>\n<div class=\"paragraph\">\n<p>This configuration store transforms system properties to a JSON Object contributed to the\nglobal configuration.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">json = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"sys\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'cache'</span> =&gt; <span class=\"hljs-string\">\"false\"</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This configuration store does not support the <code>format</code> configuration.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can configure the <code>cache</code> attribute (<code>true</code> by default) let you decide whether or\nnot it caches the system properties on the first access and does not reload them.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also configure the <code>raw-data</code> attribute (<code>false</code> by default). If <code>raw-data</code> is <code>true</code> no attempts to convert\nvalues is made, and you&#8217;ll be able to get raw values using <code>config.getString(key)</code>. It is useful when manipulating\nlarge integers.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http\"><a class=\"anchor\" href=\"#_http\"></a>HTTP</h3>\n<div class=\"paragraph\">\n<p>This configuration store retrieves the configuration from an HTTP location. It can use\nany supported format.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">http = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"http\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'host'</span> =&gt; <span class=\"hljs-string\">\"localhost\"</span>,\n    <span class=\"hljs-string\">'port'</span> =&gt; <span class=\"hljs-number\">8080</span>,\n    <span class=\"hljs-string\">'path'</span> =&gt; <span class=\"hljs-string\">\"/A\"</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It creates a Vert.x HTTP Client with the store configuration (see next snippet). To\nease the configuration; you can also configure the <code>host</code>, <code>port</code> and <code>path</code> with the\n<code>host</code>, <code>port</code> and <code>path</code>\nproperties.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">http = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"http\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'defaultHost'</span> =&gt; <span class=\"hljs-string\">\"localhost\"</span>,\n    <span class=\"hljs-string\">'defaultPort'</span> =&gt; <span class=\"hljs-number\">8080</span>,\n    <span class=\"hljs-string\">'ssl'</span> =&gt; <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">'path'</span> =&gt; <span class=\"hljs-string\">\"/A\"</span>\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_event_bus\"><a class=\"anchor\" href=\"#_event_bus\"></a>Event Bus</h3>\n<div class=\"paragraph\">\n<p>This event bus configuration store receives the configuration from the event bus. This\nstores let you distribute your configuration among your local and distributed components.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">eb = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"event-bus\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'address'</span> =&gt; <span class=\"hljs-string\">\"address-getting-the-conf\"</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This configuration store supports any format.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_directory\"><a class=\"anchor\" href=\"#_directory\"></a>Directory</h3>\n<div class=\"paragraph\">\n<p>This configuration store is similar to the <code>file</code> configuration store, but instead of\nreading a single file, read several files from a directory.</p>\n</div>\n<div class=\"paragraph\">\n<p>This configuration store configuration requires:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>a <code>path</code> - the root directory in which files are located</p>\n</li>\n<li>\n<p>at least one <code>fileset</code> - an object to select the files</p>\n</li>\n<li>\n<p>for properties file, you can indicate if you want to disable the type conversion using the <code>raw-data</code> attribute</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Each <code>fileset</code> contains:\n* a <code>pattern</code> : a Ant-style pattern to select files. The pattern is applied on the\nrelative path of the files from the current working directory.\n* an optional <code>format</code> indicating the format of the files (each fileset can use a\ndifferent format, BUT files in a fileset must share the same format).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">dir = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"directory\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'path'</span> =&gt; <span class=\"hljs-string\">\"config\"</span>,\n    <span class=\"hljs-string\">'filesets'</span> =&gt; [\n      {\n        <span class=\"hljs-string\">'pattern'</span> =&gt; <span class=\"hljs-string\">\"dir/*json\"</span>\n      },\n      {\n        <span class=\"hljs-string\">'pattern'</span> =&gt; <span class=\"hljs-string\">\"dir/*.properties\"</span>,\n        <span class=\"hljs-string\">'format'</span> =&gt; <span class=\"hljs-string\">\"properties\"</span>\n      }\n    ]\n  }\n}\n\ndirWithRawData = {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"directory\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'path'</span> =&gt; <span class=\"hljs-string\">\"config\"</span>,\n    <span class=\"hljs-string\">'filesets'</span> =&gt; [\n      {\n        <span class=\"hljs-string\">'pattern'</span> =&gt; <span class=\"hljs-string\">\"dir/*json\"</span>\n      },\n      {\n        <span class=\"hljs-string\">'pattern'</span> =&gt; <span class=\"hljs-string\">\"dir/*.properties\"</span>,\n        <span class=\"hljs-string\">'format'</span> =&gt; <span class=\"hljs-string\">\"properties\"</span>,\n        <span class=\"hljs-string\">'raw-data'</span> =&gt; <span class=\"hljs-literal\">true</span>\n      }\n    ]\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_properties_file_and_raw_data\"><a class=\"anchor\" href=\"#_properties_file_and_raw_data\"></a>Properties file and raw data</h3>\n<div class=\"paragraph\">\n<p>Vert.x Config can read properties file. When reading such a file, you can pass the <code>raw-data</code> attribute to\nindicate to Vert.x to not attempt to convert values. It is useful when manipulating large integers. Values can be\nretrieved using <code>config.getString(key)</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">propertyWithRawData = {\n  <span class=\"hljs-string\">'format'</span> =&gt; <span class=\"hljs-string\">\"properties\"</span>,\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"file\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'path'</span> =&gt; <span class=\"hljs-string\">\"raw.properties\"</span>,\n    <span class=\"hljs-string\">'raw-data'</span> =&gt; <span class=\"hljs-literal\">true</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Some properties configuration maybe is hierarchical in nature.\nWhen reading such a file, you can pass the <code>hierarchical</code> attribute to\nindicate to Vert.x to convert the configuration to a json object while maintaining this hierarchy,\nin contrast to the previous method with a flat structure.</p>\n</div>\n<div class=\"paragraph\">\n<p>Example:</p>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre>server.host=localhost\nserver.port=8080\nmultiple.values=1,2,3</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Get values:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx/vertx'</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-config/config_retriever'</span>\npropertyWitHierarchical = {\n  <span class=\"hljs-string\">'format'</span> =&gt; <span class=\"hljs-string\">\"properties\"</span>,\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"file\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; {\n    <span class=\"hljs-string\">'path'</span> =&gt; <span class=\"hljs-string\">\"hierarchical.properties\"</span>,\n    <span class=\"hljs-string\">'hierarchical'</span> =&gt; <span class=\"hljs-literal\">true</span>\n  }\n}\noptions = {\n  <span class=\"hljs-string\">'stores'</span> =&gt; [\n    propertyWitHierarchical\n  ]\n}\n\nconfigRetriever = VertxConfig::ConfigRetriever.create(Vertx::Vertx.vertx(), options)\n\nconfigRetriever.config_stream().handler() { <span class=\"hljs-params\">|config|</span>\n  host = config[<span class=\"hljs-string\">'server'</span>][<span class=\"hljs-string\">'host'</span>]\n  port = config[<span class=\"hljs-string\">'server'</span>][<span class=\"hljs-string\">'port'</span>]\n  multiple = config[<span class=\"hljs-string\">'multiple'</span>][<span class=\"hljs-string\">'values'</span>]\n  (<span class=\"hljs-number\">0</span>...multiple.length).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\n    value = multiple[i]\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_listening_for_configuration_changes\"><a class=\"anchor\" href=\"#_listening_for_configuration_changes\"></a>Listening for configuration changes</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Configuration Retriever periodically retrieve the configuration, and if the outcome\nis different from the current one, your application can be reconfigured. By default, the\nconfiguration is reloaded every 5 seconds.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx/vertx'</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-config/config_retriever'</span>\noptions = {\n  <span class=\"hljs-string\">'scanPeriod'</span> =&gt; <span class=\"hljs-number\">2000</span>,\n  <span class=\"hljs-string\">'stores'</span> =&gt; [\n    store1,\n    store2\n  ]\n}\n\nretriever = VertxConfig::ConfigRetriever.create(Vertx::Vertx.vertx(), options)\nretriever.get_config() { <span class=\"hljs-params\">|json_err,json|</span>\n  <span class=\"hljs-comment\"># Initial retrieval of the configuration</span>\n}\n\nretriever.listen() { <span class=\"hljs-params\">|change|</span>\n  <span class=\"hljs-comment\"># Previous configuration</span>\n  previous = change[<span class=\"hljs-string\">'previousConfiguration'</span>]\n  <span class=\"hljs-comment\"># New configuration</span>\n  conf = change[<span class=\"hljs-string\">'newConfiguration'</span>]\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_retrieving_the_last_retrieved_configuration\"><a class=\"anchor\" href=\"#_retrieving_the_last_retrieved_configuration\"></a>Retrieving the last retrieved configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can retrieve the last retrieved configuration without \"waiting\" to be retrieved\nusing:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">last = retriever.get_cached_config()</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_reading_configuration_as_a_stream\"><a class=\"anchor\" href=\"#_reading_configuration_as_a_stream\"></a>Reading configuration as a stream</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../yardoc/VertxConfig/ConfigRetriever.html\">ConfigRetriever</a></code> provide a way to access the stream of configuration.\nIt&#8217;s a <code><a href=\"../../yardoc/Vertx/ReadStream.html\">ReadStream</a></code> of <code><a href=\"unavailable\">JsonObject</a></code>. By registering the right\nset of handlers you are notified:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>when a new configuration is retrieved</p>\n</li>\n<li>\n<p>when an error occur while retrieving a configuration</p>\n</li>\n<li>\n<p>when the configuration retriever is closed (the\n<code><a href=\"../../yardoc/Vertx/ReadStream.html#end_handler-instance_method\">endHandler</a></code> is called).</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx/vertx'</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-config/config_retriever'</span>\noptions = {\n  <span class=\"hljs-string\">'scanPeriod'</span> =&gt; <span class=\"hljs-number\">2000</span>,\n  <span class=\"hljs-string\">'stores'</span> =&gt; [\n    store1,\n    store2\n  ]\n}\n\nretriever = VertxConfig::ConfigRetriever.create(Vertx::Vertx.vertx(), options)\nretriever.config_stream().end_handler() { <span class=\"hljs-params\">|v|</span>\n  <span class=\"hljs-comment\"># retriever closed</span>\n}.exception_handler() { <span class=\"hljs-params\">|t|</span>\n  <span class=\"hljs-comment\"># an error has been caught while retrieving the configuration</span>\n}.handler() { <span class=\"hljs-params\">|conf|</span>\n  <span class=\"hljs-comment\"># the configuration</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_processing_the_configuration\"><a class=\"anchor\" href=\"#_processing_the_configuration\"></a>Processing the configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can configure a <em>processor</em> that can validate and update the configuration. This is done using the\n<code><a href=\"../../yardoc/VertxConfig/ConfigRetriever.html#set_configuration_processor-instance_method\">setConfigurationProcessor</a></code> method.</p>\n</div>\n<div class=\"paragraph\">\n<p>The prcessing must not return <code>null</code>. It takes the retrieved configuration and returns the processed one. If the processor\ndoes not update the configuration, it must return the input configuration. If the processor can throw an exception (for\nexample for validation purpose).</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_retrieving_the_configuration_as_a_future\"><a class=\"anchor\" href=\"#_retrieving_the_configuration_as_a_future\"></a>Retrieving the configuration as a Future</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../yardoc/VertxConfig/ConfigRetriever.html\">ConfigRetriever</a></code> provide a way to retrieve the configuration as a\n<code><a href=\"../../yardoc/Vertx/Future.html\">Future</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-config/config_retriever'</span>\nfuture = VertxConfig::ConfigRetriever.get_config_as_future(retriever)\nfuture.set_handler() { <span class=\"hljs-params\">|ar_err,ar|</span>\n  <span class=\"hljs-keyword\">if</span> (ar_err != <span class=\"hljs-literal\">nil</span>)\n    <span class=\"hljs-comment\"># Failed to retrieve the configuration</span>\n  <span class=\"hljs-keyword\">else</span>\n    config = ar\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_extending_the_config_retriever\"><a class=\"anchor\" href=\"#_extending_the_config_retriever\"></a>Extending the Config Retriever</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can extend the configuration by implementing:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the <code><a href=\"unavailable\">ConfigProcessor</a></code> SPI to add support for a\nformat</p>\n</li>\n<li>\n<p>the <code><a href=\"unavailable\">ConfigStoreFactory</a></code> SPI to add support for\nconfiguration store (place from where the configuration data is retrieved)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_additional_formats\"><a class=\"anchor\" href=\"#_additional_formats\"></a>Additional formats</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Besides of the out of the box format supported by this library, Vert.x Config provides additional\nformats you can use in your application.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::hocon-format.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::yaml-format.adoc[]</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_additional_stores\"><a class=\"anchor\" href=\"#_additional_stores\"></a>Additional stores</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Besides of the out of the box stores supported by this library, Vert.x Config provides additional\nstores you can use in your application.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::git-store.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::kubernetes-store.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::redis-store.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::zookeeper-store.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::consul-store.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::spring-store.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::vault-store.adoc[]</p>\n</div>\n</div>\n</div>","version":"3.9.4"},"__N_SSG":true}