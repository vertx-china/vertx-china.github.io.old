{"pageProps":{"slug":"3.9.2/vertx-amqp-client/ruby","title":"Vert.x AMQP Client","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_amqp_client\">Using Vert.x AMQP Client</a></li>\n<li><a href=\"#_creating_an_amqp_client\">Creating an AMQP client</a></li>\n<li><a href=\"#_establishing_a_connection\">Establishing a connection</a></li>\n<li><a href=\"#_creating_a_receiver\">Creating a receiver</a></li>\n<li><a href=\"#_creating_a_sender\">Creating a sender</a></li>\n<li><a href=\"#_implementing_request_reply\">Implementing request-reply</a></li>\n<li><a href=\"#_closing_the_client\">Closing the client</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x AMQP Client</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Vert.x AMQP Client allows interacting with <a href=\"https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol\">AMQP 1.0</a>\nbrokers and routers. It allows:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Connecting to an AMQP broker or router - SASL and TLS connections are supported</p>\n</li>\n<li>\n<p>Consuming message from a queue or a topic</p>\n</li>\n<li>\n<p>Sending messages to a queue or a topic</p>\n</li>\n<li>\n<p>Checking acknowledgement for sent messages</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The AMQP 1.0 protocol support durable subscriptions, persistence, security, conversations, sophisticated routing&#8230;&#8203; More\ndetails on the protocol can be found on the <a href=\"https://www.amqp.org/\">AMQP homepage</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Vert.x AMQP client is based on Vert.x Proton. If you need fine-grain control, we recommend using\n<a href=\"https://github.com/vert-x3/vertx-proton\">Vert.x Proton</a> directly.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_amqp_client\"><a class=\"anchor\" href=\"#_using_vert_x_amqp_client\"></a>Using Vert.x AMQP Client</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Vert.x AMQP Client, add the following dependency to the <em>dependencies</em> section of your build\ndescriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-amqp-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-amqp-client:3.9.2'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_an_amqp_client\"><a class=\"anchor\" href=\"#_creating_an_amqp_client\"></a>Creating an AMQP client</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once you have added the client to your <em>CLASSPATH</em>, you can instantiate an <code><a href=\"../../yardoc/VertxAmqpClient/AmqpClient.html\">AmqpClient</a></code> as\nfollows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-amqp-client/amqp_client'</span>\noptions = {\n  <span class=\"hljs-string\">'host'</span> =&gt; <span class=\"hljs-string\">\"localhost\"</span>,\n  <span class=\"hljs-string\">'port'</span> =&gt; <span class=\"hljs-number\">5672</span>,\n  <span class=\"hljs-string\">'username'</span> =&gt; <span class=\"hljs-string\">\"user\"</span>,\n  <span class=\"hljs-string\">'password'</span> =&gt; <span class=\"hljs-string\">\"secret\"</span>\n}\n<span class=\"hljs-comment\"># Create a client using its own internal Vert.x instance.</span>\nclient1 = VertxAmqpClient::AmqpClient.create(options)\n\n<span class=\"hljs-comment\"># USe an explicit Vert.x instance.</span>\nclient2 = VertxAmqpClient::AmqpClient.create(vertx, options)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>There are two methods to instantiate an <code><a href=\"../../yardoc/VertxAmqpClient/AmqpClient.html\">AmqpClient</a></code>. You can pass an explicit Vert.x instance.\nUse this approach if you are in a Vert.x application, or a Vert.x verticle. Otherwise you can omit passing the Vert.x\ninstance, an internal instance is created and closed when the client is closed.</p>\n</div>\n<div class=\"paragraph\">\n<p>To instantiate an <code><a href=\"../../yardoc/VertxAmqpClient/AmqpClient.html\">AmqpClient</a></code>, you need to pass <code><a href=\"../dataobjects.html#AmqpClientOptions\">AmqpClientOptions</a></code>.\nThese options contains the location of the broker or router, credentials&#8230;&#8203; Many aspect of the AMQP client can be\nconfigured using these options. Note that you can also use these options to configure the underlying Proton client.</p>\n</div>\n<div class=\"paragraph\">\n<p>Host, port, username and password can also be configured from system properties or environment variables:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Host: system property: <code>amqp-client-host</code>, environment variable: AMQP_CLIENT_HOST` (mandatory)</p>\n</li>\n<li>\n<p>Port: system property: <code>amqp-client-port</code>, environment variable: AMQP_CLIENT_PORT` (defaults to 5672)</p>\n</li>\n<li>\n<p>Username: system property: <code>amqp-client-username</code>, environment variable: AMQP_CLIENT_USERNAME`</p>\n</li>\n<li>\n<p>Password: system property: <code>amqp-client-password</code>, environment variable: AMQP_CLIENT_PASSWORD`</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_establishing_a_connection\"><a class=\"anchor\" href=\"#_establishing_a_connection\"></a>Establishing a connection</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once you have created a client, you need to explicitly connect to the remote server. This is done using the <code>connect</code>\nmethod:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">client.connect() { <span class=\"hljs-params\">|ar_err,ar|</span>\n  <span class=\"hljs-keyword\">if</span> (ar_err != <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Unable to connect to the broker\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    puts <span class=\"hljs-string\">\"Connection succeeded\"</span>\n    connection = ar\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once established or failed, the handler is called. Note that the connection is used to create receivers and senders.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_receiver\"><a class=\"anchor\" href=\"#_creating_a_receiver\"></a>Creating a receiver</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A receiver is used to receive messages. The AMQP receiver can be retrieved using one of the two following methods:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">connection.create_receiver(<span class=\"hljs-string\">\"my-queue\"</span>) { <span class=\"hljs-params\">|done_err,done|</span>\n  <span class=\"hljs-keyword\">if</span> (done_err != <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Unable to create receiver\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    receiver = done\n    receiver.handler() { <span class=\"hljs-params\">|msg|</span>\n      <span class=\"hljs-comment\"># called on every received messages</span>\n      puts <span class=\"hljs-string\">\"Received <span class=\"hljs-subst\">#{msg.body_as_string()}</span>\"</span>\n    }\n  <span class=\"hljs-keyword\">end</span>\n}\n\n\nconnection.create_receiver(<span class=\"hljs-string\">\"my-queue\"</span>) { <span class=\"hljs-params\">|done_err,done|</span>\n  <span class=\"hljs-keyword\">if</span> (done_err != <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Unable to create receiver\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    receiver = done\n    receiver.exception_handler() { <span class=\"hljs-params\">|t|</span>\n      <span class=\"hljs-comment\"># Error thrown.</span>\n    }.handler() { <span class=\"hljs-params\">|msg|</span>\n      <span class=\"hljs-comment\"># Attach the message handler</span>\n    }\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The main difference between these 2 approaches is <em>when</em> the message handler is attached to the receiver. In the first\napproach, the handler is immediately passed and will start receiving messages immediately. In the second approach, the\nhandler is attached manually after the completion. This give you more control and let you attach other handlers.</p>\n</div>\n<div class=\"paragraph\">\n<p>The receiver passed in the completion handler can be used as a stream. So, you can pause and resume the reception of\nmessages. The back-pressure protocol is implemented using\n<a href=\"http://docs.oasis-open.org/amqp/core/v1.0/csprd02/amqp-core-transport-v1.0-csprd02.html#doc-flow-control\">AMQP credits</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The received messages are instances of <code><a href=\"../../yardoc/VertxAmqpClient/AmqpMessage.html\">AmqpMessage</a></code>. Instances are immutable, and provide\naccess to most of the metadata supported by AMQP. See the list of\n<a href=\"http://docs.oasis-open.org/amqp/core/v1.0/amqp-core-messaging-v1.0.html#type-properties\">properties</a> as references. Note\nthat retrieving a JSON object or a JSON array from the body required the value to be passed as AMQP <em>Data</em>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also create a receiver directly from the client:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">client.create_receiver(<span class=\"hljs-string\">\"my-queue\"</span>) { <span class=\"hljs-params\">|done_err,done|</span>\n  <span class=\"hljs-keyword\">if</span> (done_err != <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Unable to create receiver\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    receiver = done\n    receiver.handler() { <span class=\"hljs-params\">|msg|</span>\n      <span class=\"hljs-comment\"># called on every received messages</span>\n      puts <span class=\"hljs-string\">\"Received <span class=\"hljs-subst\">#{msg.body_as_string()}</span>\"</span>\n    }\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this case, a connection is established automatically. You can retrieve it using\n<code><a href=\"../../yardoc/VertxAmqpClient/AmqpReceiver.html#connection-instance_method\">connection</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>By default the messages are automatically acknowledged. You can disable this behavior using\n<code><a href=\"../dataobjects.html#AmqpReceiverOptions#set_auto_acknowledgement-instance_method\">autoAcknowledgement</a></code>. Then, you need to explicitly acknowledge\nthe incoming messages using:\n* <code><a href=\"../../yardoc/VertxAmqpClient/AmqpMessage.html#accepted-instance_method\">accepted</a></code>\n* <code><a href=\"../../yardoc/VertxAmqpClient/AmqpMessage.html#rejected-instance_method\">rejected</a></code>\n* <code><a href=\"../../yardoc/VertxAmqpClient/AmqpMessage.html#released-instance_method\">released</a></code></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_sender\"><a class=\"anchor\" href=\"#_creating_a_sender\"></a>Creating a sender</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Senders allows publishing messages to queues and topics. You retrieve a sender as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">connection.create_sender(<span class=\"hljs-string\">\"my-queue\"</span>) { <span class=\"hljs-params\">|done_err,done|</span>\n  <span class=\"hljs-keyword\">if</span> (done_err != <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Unable to create a sender\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    result = done\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you have retrieved an AMQP sender, you can create messages. Because <code><a href=\"../../yardoc/VertxAmqpClient/AmqpMessage.html\">AmqpMessage</a></code> are\nimmutable, the creation uses the <code><a href=\"../../yardoc/VertxAmqpClient/AmqpMessageBuilder.html\">AmqpMessageBuilder</a></code> builder class. The following snippet\nprovides a few examples:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-amqp-client/amqp_message'</span>\n<span class=\"hljs-comment\"># Retrieve a builder</span>\nbuilder = VertxAmqpClient::AmqpMessage.create()\n\n<span class=\"hljs-comment\"># Very simple message</span>\nm1 = builder.with_body(<span class=\"hljs-string\">\"hello\"</span>).build()\n\n<span class=\"hljs-comment\"># Message overriding the destination</span>\nm2 = builder.with_body(<span class=\"hljs-string\">\"hello\"</span>).address(<span class=\"hljs-string\">\"another-queue\"</span>).build()\n\n<span class=\"hljs-comment\"># Message with a JSON object as body, metadata and TTL</span>\nm3 = builder.with_json_object_as_body({\n  <span class=\"hljs-string\">'message'</span> =&gt; <span class=\"hljs-string\">\"hello\"</span>\n}).subject(<span class=\"hljs-string\">\"subject\"</span>).ttl(<span class=\"hljs-number\">10000</span>).application_properties({\n  <span class=\"hljs-string\">'prop1'</span> =&gt; <span class=\"hljs-string\">\"value1\"</span>\n}).build()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you have the sender and created the message, you can send it using:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../yardoc/VertxAmqpClient/AmqpSender.html#send-instance_method\">send</a></code> - send the message</p>\n</li>\n<li>\n<p><code><a href=\"../../yardoc/VertxAmqpClient/AmqpSender.html#send_with_ack-instance_method\">sendWithAck</a></code> - send the message and monitor its acknowledgment</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The simplest way to send a message is the following:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-amqp-client/amqp_message'</span>\nsender.send(VertxAmqpClient::AmqpMessage.create().with_body(<span class=\"hljs-string\">\"hello\"</span>).build())</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When sending a message, you can monitor the acknowledgment:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-amqp-client/amqp_message'</span>\nsender.send_with_ack(VertxAmqpClient::AmqpMessage.create().with_body(<span class=\"hljs-string\">\"hello\"</span>).build()) { <span class=\"hljs-params\">|acked_err,acked|</span>\n  <span class=\"hljs-keyword\">if</span> (acked_err == <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Message accepted\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    puts <span class=\"hljs-string\">\"Message not accepted\"</span>\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note that message is considered as acknowledged if the delivery is set fo <code>ACCEPTED</code>. Other delivery values are considered\nas non-acknowledged (details can be found in the passed cause).</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../yardoc/VertxAmqpClient/AmqpSender.html\">AmqpSender</a></code> can be used as a write stream. The flow control is implemented using AMQP credits.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also create a sender directly from the client:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">client.create_sender(<span class=\"hljs-string\">\"my-queue\"</span>) { <span class=\"hljs-params\">|maybeSender_err,maybeSender|</span>\n  <span class=\"hljs-comment\">#...</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this case, a connection is established automatically. You can retrieve it using\n<code><a href=\"../../yardoc/VertxAmqpClient/AmqpSender.html#connection-instance_method\">connection</a></code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_implementing_request_reply\"><a class=\"anchor\" href=\"#_implementing_request_reply\"></a>Implementing request-reply</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To implement a request-reply behavior, you could use a dynamic receiver and an anonymous sender. A dynamic receiver is not\nassociated with an address by the user, but the address it provided by the broker. Anonymous senders are also not associated to\na specific address, requiring all messages to contain an address.</p>\n</div>\n<div class=\"paragraph\">\n<p>The following snippet shows how request-reply can be implemented:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-amqp-client/amqp_message'</span>\n<span class=\"hljs-comment\"># On the receiver side (receiving the initial request and replying)</span>\nconnection.create_anonymous_sender() { <span class=\"hljs-params\">|responseSender_err,responseSender|</span>\n  <span class=\"hljs-comment\"># You got an anonymous sender, used to send the reply</span>\n  <span class=\"hljs-comment\"># Now register the main receiver:</span>\n  connection.create_receiver(<span class=\"hljs-string\">\"my-queue\"</span>) { <span class=\"hljs-params\">|done_err,done|</span>\n    <span class=\"hljs-keyword\">if</span> (done_err != <span class=\"hljs-literal\">nil</span>)\n      puts <span class=\"hljs-string\">\"Unable to create receiver\"</span>\n    <span class=\"hljs-keyword\">else</span>\n      receiver = done\n      receiver.handler() { <span class=\"hljs-params\">|msg|</span>\n        <span class=\"hljs-comment\"># You got the message, let's reply.</span>\n        responseSender.send(VertxAmqpClient::AmqpMessage.create().address(msg.reply_to()).correlation_id(msg.id()).with_body(<span class=\"hljs-string\">\"my response to your request\"</span>).build())\n      }\n    <span class=\"hljs-keyword\">end</span>\n  }\n}\n\n<span class=\"hljs-comment\"># On the sender side (sending the initial request and expecting a reply)</span>\nconnection.create_dynamic_receiver() { <span class=\"hljs-params\">|replyReceiver_err,replyReceiver|</span>\n  <span class=\"hljs-comment\"># We got a receiver, the address is provided by the broker</span>\n  replyToAddress = replyReceiver.address()\n\n  <span class=\"hljs-comment\"># Attach the handler receiving the reply</span>\n  replyReceiver.handler() { <span class=\"hljs-params\">|msg|</span>\n    puts <span class=\"hljs-string\">\"Got the reply! <span class=\"hljs-subst\">#{msg.body_as_string()}</span>\"</span>\n  }\n\n  <span class=\"hljs-comment\"># Create a sender and send the message:</span>\n  connection.create_sender(<span class=\"hljs-string\">\"my-queue\"</span>) { <span class=\"hljs-params\">|sender_err,sender|</span>\n    sender.send(VertxAmqpClient::AmqpMessage.create().reply_to(replyToAddress).id(<span class=\"hljs-string\">\"my-message-id\"</span>).with_body(<span class=\"hljs-string\">\"This is my request\"</span>).build())\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To reply to a message, send it to the address specified into the <code>reply-to</code>. Also, it&#8217;s a good practice to indicate the\n<code>correlation id</code> using the <code>message id</code>, so the reply receiver can associate the response to the request.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_closing_the_client\"><a class=\"anchor\" href=\"#_closing_the_client\"></a>Closing the client</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once you are done with a connection receiver or sender, you should close them using the <code>close</code> method. Closing a\nconnection, closes all created receivers and senders.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once the client is not used anymore, you must also close it. It would close all opened connections, and as a consequences\nreceivers and senders.</p>\n</div>\n</div>\n</div>","version":"3.9.2"},"__N_SSG":true}