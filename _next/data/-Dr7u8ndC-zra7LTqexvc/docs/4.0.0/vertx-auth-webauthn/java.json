{"pageProps":{"slug":"4.0.0/vertx-auth-webauthn/java","title":"WebAuthn auth provider","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_webauthn_api\">WebAuthn API</a></li>\n<li><a href=\"#_registration\">Registration</a></li>\n<li><a href=\"#_login\">Login</a></li>\n<li><a href=\"#_device_attestation\">Device Attestation</a></li>\n<li><a href=\"#_a_simple_example\">A simple example</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_create_a_registration_request\">Create a Registration request</a></li>\n<li><a href=\"#_verify_the_registration_request\">Verify the registration request</a></li>\n<li><a href=\"#_create_a_login_request\">Create a Login request</a></li>\n<li><a href=\"#_verify_the_login_request\">Verify the Login request</a></li>\n</ul>\n</li>\n<li><a href=\"#_metadata_service\">Metadata Service</a></li>\n<li><a href=\"#_updating_certificates\">Updating Certificates</a></li>\n</ul>\n</div>","contents":"<h1>WebAuthn auth provider</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This component contains an out of the box a <a href=\"https://github.com/herrjemand/awesome-webauthn#server-libs\">FIDO CONFORMANT</a>\nWebAuthn implementation. To use this project, add the following dependency to the <em>dependencies</em> section of your build\ndescriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-webauthn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-auth-webauthn:4.0.0'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API\">WebAuthn (Web Authentication)</a> is a web standard\nfor authenticating users to web-based applications using public/private key cryptography. Strictly speaking, WebAuthn is\njust the name of the browser API and is part of <a href=\"https://fidoalliance.org/fido2/\">FIDO2</a>. FIDO2 is the overarching term of\na set of specifications, including WebAuthn and CTAP. FIDO2 is the successor of the FIDO Universal 2nd Factor (U2F)\nlegacy protocol.</p>\n</div>\n<div class=\"paragraph\">\n<p>As an application developer, we don&#8217;t deal with CTAP (Client-to-Authenticator Protocol), which is the protocol that the\nbrowser uses to speak with an authenticator like a FIDO security key.</p>\n</div>\n<div class=\"paragraph\">\n<p>FIDO2 works with public/private keys. The user has an authenticator, which creates public/private key pairs. These key\npairs are different for each site. The public key is transferred to the server and stored in the user&#8217;s account. The\nprivate key never leaves the authenticator. To login, the server first creates a random challenge (a random sequence of\nbytes), sends it to the authenticator. The authenticator signs the challenge with his private key and sends the\nsignature back to the server. The server verifies the signature with the stored public key and grants access if the\nsignature is valid.</p>\n</div>\n<div class=\"paragraph\">\n<p>Traditionally this technology needs a hardware security token like a <a href=\"https://www.yubico.com/products/\">Yubico key</a> or a\nkey from <a href=\"https://www.ftsafe.com/Products/FIDO\">Feitian</a> to name two brands.</p>\n</div>\n<div class=\"paragraph\">\n<p>FIDO2 still supports these hardware keys, but the technology also supports alternatives. If you have an Android 7+ phone\nor a Windows 10 system, you don&#8217;t need to buy a FIDO2 security key if you want to play with WebAuthn.</p>\n</div>\n<div class=\"paragraph\">\n<p>In <a href=\"https://fidoalliance.org/news-your-google-android-7-phone-is-now-a-fido2-security-key/\">April 2019, Google announced</a>\nthat any phone running Android 7+ can function as a FIDO2 security key. In\n<a href=\"https://www.microsoft.com/en-us/microsoft-365/blog/2018/11/20/sign-in-to-your-microsoft-account-without-a-password-using-windows-hello-or-a-security-key/\">November 2018, Microsoft announced</a>\nthat you can use Windows Hello as a security key for FIDO2. In <a href=\"https://developer.apple.com/videos/play/wwdc2020/10670/\">June 2020 Apple announced</a>\nthat you can use iOS FaceID and TouchID for the web by adopting webauthn standard.</p>\n</div>\n<div class=\"paragraph\">\n<p>WebAuthn is implemented in Edge, Firefox, Chrome, and Safari. Visit <a href=\"https://caniuse.com\" class=\"bare\">https://caniuse.com</a> to check out the current state\nof implementations: <a href=\"https://caniuse.com/#search=webauthn\" class=\"bare\">https://caniuse.com/#search=webauthn</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_webauthn_api\"><a class=\"anchor\" href=\"#_webauthn_api\"></a>WebAuthn API</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API\">Web Authentication API</a> is an extension of\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API\">Credential Management API</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>WebAuthn extends the two functions from the Credential Management API <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create\">navigator.credentials.create()</a>\nand <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get\">navigator.credentials.get()</a> so they\naccept a publicKey parameter.</p>\n</div>\n<div class=\"paragraph\">\n<p>To simplify the usage of the API a simple JavaScript client application is provided here:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-webauthn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">classifier</span>&gt;</span>client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">classifier</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>js<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-auth-webauthn:4.0.0:client@js'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The script should be used in cooperation with vertx-web as it handles the API interaction between the web layer and the\nauth code in this library.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_registration\"><a class=\"anchor\" href=\"#_registration\"></a>Registration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Registration is the process of enrolling a new authenticator to the database and associate with the user.</p>\n</div>\n<div class=\"paragraph\">\n<p>The process takes 2 steps:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>A call to generate a <code><a href=\"../../apidocs/io/vertx/ext/auth/webauthn/WebAuthn.html#createCredentialsOptions-io.vertx.core.json.JsonObject-\">createCredentialsOptions</a></code></p>\n</li>\n<li>\n<p>A call with the solution to the challenge to the normal <code>authenticate</code> API method.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>If the solution is correct, the new authenticator should be added to the storage and be usable for login purposes.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_login\"><a class=\"anchor\" href=\"#_login\"></a>Login</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Like the registration, login is a 2 step process:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>A call to generate a <code><a href=\"../../apidocs/io/vertx/ext/auth/webauthn/WebAuthn.html#getCredentialsOptions-java.lang.String-\">getCredentialsOptions</a></code></p>\n</li>\n<li>\n<p>A call with the solution to the challenge to the normal <code>authenticate</code> API method.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>When the challenge is correctly solved, the user is considered logged in.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_device_attestation\"><a class=\"anchor\" href=\"#_device_attestation\"></a>Device Attestation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When an authenticator registers a new key pair with a service, the authenticator signs the public key with an\nattestation certificate. The attestation certificate is built into the authenticator during manufacturing time and is\nspecific to a device model. That is, all \"Samsung Galaxy S8\" phones, manufactured at a specific time or particular\nmanufacturing run, have the same attestation certificate.</p>\n</div>\n<div class=\"paragraph\">\n<p>Different devices have different attestation formats. The pre-defined attestation formats in WebAuthn are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>Packed</code> - a generic attestation format that is commonly used by devices whose sole function is as a WebAuthn authenticator, such as security keys.</p>\n</li>\n<li>\n<p><code>TPM</code> - the Trusted Platform Module (TPM) is a set of specifications from the Trusted Platform Group (TPG). This attestation format is commonly found in desktop computers and is used by Windows Hello as its preferred attestation format.</p>\n</li>\n<li>\n<p><code>Android Key Attestation</code> - one of the features added in Android O was Android Key Attestation, which enables the Android operating system to attest to keys.</p>\n</li>\n<li>\n<p><code>Android SafetyNet</code> - prior to Android Key Attestation, the only option for Android devices was to create Android SafetyNet attestations</p>\n</li>\n<li>\n<p><code>FIDO U2F</code> - security keys that implement the FIDO U2F standard use this format</p>\n</li>\n<li>\n<p><code>Apple</code> - Verifies the Anonymous Apple device attestation.</p>\n</li>\n<li>\n<p><code>none</code> - browsers may prompt users whether they want a site to be allowed to see their attestation data and/or may remove attestation data from the authenticator&#8217;s response if the <code>attestation</code> parameter in <code>navigator.credentials.create()</code> is set to <code>none</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The purpose of attestation is to cryptographically prove that a newly generated key pair came from a specific device.\nThis provides a root of trust for a newly generated key pair as well as being able to identify the attributes of a\ndevice being used (how the private key is protected; if / what kind of biometric is being used; whether a device has\nbeen certified; etc.).</p>\n</div>\n<div class=\"paragraph\">\n<p>It should be noted that while attestation provides the capability for a root of trust, validating the root of trust is\nfrequently not necessary. When registering an authenticator for a new account, typically a Trust On First Use (TOFU)\nmodel applies; and when adding an authenticator to an existing account, a user has already been authenticated and has\nestablished a secure session.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_a_simple_example\"><a class=\"anchor\" href=\"#_a_simple_example\"></a>A simple example</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_create_a_registration_request\"><a class=\"anchor\" href=\"#_create_a_registration_request\"></a>Create a Registration request</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">WebAuthn webAuthN = WebAuthn.create(\n  vertx,\n  <span class=\"hljs-keyword\">new</span> WebAuthnOptions()\n    .setRelyingParty(<span class=\"hljs-keyword\">new</span> RelyingParty().setName(<span class=\"hljs-string\">\"ACME Corporation\"</span>)))\n  .authenticatorFetcher(query -&gt; {\n    <span class=\"hljs-comment\">// function that fetches some authenticators from a</span>\n    <span class=\"hljs-comment\">// persistence storage</span>\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture(authenticators);\n  })\n  .authenticatorUpdater(authenticator -&gt; {\n    <span class=\"hljs-comment\">// function that updates an authenticator to a</span>\n    <span class=\"hljs-comment\">// persistence storage</span>\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n  });\n\n<span class=\"hljs-comment\">// some user</span>\nJsonObject user = <span class=\"hljs-keyword\">new</span> JsonObject()\n  <span class=\"hljs-comment\">// id is expected to be a base64url string</span>\n  .put(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-string\">\"000000000000000000000000\"</span>)\n  .put(<span class=\"hljs-string\">\"rawId\"</span>, <span class=\"hljs-string\">\"000000000000000000000000\"</span>)\n  .put(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"john.doe@email.com\"</span>)\n  <span class=\"hljs-comment\">// optionally</span>\n  .put(<span class=\"hljs-string\">\"displayName\"</span>, <span class=\"hljs-string\">\"John Doe\"</span>)\n  .put(<span class=\"hljs-string\">\"icon\"</span>, <span class=\"hljs-string\">\"https://pics.example.com/00/p/aBjjjpqPb.png\"</span>);\n\nwebAuthN\n  .createCredentialsOptions(user)\n  .onSuccess(challengeResponse -&gt; {\n    <span class=\"hljs-comment\">// return the challenge to the browser</span>\n    <span class=\"hljs-comment\">// for further processing</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_verify_the_registration_request\"><a class=\"anchor\" href=\"#_verify_the_registration_request\"></a>Verify the registration request</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">WebAuthn webAuthN = WebAuthn.create(\n  vertx,\n  <span class=\"hljs-keyword\">new</span> WebAuthnOptions()\n    .setRelyingParty(<span class=\"hljs-keyword\">new</span> RelyingParty().setName(<span class=\"hljs-string\">\"ACME Corporation\"</span>)))\n  .authenticatorFetcher(query -&gt; {\n    <span class=\"hljs-comment\">// function that fetches some authenticators from a</span>\n    <span class=\"hljs-comment\">// persistence storage</span>\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture(authenticators);\n  })\n  .authenticatorUpdater(authenticator -&gt; {\n    <span class=\"hljs-comment\">// function that updates an authenticator to a</span>\n    <span class=\"hljs-comment\">// persistence storage</span>\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n  });\n\n<span class=\"hljs-comment\">// the response received from the browser</span>\nJsonObject request = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-string\">\"Q-MHP0Xq20CKM5LW3qBt9gu5vdOYLNZc3jCcgyyL...\"</span>)\n  .put(<span class=\"hljs-string\">\"rawId\"</span>, <span class=\"hljs-string\">\"Q-MHP0Xq20CKM5LW3qBt9gu5vdOYLNZc3jCcgyyL...\"</span>)\n  .put(<span class=\"hljs-string\">\"type\"</span>, <span class=\"hljs-string\">\"public-key\"</span>)\n  .put(<span class=\"hljs-string\">\"response\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"attestationObject\"</span>, <span class=\"hljs-string\">\"o2NmbXRkbm9uZWdhdHRTdG10oGhhdXRoRGF0YVj...\"</span>)\n    .put(<span class=\"hljs-string\">\"clientDataJSON\"</span>, <span class=\"hljs-string\">\"eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlb...\"</span>));\n\nwebAuthN\n  .authenticate(\n    <span class=\"hljs-keyword\">new</span> JsonObject()\n      <span class=\"hljs-comment\">// the username you want to link to</span>\n      .put(<span class=\"hljs-string\">\"username\"</span>, <span class=\"hljs-string\">\"paulo\"</span>)\n      <span class=\"hljs-comment\">// the server origin</span>\n      .put(<span class=\"hljs-string\">\"origin\"</span>, <span class=\"hljs-string\">\"https://192.168.178.206.xip.io:8443\"</span>)\n      <span class=\"hljs-comment\">// the server domain</span>\n      .put(<span class=\"hljs-string\">\"domain\"</span>, <span class=\"hljs-string\">\"192.168.178.206.xip.io\"</span>)\n      <span class=\"hljs-comment\">// the challenge given on the previous step</span>\n      .put(<span class=\"hljs-string\">\"challenge\"</span>, <span class=\"hljs-string\">\"BH7EKIDXU6Ct_96xTzG0l62qMhW_Ef_K4MQdDLoVNc1UX...\"</span>)\n      .put(<span class=\"hljs-string\">\"webauthn\"</span>, request))\n  .onSuccess(user -&gt; {\n    <span class=\"hljs-comment\">// success!</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_create_a_login_request\"><a class=\"anchor\" href=\"#_create_a_login_request\"></a>Create a Login request</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">WebAuthn webAuthN = WebAuthn.create(\n  vertx,\n  <span class=\"hljs-keyword\">new</span> WebAuthnOptions()\n    .setRelyingParty(<span class=\"hljs-keyword\">new</span> RelyingParty().setName(<span class=\"hljs-string\">\"ACME Corporation\"</span>)))\n  .authenticatorFetcher(query -&gt; {\n    <span class=\"hljs-comment\">// function that fetches some authenticators from a</span>\n    <span class=\"hljs-comment\">// persistence storage</span>\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture(authenticators);\n  })\n  .authenticatorUpdater(authenticator -&gt; {\n    <span class=\"hljs-comment\">// function that updates an authenticator to a</span>\n    <span class=\"hljs-comment\">// persistence storage</span>\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n  });\n\n<span class=\"hljs-comment\">// Login only requires the username and can even be set to null if</span>\n<span class=\"hljs-comment\">// resident keys are supported, in this case the authenticator remembers</span>\n<span class=\"hljs-comment\">// the public key used for the relying party</span>\nwebAuthN.getCredentialsOptions(<span class=\"hljs-string\">\"paulo\"</span>)\n  .onSuccess(challengeResponse -&gt; {\n    <span class=\"hljs-comment\">// return the challenge to the browser</span>\n    <span class=\"hljs-comment\">// for further processing</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_verify_the_login_request\"><a class=\"anchor\" href=\"#_verify_the_login_request\"></a>Verify the Login request</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">WebAuthn webAuthN = WebAuthn.create(\n  vertx,\n  <span class=\"hljs-keyword\">new</span> WebAuthnOptions()\n    .setRelyingParty(<span class=\"hljs-keyword\">new</span> RelyingParty().setName(<span class=\"hljs-string\">\"ACME Corporation\"</span>)))\n  .authenticatorFetcher(query -&gt; {\n    <span class=\"hljs-comment\">// function that fetches some authenticators from a</span>\n    <span class=\"hljs-comment\">// persistence storage</span>\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture(authenticators);\n  })\n  .authenticatorUpdater(authenticator -&gt; {\n    <span class=\"hljs-comment\">// function that updates an authenticator to a</span>\n    <span class=\"hljs-comment\">// persistence storage</span>\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n  });\n\n<span class=\"hljs-comment\">// The response from the login challenge request</span>\nJsonObject body = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-string\">\"rYLaf9xagyA2YnO-W3CZDW8udSg8VeMMm25nenU7nCSxUqy1pEzOdb9o...\"</span>)\n  .put(<span class=\"hljs-string\">\"rawId\"</span>, <span class=\"hljs-string\">\"rYLaf9xagyA2YnO-W3CZDW8udSg8VeMMm25nenU7nCSxUqy1pEzOdb9o...\"</span>)\n  .put(<span class=\"hljs-string\">\"type\"</span>, <span class=\"hljs-string\">\"public-key\"</span>)\n  .put(<span class=\"hljs-string\">\"response\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"authenticatorData\"</span>, <span class=\"hljs-string\">\"fxV8VVBPmz66RLzscHpg5yjRhO...\"</span>)\n    .put(<span class=\"hljs-string\">\"clientDataJSON\"</span>, <span class=\"hljs-string\">\"eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlb...\"</span>)\n    .put(<span class=\"hljs-string\">\"signature\"</span>, <span class=\"hljs-string\">\"MEUCIFXjL0ONRuLP1hkdlRJ8d0ofuRAS12c6w8WgByr-0yQZA...\"</span>)\n    .put(<span class=\"hljs-string\">\"userHandle\"</span>, <span class=\"hljs-string\">\"\"</span>));\n\nwebAuthN.authenticate(<span class=\"hljs-keyword\">new</span> JsonObject()\n  <span class=\"hljs-comment\">// the username you want to link to</span>\n  .put(<span class=\"hljs-string\">\"username\"</span>, <span class=\"hljs-string\">\"paulo\"</span>)\n  <span class=\"hljs-comment\">// the server origin</span>\n  .put(<span class=\"hljs-string\">\"origin\"</span>, <span class=\"hljs-string\">\"https://192.168.178.206.xip.io:8443\"</span>)\n  <span class=\"hljs-comment\">// the server domain</span>\n  .put(<span class=\"hljs-string\">\"domain\"</span>, <span class=\"hljs-string\">\"192.168.178.206.xip.io\"</span>)\n  <span class=\"hljs-comment\">// the challenge given on the previous step</span>\n  .put(<span class=\"hljs-string\">\"challenge\"</span>, <span class=\"hljs-string\">\"BH7EKIDXU6Ct_96xTzG0l62qMhW_Ef_K4MQdDLoVNc1UX...\"</span>)\n  .put(<span class=\"hljs-string\">\"webauthn\"</span>, body))\n  .onSuccess(user -&gt; {\n    <span class=\"hljs-comment\">// success!</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_metadata_service\"><a class=\"anchor\" href=\"#_metadata_service\"></a>Metadata Service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The current module passes all FIDO2 compliance tests <strong>including</strong> the yet to be final FIDO2 Metadata Service API.\nThis means that we follow the spec and this handler <strong>can</strong> detect tokens that have been marked as not trustable\nby the token vendor. For example, when a security bug allowed a private key to be extracted from a token.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to support the Metadata Service API, as a user you need to register yourself or your application at:\n<a href=\"https://fidoalliance.org/metadata/\">https://fidoalliance.org/metadata</a></p>\n</div>\n<div class=\"paragraph\">\n<p>With this the <code>APIKey</code> given to you you can configure the application as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">final</span> WebAuthnOptions webAuthnOptions = <span class=\"hljs-keyword\">new</span> WebAuthnOptions()\n  <span class=\"hljs-comment\">// in order to fully trust the MDS tokens we should load the CRLs as</span>\n  <span class=\"hljs-comment\">// described on https://fidoalliance.org/metadata/</span>\n\n  <span class=\"hljs-comment\">// here the content of: http://mds.fidoalliance.org/Root.crl</span>\n  .addRootCrl(\n    <span class=\"hljs-string\">\"MIIB1jCCAV0CAQEwCg...\"</span>)\n  <span class=\"hljs-comment\">// here the content of: http://mds.fidoalliance.org/CA-1.crl</span>\n  .addRootCrl(\n    <span class=\"hljs-string\">\"MIIB5DCCAYoCAQEwCg...\"</span>);\n\n<span class=\"hljs-comment\">// create the webauthn security object like before</span>\n<span class=\"hljs-keyword\">final</span> WebAuthn webAuthN = WebAuthn.create(vertx, webAuthnOptions);\n\nwebAuthN.metaDataService()\n  .fetchTOC(<span class=\"hljs-string\">\"https://mds2.fidoalliance.org/?token=your-access-token-string\"</span>)\n  .onSuccess(allOk -&gt; {\n    <span class=\"hljs-comment\">// if all metadata was downloaded and parsed correctly allOk is true</span>\n    <span class=\"hljs-comment\">// the processing will not stop if a entry is corrupt, in that case that</span>\n    <span class=\"hljs-comment\">// specific entry is skipped and the flag is false. That also means that</span>\n    <span class=\"hljs-comment\">// that entry will be tagged and \"not trustable\" as we can't make any</span>\n    <span class=\"hljs-comment\">// valid decision.</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_updating_certificates\"><a class=\"anchor\" href=\"#_updating_certificates\"></a>Updating Certificates</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Almost all device attestations are based on <code>X509</code> Certificate checks. This means that certificates can and will expire\nat some point in time. By default, the current \"Active\" certificates are hardcoded on the <code>WebAuthnOptions</code> object.</p>\n</div>\n<div class=\"paragraph\">\n<p>However if your application needs to update a certificate on it&#8217;s own, say for example, use a more up to date one, or\nanother with a different cypher, then you can replace the default <code>root</code> certificates for each attestation by calling:\n<code>WebAuthnOptions.putRootCertificate(String, String)</code>, where the first parameter is the attestation name or \"mds\" for\nFIDO MetaData Service:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>none</p>\n</li>\n<li>\n<p>u2f</p>\n</li>\n<li>\n<p>packed</p>\n</li>\n<li>\n<p>android-key</p>\n</li>\n<li>\n<p>android-safetynet</p>\n</li>\n<li>\n<p>tpm</p>\n</li>\n<li>\n<p>apple</p>\n</li>\n<li>\n<p>mds</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>And the second the PEM formatted X509 Certificate (Boundaries are not required).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">final</span> WebAuthnOptions webAuthnOptions = <span class=\"hljs-keyword\">new</span> WebAuthnOptions()\n  <span class=\"hljs-comment\">// fido2 MDS custom ROOT certificate</span>\n  .putRootCertificate(<span class=\"hljs-string\">\"mds\"</span>, <span class=\"hljs-string\">\"MIIB1jCCAV0CAQEwCg...\"</span>)\n  <span class=\"hljs-comment\">// updated google root certificate from (https://pki.goog/repository/)</span>\n  .putRootCertificate(<span class=\"hljs-string\">\"android-safetynet\"</span>, <span class=\"hljs-string\">\"MIIDvDCCAqSgAwIBAgINAgPk9GHs...\"</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.0.0"},"__N_SSG":true}