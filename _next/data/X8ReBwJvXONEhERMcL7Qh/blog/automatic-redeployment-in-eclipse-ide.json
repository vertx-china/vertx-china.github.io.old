{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Automatic redeployment in Eclipse IDE","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x 3.1 has (re-)introduced the redeploy feature. This blog post explains how to use this feature in the Eclipse IDE. However, you can easily adapt the content to your IDE."},"date":"2015-12-20","slug":"automatic-redeployment-in-eclipse-ide","readingTime":{"text":"3 min read","minutes":2.035,"time":122100,"words":407},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      em: \"em\",\n      h2: \"h2\",\n      a: \"a\",\n      code: \"code\",\n      ol: \"ol\",\n      li: \"li\",\n      ul: \"ul\",\n      pre: \"pre\",\n      span: \"span\"\n    }, props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Vert.x 3.1 has (re-)in­tro­duced the \", _jsx(_components.em, {\n          children: \"re­de­ploy\"\n        }), \" fea­ture. This blog post ex­plains how to use this fea­ture in the Eclipse IDE. How­ever, you can eas­ily adapt the con­tent to your IDE.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"how-does-redeploy-work\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#how-does-redeploy-work\"\n        }), \"How does redeploy work\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"How is im­ple­mented the \", _jsx(_components.code, {\n          children: \"redeploy\"\n        }), \" is not as you may ex­pect. First, the re­de­ploy does not rely on a build tool, but is in­te­grated in vert.x. How­ever you can plug your build tools with the re­de­ploy fea­ture. This fea­ture is of­fered by the \", _jsx(_components.code, {\n          children: \"io.vertx.core.Launcher\"\n        }), \" class. The re­de­ploy­ment process is ac­tu­ally very sim­ple:\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"the ap­pli­ca­tion is launched in \", _jsx(_components.em, {\n            children: \"re­de­ploy mode\"\n          }), \".\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"it lis­tens for file changes\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"when a \", _jsx(_components.em, {\n            children: \"match­ing\"\n          }), \" file is changed, it stops the ap­pli­ca­tion\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"it ex­e­cutes the \", _jsx(_components.code, {\n            children: \"on-redeploy\"\n          }), \" ac­tions if any\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"it restarts the ap­pli­ca­tion\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"back to (2)\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ini­tially the ap­pli­ca­tion is launched in \", _jsx(_components.em, {\n          children: \"re­de­ploy mode\"\n        }), \". The ap­pli­ca­tion is ac­tu­ally launched in back­ground, in a sep­a­rated process. Vert.x lis­tens for file changes. You give it a set of (Ant-​style) pat­terns and every time a match­ing file changes, Vert.x stops the whole ap­pli­ca­tion and restarts it. Op­tion­ally you can con­fig­ure a \", _jsx(_components.code, {\n          children: \"on-redeploy\"\n        }), \" ac­tion to plug in your build tools.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To in­te­grate this process in Eclipse (or in your IDE), you just need to con­fig­ure the set of lis­tened files, and let the \", _jsx(_components.code, {\n          children: \"Launcher\"\n        }), \" class starts and stops your ap­pli­ca­tion.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"redeploy-in-eclipse\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#redeploy-in-eclipse\"\n        }), \"Redeploy in Eclipse\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The fol­low­ing screen­cast ex­plains how you con­fig­ure a vert.x ap­pli­ca­tion to be run in Eclipse and how to con­fig­ure the re­de­ploy:\"\n      }), \"\\n\", _jsx(\"div\", {\n        className: \"youtube-embed\",\n        children: _jsx(\"iframe\", {\n          src: \"https://www.youtube.com/embed/iyZwAzEVX-o\",\n          frameBorder: \"0\",\n          allowFullScreen: true\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To sum­ma­rize the last con­fig­u­ra­tion:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"it’s a Java ap­pli­ca­tion con­fig­u­ra­tion\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"it uses \", _jsx(_components.code, {\n            children: \"io.vertx.core.Launcher\"\n          }), \" as main class\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"In the \", _jsx(_components.em, {\n            children: \"Pro­gram ar­gu­ments\"\n          }), \" (\", _jsx(_components.em, {\n            children: \"Ar­gu­ments\"\n          }), \" tab), write: \", _jsx(_components.code, {\n            children: \"run org.acme.verticle.MyMainVerticle --redeploy=\\\"src/**/*.java\\\" --launcher-class=io.vertx.core.Launcher\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"redeploy-with-your-own-main-class\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#redeploy-with-your-own-main-class\"\n        }), \"Redeploy with your own Main class\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s now imag­ine that you have your own \", _jsx(_components.code, {\n          children: \"Main\"\n        }), \" class, start­ing your ap­pli­ca­tion. For in­stance, it can be some­thing like:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" org.acme.vertx;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.Vertx;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Main\"\n          }), \" {\\n\\n\\t\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(String[] args)\"\n          }), \" {\\n\\t\\t\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Vertx.vertx();\\n\\t\\tvertx.deployVerticle(MyMainVerticle.class.getName());\\n\\t}\\n\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The re­de­ploy fea­ture from vert.x lets you use your own \", _jsx(_components.code, {\n          children: \"Main\"\n        }), \" class:\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Cre­ate an­other \", _jsx(_components.code, {\n            children: \"Run\"\n          }), \" con­fig­u­ra­tion\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Set the \", _jsx(_components.code, {\n            children: \"Main-Class\"\n          }), \" to \", _jsx(_components.code, {\n            children: \"io.vertx.core.Launcher\"\n          }), \" (yes, the one from vert.x not yours)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"In the ap­pli­ca­tion pa­ra­me­ter add: \", _jsx(_components.code, {\n            children: \"run --redeploy=\\\"src/**/*.java\\\" --launcher-class=org.acme.vertx.Main\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"With this con­fig­u­ra­tion, the ap­pli­ca­tion is launched in back­ground using your own \", _jsx(_components.code, {\n          children: \"Main\"\n        }), \" class, and will restart the ap­pli­ca­tion every time you change your source code (you can even change the source code of your \", _jsx(_components.code, {\n          children: \"Main\"\n        }), \" class).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"},"prevPost":{"meta":{"title":"ECMAScript 6/7 on the JVM with TypeScript and Vert.x","category":"guides","authors":[{"name":"Michel Krämer","github_id":"michel-kraemer"}],"summary":"I figured it would be a good idea to give you a couple of examples how teaming\n  Vert.x and TypeScript helps you use ECMAScript 6 and 7 features on the JVM today."},"date":"2016-01-03","slug":"ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x"},"nextPost":{"meta":{"title":"Vert.x 3.2.0 is released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"We are pleased to announce the release of Vert.x 3.2.0!"},"date":"2015-12-15","slug":"vert-x-3-2-0-is-released"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Vert.x featuring Continuous Delivery with Jenkins and Ansible","category":"guides","authors":[{"name":"Ricardo Hernandez","github_id":"ricardohmon"}],"summary":"This blog entry describes an approach to adopt Continuous Delivery for Vert.x applications using Jenkins and Ansible by taking advantage of the Jenkins Job DSL and Ansible plugins."},"date":"2016-09-28","slug":"vert-x-featuring-continuous-delivery-with-jenkins-and-ansible"}]},"__N_SSG":true}