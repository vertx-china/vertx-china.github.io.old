{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Contract Driven REST Services with Vert.x3","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"We see a new trend in development where we are shifting from developing applications to APIs. More and more we see services being offered as REST APIs that we are allowed to consume."},"date":"2015-09-17","slug":"contract-driven-rest-services-with-vert-x3","readingTime":{"text":"8 min read","minutes":7.185,"time":431100,"words":1437},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      ul: \"ul\",\n      li: \"li\",\n      code: \"code\",\n      h2: \"h2\",\n      pre: \"pre\",\n      span: \"span\",\n      strong: \"strong\",\n      h3: \"h3\",\n      img: \"img\"\n    }, props.components), {Link, Alert} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"We see a new trend in de­vel­op­ment where we are shift­ing from de­vel­op­ing ap­pli­ca­tions to de­velop APIs. More and more we see ser­vices being of­fered as REST APIs that we are al­lowed to con­sume and we al­ready see this trend from the big names in the in­dus­try, e.g.: \", _jsx(_components.a, {\n          href: \"https://developers.facebook.com/\",\n          children: \"Face­book\"\n        }), \", \", _jsx(_components.a, {\n          href: \"https://www.mediawiki.org/wiki/API:Main_page\",\n          children: \"Wikipedia\"\n        }), \", \", _jsx(_components.a, {\n          href: \"https://developer.amazon.com/public/apis\",\n          children: \"Ama­zon\"\n        }), \", \", _jsx(_components.a, {\n          href: \"https://dev.twitter.com/overview/documentation\",\n          children: \"Twit­ter\"\n        }), \", \", _jsx(_components.a, {\n          href: \"https://developers.google.com/apis-explorer/#p/\",\n          children: \"Google\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://www.reddit.com/dev/api\",\n          children: \"Red­dit\"\n        }), \" they all offer APIs.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Of course mak­ing an REST API using Vert.x is quite sim­ple, just use \", _jsx(Link, {\n          href: \"/docs/#web\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x Web\"\n          })\n        }), \" and you can start writ­ing your API in sec­onds, how­ever an API with­out doc­u­men­ta­tion is not an API since no de­vel­oper will know how to use it. How­ever this is one of the most sen­si­tive is­sues to tackle in soft­ware de­vel­op­ment, no­body likes to write doc­u­men­ta­tion. How­ever, in the REST age where REST-​based web-​services are ubiq­ui­tous, doc­u­men­ta­tion for pub­lic web-​services is a ne­ces­sity. There are a lot of tools out there, two of the most pop­u­lar are with­out a doubt:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"http://swagger.io\",\n            children: \"Swag­ger\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"http://raml.org\",\n            children: \"RAML\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Both frame­works have a large ecosys­tem of tools and tool­ing around but they tackle the doc­u­men­ta­tion from two dif­fer­ent per­spec­tives. While Swag­ger is purely a doc­u­men­ta­tion tool it tack­les the prob­lem from bot­tom up and RAML does doc­u­ment top down. They both rely on a doc­u­ment (\", _jsx(_components.code, {\n          children: \"JSON\"\n        }), \" for Swag­ger, \", _jsx(_components.code, {\n          children: \"YAML\"\n        }), \" for RAML).\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I’ll now go over build­ing a sim­ple Hello World API, doc­u­ment it and test it. For this ex­am­ple I’ll choose RAML since it feels more nat­ural to the way we code with Vert.x Web.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"define-the-hello-world-api\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#define-the-hello-world-api\"\n        }), \"Define the Hello World API\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We need a con­tract and as with any other de­vel­op­ment we need some spec­i­fi­ca­tion, You can learn about RAML in its \", _jsx(_components.a, {\n          href: \"http://raml.org\",\n          children: \"web­site\"\n        }), \" and quickly see how easy it is to get started. So we start with the fol­low­ing spec­i­fi­ca­tion:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-yaml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"#%RAML 0.8\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"title:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"Hello\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"world\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"REST\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"API\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"baseUri:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"http://localhost:8080/\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"version:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"v1\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"/hello:\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"get:\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"responses:\"\n          }), \"\\n      \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"200:\"\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"body:\"\n          }), \"\\n          \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"application/json:\"\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"schema:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"|\\n              { \\\"$schema\\\": \\\"http://json-schema.org/schema\\\",\\n                \\\"type\\\": \\\"object\\\",\\n                \\\"description\\\": \\\"Hello World Greeting\\\",\\n                \\\"properties\\\": {\\n                  \\\"greeting\\\":  { \\\"type\\\": \\\"string\\\" }\\n                },\\n                \\\"required\\\": [ \\\"greeting\\\" ]\\n              }\\n\"\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So if you didn’t un­der­stood why I named RAML as a top down doc­u­men­ta­tion tool, I think it be­comes clear now. So there are some basic de­f­i­n­i­tion on the top of the file like, \", _jsx(_components.code, {\n          children: \"title\"\n        }), \", \", _jsx(_components.code, {\n          children: \"baseUri\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"version\"\n        }), \" which should be self ex­plana­tory.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And then we start with the API doc­u­men­ta­tion, so we spec­ify that at the \", _jsx(_components.code, {\n          children: \"URL\"\n        }), \" \", _jsx(_components.code, {\n          children: \"/hello\"\n        }), \" using the HTTP verb \", _jsx(_components.code, {\n          children: \"GET\"\n        }), \" you are ex­pected to get a re­sponse with sta­tus code \", _jsx(_components.code, {\n          children: \"200\"\n        }), \" and the body of the re­sponse should have con­tent type \", _jsx(_components.code, {\n          children: \"application/json\"\n        }), \". This is a very min­i­mal doc­u­ment, one could go over and spec­ify the \", _jsx(_components.a, {\n          href: \"http://json-schema.org/\",\n          children: _jsx(_components.code, {\n            children: \"json schema\"\n          })\n        }), \" for the re­sponse, input val­ues, etc…, how­ever lets just keep it sim­ple for this ex­am­ple.\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        children: _jsxs(_components.p, {\n          children: [\"If you do not like to write yaml in your ed­i­tor you can al­ways use the \", _jsx(_components.a, {\n            href: \"http://raml.org/projects.html\",\n            children: \"API De­signer\"\n          }), \" which gives you in­stant feed­back on your API doc­u­ment and pro­vides a test­ing plat­form.\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"implement-the-api\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#implement-the-api\"\n        }), \"Implement the API\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So you got your con­tract, time to im­ple­ment it, this is a very sim­ple API so I’ll jump to the code im­me­di­ately:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"App\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"AbstractVerticle\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n\\n    router.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/hello\\\"\"\n          }), \").handler(rc -> {\\n      rc.response()\\n          .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json\\\"\"\n          }), \")\\n          .end(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"greeting\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello World!\\\"\"\n          }), \").encode());\\n    });\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you can see the code re­sem­bles the con­tract doc­u­ment, when there is a \", _jsx(_components.code, {\n          children: \"GET\"\n        }), \" re­quest to \", _jsx(_components.code, {\n          children: \"/hello\"\n        }), \" we send to the client a empty \", _jsx(_components.code, {\n          children: \"JSON\"\n        }), \" doc­u­ment \", _jsx(_components.code, {\n          children: \"{}\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"are-we-done\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#are-we-done\"\n        }), \"Are we done?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The an­swer is \", _jsx(_components.strong, {\n          children: \"NO!!!\"\n        }), \" how can we be sure that our im­ple­men­ta­tion does com­ply to the con­tract? We need to test. As I wrote be­fore there is no spe­cific sup­port for Vert.x from RAML or other tools how­ever in this case it is not a prob­lem we can still test our code with­out hav­ing the need to im­ple­ment a test frame­work from the ground up.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"testing-our-contract\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#testing-our-contract\"\n        }), \"Testing our contract\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The ini­tial step is to setup a test, this should be triv­ial we are using Java (al­though we could test any of Vert.x\\nsup­ported lan­guages using the same tech­nique). We cre­ate a \", _jsx(_components.a, {\n          href: \"http://junit.org/\",\n          children: \"JUnit\"\n        }), \" unit test.\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        children: _jsx(_components.p, {\n          children: \"For this ex­am­ple, I will be using JUnit in­stead of Vert.x Test mostly to let you know that Vert.x isn’t an opin­ion­ated frame­work, so you are free to choose the tool that best fits you.\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"APITest\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@BeforeClass\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"bootApp\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    Runner.run(App.class);\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"testHelloEndpoint\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So at this mo­ment you have a sim­ple test, I’ll share the code of the run­ner class (ba­si­cally it just in­stan­ti­ates a\\n\", _jsx(_components.code, {\n          children: \"Vertx\"\n        }), \" in­stance and load the \", _jsx(_components.code, {\n          children: \"verticle\"\n        }), \" we just im­ple­mented above) and has a empty test \", _jsx(_components.code, {\n          children: \"testHelloEndpoint\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"load-the-api-definition-into-the-test\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#load-the-api-definition-into-the-test\"\n        }), \"Load the API definition into the test\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"APITest\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RamlDefinition\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"api\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" RamlLoaders.fromClasspath()\\n        .load(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/hello.raml\\\"\"\n          }), \")\\n        .assumingBaseUri(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http://localhost:8080/\\\"\"\n          }), \");\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" CheckingWebTarget checking;\\n\\n  ...\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So the first step is to load the \", _jsx(_components.code, {\n          children: \"API\"\n        }), \" de­f­i­n­i­tion into our test and have a ref­er­ence to a \", _jsx(_components.code, {\n          children: \"CheckingWebTarget\"\n        }), \" ob­ject. The check­ing ob­ject is where you can per­form as­ser­tions, but to do this we need some client make REST calls in order to test.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"create-a-rest-client\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#create-a-rest-client\"\n        }), \"Create a REST client\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"There are many op­tions for this, you could use \", _jsx(_components.code, {\n          children: \"JAX-RS\"\n        }), \", \", _jsx(_components.code, {\n          children: \"RestAssured\"\n        }), \", \", _jsx(_components.code, {\n          children: \"RestEasy\"\n        }), \", etc… so I’ll pick \", _jsx(_components.code, {\n          children: \"RestEasy\"\n        }), \" for now:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"APITest\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RamlDefinition\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"api\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" RamlLoaders.fromClasspath()\\n      .load(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/hello.raml\\\"\"\n          }), \")\\n      .assumingBaseUri(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http://localhost:8080/\\\"\"\n          }), \");\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ResteasyClient\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"client\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"ResteasyClientBuilder\"\n          }), \"().build();\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" CheckingWebTarget checking;\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@BeforeClass\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"bootApp\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    Runner.run(App.class);\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Before\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createTarget\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    checking = api.createWebTarget(client.target(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http://localhost:8080\\\"\"\n          }), \"));\\n  }\\n\\n  ...\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"implement-the-test\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#implement-the-test\"\n        }), \"Implement the test\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"All of the boil­er­plate code is in place and if you look at the pre­vi­ous sec­tion you will see that it wasn’t that bad, just a few lines and you loaded the RAML con­tract, cre­ated a REST client and started up your ap­pli­ca­tion and all this under ~10 lines of code.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So lets fin­ish and im­ple­ment the ver­i­fi­ca­tion of the con­tract:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"APITest\"\n          }), \" {\\n  ...\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"testHelloEndpoint\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    checking.path(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/hello\\\"\"\n          }), \").request().get();\\n    Assert.assertThat(checking.getLastReport(), RamlMatchers.hasNoViolations());\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Once you run your tests, you will see:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"13:09:28.200 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG o.a.h.i.conn.DefaultClientConnection - Sending request: GET /hello HTTP/1.1\\n13:09:28.201 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  >> \\\"GET /hello HTTP/1.1\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.202 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  >> \\\"Accept-Encoding: gzip, deflate\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.202 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  >> \\\"Host: localhost:8080\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.202 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  >> \\\"Connection: Keep-Alive\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.202 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  >> \\\"\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.202 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.headers - >> GET /hello HTTP/1.1\\n13:09:28.202 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.headers - >> Accept-Encoding: gzip, deflate\\n13:09:28.203 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.headers - >> Host: localhost:8080\\n13:09:28.203 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.headers - >> Connection: Keep-Alive\\n13:09:28.412 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  << \\\"HTTP/1.1 200 OK\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.413 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  << \\\"content-type: application/json\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.413 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  << \\\"Content-Length: 2\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.413 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  << \\\"\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\r]\"\n          }), _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[\\\\n]\"\n          }), \"\\\"\\n13:09:28.414 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG o.a.h.i.conn.DefaultClientConnection - Receiving response: HTTP/1.1 200 OK\\n13:09:28.414 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.headers - << HTTP/1.1 200 OK\\n13:09:28.415 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.headers - << content-type: application/json\\n13:09:28.415 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.headers - << Content-Length: 2\\n13:09:28.429 \", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[main]\"\n          }), \" DEBUG org.apache.http.wire -  << \\\"{}\\\"\\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.076 sec\\n\\nResults :\\n\\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"And we are done, we now have a API that fol­low the con­tract, you can now keep de­vel­op­ing your API and im­ple­men­ta­tion and have a test dri­ven ap­proach to be sure that the con­tract is not bro­ken.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"next-steps\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#next-steps\"\n        }), \"Next steps\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Until now you have learn how to in­te­grate RAML into Vert.x and CI, how­ever the users of your API will not be able to know much about the API yet since its doc­u­men­ta­tion is not pub­licly avail­able. So lets pub­lish on­line the doc­u­men­ta­tion of your API, of course if your API is pri­vate you do not need to fol­low these steps.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In order to do this all we need it to in­clude in our ap­pli­ca­tion the \", _jsx(_components.a, {\n          href: \"https://github.com/mulesoft/api-console\",\n          children: \"RAML con­sole\"\n        }), \", the fastest way to do this is just down­load a \", _jsx(_components.a, {\n          href: \"https://github.com/mulesoft/api-console/releases\",\n          children: \"re­lease\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"src/main/resouces/webroot\"\n        }), \" and in the orig­i­nal ap­pli­ca­tion Vert.x Router we add a Sta­tic Con­tent Han­dler to serve the con­sole files. Your ap­pli­ca­tion source code should look like this:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"App\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"AbstractVerticle\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n\\n    router.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/hello\\\"\"\n          }), \").handler(rc -> {\\n      rc.response()\\n          .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json\\\"\"\n          }), \")\\n          .end(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"greeting\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello World!\\\"\"\n          }), \").encode());\\n    });\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// optionally enable the web console so users can play with your API\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// online from their web browsers\"\n          }), \"\\n    router.route().handler(StaticHandler.create());\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Once you start you ap­pli­ca­tion open a browser point­ing at the \", _jsx(_components.a, {\n          href: \"http://localhost:8080?raml=/api/hello.raml\",\n          children: \"con­sole\"\n        }), \". Once you do that you should be pre­sented with some­thing sim­i­lar to this:\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/images/blog/vertx3-contract-driven-rest-services/raml-console.png\",\n          alt: \"apiconsole\"\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"article-source-code\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#article-source-code\"\n        }), \"Article source code\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can get the full source code for this ar­ti­cle \", _jsx(_components.a, {\n          href: \"https://github.com/pmlopes/vert-x3-experiments/tree/experiments/raml\",\n          children: \"here\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x 3.1.0 is released!","category":"releases","authors":[{"name":"Tim Fox","github_id":"purplefox"}],"summary":"I'm pleased to announce the release of Vert.x 3.1!"},"date":"2015-10-08","slug":"vert-x-3-1-0-is-released"},"nextPost":{"meta":{"title":"Writing secure Vert.x Web apps","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"This is a starting guide for securing Vert.x web applications. Standard rules and practices apply to Vert.x apps as if they would to any other web framework."},"date":"2015-09-14","slug":"writing-secure-vert-x-web-apps"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}