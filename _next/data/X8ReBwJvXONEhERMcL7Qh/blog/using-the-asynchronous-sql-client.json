{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client","readingTime":{"text":"10 min read","minutes":9.02,"time":541200,"words":1804},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      ol: \"ol\",\n      li: \"li\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      ul: \"ul\",\n      em: \"em\",\n      h3: \"h3\"\n    }, props.components), {Link, Alert} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Fi­nally, back… This post is the fifth post of the in­tro­duc­tion to vert.x blog se­ries, after a not-​that-small break. In this post we are going to see how we can use JDBC in a vert.x ap­pli­ca­tion, and this, using the asyn­chro­nous API pro­vided by the \", _jsx(Link, {\n          href: \"/docs/vertx-jdbc-client/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"vertx-​jdbc-client\"\n          })\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"previously-in-the-introduction-to-vertx-series\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#previously-in-the-introduction-to-vertx-series\"\n        }), \"Previously in the introduction to vert.x series\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As it was quite some time since the last post, let’s start by re­fresh­ing our mind about the four pre­vi­ous posts:\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(Link, {\n            href: \"/blog/my-first-vert-x-3-application/\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"first post\"\n            })\n          }), \" has de­scribed how to build a vert.x ap­pli­ca­tion with Maven and ex­e­cute unit tests.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(Link, {\n            href: \"/blog/vert-x-application-configuration/\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"sec­ond post\"\n            })\n          }), \" has de­scribed how this ap­pli­ca­tion can be­come con­fig­urable.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(Link, {\n            href: \"/blog/some-rest-with-vert-x/\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"third post\"\n            })\n          }), \" has in­tro­duced \", _jsx(Link, {\n            href: \"/docs/vertx-web/java/\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"vertx-​web\"\n            })\n          }), \", and a small col­lec­tion man­age­ment ap­pli­ca­tion has been de­vel­oped. This ap­pli­ca­tion of­fers a REST API used by a HTML/JavaScript fron­tend.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(Link, {\n            href: \"/blog/unit-and-integration-tests/\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"pre­vi­ous post\"\n            })\n          }), \" has pre­sented how you can run in­te­gra­tion tests to en­sure the be­hav­ior of your ap­pli­ca­tion.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In this post, back to code. The cur­rent ap­pli­ca­tion uses an in-​memory map to store the prod­ucts. It’s time to use a data­base. In this post we are going to use \", _jsx(_components.a, {\n          href: \"http://hsqldb.org/\",\n          children: \"HSQL\"\n        }), \", but you can use any data­base pro­vid­ing a JDBC dri­ver. In­ter­ac­tions with the data­base will be asyn­chro­nous and made using the \", _jsx(Link, {\n          href: \"/docs/vertx-jdbc-client/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"vertx-​jdbc-client\"\n          })\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The code of this post are avail­able on this Github \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app\",\n          children: \"project\"\n        }), \", in the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\",\n          children: \"post-5 branch\"\n        }), \" branch.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"asynchronous\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#asynchronous\"\n        }), \"Asynchronous?\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"One of the vert.x char­ac­ter­is­tics is being asyn­chro­nous. With an asyn­chro­nous API, you don’t wait for a re­sult, but you are no­ti­fied when this re­sult is ready. Just to il­lus­trate this, let’s take a very sim­ple ex­am­ple.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s imag­ine an \", _jsx(_components.code, {\n          children: \"add\"\n        }), \" method. Tra­di­tion­ally, you would use it like this: \", _jsx(_components.code, {\n          children: \"int r = add(1, 1)\"\n        }), \". This is a syn­chro­nous API as you are wait­ing for the re­sult. An asyn­chro­nous ver­sion of this API would be: \", _jsx(_components.code, {\n          children: \"add(1, 1, r -> { /* do something with the result */ })\"\n        }), \". In this ver­sion, you pass a \", _jsx(_components.code, {\n          children: \"Handler\"\n        }), \" called when the re­sult has been com­puted. The method does not re­turn any­thing, and could be im­ple­mented as:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"add\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" a, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" b, Handler<Integer> resultHandler)\"]\n          }), \" {\\n\\t\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"r\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" a + b;\\n\\tresultHandler.handle(r);\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Just to avoid mis­con­cep­tions, asyn­chro­nous API are not about threads. As we can see in the \", _jsx(_components.code, {\n          children: \"add\"\n        }), \" ex­am­ple, there are no threads in­volved.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"jdbc-yes-but-asynchronous\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#jdbc-yes-but-asynchronous\"\n        }), \"JDBC yes, but asynchronous\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, now that we have seen some ba­sics about asyn­chro­nous API, let’s have a look to the vertx-​jdbc-client. This com­po­nent lets us in­ter­act with a data­base through a JDBC dri­ver. These in­ter­ac­tions are asyn­chro­nous, so when you were doing:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"sql\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"SELECT * FROM Products\\\"\"\n          }), \";\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ResultSet\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"rs\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" stmt.executeQuery(sql);\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"it will be:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"connection.query(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"SELECT * FROM Products\\\"\"\n          }), \", result -> {\\n\\t\\t\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// do something with the result\"\n          }), \"\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This model is more ef­fi­cient as it avoids wait­ing for the re­sult. You are no­ti­fied when the re­sult is avail­able.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s now mod­ify our ap­pli­ca­tion to use a data­base to store our prod­ucts.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"some-maven-dependencies\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#some-maven-dependencies\"\n        }), \"Some maven dependencies\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The first things we need to do it to de­clare two new Maven de­pen­den­cies in our \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-php-template\",\n          children: _jsxs(_components.span, {\n            className: \"xml\",\n            children: [_jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"<\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"dependency\"\n              }), \">\"]\n            }), \"\\n  \", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"<\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"groupId\"\n              }), \">\"]\n            }), \"io.vertx\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"</\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"groupId\"\n              }), \">\"]\n            }), \"\\n  \", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"<\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"artifactId\"\n              }), \">\"]\n            }), \"vertx-jdbc-client\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"</\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"artifactId\"\n              }), \">\"]\n            }), \"\\n  \", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"<\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"version\"\n              }), \">\"]\n            }), \"3.1.0\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"</\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"version\"\n              }), \">\"]\n            }), \"\\n\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"</\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"dependency\"\n              }), \">\"]\n            }), \"\\n\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"<\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"dependency\"\n              }), \">\"]\n            }), \"\\n  \", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"<\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"groupId\"\n              }), \">\"]\n            }), \"org.hsqldb\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"</\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"groupId\"\n              }), \">\"]\n            }), \"\\n  \", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"<\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"artifactId\"\n              }), \">\"]\n            }), \"hsqldb\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"</\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"artifactId\"\n              }), \">\"]\n            }), \"\\n  \", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"<\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"version\"\n              }), \">\"]\n            }), \"2.3.3\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"</\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"version\"\n              }), \">\"]\n            }), \"\\n\", _jsxs(_components.span, {\n              className: \"hljs-tag\",\n              children: [\"</\", _jsx(_components.span, {\n                className: \"hljs-name\",\n                children: \"dependency\"\n              }), \">\"]\n            }), \"\\n\"]\n          })\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The first de­pen­dency pro­vides the vertx-​jdbc-client, while the sec­ond one pro­vide the HSQL JDBC dri­ver. If you want to use an­other data­base, change this de­pen­dency. You will also need to change the JDBC url and JDBC dri­ver class name later.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"initializing-the-jdbc-client\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#initializing-the-jdbc-client\"\n        }), \"Initializing the JDBC client\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now that we have added these de­pen­den­cies, it’s time to cre­ate our JDBC client:\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the \", _jsx(_components.code, {\n          children: \"MyFirstVerticle\"\n        }), \" class, de­clare a new field \", _jsx(_components.code, {\n          children: \"JDBCClient jdbc;\"\n        }), \", and add the fol­low­ing line at the be­gin­ning of the \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"jdbc = JDBCClient.createShared(vertx, config(), \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"My-Whisky-Collection\\\"\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This cre­ates an in­stance of JDBC client, con­fig­ured with the con­fig­u­ra­tion pro­vided to the ver­ti­cle. To work cor­rectly this con­fig­u­ra­tion needs to pro­vide:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.em, {\n            children: \"url\"\n          }), \" - the JDBC url such as \", _jsx(_components.code, {\n            children: \"jdbc:hsqldb:mem:db?shutdown=true\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.em, {\n            children: \"dri­ver_class\"\n          }), \" - the JDBC dri­ver class such as \", _jsx(_components.code, {\n            children: \"org.hsqldb.jdbcDriver\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ok, we have the client, we need a con­nec­tion to the data­base. This is achieved using the \", _jsx(_components.code, {\n          children: \"jdbc.getConnection\"\n        }), \" that take a \", _jsx(_components.code, {\n          children: \"Handler<AsyncResult<SQLConnection>>\"\n        }), \" as pa­ra­me­ter. Let’s have a deeper look to this type. It’s a \", _jsx(_components.code, {\n          children: \"Handler\"\n        }), \", so it is called when the re­sult is ready. This re­sult is an in­stance of \", _jsx(_components.code, {\n          children: \"AsyncResult<SQLConnection>\"\n        }), \". \", _jsx(_components.code, {\n          children: \"AsyncResult\"\n        }), \" is a struc­ture pro­vided by vert.x that lets us know if the op­er­a­tion was com­pleted suc­cess­fully or failed. In case of suc­cess, it pro­vides the re­sult, here an in­stance of \", _jsx(_components.code, {\n          children: \"SQLConnection\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"When you re­ceive an in­stance of \", _jsx(_components.code, {\n          children: \"AsyncResult\"\n        }), \", your code gen­er­ally looks like:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (ar.failed()) {\\n  System.err.println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"The operation has failed...: \\\"\"\n          }), \"\\n      + ar.cause().getMessage());\\n} \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Use the result:\"\n          }), \"\\n  result = ar.result();\\n }\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So, let’s go back to our \", _jsx(_components.code, {\n          children: \"SQLConnection\"\n        }), \". We need to re­trieve it, and then start the rest of the ap­pli­ca­tion. This changes how we start the ap­pli­ca­tion, as it will be­come asyn­chro­nous. So, if we di­vide our startup se­quence into small chunks it would be some­thing like:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-java\",\n          children: \"startBackend(\\n (connection) -> createSomeData(connection,\\n     (nothing) -> startWebApp(\\n         (http) -> completeStartup(http, fut)\\n     ), fut\\n ), fut);\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"with:\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"startBackend\"\n          }), \" - re­trieves a \", _jsx(_components.code, {\n            children: \"SQLConnection\"\n          }), \" and then calls the next step\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"createSomeData\"\n          }), \" - ini­tial­izes the data­base and in­serts some data. When done, it calls the next step\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"startWebApp\"\n          }), \" - starts our web ap­pli­ca­tion\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"completeStartup\"\n          }), \" - fi­nal­izes our start se­quence\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"fut\"\n        }), \" is the com­ple­tion fu­ture passed by vert.x that let us re­port when we are started, or if an issue has been en­coun­tered while start­ing.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s have a look to \", _jsx(_components.code, {\n          children: \"startBackend\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"startBackend\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Handler<AsyncResult<SQLConnection>> next, Future<Void> fut)\"\n          }), \" {\\n  jdbc.getConnection(ar -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (ar.failed()) {\\n      fut.fail(ar.cause());\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n      next.handle(Future.succeededFuture(ar.result()));\\n    }\\n  });\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This method re­trieves a \", _jsx(_components.code, {\n          children: \"SQLConnection\"\n        }), \", check whether this op­er­a­tion suc­ceeded. If so, it calls the next step. In case of fail­ure, it re­ports it.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The other meth­ods fol­low the same pat­tern: 1) check if the last op­er­a­tion has suc­ceeded, 2) do the task, 3) call the next step.\"\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"a-bit-of-sql\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#a-bit-of-sql\"\n        }), \"A bit of SQL…\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Our client is ready, let’s now write some SQL state­ments. Let’s start by the \", _jsx(_components.code, {\n          children: \"createSomeData\"\n        }), \" method that is part of the startup se­quence:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createSomeData\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(AsyncResult<SQLConnection> result,\\n    Handler<AsyncResult<Void>> next, Future<Void> fut)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (result.failed()) {\\n      fut.fail(result.cause());\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n      \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"SQLConnection\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"connection\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" result.result();\\n      connection.execute(\\n          \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"CREATE TABLE IF NOT EXISTS Whisky (id INTEGER IDENTITY, name varchar(100), \\\"\"\n          }), \" +\\n          \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"origin varchar(100))\\\"\"\n          }), \",\\n          ar -> {\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (ar.failed()) {\\n              fut.fail(ar.cause());\\n              connection.close();\\n              \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n            }\\n            connection.query(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"SELECT * FROM Whisky\\\"\"\n          }), \", select -> {\\n              \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (select.failed()) {\\n                fut.fail(ar.cause());\\n                connection.close();\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n              }\\n              \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (select.result().getNumRows() == \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \") {\\n                insert(\\n                    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Whisky\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Bowmore 15 Years Laimrig\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Scotland, Islay\\\"\"\n          }), \"),\\n                    connection,\\n                    (v) -> insert(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Whisky\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Talisker 57° North\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Scotland, Island\\\"\"\n          }), \"),\\n                        connection,\\n                        (r) -> {\\n                          next.handle(Future.<Void>succeededFuture());\\n                          connection.close();\\n                        }));\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n              } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n                next.handle(Future.<Void>succeededFuture());\\n                connection.close();\\n              }\\n            });\\n          });\\n    }\\n  }\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This method checks that the \", _jsx(_components.code, {\n          children: \"SQLConnection\"\n        }), \" is avail­able and then start ex­e­cut­ing some SQL state­ments. First, it cre­ates the ta­bles if there are not there yet. As you can see, the method called is struc­tured as fol­lows:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-java\",\n          children: \"connection.execute(\\n    SQL statement,\\n    handler called when the statement has been executed\\n)\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The han­dler re­ceives an \", _jsx(_components.code, {\n          children: \"AsyncResult<Void>\"\n        }), \", \", _jsx(_components.em, {\n          children: \"i.e.\"\n        }), \" a no­ti­fi­ca­tion of the com­ple­tion with­out an ac­tual re­sult.\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"Closing connection\",\n        children: _jsx(_components.p, {\n          children: \"Don’t for­get to close the SQL con­nec­tion when you are done. The con­nec­tion will be given back to the con­nec­tion pool and be reused.\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the code of this han­dler, we check whether or not the state­ment has been ex­e­cuted cor­rectly, and if so we check to see if the table al­ready con­tains some data, if not, it in­serts data using the \", _jsx(_components.code, {\n          children: \"insert\"\n        }), \" method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"insert\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Whisky whisky, SQLConnection connection, Handler<AsyncResult<Whisky>> next)\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"sql\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"INSERT INTO Whisky (name, origin) VALUES ?, ?\\\"\"\n          }), \";\\n  connection.updateWithParams(sql,\\n      \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonArray\"\n          }), \"().add(whisky.getName()).add(whisky.getOrigin()),\\n      (ar) -> {\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (ar.failed()) {\\n          next.handle(Future.failedFuture(ar.cause()));\\n          \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n        }\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"UpdateResult\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"result\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ar.result();\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Build a new whisky instance with the generated id.\"\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"w\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Whisky\"\n          }), \"(result.getKeys().getInteger(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"), whisky.getName(), whisky.getOrigin());\\n        next.handle(Future.succeededFuture(w));\\n      });\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This method uses the \", _jsx(_components.code, {\n          children: \"updateWithParams\"\n        }), \" method with an \", _jsx(_components.em, {\n          children: \"IN­SERT\"\n        }), \" state­ment, and pass val­ues. This ap­proach avoids SQL in­jec­tion. Once the the state­ment has been ex­e­cuted, we cre­ates a new \", _jsx(_components.code, {\n          children: \"Whisky\"\n        }), \" ob­ject with the cre­ated (auto-​generated) id.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"some-rest-with-a-pinch-of-sql\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#some-rest-with-a-pinch-of-sql\"\n        }), \"Some REST with a pinch of SQL\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The method de­scribed  above is part of our start se­quence. But what about the method in­voked by our REST API. Let’s have a look to the \", _jsx(_components.code, {\n          children: \"getAll\"\n        }), \" method. This method is called by the web front-​end to re­trieve all stored prod­ucts:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getAll\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext routingContext)\"\n          }), \" {\\n    jdbc.getConnection(ar -> {\\n      \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"SQLConnection\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"connection\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ar.result();\\n      connection.query(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"SELECT * FROM Whisky\\\"\"\n          }), \", result -> {\\n        List<Whisky> whiskies = result.result().getRows().stream().map(Whisky::\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \").collect(Collectors.toList());\\n        routingContext.response()\\n            .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json; charset=utf-8\\\"\"\n          }), \")\\n            .end(Json.encodePrettily(whiskies));\\n        connection.close(); \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Close the connection\\t\\t\"\n          }), \"\\n      });\\n    });\\n  }\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This method gets a \", _jsx(_components.code, {\n          children: \"SQLConnection\"\n        }), \", and then issue a query. Once the re­sult has been re­trieved it writes the HTTP re­sponse as be­fore. The \", _jsx(_components.code, {\n          children: \"getOne\"\n        }), \", \", _jsx(_components.code, {\n          children: \"deleteOne\"\n        }), \", \", _jsx(_components.code, {\n          children: \"updateOne\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"addOne\"\n        }), \" meth­ods fol­low the same pat­tern. No­tice that the con­nec­tion can be closed after the re­sponse has been writ­ten.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s have a look to the re­sult pro­vided to the han­dler passed to the \", _jsx(_components.code, {\n          children: \"query\"\n        }), \" method. It gets a \", _jsx(_components.code, {\n          children: \"ResultSet\"\n        }), \", which con­tains the query re­sult. Each row is a \", _jsx(_components.code, {\n          children: \"JsonObject\"\n        }), \", so if your data ob­ject has a con­struc­tor tak­ing a \", _jsx(_components.code, {\n          children: \"JsonObject\"\n        }), \" as unique ar­gu­ment, cre­at­ing there ob­jects is straight­for­ward.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"test-test-and-test-again\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#test-test-and-test-again\"\n        }), \"Test, test, and test again\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We need to slightly up­date our tests to con­fig­ure the \", _jsx(_components.code, {\n          children: \"JDBCClient\"\n        }), \". In the \", _jsx(_components.code, {\n          children: \"MyFirstVertilceTest\"\n        }), \" class, change the \", _jsx(_components.code, {\n          children: \"DeploymentOption\"\n        }), \" ob­ject cre­ated in the \", _jsx(_components.code, {\n          children: \"setUp\"\n        }), \" method to be:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"DeploymentOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"DeploymentOptions\"\n          }), \"()\\n    .setConfig(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"()\\n        .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", port)\\n        .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"url\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"jdbc:hsqldb:mem:test?shutdown=true\\\"\"\n          }), \")\\n        .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"driver_class\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"org.hsqldb.jdbcDriver\\\"\"\n          }), \")\\n    );\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In ad­di­tion to the \", _jsx(_components.code, {\n          children: \"http.port\"\n        }), \", we also put the JDBC url and the class of the JDBC dri­ver. We use an in-​memory data­base for tests.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The same mod­i­fi­ca­tion needs to be done in the \", _jsx(_components.code, {\n          children: \"src/test/resources/my-it-config.json\"\n        }), \" file:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"{\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"${http.port}\"\n          }), \",\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"url\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"jdbc:hsqldb:mem:it-test?shutdown=true\\\"\"\n          }), \",\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"driver_class\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"org.hsqldb.jdbcDriver\\\"\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"src/main/conf/my-application-conf.json\"\n        }), \" file also needs to be up­dated, not for the tests, but to run the ap­pli­ca­tion:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-json\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"http.port\\\"\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8082\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"url\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"jdbc:hsqldb:file:db/whiskies\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"driver_class\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"org.hsqldb.jdbcDriver\\\"\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The JDBC url is a bit dif­fer­ent in this last file, as we store the data­base on the file sys­tem.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"show-time\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#show-time\"\n        }), \"Show time!\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s now build our ap­pli­ca­tion:\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"mvn clean package\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As we didn’t change the API (nei­ther the pub­lic java one nor the REST), test should run smoothly.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then launch the ap­pli­ca­tion with:\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json \"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Open your browser to \", _jsx(_components.code, {\n          children: \"http://localhost:8082/assets/index.html\"\n        }), \", and you should see the ap­pli­ca­tion using the data­base. This time the prod­ucts are stored in a data­base per­sisted on the file sys­tem. So, if we stop and restart the ap­pli­ca­tion, the data is re­stored.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"conclusion\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#conclusion\"\n        }), \"Conclusion\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this post, we saw how you can use JDBC data­base with vert.x, and thus with­out too much bur­den. You may have been sur­prised by the asyn­chro­nous de­vel­op­ment model, but once you start using it, it’s hard to come back.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the \", _jsx(Link, {\n          href: \"/blog/combine-vert-x-and-mongo-to-build-a-giant/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"next post\"\n          })\n        }), \", we see how the same ap­pli­ca­tion can use Mon­goDB in­stead of HSQL.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Stay tuned, and happy cod­ing!\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x ES6 back to the future","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"On October 21th, 2015 we all rejoiced with the return from the past of Marty McFly with his flying car and so on, however in the Vert.x world we were quite sad about our rather old JavaScript support."},"date":"2015-11-25","slug":"vert-x-es6-back-to-the-future"},"nextPost":{"meta":{"title":"Vert.x 3.1.0 is released!","category":"releases","authors":[{"name":"Tim Fox","github_id":"purplefox"}],"summary":"I'm pleased to announce the release of Vert.x 3.1!"},"date":"2015-10-08","slug":"vert-x-3-1-0-is-released"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"}]},"__N_SSG":true}