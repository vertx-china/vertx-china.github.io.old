{"pageProps":{"slug":"4.1.5/vertx-core/groovy","title":"Vert.x for Groovy","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_verticles\">Verticles</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_writing_verticles\">Writing Verticles</a></li>\n<li><a href=\"#_accessing_the_vertx_instance_from_a_verticle\">Accessing the vertx instance from a verticle</a></li>\n<li><a href=\"#_asynchronous_verticle_start_and_stop\">Asynchronous Verticle start and stop</a></li>\n<li><a href=\"#_passing_configuration_to_a_verticle\">Passing configuration to a verticle</a></li>\n<li><a href=\"#_accessing_environment_variables_in_a_verticle\">Accessing environment variables in a Verticle</a></li>\n</ul>\n</li>\n<li><a href=\"#_json\">JSON</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_object_conversion\">Data object conversion</a></li>\n<li><a href=\"#_json_objects\">JSON objects</a></li>\n<li><a href=\"#_json_arrays\">JSON arrays</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x for Groovy</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are using Maven or Gradle, add the following dependency to the <em>dependencies</em> section of your\nproject descriptor to access the Vert.x Core API and enable the Groovy support:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-lang-groovy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&quot;io.vertx:vertx-core:4.1.5&quot;</span>\ncompile <span class=\"hljs-string\">&quot;io.vertx:vertx-lang-groovy:4.1.5&quot;</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_verticles\"><a class=\"anchor\" href=\"#_verticles\"></a>Verticles</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_writing_verticles\"><a class=\"anchor\" href=\"#_writing_verticles\"></a>Writing Verticles</h3>\n<div class=\"paragraph\">\n<p>There are two alternatives to create Verticles in Groovy:</p>\n</div>\n<div class=\"paragraph\">\n<p>a plain Groovy script\na Groovy class implementing the <code><a href=\"../../apidocs/io/vertx/core/Verticle.html\">Verticle</a></code> interface or extending the <code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html\">AbstractVerticle</a></code> class</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, the next snippet is a valid Groovy verticle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">println <span class=\"hljs-string\">&quot;Hello from vertx&quot;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>On deployment, by default, Vert.x executes the script. Optionally, your script can provide the <code>startVertx</code> and\n<code>stopVertx</code> methods. Theses methods are called respectively when the verticle starts and stops:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">void</span> vertxStart() {\nprintln <span class=\"hljs-string\">&quot;starting&quot;</span>\n}\n\n<span class=\"hljs-keyword\">void</span> vertxStop() {\nprintln <span class=\"hljs-string\">&quot;stopping&quot;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Such methods are synchronous, after the method is called the verticle is considered started or stopped.</p>\n</div>\n<div class=\"paragraph\">\n<p>Alternatively, you can extend the <code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html\">AbstractVerticle</a></code> class and implement the <code>start</code> and\n<code>stop</code> methods:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorldHttpVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> {</span>\n\n<span class=\"hljs-keyword\">void</span> start() {\n println(<span class=\"hljs-string\">&quot;Starting&quot;</span>)\n}\n\n<span class=\"hljs-keyword\">void</span> stop() {\n  println(<span class=\"hljs-string\">&quot;Stopping&quot;</span>)\n}\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When Vert.x deploys the verticle it will call the <code>start</code> method, and when the method has completed the\nverticle will be considered started.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also optionally override the <code>stop</code> method. This will be called by Vert.x when the verticle is undeployed\nand when the method has completed the verticle will be considered stopped.</p>\n</div>\n<div class=\"paragraph\">\n<p>Like before such methods are synchronous, after the method is called the verticle is considered started or stopped.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_accessing_the_vertx_instance_from_a_verticle\"><a class=\"anchor\" href=\"#_accessing_the_vertx_instance_from_a_verticle\"></a>Accessing the vertx instance from a verticle</h3>\n<div class=\"paragraph\">\n<p>Regardless the way you use to implement your verticle, you access the vert.x instance using the <code>vertx</code> variable /\nfield.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Access to the vert.x instance in a Groovy script</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;another_verticle.groovy&quot;</span>)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Access to the vert.x instance in a Groovy class</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorldHttpVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> {</span>\n\n  <span class=\"hljs-keyword\">void</span> start() {\n    vertx.deployVerticle(<span class=\"hljs-string\">&quot;another_verticle.groovy&quot;</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_asynchronous_verticle_start_and_stop\"><a class=\"anchor\" href=\"#_asynchronous_verticle_start_and_stop\"></a>Asynchronous Verticle start and stop</h3>\n<div class=\"paragraph\">\n<p>Sometimes you want to do something in your verticle start-up which takes some time and you don&#8217;t want the verticle to\nbe considered deployed until that happens. For example you might want to deploy other verticles in the start method.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can&#8217;t block waiting for the other verticles to deploy in your start method as that would break the Golden Rule.</p>\n</div>\n<div class=\"paragraph\">\n<p>So how can you do this?</p>\n</div>\n<div class=\"paragraph\">\n<p>The way to do it is to implement the <strong>asynchronous</strong> start method. This version of the method takes\na <code><a href=\"../../apidocs/io/vertx/core/Promise.html\">Promise</a></code> as a parameter. When the method returns the verticle will <strong>not</strong> be considered deployed.</p>\n</div>\n<div class=\"paragraph\">\n<p>Some time later, after you&#8217;ve done everything you need to do (e.g. start other verticles), you can call complete\non the Promise (or fail) to signal that you&#8217;re done. Similarly, there is an asynchronous version of the stop method too.</p>\n</div>\n<div class=\"paragraph\">\n<p>You use this if you want to do some verticle cleanup that takes some time.</p>\n</div>\n<div class=\"paragraph\">\n<p>When your Verticle is implemented as a script, asynchronous start and stop are implemented as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.Promise\n\n<span class=\"hljs-keyword\">void</span> vertxStart(Promise&lt;Void&gt; promise) {\nprintln <span class=\"hljs-string\">&quot;starting&quot;</span>\nvertx.deployVerticle(<span class=\"hljs-string\">&quot;v.rb&quot;</span>){ res -&gt;\n  <span class=\"hljs-keyword\">if</span> (res) {\n    promise.complete()\n  } <span class=\"hljs-keyword\">else</span> {\n    promise.fail(res.cause())\n  }\n}\n}\n\n<span class=\"hljs-keyword\">void</span> vertxStop(Promise&lt;Void&gt; future) {\nprintln <span class=\"hljs-string\">&quot;stopping&quot;</span>\npromise.complete()\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nThe objects of <code><a href=\"../../apidocs/io/vertx/core/AsyncResult.html\">AsyncResult</a></code> or it&#8217;s subclasses are\ncoerced to <code><a href=\"../../apidocs/java/lang/Boolean.html\">Boolean</a></code> according to (<a href=\"http://groovy-lang.org/semantics.html#Groovy-Truth)\">Groovy-Truth</a>,\nso that an instance of <code><a href=\"../../apidocs/io/vertx/core/AsyncResult.html\">AsyncResult</a></code> or <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code>\nevaluates to <code>true</code> if succeeded, or to <code>false</code> otherwise.\nThat allowes to write more readable code like <code>res ? doSuccess() : doFail()</code>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>If your verticle extends <code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html\">AbstractVerticle</a></code>, you override the\n<code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html#start-io.vertx.core.Promise-\">start</a></code> and\n<code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html#stop-io.vertx.core.Promise-\">stop</a></code> methods:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.Future\n<span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorldHttpVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> {</span>\n<span class=\"hljs-keyword\">void</span> start(Promise&lt;Void&gt; future) {\n  println <span class=\"hljs-string\">&quot;starting&quot;</span>\n  vertx.deployVerticle(<span class=\"hljs-string\">&quot;v.rb&quot;</span>,\n  { res -&gt;\n    <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n      future.complete()\n    } <span class=\"hljs-keyword\">else</span> {\n      future.fail(res.cause())\n    }\n  })\n }\n\n<span class=\"hljs-keyword\">void</span> stop(Promise&lt;Void&gt; future) {\n println(<span class=\"hljs-string\">&quot;stopping&quot;</span>)\n future.complete()\n}\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nYou don&#8217;t need to manually undeploy child verticles started by a verticle, in the verticle&#8217;s stop method.\nVert.x will automatically undeploy any child verticles when the parent is undeployed.\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_passing_configuration_to_a_verticle\"><a class=\"anchor\" href=\"#_passing_configuration_to_a_verticle\"></a>Passing configuration to a verticle</h3>\n<div class=\"paragraph\">\n<p>Configuration in the form of Map can be passed to a verticle at deployment time:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Groovy\" data-lang=\"Groovy\"><span class=\"hljs-keyword\">def</span> config = [\n<span class=\"hljs-attr\">name:</span><span class=\"hljs-string\">&quot;tim&quot;</span>,\n<span class=\"hljs-attr\">directory:</span><span class=\"hljs-string\">&quot;/blah&quot;</span>\n]\n<span class=\"hljs-keyword\">def</span> options = [ <span class=\"hljs-string\">&quot;config&quot;</span> : config ];\nvertx.deployVerticle(<span class=\"hljs-string\">&quot;com.mycompany.MyOrderProcessorVerticle&quot;</span>, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This configuration is then available via the <code><a href=\"../../apidocs/io/vertx/core/Context.html\">Context</a></code>, The configuration is returned as a Map\nobject so you can retrieve data as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Groovy\" data-lang=\"Groovy\">println vertx.getOrCreateContext().config()[<span class=\"hljs-string\">&quot;name&quot;</span>]</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nThe configuration can also be a <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> object.\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_accessing_environment_variables_in_a_verticle\"><a class=\"anchor\" href=\"#_accessing_environment_variables_in_a_verticle\"></a>Accessing environment variables in a Verticle</h3>\n<div class=\"paragraph\">\n<p>Environment variables and system properties are accessible using the Java API:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Groovy\" data-lang=\"Groovy\">println System.getProperty(<span class=\"hljs-string\">&quot;foo&quot;</span>)\nprintln System.getenv(<span class=\"hljs-string\">&quot;HOME&quot;</span>)</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_json\"><a class=\"anchor\" href=\"#_json\"></a>JSON</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To manipulate JSON object, Vert.x proposes its own implementation of <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> and\n<code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html\">JsonArray</a></code>. This is because, unlike some other languages, Java does not have first class\nsupport for <a href=\"http://json.org/\">JSON</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>When developping a vert.x application with Groovy, you can rely on these two classes, or use the\n(<a href=\"http://www.groovy-lang.org/json.html)\">JSON support from Groovy</a>. This section explains how to use the Vert.x\nclasses.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nMost vert.x methods taking a JSON object as argument in their Java version, take a map instead.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_object_conversion\"><a class=\"anchor\" href=\"#_data_object_conversion\"></a>Data object conversion</h3>\n<div class=\"paragraph\">\n<p>Class annotated with <code>@DataObject</code> used in Vert.x API can be converted back and forth to maps thanks to the\nGroovy <code>as</code> operator.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Groovy\" data-lang=\"Groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.http.HttpServerOptions\n<span class=\"hljs-keyword\">import</span> io.vertx.core.net.PemKeyCertOptions\n\n<span class=\"hljs-comment\">// Instead of this</span>\n<span class=\"hljs-keyword\">def</span> server = vertx.createHttpServer(<span class=\"hljs-keyword\">new</span> HttpServerOptions()\n   .setUseAlpn(<span class=\"hljs-literal\">true</span>)\n   .setSsl(<span class=\"hljs-literal\">true</span>)\n   .setKeyStoreOptions(<span class=\"hljs-keyword\">new</span> JksOptions().setPath(<span class=\"hljs-string\">&quot;/path/to/my/keystore&quot;</span>)))\n\n<span class=\"hljs-comment\">// You can convert a map literal to HttpServerOptions</span>\nserver = vertx.createHttpServer([\n   <span class=\"hljs-string\">&quot;userAlpn&quot;</span>:        <span class=\"hljs-literal\">true</span>,\n   <span class=\"hljs-string\">&quot;ssl&quot;</span>:             <span class=\"hljs-literal\">true</span>,\n   <span class=\"hljs-string\">&quot;keyStoreOptions&quot;</span>: [<span class=\"hljs-string\">&quot;path&quot;</span>:<span class=\"hljs-string\">&quot;/path/to/my/keystore&quot;</span>]\n   ] <span class=\"hljs-keyword\">as</span> HttpServerOptions)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_json_objects\"><a class=\"anchor\" href=\"#_json_objects\"></a>JSON objects</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> class represents JSON objects.</p>\n</div>\n<div class=\"paragraph\">\n<p>A JSON object is basically just a map which has string keys and values can be of one of the JSON supported types\n(string, number, boolean).</p>\n</div>\n<div class=\"paragraph\">\n<p>JSON objects also support <code>null</code> values.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_creating_json_objects\"><a class=\"anchor\" href=\"#_creating_json_objects\"></a>Creating JSON objects</h4>\n<div class=\"paragraph\">\n<p>Empty JSON objects can be created with the default constructor.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can create a JSON object from a string or g-string JSON representation as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> object = <span class=\"hljs-keyword\">new</span> JsonObject(<span class=\"hljs-string\">&quot;{\\&quot;foo\\&quot;:\\&quot;bar\\&quot;}&quot;</span>)\n<span class=\"hljs-keyword\">def</span> object2 = <span class=\"hljs-keyword\">new</span> JsonObject(<span class=\"hljs-string\">&quot;&quot;&quot;\n{\n&quot;foo&quot;: &quot;bar&quot;\n}\n&quot;&quot;&quot;</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In Groovy it&#8217;s also convenient to create a JSON object from a map:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> map = [ <span class=\"hljs-string\">&quot;foo&quot;</span> : <span class=\"hljs-string\">&quot;bar&quot;</span> ]\n<span class=\"hljs-keyword\">def</span> json = <span class=\"hljs-keyword\">new</span> JsonObject(map)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Nested maps are transformed to nested JSON objects.</p>\n</div>\n<div class=\"paragraph\">\n<p>It can be achieved using a Groovy cast as well:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> map = [ <span class=\"hljs-string\">&quot;foo&quot;</span> : <span class=\"hljs-string\">&quot;bar&quot;</span> ]\n<span class=\"hljs-keyword\">def</span> json = map <span class=\"hljs-keyword\">as</span> JsonObject</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_putting_entries_into_a_json_object\"><a class=\"anchor\" href=\"#_putting_entries_into_a_json_object\"></a>Putting entries into a JSON object</h4>\n<div class=\"paragraph\">\n<p>Use the <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#put-java.lang.String-java.lang.Object-\">put</a></code> methods to put values into the JSON object.</p>\n</div>\n<div class=\"paragraph\">\n<p>The method invocations can be chained because of the fluent API:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> object = <span class=\"hljs-keyword\">new</span> JsonObject()\nobject.put(<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>).put(<span class=\"hljs-string\">&quot;num&quot;</span>, <span class=\"hljs-number\">123</span>).put(<span class=\"hljs-string\">&quot;mybool&quot;</span>, <span class=\"hljs-literal\">true</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The Groovy subscript operator works too:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> object = <span class=\"hljs-keyword\">new</span> JsonObject()\nobject[<span class=\"hljs-string\">&quot;foo&quot;</span>] = <span class=\"hljs-string\">&quot;bar&quot;</span>\nobject[<span class=\"hljs-string\">&quot;num&quot;</span>] = <span class=\"hljs-number\">123</span>\nobject[<span class=\"hljs-string\">&quot;mybool&quot;</span>] = <span class=\"hljs-literal\">true</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_getting_values_from_a_json_object\"><a class=\"anchor\" href=\"#_getting_values_from_a_json_object\"></a>Getting values from a JSON object</h4>\n<div class=\"paragraph\">\n<p>You get values from a JSON object using the <code>getXXX</code> methods, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">def val1 = jsonObject.getString(<span class=\"hljs-string\">&quot;some-key&quot;</span>)\ndef val2 = jsonObject.getInteger(<span class=\"hljs-string\">&quot;some-other-key&quot;</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The Groovy subscript operator works too:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> val1 = jsonObject[<span class=\"hljs-string\">&quot;some-key&quot;</span>]\n<span class=\"hljs-keyword\">def</span> val2 = jsonObject[<span class=\"hljs-string\">&quot;some-other-key&quot;</span>]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_encoding_the_json_object_to_a_string\"><a class=\"anchor\" href=\"#_encoding_the_json_object_to_a_string\"></a>Encoding the JSON object to a String</h4>\n<div class=\"paragraph\">\n<p>You use <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#encode--\">encode</a></code> to encode the object to a String form. There is also a\n<code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#encodePrettily--\">encodePrettily</a></code> that makes the output pretty (understand multi-line and\nindented).</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_json_arrays\"><a class=\"anchor\" href=\"#_json_arrays\"></a>JSON arrays</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html\">JsonArray</a></code> class represents JSON arrays.</p>\n</div>\n<div class=\"paragraph\">\n<p>A JSON array is a sequence of values (string, number, boolean).</p>\n</div>\n<div class=\"paragraph\">\n<p>JSON arrays can also contain <code>null</code> values.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_creating_json_arrays\"><a class=\"anchor\" href=\"#_creating_json_arrays\"></a>Creating JSON arrays</h4>\n<div class=\"paragraph\">\n<p>Empty JSON arrays can be created with the default constructor.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can create a JSON array from a string JSON representation or a list as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> object = <span class=\"hljs-keyword\">new</span> JsonArray(<span class=\"hljs-string\">&quot;[\\&quot;foo\\&quot;, \\&quot;bar\\&quot;]&quot;</span>)\n<span class=\"hljs-keyword\">def</span> object2 = <span class=\"hljs-keyword\">new</span> JsonObject(<span class=\"hljs-string\">&quot;&quot;&quot;\n[\n&quot;foo&quot;, &quot;bar&quot;\n]\n&quot;&quot;&quot;</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In Groovy it&#8217;s also convenient to create a JSON array from a list:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> list = [ <span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span> ]\n<span class=\"hljs-keyword\">def</span> json = <span class=\"hljs-keyword\">new</span> JsonArray(list)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Nested maps are transformed to nested JSON objects.</p>\n</div>\n<div class=\"paragraph\">\n<p>It can be achieved using a Groovy cast as well:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> list = [ <span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span> ]\n<span class=\"hljs-keyword\">def</span> json = map <span class=\"hljs-keyword\">as</span> JsonArray</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_adding_entries_into_a_json_array\"><a class=\"anchor\" href=\"#_adding_entries_into_a_json_array\"></a>Adding entries into a JSON array</h4>\n<div class=\"paragraph\">\n<p>You add entries to a JSON array using the <code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html#add-java.lang.Object-\">add</a></code> methods.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> array = <span class=\"hljs-keyword\">new</span> JsonArray()\narray.add(<span class=\"hljs-string\">&quot;foo&quot;</span>).add(<span class=\"hljs-number\">123</span>).add(<span class=\"hljs-literal\">false</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The left shift operator can be used as well:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> array = <span class=\"hljs-keyword\">new</span> JsonArray()\narray &lt;&lt; <span class=\"hljs-string\">&quot;foo&quot;</span>\narray &lt;&lt; <span class=\"hljs-number\">123</span>\narray &lt;&lt; <span class=\"hljs-literal\">false</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_getting_values_from_a_json_array\"><a class=\"anchor\" href=\"#_getting_values_from_a_json_array\"></a>Getting values from a JSON array</h4>\n<div class=\"paragraph\">\n<p>You get values from a JSON array using the <code>getXXX</code> methods, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> val = array.getString(<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-keyword\">def</span> intVal = array.getInteger(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">def</span> boolVal = array.getBoolean(<span class=\"hljs-number\">2</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The Groovy subscript operator works too:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> val = array[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-keyword\">def</span> intVal = array[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-keyword\">def</span> boolVal = array[<span class=\"hljs-number\">2</span>]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_encoding_the_json_array_to_a_string\"><a class=\"anchor\" href=\"#_encoding_the_json_array_to_a_string\"></a>Encoding the JSON array to a String</h4>\n<div class=\"paragraph\">\n<p>You use <code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html#encode--\">encode</a></code> to encode the array to a String form. There is also a\n<code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#encodePrettily--\">encodePrettily</a></code> that makes the output pretty (understand multi-line and\nindented).</p>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"4.1.5"},"__N_SSG":true}