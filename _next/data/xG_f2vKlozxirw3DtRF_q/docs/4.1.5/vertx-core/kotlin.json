{"pageProps":{"slug":"4.1.5/vertx-core/kotlin","title":"Vert.x for Kotlin","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_verticles\">Verticles</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_writing_verticles\">Writing Verticles</a></li>\n</ul>\n</li>\n<li><a href=\"#_data_objects_builders\">Data Objects builders</a></li>\n<li><a href=\"#_json\">JSON</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_builders\">Builders</a></li>\n<li><a href=\"#_postscript_operator_overloading\">Postscript operator overloading</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x for Kotlin</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are using Maven or Gradle, add the following dependency to the <em>dependencies</em> section of your\nproject descriptor to access the Vert.x Core API and enable the Kotlin support:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-lang-kotlin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&quot;io.vertx:vertx-core:4.1.5&quot;</span>\ncompile <span class=\"hljs-string\">&quot;io.vertx:vertx-lang-kotlin:4.1.5&quot;</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_verticles\"><a class=\"anchor\" href=\"#_verticles\"></a>Verticles</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_writing_verticles\"><a class=\"anchor\" href=\"#_writing_verticles\"></a>Writing Verticles</h3>\n<div class=\"paragraph\">\n<p>Writing a Verticle with Kotlin is achieved the same way you write a Java Verticle by\nextending the <code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html\">AbstractVerticle</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example verticle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyVerticle</span> : <span class=\"hljs-type\">AbstractVerticle</span></span>() {\n\n <span class=\"hljs-comment\">// Called when verticle is deployed</span>\n <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span> {\n }\n\n <span class=\"hljs-comment\">// Optional - called when verticle is undeployed</span>\n <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">()</span></span> {\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Please refer to the Java documentation.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_data_objects_builders\"><a class=\"anchor\" href=\"#_data_objects_builders\"></a>Data Objects builders</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Data Objects play an essential role in the Vert.x stack (a Data Object is a type that can be converted to/from JSON).</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, Vert.x modules often use Data Objects for the configuration of servers:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-keyword\">val</span> classic: HttpServerOptions = HttpServerOptions()\n .setIdleTimeout(<span class=\"hljs-number\">5</span>)\n .setIdleTimeoutUnit(TimeUnit.MINUTES)\n .setLogActivity(<span class=\"hljs-literal\">true</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>While the above construct is valid, there is a more idiomatic way of configuring Data Objects.\nIn Kotlin, all Data Objects have a builder method suffixed with <code>Of</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-keyword\">val</span> options = httpServerOptionsOf(idleTimeout = <span class=\"hljs-number\">5</span>, idleTimeoutUnit = TimeUnit.MINUTES, logActivity = <span class=\"hljs-literal\">true</span>)</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_json\"><a class=\"anchor\" href=\"#_json\"></a>JSON</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Unlike some other languages, Java does not have first class support for <a href=\"http://json.org/\">JSON</a> so we provide\ntwo classes to make handling JSON in your Vert.x applications a bit easier.</p>\n</div>\n<div class=\"paragraph\">\n<p>Use the <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> class to represent JSON objects and the <code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html\">JsonArray</a></code>\nclass to represent JSON arrays, you can refer to the Java documentation for more details.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_builders\"><a class=\"anchor\" href=\"#_builders\"></a>Builders</h3>\n<div class=\"paragraph\">\n<p>Builders are provided to provide a more fluent JSON construction:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-comment\">// The json builder declares a JSON structure</span>\n<span class=\"hljs-keyword\">val</span> result = json {\n\n <span class=\"hljs-comment\">// in this structure the obj function can be used</span>\n\n <span class=\"hljs-comment\">// takes a vararg of Kotlin pairs</span>\n obj(\n   <span class=\"hljs-string\">&quot;key_1&quot;</span> to <span class=\"hljs-number\">1</span>,\n   <span class=\"hljs-string\">&quot;key_2&quot;</span> to <span class=\"hljs-number\">2</span>,\n   <span class=\"hljs-string\">&quot;key_3&quot;</span> to <span class=\"hljs-number\">3</span>\n )\n\n <span class=\"hljs-comment\">// or an iterable of Kotlin pairs</span>\n obj((<span class=\"hljs-number\">1.</span><span class=\"hljs-number\">.3</span>).map { <span class=\"hljs-string\">&quot;key_<span class=\"hljs-variable\">$it</span>&quot;</span> to it })\n\n <span class=\"hljs-comment\">// or a Map&lt;String, Any?&gt;</span>\n obj(someMap)\n\n <span class=\"hljs-comment\">// apply function on object receiver</span>\n obj {\n   <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-number\">.3</span>) {\n     put(<span class=\"hljs-string\">&quot;key_<span class=\"hljs-variable\">$i</span>&quot;</span>, i)\n   }\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also build JSON arrays:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-comment\">// The json builder declares a JSON structure</span>\n<span class=\"hljs-keyword\">val</span> result = json {\n\n <span class=\"hljs-comment\">// in this structure the array function can be used</span>\n\n <span class=\"hljs-comment\">// takes a vararg of values</span>\n array(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>)\n\n <span class=\"hljs-comment\">// or an iterable of values</span>\n array((<span class=\"hljs-number\">1.</span><span class=\"hljs-number\">.3</span>).map { <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$it</span>&quot;</span> })\n\n <span class=\"hljs-comment\">// apply function on array receiver</span>\n array {\n   <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-number\">.3</span>) {\n     add(<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$i</span>&quot;</span>)\n   }\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Of course it is possible to mix objects and arrays</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-comment\">// The json builder declares a JSON structure</span>\n<span class=\"hljs-keyword\">val</span> result = json {\n\n <span class=\"hljs-string\">&quot;firstName&quot;</span> to <span class=\"hljs-string\">&quot;Dale&quot;</span>,\n <span class=\"hljs-string\">&quot;lastName&quot;</span> to <span class=\"hljs-string\">&quot;Cooper&quot;</span>,\n <span class=\"hljs-string\">&quot;age&quot;</span> to <span class=\"hljs-number\">64</span>,\n <span class=\"hljs-string\">&quot;names&quot;</span> to array(<span class=\"hljs-string\">&quot;Dale&quot;</span>, <span class=\"hljs-string\">&quot;Bartholomew&quot;</span>)\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_postscript_operator_overloading\"><a class=\"anchor\" href=\"#_postscript_operator_overloading\"></a>Postscript operator overloading</h3>\n<div class=\"paragraph\">\n<p>The Kotlin postscript operator is overloaded for JSON object and array:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">print(someObject[<span class=\"hljs-string\">&quot;firstName&quot;</span>]);\nprint(someArray[<span class=\"hljs-number\">4</span>]);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"4.1.5"},"__N_SSG":true}