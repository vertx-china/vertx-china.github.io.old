{"pageProps":{"slug":"4.1.5/vertx-auth-common/java","title":"Common Authentication and Authorization","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_basic_concepts\">Basic concepts</a></li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_authorization\">Authorization</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_listing_authorizations\">Listing authorizations</a></li>\n<li><a href=\"#_the_user_principal_and_attributes\">The User Principal and Attributes</a></li>\n</ul>\n</li>\n<li><a href=\"#_creating_your_own_authentication_or_authorization_provider_implementation\">Creating your own authentication or authorization provider implementation</a></li>\n<li><a href=\"#_pseudo_random_number_generator\">Pseudo Random Number Generator</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_sharing_pseudo_random_number_generator\">Sharing Pseudo Random Number Generator</a></li>\n</ul>\n</li>\n<li><a href=\"#_working_with_keys\">Working with Keys</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_json_web_keys\">JSON Web Keys</a></li>\n</ul>\n</li>\n<li><a href=\"#_chaining_authentication_providers\">Chaining authentication providers</a></li>\n</ul>\n</div>","contents":"<h1>Common Authentication and Authorization</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This Vert.x component provides interfaces for authentication and authorization that can be used from\nyour Vert.x applications and can be backed by different providers.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x auth is also used by vertx-web to handle its authentication and authorization.</p>\n</div>\n<div class=\"paragraph\">\n<p>To use this project, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-common<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-auth-common:4.1.5&#x27;</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_basic_concepts\"><a class=\"anchor\" href=\"#_basic_concepts\"></a>Basic concepts</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>Authentication</em> means verifying the identity of a user.</p>\n</div>\n<div class=\"paragraph\">\n<p><em>Authorization</em> means verifying a user is authorized to perform a specific task</p>\n</div>\n<div class=\"paragraph\">\n<p>To support many models and keep things very flexible, all authorization operations are performed on the type\n<code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/Authorization.html\">Authorization</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In some case, an authorization might represent a permission, for example the authorization to access all printers,\nor a specific printer. In others cases, an authorization might be a role (ie: `admin', 'manager', etc.)\nIn order to provide a small set of implementation the following factories\nare available:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/RoleBasedAuthorization.html\">RoleBasedAuthorization</a></code> Role based authorization.</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/PermissionBasedAuthorization.html\">PermissionBasedAuthorization</a></code> Permission based authorization.</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/WildcardPermissionBasedAuthorization.html\">WildcardPermissionBasedAuthorization</a></code> Role based authorization matched as a wildcard.</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/AndAuthorization.html\">AndAuthorization</a></code> Logical authorization.</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/OrAuthorization.html\">OrAuthorization</a></code> Logical authorization.</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/NotAuthorization.html\">NotAuthorization</a></code> Logical authorization.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This set of authorizations represent any kind of authorization such as:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Role based authorization</p>\n</li>\n<li>\n<p>Permission based authorization</p>\n</li>\n<li>\n<p>Logical authorization (AND, OR, NOT)</p>\n</li>\n<li>\n<p>Time based authorization (ie: allow access the last 5 days of the month, from 8am till 10am, etc.)</p>\n</li>\n<li>\n<p>Context based authorization (ie: allow access if the ip address is 'xxx.xxx.xxx.xxx')</p>\n</li>\n<li>\n<p>Custom based authorization (ie: based on a script or hard-coded code specific to an application)</p>\n</li>\n<li>\n<p>etc&#8230;&#8203;</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>To find out what a particular <code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/AuthorizationProvider.html\">AuthorizationProvider</a></code> expects, consult the documentation for that auth provider.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To authenticate a user you use <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html#authenticate-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">authenticate</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The first argument is a JSON object which contains authentication information. What this actually contains depends\non the specific implementation; for a simple username/password based authentication it might contain something like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>{\n \"username\": \"tim\"\n \"password\": \"mypassword\"\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For an implementation based on JWT token or OAuth bearer tokens it might contain the token information.</p>\n</div>\n<div class=\"paragraph\">\n<p>Authentication occurs asynchronously and the result is passed to the user on the result handler that was provided in\nthe call. The async result contains an instance of <code><a href=\"../../apidocs/io/vertx/ext/auth/User.html\">User</a></code> which represents the authenticated\nuser.</p>\n</div>\n<div class=\"paragraph\">\n<p>The authentication user object has no context or information on which authorizations the object is entitled. The reason\nwhy authorization and authentication are decoupled is because, authentication and authorization are two distinguished\noperations that are not required to be performed on the same provider. A simple example would be, a user authenticating\nwith plain <code>OAuth2.0</code> can use a <code>JWT</code> authorization provider to match the token for a given authority, or any other\nscenario such as authenticating using <code>LDAP</code> and perform authorization using <code>MongoDB</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of authenticating a user using a simple username/password implementation:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject authInfo = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">&quot;username&quot;</span>, <span class=\"hljs-string\">&quot;tim&quot;</span>).put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;mypassword&quot;</span>);\n\nauthProvider.authenticate(authInfo)\n  .onSuccess(user -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;User &quot;</span> + user.principal() + <span class=\"hljs-string\">&quot; is now authenticated&quot;</span>);\n  })\n  .onFailure(Throwable::printStackTrace);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authorization\"><a class=\"anchor\" href=\"#_authorization\"></a>Authorization</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once you have an <code><a href=\"../../apidocs/io/vertx/ext/auth/User.html\">User</a></code> instance you can call <code><a href=\"../../apidocs/io/vertx/ext/auth/User.html#authorizations--\">authorizations</a></code> to get its authorizations. A newly created\nuser will contain no authorizations. You can directly add authorization on the <code><a href=\"../../apidocs/io/vertx/ext/auth/User.html\">User</a></code> itself or via an <code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/AuthorizationProvider.html\">AuthorizationProvider</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The results of all the above are provided asynchronously in the handler.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example adding authorizations via an <code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/AuthorizationProvider.html\">AuthorizationProvider</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">authorizationProvider.getAuthorizations(user)\n  .onSuccess(done -&gt; {\n  <span class=\"hljs-comment\">// cache is populated, perform query</span>\n  <span class=\"hljs-keyword\">if</span> (PermissionBasedAuthorization.create(<span class=\"hljs-string\">&quot;printer1234&quot;</span>).match(user)) {\n    System.out.println(<span class=\"hljs-string\">&quot;User has the authority&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;User does not have the authority&quot;</span>);\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And another example of authorizing in a roles based model which uses the the interface <code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/RoleBasedAuthorization.html\">RoleBasedAuthorization</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Please note, as discussed above how the authority string is interpreted is completely determined by the underlying\nimplementation and Vert.x makes no assumptions here.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_listing_authorizations\"><a class=\"anchor\" href=\"#_listing_authorizations\"></a>Listing authorizations</h3>\n<div class=\"paragraph\">\n<p>The user object holds a list of authorizations so subsequently calls should check if it has the same authorizations and it\nwill result in avoiding one more IO operation to the underlying authorization provider to load the authorizations.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to clear the list of authorizations you can use <code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/Authorizations.html#clear--\">clear</a></code>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_the_user_principal_and_attributes\"><a class=\"anchor\" href=\"#_the_user_principal_and_attributes\"></a>The User Principal and Attributes</h3>\n<div class=\"paragraph\">\n<p>You can get the Principal corresponding to the authenticated user with <code><a href=\"../../apidocs/io/vertx/ext/auth/User.html#principal--\">principal</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>What this returns depends on the underlying implementation. The principal map is the source data that was used to create\nthe user instance. The attributes are extra properties, that were <strong>not</strong> provided during the creation of the of the\ninstance but are the result of the processing of the user data. The distinction is there to ensure that processing of\nthe principal will not tamper or over write existing data.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to simplify the usage, two helper methods can be used to lookup and read values on both sources:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">if</span> (user.containsKey(<span class=\"hljs-string\">&quot;sub&quot;</span>)) {\n  <span class=\"hljs-comment\">// the check will first assert that the attributes contain</span>\n  <span class=\"hljs-comment\">// the given key and if not assert that the principal contains</span>\n  <span class=\"hljs-comment\">// the given key</span>\n\n  <span class=\"hljs-comment\">// just like the check before the get will follow the same</span>\n  <span class=\"hljs-comment\">// rules to retrieve the data, first &quot;attributes&quot; then &quot;principal&quot;</span>\n  String sub = user.get(<span class=\"hljs-string\">&quot;sub&quot;</span>);\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_your_own_authentication_or_authorization_provider_implementation\"><a class=\"anchor\" href=\"#_creating_your_own_authentication_or_authorization_provider_implementation\"></a>Creating your own authentication or authorization provider implementation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you wish to create your own auth provider you should implement the one or both of the interfaces:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/AuthorizationProvider.html\">AuthorizationProvider</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The user factory can create a <code><a href=\"../../apidocs/io/vertx/ext/auth/User.html\">User</a></code> object with the given <code>principal</code> JSON content. Optionally\na second argument <code>attributes</code> can be provided to provide extra meta data for later usage. One example are the following\nattributes:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>exp</code> - Expires at in seconds.</p>\n</li>\n<li>\n<p><code>iat</code> - Issued at in seconds.</p>\n</li>\n<li>\n<p><code>nbf</code> - Not before in seconds.</p>\n</li>\n<li>\n<p><code>leeway</code> - clock drift leeway in seconds.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>While the first 3 control how the <code><a href=\"../../apidocs/io/vertx/ext/auth/User.html#expired--\">expired</a></code> method will compute the expiration of the\nuser, the last can be used to allow clock drifting compensation while computing the expiration time.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pseudo_random_number_generator\"><a class=\"anchor\" href=\"#_pseudo_random_number_generator\"></a>Pseudo Random Number Generator</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Since Secure Random from java can block during the acquisition of entropy from the system, we provide a simple wrapper\naround it that can be used without the danger of blocking the event loop.</p>\n</div>\n<div class=\"paragraph\">\n<p>By default this PRNG uses a mixed mode, blocking for seeding, non blocking for generating. The PRNG will also reseed\nevery 5 minutes with 64bits of new entropy. However this can all be configured using the system properties:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>io.vertx.ext.auth.prng.algorithm e.g.: SHA1PRNG</p>\n</li>\n<li>\n<p>io.vertx.ext.auth.prng.seed.interval e.g.: 1000 (every second)</p>\n</li>\n<li>\n<p>io.vertx.ext.auth.prng.seed.bits e.g.: 128</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Most users should not need to configure these values unless if you notice that the performance of your application is\nbeing affected by the PRNG algorithm.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_sharing_pseudo_random_number_generator\"><a class=\"anchor\" href=\"#_sharing_pseudo_random_number_generator\"></a>Sharing Pseudo Random Number Generator</h3>\n<div class=\"paragraph\">\n<p>Since the Pseudo Random Number Generator objects are expensive in resources, they consume system entropy which is a\nscarce resource it can be wise to share the PRNG&#8217;s across all your handlers. In order to do this and to make this\navailable to all languages supported by Vert.x you should look into the <code><a href=\"../../apidocs/io/vertx/ext/auth/VertxContextPRNG.html\">VertxContextPRNG</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This interface relaxes the lifecycle management of PRNG&#8217;s for the end user and ensures it can be reused across all\nyour application, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String token = VertxContextPRNG.current(vertx).nextString(<span class=\"hljs-number\">32</span>);\n<span class=\"hljs-comment\">// Generate a secure random integer</span>\n<span class=\"hljs-keyword\">int</span> randomInt = VertxContextPRNG.current(vertx).nextInt();</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_working_with_keys\"><a class=\"anchor\" href=\"#_working_with_keys\"></a>Working with Keys</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When working with security you will face the need to load security keys. There are many formats and standards for\nsecurity keys which makes it quite a complex task. In order to simplify the work on the developer side, this module\ncontains 2 abstractions:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/KeyStoreOptions.html\">KeyStoreOptions</a></code> that abstract the JVM keystore common format.</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/PubSecKeyOptions.html\">PubSecKeyOptions</a></code> that abstract the PEM common format.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>To load a local keystore modules shall ask for an options object like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">KeyStoreOptions options = <span class=\"hljs-keyword\">new</span> KeyStoreOptions()\n  .setPath(<span class=\"hljs-string\">&quot;/path/to/keystore/file&quot;</span>)\n  .setType(<span class=\"hljs-string\">&quot;pkcs8&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;keystore-password&quot;</span>)\n  .putPasswordProtection(<span class=\"hljs-string\">&quot;key-alias&quot;</span>, <span class=\"hljs-string\">&quot;alias-password&quot;</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The type is quite important as it varies with the JVM version used. Before 9, the default is <code>jks</code> which is JVM specific\nafter it <code>pkcs12</code> which is a common standard.</p>\n</div>\n<div class=\"paragraph\">\n<p>Non JVM keystore keys can be imported to a <code>pkcs12</code> file, even without the need of the <code>keytool</code> command, for example\nthis is how it can be done with <code>OpenSSL</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>openssl pkcs12 -export -in mykeycertificate.pem -out mykeystore.pkcs12 -name myAlias -noiter -nomaciter</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The command above will convert an existing pem file to a pkcs12 keystore and put the given key under the name <code>myAlias</code>.\nThe extra arguments <code>-noiter -nomaciter</code> are required in order to make the file compatible with the JVM loader.</p>\n</div>\n<div class=\"paragraph\">\n<p>To load a <code>PEM</code> file you should be aware that there are a few limitations. The default JVM classes only support keys in\n<code>PKCS8</code> format, so if you have a different PEM file you need to convert it with <code>OpenSSL</code> like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>openssl pkcs8 -topk8 -inform PEM -in private.pem -out private_key.pem -nocrypt</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After this using such file is as trivial as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">PubSecKeyOptions options = <span class=\"hljs-keyword\">new</span> PubSecKeyOptions()\n  .setAlgorithm(<span class=\"hljs-string\">&quot;RS256&quot;</span>)\n  .setBuffer(\n    vertx.fileSystem()\n      .readFileBlocking(<span class=\"hljs-string\">&quot;/path/to/pem/file&quot;</span>)\n      .toString());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>PEM files are common and easy to use but are not password protected, so private keys can easily be sniffed.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_json_web_keys\"><a class=\"anchor\" href=\"#_json_web_keys\"></a>JSON Web Keys</h3>\n<div class=\"paragraph\">\n<p>JWKs are a standard used by OpenID connect and JWT providers. They represent a key as a JSON object. Usually these JSON\ndocuments are provided by an identity provider server like Google, Microsoft, etc&#8230;&#8203; but you can also generate your own\nkeys using the online application &lt;a href=\"https://mkjwk.org/\"&gt;https://mkjwk.org&lt;/a&gt;. For an offline experience there is\nalso the tool: &lt;a href=\"https://connect2id.com/products/nimbus-jose-jwt/generator\"&gt;https://connect2id.com/products/nimbus-jose-jwt/generator&lt;/a&gt;.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_chaining_authentication_providers\"><a class=\"anchor\" href=\"#_chaining_authentication_providers\"></a>Chaining authentication providers</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are cases where it might be interesting to have support for chaining authentication providers, for example look up\nusers on LDAP or properties files. This can be achieved with the <code><a href=\"../../apidocs/io/vertx/ext/auth/ChainAuth.html\">ChainAuth</a></code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ChainAuth.any()\n  .add(ldapAuthProvider)\n  .add(propertiesAuthProvider);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It is also possible to perform a <strong>all</strong> match, a user must be matched on LDAP and Properties for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ChainAuth.all()\n  .add(ldapAuthProvider)\n  .add(propertiesAuthProvider);</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.1.5"},"__N_SSG":true}