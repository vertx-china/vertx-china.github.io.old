{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Vert.x 3 init.d Script","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say you have a Vert.x 3 application you want to install on a Linux server. But you want the old school way (I mean not the Docker way)."},"date":"2015-07-02","slug":"vert-x-3-init-d-script","readingTime":{"text":"2 min read","minutes":1.845,"time":110700,"words":369},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      em: \"em\",\n      h2: \"h2\",\n      a: \"a\",\n      code: \"code\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      span: \"span\",\n      strong: \"strong\"\n    }, props.components), {Gist} = _components;\n    if (!Gist) _missingMdxReference(\"Gist\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Let’s say you have a Vert.x 3 ap­pli­ca­tion you want to in­stall on a Linux server. But you want the \", _jsx(_components.em, {\n          children: \"old school\"\n        }), \" way (I mean not the Docker way ☺). So, in other words, you need an \", _jsx(_components.em, {\n          children: \"init.d\"\n        }), \" script. This post pro­poses an \", _jsx(_components.em, {\n          children: \"init.d\"\n        }), \" script that you can use to start/stop/restart a Vert.x 3 ap­pli­ca­tion.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"prerequisites\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#prerequisites\"\n        }), \"Prerequisites\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The pro­posed script as­sumes your ap­pli­ca­tion is pack­aged as a \", _jsx(_components.em, {\n          children: \"fat jar\"\n        }), \". So, your ap­pli­ca­tion is going to be launched using \", _jsx(_components.code, {\n          children: \"java -jar your-fat-jar ...\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"the-script\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#the-script\"\n        }), \"The script\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.em, {\n          children: \"init.d\"\n        }), \" scripts have to reply to a set of \", _jsx(_components.em, {\n          children: \"com­mands\"\n        }), \":\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"start\"\n          }), \" : starts the ap­pli­ca­tion (if not yet started)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"stop\"\n          }), \" : stops the ap­pli­ca­tion (if started)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"status\"\n          }), \" : let you know if the ap­pli­ca­tion is started or not\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"restart\"\n          }), \" : restart the ap­pli­ca­tion\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"These \", _jsx(_components.em, {\n          children: \"com­mands\"\n        }), \" are in­voked using:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"service my-service-script start\\nservice my-service-script stop\\nservice my-service-script status\\nservice my-service-script restart\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In gen­eral, ser­vice scripts are hooked in the boot and shut­down se­quences to start and stop au­to­mat­i­cally dur­ing the sys­tem starts and stops.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, enough talks, let’s look at the script:\"\n      }), \"\\n\", _jsx(Gist, {\n        url: \"https://gist.github.com/cescoffier/ccc8b391787e93f4e6e0\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"using-the-script\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#using-the-script\"\n        }), \"Using the script\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"First down­load the script from the \", _jsx(_components.a, {\n          href: \"https://gist.githubusercontent.com/cescoffier/ccc8b391787e93f4e6e0/raw/my-vertx-application\",\n          children: \"here\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You need to set a cou­ple of vari­ables lo­cated at the be­gin­ning of the file:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"# The directory in which your application is installed\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"APPLICATION_DIR\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/opt/my-vertx-app\\\"\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"# The fat jar containing your application\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"APPLICATION_JAR\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"maven-verticle-3.0.0-fat.jar\\\"\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"# The application argument such as -cluster -cluster-host ...\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"APPLICATION_ARGS\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"\\\"\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"# vert.x options and system properties (-Dfoo=bar).\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"VERTX_OPTS\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"\\\"\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"# The path to the Java command to use to launch the application (must be java 8+)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"JAVA\"\n          }), \"=/opt/java/java/bin/java\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The rest of the script can stay as it is, but feel free to adapt it to your needs. Once you have set these vari­ables based on your en­vi­ron­ment, move the file to \", _jsx(_components.code, {\n          children: \"/etc/init.d\"\n        }), \" and set it as ex­e­cutable:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"sudo \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"mv\"\n          }), \" my-vertx-application /etc/init.d\\nsudo \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"chmod\"\n          }), \" +x my-vertx-application\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then, you should be able to start your ap­pli­ca­tion using:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"sudo service my-vertx-application start\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"De­pend­ing to your op­er­at­ing sys­tem, adding the hooks to the boot and shut­down se­quence dif­fers. For in­stance on Ubuntu you need to use the \", _jsx(_components.code, {\n          children: \"update-rc.d\"\n        }), \" com­mand while on Cen­tOS \", _jsx(_components.code, {\n          children: \"chkconfig\"\n        }), \" is used\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"That’s all, enjoy !\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x 3 and PostgreSQL JSON type","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"One of the interesting features of NoSQL databases is their schema-less mode of operation. This feature is very useful during project prototyping and early development since at early the stages of development of projects all data structures are not clear or have been defined yet."},"date":"2015-07-03","slug":"vert-x3-and-postgresql-json-type"},"nextPost":{"meta":{"title":"Vert.x 3 Web easy as Pi","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"Vert.x Web distinguishes itself from traditional application servers like JavaEE by just being a simple extension toolkit to Vert.x, which makes it quite lightweight and small but nevertheless very powerful."},"date":"2015-07-01","slug":"vert-x3-web-easy-as-pi"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"}]},"__N_SSG":true}