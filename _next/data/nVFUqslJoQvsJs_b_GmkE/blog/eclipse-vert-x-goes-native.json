{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Eclipse Vert.x goes Native","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"This blog post introduces native image generation of Vert.x applications with GraalVM. Generated executables can be run without a JVM."},"date":"2018-06-04","slug":"eclipse-vert-x-goes-native","readingTime":{"text":"5 min read","minutes":4.235,"time":254100,"words":847},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      h3: \"h3\"\n    }, props.components), {Link, Alert} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"I this blog post, I would like to give you a pre­view on na­tive image gen­er­a­tion of Vert.x ap­pli­ca­tions using GraalVM.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"With \", _jsx(_components.a, {\n          href: \"https://www.graalvm.org/\",\n          children: \"GraalVM\"\n        }), \" it is pos­si­ble to gen­er­ate na­tive ex­e­cuta­bles.\\nThese ex­e­cuta­bles can be di­rectly run with­out the need of an in­stalled JVM.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"benefits\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#benefits\"\n        }), \"Benefits\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"The start up time is way faster. It is no longer re­quired to wait for the start up of the JVM. The ap­pli­ca­tion is usu­ally up and run­ning in a mat­ter of mil­lisec­onds.\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Re­duced mem­ory foot­print. I mea­sured 40 MB mem­ory usage (RSS) for the Vert.x Web ap­pli­ca­tion which I’m going to show­case.\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Smaller Con­tain­ers. No JVM means no over­head. All the needed parts are al­ready con­tained within the ex­e­cutable. This can be very ben­e­fi­cial when build­ing de­ploy­able con­tainer im­ages.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"demo-project\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#demo-project\"\n        }), \"Demo Project\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"For the demo ap­pli­ca­tion I choose a very basic hello world \", _jsx(Link, {\n          href: \"/docs/vertx-web/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x Web\"\n          })\n        }), \" server.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" de.jotschi.examples;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.io.File;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.Vertx;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.logging.Logger;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.logging.LoggerFactory;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.logging.SLF4JLogDelegateFactory;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.ext.web.Router;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Runner\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(String[] args)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Use logback for logging\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"File\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"logbackFile\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"File\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"config\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"logback.xml\\\"\"\n          }), \");\\n    System.setProperty(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"logback.configurationFile\\\"\"\n          }), \", logbackFile.getAbsolutePath());\\n    System.setProperty(LoggerFactory.LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory.class.getName());\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Logger\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"log\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" LoggerFactory.getLogger(Runner.class);\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Setup the http server\"\n          }), \"\\n    log.info(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Starting server for: http://localhost:8080/hello\\\"\"\n          }), \");\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Vertx.vertx();\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n\\n    router.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/hello\\\"\"\n          }), \").handler(rc -> {\\n      log.info(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Got hello request\\\"\"\n          }), \");\\n      rc.response().end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"World\\\"\"\n          }), \");\\n    });\\n\\n    vertx.createHttpServer()\\n      .requestHandler(router::accept)\\n      .listen(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n\\n  }\\n\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"graalvm\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#graalvm\"\n        }), \"GraalVM\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.graalvm.org/\",\n          children: \"GraalVM\"\n        }), \" runs a sta­tic analy­sis on the gen­er­ated ap­pli­ca­tion in order to find the reach­able code.\\nThis process which is run within the \", _jsx(_components.a, {\n          href: \"https://github.com/oracle/graal/tree/master/substratevm\",\n          children: \"Sub­strate VM\"\n        }), \" will lead to the gen­er­a­tion of the na­tive image.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"limitations\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#limitations\"\n        }), \"Limitations\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Due to the na­ture of the sta­tic analy­sis Sub­strate VM also has some \", _jsx(_components.a, {\n          href: \"https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md\",\n          children: \"lim­i­ta­tions\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Dy­namic class load­ing and un­load­ing for ex­am­ple is not sup­ported be­cause this would in essence alter the avail­able code dur­ing run­time.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Re­flec­tion is only par­tially sup­ported and re­quires some man­ual steps which we will cover later on.\"\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"patches--workarounds\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#patches--workarounds\"\n        }), \"Patches / Workarounds\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"Work in progress\",\n        children: _jsx(_components.p, {\n          children: \"Next we need to apply some patches / workarounds. Keep in mind that na­tive image gen­er­a­tion is a fairly new topic and the these workarounds will hope­fully no longer be re­quired once the Sub­strate VM and Netty have bet­ter sup­port for each other.\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I did not man­age to get na­tive epoll, kqueue and SSL in­te­gra­tion to work with na­tive im­ages.\\nThese parts are heav­ily op­ti­mized within Netty and use JNI to di­rectly ac­cess the OS fea­tures.\\nSub­strate VM sup­ports JNI and could in the­ory in­te­grate these na­tive li­braries.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I cre­ated a \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graalvm-native-image-test/tree/netty-native-epoll\",\n          children: \"re­pro­ducer\"\n        }), \"\\nand an \", _jsx(_components.a, {\n          href: \"https://github.com/oracle/graal/issues/442\",\n          children: \"issue\"\n        }), \" so hope­fully these prob­lems can be ad­dressed soon.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"vertx-transport\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#vertx-transport\"\n        }), \"Vert.x Transport\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"First I needed to patch the \", _jsx(_components.code, {\n          children: \"io.vertx.core.net.impl.transport.Transport\"\n        }), \" class in order to pre­vent the load­ing of EPoll and KQueue na­tive sup­port. Oth­er­wise Sub­strate VM will try to load these classes and fail.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Transport\"\n          }), \" {\\n…\\n  \", _jsxs(_components.span, {\n            className: \"hljs-comment\",\n            children: [\"/**\\n   * The native transport, it may be {\", _jsx(_components.span, {\n              className: \"hljs-doctag\",\n              children: \"@code\"\n            }), \" null} or failed.\\n   */\"]\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" Transport \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"nativeTransport\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Patched: I remove the native transport discovery. \"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// The imports would be picked up by substrate \"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// and cause further issues. \"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \";\\n  }\\n…\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"netty-ssl\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#netty-ssl\"\n        }), \"Netty SSL\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Na­tive SSL sup­port is an­other prob­lem­atic area. I cre­ated a patched dummy \", _jsx(_components.code, {\n          children: \"io.netty.handler.ssl.ReferenceCountedOpenSslEngine\"\n        }), \" class in order to pre­vent Sub­strate VM from dig­ging deeper into the SSL code of Netty.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Next we need to set up the re­flec­tion con­fig­u­ra­tion within \", _jsx(_components.code, {\n          children: \"reflectconfigs/netty.json\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Netty uses re­flec­tion to in­stan­ti­ate the socket chan­nels. This is done in the Re­flec­tiveChan­nelFac­tory. We need to tell Sub­strate VM how classes of type NioServer­Sock­etChan­nel  and NioSock­etChan­nel can be in­stan­ti­ated.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-css\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-selector-attr\",\n            children: [\"[  {    \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"name\\\"\"\n            }), \" : \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"io.netty.channel.socket.nio.NioSocketChannel\\\"\"\n            }), \",    \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"methods\\\"\"\n            }), \" : [      { \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"name\\\"\"\n            }), \" : \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"<init>\\\"\"\n            }), \", \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"parameterTypes\\\"\"\n            }), \" : []\"]\n          }), \" }\\n    ]\\n  },\\n  {\\n    \\\"name\\\" : \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"io.netty.channel.socket.nio.NioServerSocketChannel\\\"\"\n          }), \",\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"methods\\\"\"\n          }), \" : [\\n      { \\\"name\\\" : \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<init>\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"parameterTypes\\\"\"\n          }), \" : [] }\\n    ]\\n  }\\n]\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you want to learn more about the state of Netty and GraalVM I can rec­om­mend this \", _jsx(_components.a, {\n          href: \"https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692\",\n          children: \"GraalVM Blog­post\"\n        }), \" by Co­drut Stancu.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"building\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#building\"\n        }), \"Building\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Fi­nally we can build our maven project to gen­er­ate a shaded jar.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean package\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Next we need the GraalVM pack­age. You can down­load it from the \", _jsx(_components.a, {\n          href: \"https://www.graalvm.org/\",\n          children: \"GraalVM web­site\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We use the shaded jar as the input source for the \", _jsx(_components.code, {\n          children: \"native-image\"\n        }), \" com­mand which will gen­er­ate the ex­e­cutable.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$GRAALVMDIR\"\n          }), \"/bin/native-image \\\\\\n --verbose \\\\\\n --no-server \\\\\\n -Dio.netty.noUnsafe=\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"  \\\\\\n -H:ReflectionConfigurationFiles=./reflectconfigs/netty.json \\\\\\n -H:+ReportUnsupportedElementsAtRuntime \\\\\\n -Dfile.encoding=UTF-8 \\\\\\n -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"result\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#result\"\n        }), \"Result\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Fi­nally we end up with an 27 MB \", _jsx(_components.code, {\n          children: \"vertx-graalvm-native-image-test-0.0.1-SNAPSHOT\"\n        }), \" ex­e­cutable which we can run.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"$ ldd vertx-graalvm-native-image-test-0.0.1-SNAPSHOT \\n  linux-vdso.so.1 (0x00007ffc65be8000)\\n  libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8e892f0000)\\n  libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f8e890d3000)\\n  libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f8e88eb9000)\\n  librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f8e88cb1000)\\n  libcrypt.so.1 => /lib/x86_64-linux-gnu/libcrypt.so.1 (0x00007f8e88a79000)\\n  libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8e886da000)\\n  /lib64/ld-linux-x86-64.so.2 (0x00007f8e8afb7000)\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"memory\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#memory\"\n        }), \"Memory\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"/usr/bin/time -f \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"\\\\nmaxRSS\\\\t%MkB\\\"\"\n          }), \" java -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar \\n/usr/bin/time -f \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"\\\\nmaxRSS\\\\t%MkB\\\"\"\n          }), \" ./vertx-graalvm-native-image-test-0.0.1-SNAPSHOT \\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Na­tive Image: 40 MB\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Java 10: 125 MB\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The full project can be found on \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graalvm-native-image-test\",\n          children: \"GitHub\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you want to read more on the topic I can also rec­om­mend \", _jsx(_components.a, {\n          href: \"https://sites.google.com/a/athaydes.com/renato-athaydes/posts/a7mbnative-imagejavaappthatrunsin30msandusesonly4mbofram\",\n          children: \"this ar­ti­cle\"\n        }), \" by Re­nato Athay­des in which he demon­strates how to cre­ate a very small light weight low mem­ory ap­pli­ca­tion using GraalVM.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Thanks for read­ing. If you have any fur­ther ques­tions or feed­back don’t hes­i­tate to send me a tweet to \", _jsx(_components.a, {\n          href: \"https://twitter.com/Jotschi/\",\n          children: \"@Jotschi\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Eclipse Vert.x 3.5.2","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have just released Vert.x 3.5.2, a bug fix release of Vert.x 3.5.x."},"date":"2018-06-08","slug":"eclipse-vert-x-3-5-2"},"nextPost":{"meta":{"title":"Eclipse Vert.x RabbitMQ client gets a new consumer API!","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this blog post, we present the new consumer API of the RabbitMQ client that will be released with Eclipse Vert.x 3.6.0."},"date":"2018-04-23","slug":"eclipse-vert-x-rabbitmq-client-gets-a-new-consumer-api"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Vert.x featuring Continuous Delivery with Jenkins and Ansible","category":"guides","authors":[{"name":"Ricardo Hernandez","github_id":"ricardohmon"}],"summary":"This blog entry describes an approach to adopt Continuous Delivery for Vert.x applications using Jenkins and Ansible by taking advantage of the Jenkins Job DSL and Ansible plugins."},"date":"2016-09-28","slug":"vert-x-featuring-continuous-delivery-with-jenkins-and-ansible"}]},"__N_SSG":true}