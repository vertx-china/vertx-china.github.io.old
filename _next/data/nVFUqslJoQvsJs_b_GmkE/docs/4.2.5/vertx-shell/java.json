{"pageProps":{"slug":"4.2.5/vertx-shell/java","title":"Vert.x Shell","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_shell\">使用 Vert.x Shell</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_shell_service\">Shell 服务</a></li>\n<li><a href=\"#_programmatic_service\">可编码的服务</a></li>\n</ul>\n</li>\n<li><a href=\"#_authentication\">身份认证</a></li>\n<li><a href=\"#_telnet_term_configuration\">Telnet 终端配置</a></li>\n<li><a href=\"#_ssh_term_configuration\">SSH 终端配置</a></li>\n<li><a href=\"#_http_term_configuration\">HTTP 终端配置</a></li>\n<li><a href=\"#_keymap_configuration\">按键映射配置</a></li>\n<li><a href=\"#_base_commands\">基本命令</a></li>\n<li><a href=\"#_extending_vert_x_shell\">扩展 Vert.x Shell</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_command_arguments\">命令参数</a></li>\n<li><a href=\"#_terminal_usage\">终端用法</a></li>\n<li><a href=\"#_shell_session\">Shell 会话</a></li>\n<li><a href=\"#_process_termination\">进程结束</a></li>\n<li><a href=\"#_process_events\">进程事件</a></li>\n<li><a href=\"#_command_completion\">命令完成</a></li>\n</ul>\n</li>\n<li><a href=\"#_shell_server\">Shell 服务端</a></li>\n<li><a href=\"#_terminal_servers\">终端服务器</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_ssh_term\">SSH 终端</a></li>\n<li><a href=\"#_telnet_term\">Telnet 终端</a></li>\n<li><a href=\"#_http_term\">HTTP 终端</a></li>\n</ul>\n</li>\n<li><a href=\"#_command_discovery\">命令发现</a></li>\n<li><a href=\"#_command_pack\">命令包</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Shell</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Shell 是一个基于Vert.x，\n支持不同协议的统一终端的命令行接口</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x Shell 提供了一系列命令来与 Vert.x 服务进行实时互动</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x Shell 可以使用任何 Vert.x 支持的语言来扩展自定义命令</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_shell\"><a class=\"anchor\" href=\"#_using_vert_x_shell\"></a>使用 Vert.x Shell</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Shell 是一个Vert.x服务，既可以通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/ShellService.html\">ShellService</a></code> 以编码的方式启动，\n，也可以作为一个服务来发布。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_shell_service\"><a class=\"anchor\" href=\"#_shell_service\"></a>Shell 服务</h3>\n<div class=\"paragraph\">\n<p>shell服务可以直接以命令行的方式启动，也可以通过 Vert.x 发布启动</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">启动一个基于 Telnet 的 shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>vertx run -conf '{\"telnetOptions\":{\"port\":5000}}' maven:io.vertx:vertx-shell:4.2.5</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">启动一个基于 SSH 的 shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code># 为 SSH 服务端创建密钥\nkeytool -genkey -keyalg RSA -keystore ssh.jks -keysize 2048 -validity 1095 -dname CN=localhost -keypass secret -storepass secret\n# 创建授权配置文件\necho user.admin=password &gt; auth.properties\n# 启动 shell\nvertx run -conf '{\"sshOptions\":{\"port\":4000,\"keyPairOptions\":{\"path\":\"ssh.jks\",\"password\":\"secret\"},\"authOptions\":{\"provider\":\"shiro\",\"config\":{\"properties_path\":\"file:auth.properties\"}}}}' maven:io.vertx:vertx-shell:4.2.5</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">启动一个基于 HTTP 的shell服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code># 为 HTTP 服务端创建证书\nkeytool -genkey -keyalg RSA -keystore keystore.jks -keysize 2048 -validity 1095 -dname CN=localhost -keypass secret -storepass secret\n# 创建授权配置文件\necho user.admin=password &gt; auth.properties\nvertx run -conf '{\"httpOptions\":{\"port\":8080,\"ssl\":true,\"keyStoreOptions\":{\"path\":\"keystore.jks\",\"password\":\"secret\"},\"authOptions\":{\"provider\":\"\"shiro,\"config\":{\"properties_path\":\"file:auth.properties\"}}}}' maven:io.vertx:vertx-shell:4.2.5</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>你也可以在你的 verticle 中发布 shell 服务:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;maven:{maven-groupId}:{maven-artifactId}:{maven-version}&quot;</span>,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setConfig(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().put(<span class=\"hljs-string\">&quot;telnetOptions&quot;</span>,\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">4000</span>))\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;maven:{maven-groupId}:{maven-artifactId}:{maven-version}&quot;</span>,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setConfig(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n    put(<span class=\"hljs-string\">&quot;sshOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n      put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">5000</span>).\n      put(<span class=\"hljs-string\">&quot;keyPairOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;src/test/resources/ssh.jks&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;wibble&quot;</span>)).\n      put(<span class=\"hljs-string\">&quot;authOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;shiro&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n          put(<span class=\"hljs-string\">&quot;properties_path&quot;</span>, <span class=\"hljs-string\">&quot;file:/path/to/my/auth.properties&quot;</span>))))\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;maven:{maven-groupId}:{maven-artifactId}:{maven-version}&quot;</span>,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setConfig(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n    put(<span class=\"hljs-string\">&quot;httpOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n      put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">8080</span>).\n      put(<span class=\"hljs-string\">&quot;ssl&quot;</span>, <span class=\"hljs-literal\">true</span>).\n      put(<span class=\"hljs-string\">&quot;keyPairOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;src/test/resources/server-keystore.jks&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;wibble&quot;</span>)).\n      put(<span class=\"hljs-string\">&quot;authOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;shiro&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n          put(<span class=\"hljs-string\">&quot;properties_path&quot;</span>, <span class=\"hljs-string\">&quot;file:/path/to/my/auth.properties&quot;</span>))))\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n当你的 classpath 中已经包含了Vert.x Shell ，\n你可以使用 <code>service:io.vertx.ext.shell</code> 来代替 <code>maven:io.vertx:vertx-shell:4.2.5</code>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_programmatic_service\"><a class=\"anchor\" href=\"#_programmatic_service\"></a>可编码的服务</h3>\n<div class=\"paragraph\">\n<p>使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/ShellService.html\">ShellService</a></code> 来启动Vert.x Shell 实例。</p>\n</div>\n<div class=\"paragraph\">\n<p>启动一个基于 SSH 的 shell 服务:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">ShellService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> ShellService.create(vertx,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShellServiceOptions</span>().setSSHOptions(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SSHTermOptions</span>().\n      setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      setPort(<span class=\"hljs-number\">5000</span>).\n      setKeyPairOptions(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JksOptions</span>().\n        setPath(<span class=\"hljs-string\">&quot;server-keystore.jks&quot;</span>).\n        setPassword(<span class=\"hljs-string\">&quot;wibble&quot;</span>)\n      ).\n      setAuthOptions(\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n          .put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;shiro&quot;</span>)\n          .put(<span class=\"hljs-string\">&quot;type&quot;</span>, <span class=\"hljs-string\">&quot;PROPERTIES&quot;</span>)\n          .put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n            put(<span class=\"hljs-string\">&quot;properties_path&quot;</span>, <span class=\"hljs-string\">&quot;file:/path/to/my/auth.properties&quot;</span>))\n      )\n  )\n);\nservice.start();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>启动一个基于 Telnet 的 shell 服务:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">ShellService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> ShellService.create(vertx,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShellServiceOptions</span>().setTelnetOptions(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TelnetTermOptions</span>().\n      setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      setPort(<span class=\"hljs-number\">4000</span>)\n  )\n);\nservice.start();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Telnet server 基于 <code>NetServer</code> 实现，\n其配置 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/TelnetTermOptions.html\">TelnetTermOptions</a></code> 继承自 Vert.x Core 模块中的 <code>NetServerOptions</code> ，</p>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">小心</div>\n</td>\n<td class=\"content\">\nTelnet 不提供任何身份授权和加密机制。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>启动一个基于 HTTP 的 shell 服务:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">ShellService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> ShellService.create(vertx,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShellServiceOptions</span>().setHttpOptions(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpTermOptions</span>().\n      setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      setPort(<span class=\"hljs-number\">8080</span>)\n  )\n);\nservice.start();</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>身份认证</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>SSH 和 HTTP 连接管理器提供了一套基于 <em>vertx-auth</em> 的身份认证机制，\n并支持以下授权方式：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>shiro</em> : 正如演示中看到的，提供了 <code>.properties</code> 配置文件 和 <em>LDAP</em> 这两种认证方式</p>\n</li>\n<li>\n<p><em>jdbc</em> : 基于 JDBC 的身份认证</p>\n</li>\n<li>\n<p><em>mongo</em> : 基于 MongoDB 的身份认证</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>可以使用相关的类来直接创建配置项：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Shiro 的配置 <code><a href=\"../../apidocs/io/vertx/ext/auth/shiro/ShiroAuthOptions.html\">ShiroAuthOptions</a></code></p>\n</li>\n<li>\n<p>JDBC 的配置 <code><a href=\"../../apidocs/io/vertx/ext/auth/jdbc/JDBCAuthOptions.html\">JDBCAuthOptions</a></code></p>\n</li>\n<li>\n<p>Mongo 的配置 <code><a href=\"../../apidocs/io/vertx/ext/auth/mongo/MongoAuthOptions.html\">MongoAuthOptions</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>对于使用 Json 的外部服务配置，使用 <code>authOptions</code> 对象来表示授权的基本配置， 其 <code>provider</code> 属性用来区分不同的授权方式：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>{\n ...\n \"authOptions\": {\n   \"provider\":\"shiro\",\n   \"config\": {\n     \"properties_path\":\"file:auth.properties\"\n   }\n }\n ...\n}</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_telnet_term_configuration\"><a class=\"anchor\" href=\"#_telnet_term_configuration\"></a>Telnet 终端配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Telnet 终端通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/ShellServiceOptions.html#setTelnetOptions-io.vertx.ext.shell.term.TelnetTermOptions-\">setTelnetOptions</a> 来配置，\n`<a href=\"../../apidocs/io/vertx/ext/shell/term/TelnetTermOptions.html\">TelnetTermOptions</a></code> 继承自 <code><a href=\"../../apidocs/io/vertx/core/net/NetServerOptions.html\">NetServerOptions</a></code>，\n所以它们具有完全相同的配置。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ssh_term_configuration\"><a class=\"anchor\" href=\"#_ssh_term_configuration\"></a>SSH 终端配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>SSH 终端通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/ShellServiceOptions.html#setSSHOptions-io.vertx.ext.shell.term.SSHTermOptions-\">setSSHOptions</a></code> 来配置：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/SSHTermOptions.html#setPort-int-\">setPort</a></code>: 端口</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/SSHTermOptions.html#setHost-java.lang.String-\">setHost</a></code>: 主机地址</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>目前仅支持 username/password（用户名+密码） 这种授权认证方式，可以通过属性文件或者 LDAP 来进行配置，\n获取更多详细信息请查看 Vert.x Auth 文档：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/SSHTermOptions.html#setAuthOptions-io.vertx.core.json.JsonObject-\">setAuthOptions</a></code>: 配置用户授权认证信息</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>服务端密钥配置采用的是 <em>Vert.x Core</em> 提供的密钥对存储配置方案：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/SSHTermOptions.html#setKeyPairOptions-io.vertx.core.net.JksOptions-\">setKeyPairOptions</a></code>: 设置 <code>.jks</code> 密钥对存储</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/SSHTermOptions.html#setPfxKeyPairOptions-io.vertx.core.net.PfxOptions-\">setPfxKeyPairOptions</a></code>: 设置 <code>.pfx</code> 密钥对存储</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/SSHTermOptions.html#setPemKeyPairOptions-io.vertx.core.net.PemKeyCertOptions-\">setPemKeyPairOptions</a></code>: 设置 <code>.pem</code> 密钥对存储</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在 SSH 上发布基于 Mongo 身份授权的 Shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;maven:{maven-groupId}:{maven-artifactId}:{maven-version}&quot;</span>,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setConfig(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n    put(<span class=\"hljs-string\">&quot;sshOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n      put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">5000</span>).\n      put(<span class=\"hljs-string\">&quot;keyPairOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;src/test/resources/ssh.jks&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;wibble&quot;</span>)).\n      put(<span class=\"hljs-string\">&quot;authOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;mongo&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n          put(<span class=\"hljs-string\">&quot;connection_string&quot;</span>, <span class=\"hljs-string\">&quot;mongodb://localhost:27018&quot;</span>))))\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在 SSH 上运行基于  Mongo 身份授权的 Shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">ShellService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> ShellService.create(vertx,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShellServiceOptions</span>().setSSHOptions(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SSHTermOptions</span>().\n      setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      setPort(<span class=\"hljs-number\">5000</span>).\n      setKeyPairOptions(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JksOptions</span>().\n        setPath(<span class=\"hljs-string\">&quot;server-keystore.jks&quot;</span>).\n        setPassword(<span class=\"hljs-string\">&quot;wibble&quot;</span>)\n      ).\n      setAuthOptions(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n        .put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;mongo&quot;</span>)\n        .put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().put(<span class=\"hljs-string\">&quot;connection_string&quot;</span>, <span class=\"hljs-string\">&quot;mongodb://localhost:27018&quot;</span>))\n      )\n  )\n);\nservice.start();</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在 SSH 上发布基于 JDBC 身份授权的 Shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;maven:{maven-groupId}:{maven-artifactId}:{maven-version}&quot;</span>,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setConfig(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n    put(<span class=\"hljs-string\">&quot;sshOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n      put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">5000</span>).\n      put(<span class=\"hljs-string\">&quot;keyPairOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;src/test/resources/ssh.jks&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;wibble&quot;</span>)).\n      put(<span class=\"hljs-string\">&quot;authOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;jdbc&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n          .put(<span class=\"hljs-string\">&quot;url&quot;</span>, <span class=\"hljs-string\">&quot;jdbc:hsqldb:mem:test?shutdown=true&quot;</span>)\n          .put(<span class=\"hljs-string\">&quot;driver_class&quot;</span>, <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>))))\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在 SSH 上运行基于 JDBC 身份授权的 Shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">ShellService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> ShellService.create(vertx,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShellServiceOptions</span>().setSSHOptions(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SSHTermOptions</span>().\n      setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      setPort(<span class=\"hljs-number\">5000</span>).\n      setKeyPairOptions(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JksOptions</span>().\n        setPath(<span class=\"hljs-string\">&quot;server-keystore.jks&quot;</span>).\n        setPassword(<span class=\"hljs-string\">&quot;wibble&quot;</span>)\n      ).\n      setAuthOptions(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n        .put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;jdbc&quot;</span>)\n        .put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n          .put(<span class=\"hljs-string\">&quot;url&quot;</span>, <span class=\"hljs-string\">&quot;jdbc:hsqldb:mem:test?shutdown=true&quot;</span>)\n          .put(<span class=\"hljs-string\">&quot;driver_class&quot;</span>, <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>))\n      )\n  )\n);\nservice.start();</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_http_term_configuration\"><a class=\"anchor\" href=\"#_http_term_configuration\"></a>HTTP 终端配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>HTTP 终端通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/ShellServiceOptions.html#setHttpOptions-io.vertx.ext.shell.term.HttpTermOptions-\">setHttpOptions</a></code> 来配置, 这个配置\n继承自 <code><a href=\"../../apidocs/io/vertx/core/http/HttpServerOptions.html\">HttpServerOptions</a></code>，所以它们提供了完全相同的配置。</p>\n</div>\n<div class=\"paragraph\">\n<p>此外，它还提供了配置 HTTP 终端的其他选项：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/HttpTermOptions.html#setAuthOptions-io.vertx.core.json.JsonObject-\">setAuthOptions</a></code>: 配置用户身份授权信息</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/HttpTermOptions.html#setSockJSHandlerOptions-io.vertx.ext.web.handler.sockjs.SockJSHandlerOptions-\">setSockJSHandlerOptions</a></code>: 配置 SockJS</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/HttpTermOptions.html#setSockJSPath-java.lang.String-\">setSockJSPath</a></code>: SockJS 在路由中的路径</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在 HTTP 上发布基于 Mongo 身份授权的 Shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;maven:{maven-groupId}:{maven-artifactId}:{maven-version}&quot;</span>,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setConfig(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n    put(<span class=\"hljs-string\">&quot;httpOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n      put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">8080</span>).\n      put(<span class=\"hljs-string\">&quot;ssl&quot;</span>, <span class=\"hljs-literal\">true</span>).\n      put(<span class=\"hljs-string\">&quot;keyPairOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;src/test/resources/server-keystore.jks&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;wibble&quot;</span>)).\n      put(<span class=\"hljs-string\">&quot;authOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;mongo&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n          put(<span class=\"hljs-string\">&quot;connection_string&quot;</span>, <span class=\"hljs-string\">&quot;mongodb://localhost:27018&quot;</span>))))\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在 HTTP 上运行基于 Mongo 身份授权的 Shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">ShellService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> ShellService.create(vertx,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShellServiceOptions</span>().setHttpOptions(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpTermOptions</span>().\n      setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      setPort(<span class=\"hljs-number\">8080</span>).\n      setAuthOptions(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n        .put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;mongo&quot;</span>)\n        .put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n          .put(<span class=\"hljs-string\">&quot;connection_string&quot;</span>, <span class=\"hljs-string\">&quot;mongodb://localhost:27018&quot;</span>))\n      )\n  )\n);\nservice.start();</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在 HTTP 上发布基于 JDBC 身份授权的 Shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;maven:{maven-groupId}:{maven-artifactId}:{maven-version}&quot;</span>,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setConfig(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n    put(<span class=\"hljs-string\">&quot;httpOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n      put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">8080</span>).\n      put(<span class=\"hljs-string\">&quot;ssl&quot;</span>, <span class=\"hljs-literal\">true</span>).\n      put(<span class=\"hljs-string\">&quot;keyPairOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;src/test/resources/server-keystore.jks&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;wibble&quot;</span>)).\n      put(<span class=\"hljs-string\">&quot;authOptions&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().\n        put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;jdbc&quot;</span>).\n        put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n          .put(<span class=\"hljs-string\">&quot;url&quot;</span>, <span class=\"hljs-string\">&quot;jdbc:hsqldb:mem:test?shutdown=true&quot;</span>)\n          .put(<span class=\"hljs-string\">&quot;driver_class&quot;</span>, <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>))))\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在 HTTP 上运行基于 JDBC 身份授权的 Shell 服务</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">ShellService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> ShellService.create(vertx,\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShellServiceOptions</span>().setHttpOptions(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpTermOptions</span>().\n      setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>).\n      setPort(<span class=\"hljs-number\">8080</span>).\n      setAuthOptions(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n        .put(<span class=\"hljs-string\">&quot;provider&quot;</span>, <span class=\"hljs-string\">&quot;jdbc&quot;</span>)\n        .put(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>()\n          .put(<span class=\"hljs-string\">&quot;url&quot;</span>, <span class=\"hljs-string\">&quot;jdbc:hsqldb:mem:test?shutdown=true&quot;</span>)\n          .put(<span class=\"hljs-string\">&quot;driver_class&quot;</span>, <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>))\n      )\n  )\n);\nservice.start();</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_keymap_configuration\"><a class=\"anchor\" href=\"#_keymap_configuration\"></a>按键映射配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>shell 使用默认的按键映射配置，\n可以使用各种终端配置对象的 <code>inputrc</code> 属性来进行覆盖。</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/TelnetTermOptions.html#setIntputrc-java.lang.String-\">setIntputrc</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/SSHTermOptions.html#setIntputrc-java.lang.String-\">setIntputrc</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/HttpTermOptions.html#setIntputrc-java.lang.String-\">setIntputrc</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><code>inputrc</code> 必须通过 classloader 或者文件系统指定一个存在的文件。</p>\n</div>\n<div class=\"paragraph\">\n<p><code>inputrc</code> 只能进行函数绑定，目前可用的函数有：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>backward-char</em></p>\n</li>\n<li>\n<p><em>forward-char</em></p>\n</li>\n<li>\n<p><em>next-history</em></p>\n</li>\n<li>\n<p><em>previous-history</em></p>\n</li>\n<li>\n<p><em>backward-delete-char</em></p>\n</li>\n<li>\n<p><em>backward-delete-char</em></p>\n</li>\n<li>\n<p><em>backward-word</em></p>\n</li>\n<li>\n<p><em>end-of-line</em></p>\n</li>\n<li>\n<p><em>beginning-of-line</em></p>\n</li>\n<li>\n<p><em>delete-char</em></p>\n</li>\n<li>\n<p><em>delete-char</em></p>\n</li>\n<li>\n<p><em>complete</em></p>\n</li>\n<li>\n<p><em>accept-line</em></p>\n</li>\n<li>\n<p><em>accept-line</em></p>\n</li>\n<li>\n<p><em>kill-line</em></p>\n</li>\n<li>\n<p><em>backward-word</em></p>\n</li>\n<li>\n<p><em>forward-word</em></p>\n</li>\n<li>\n<p><em>backward-kill-word</em></p>\n</li>\n</ul>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n要想添加额外的函数，必须要实现一个`Term.d` 项目中的函数，这个项目包含在 Vert.x Shell 中。\n例如，首先实现一个 <a href=\"https://github.com/termd/termd/blob/c1629623c8a3add4bde7778640bf8cc233a7c98f/src/examples/java/examples/readlinefunction/ReverseFunction.java\">reverse function</a> 函数，\n然后在 <code>META-INF/services/io.termd.core.readline.Function</code> 中添加实现声明，最后 shell 会以 SPI 的方式加载该函数。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_base_commands\"><a class=\"anchor\" href=\"#_base_commands\"></a>基本命令</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>你可以使用内置命令 <em>help</em> 来获取当前可用的命令：</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Verticle 命令</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>verticle-ls: 列出所有已发布的 verticle</p>\n</li>\n<li>\n<p>verticle-undeploy: 卸载一个verticle</p>\n</li>\n<li>\n<p>verticle-deploy: 以JSON字符串作为配置来发布 verticle</p>\n</li>\n<li>\n<p>verticle-factories: 列出所有已知的 verticle 工厂</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>文件系统命令</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>ls</p>\n</li>\n<li>\n<p>cd</p>\n</li>\n<li>\n<p>pwd</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Event Bus 命令</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>bus-tail: 显示 Event Bus 地址上所有接收到的消息</p>\n</li>\n<li>\n<p>bus-send: 在 Event Bus 上发送消息</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>网络命令</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>net-ls: 列出所有存在网络服务端，包括HTTP服务端</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>共享数据命令</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>local-map-put</p>\n</li>\n<li>\n<p>local-map-get</p>\n</li>\n<li>\n<p>local-map-rm</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>其他命令</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>echo</p>\n</li>\n<li>\n<p>sleep</p>\n</li>\n<li>\n<p>help</p>\n</li>\n<li>\n<p>exit</p>\n</li>\n<li>\n<p>logout</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>任务控制</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>fg</p>\n</li>\n<li>\n<p>bg</p>\n</li>\n<li>\n<p>jobs</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n这个命令列表应该会在下个 Vert.x Shell 版本中得到改进，以便其他 Vert.x 项目可以对 Vert.x Shell 进行扩展，\n例如 Dropwizard Metrics。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_extending_vert_x_shell\"><a class=\"anchor\" href=\"#_extending_vert_x_shell\"></a>扩展 Vert.x Shell</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>在任何支持代码生成的语言 中，Vert.x Shell 都可以通过自定义命令的方式来进行扩展。</p>\n</div>\n<div class=\"paragraph\">\n<p>可以使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandBuilder.html#command-java.lang.String-\">CommandBuilder.command</a></code> 方法来创建命令：\n通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandBuilder.html#processHandler-io.vertx.core.Handler-\">processHandler</a></code> 为命令指定 <em>处理器</em> ，\n这个 <em>处理器</em>  会在命令执行的时候被 Shell 调用。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">CommandBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> CommandBuilder.command(<span class=\"hljs-string\">&quot;my-command&quot;</span>);\nbuilder.processHandler(process -&gt; {\n\n  <span class=\"hljs-comment\">// Write a message to the console</span>\n  process.write(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);\n\n  <span class=\"hljs-comment\">// End the process</span>\n  process.end();\n});\n\n<span class=\"hljs-comment\">// Register the command</span>\n<span class=\"hljs-type\">CommandRegistry</span> <span class=\"hljs-variable\">registry</span> <span class=\"hljs-operator\">=</span> CommandRegistry.getShared(vertx);\nregistry.registerCommand(builder.build(vertx));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>在命令创建完成后，还需要注册到 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandRegistry.html\">CommandRegistry</a></code> 中，这个\n命令注册表保存着 Vert.x 实例的所有命令。</p>\n</div>\n<div class=\"paragraph\">\n<p>一旦通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandRegistry.html#unregisterCommand-java.lang.String-\">unregisterCommand</a></code> 方法进行注销，该命令就会失效。\n如果命令注册在 Verticle 中，那么卸载 verticle 之时，便是该命令注销之时。</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n当在注册表中注册命令时，将在 {@literal io.vertx.core.Context} 中调用命令的回调函数。\n当你想要在命令中保持状态尤其需要注意这一点。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html\">CommandProcess</a></code> 对象可以用于与 shell 互动。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_command_arguments\"><a class=\"anchor\" href=\"#_command_arguments\"></a>命令参数</h3>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html#args--\">args</a></code> 方法可以返回命令参数:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">command.processHandler(process -&gt; {\n\n  <span class=\"hljs-keyword\">for</span> (String arg : process.args()) {\n    <span class=\"hljs-comment\">// 在控制台上打印所有的参数</span>\n    process.write(<span class=\"hljs-string\">&quot;Argument &quot;</span> + arg);\n  }\n\n  process.end();\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>除此之外，也可以使用 <code><a href=\"../../apidocs/io/vertx/core/cli/CLI.html\">Vert.x CLI</a></code> 来创建命令：\n这种方式更容易对写入的命令行参数进行解析：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>option</em> 和 <em>argument</em> 解析</p>\n</li>\n<li>\n<p>参数 <em>校验</em></p>\n</li>\n<li>\n<p>生成命令的 <em>帮助文档</em></p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">CLI</span> <span class=\"hljs-variable\">cli</span> <span class=\"hljs-operator\">=</span> CLI.create(<span class=\"hljs-string\">&quot;my-command&quot;</span>).\n  addArgument(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Argument</span>().setArgName(<span class=\"hljs-string\">&quot;my-arg&quot;</span>)).\n  addOption(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Option</span>().setShortName(<span class=\"hljs-string\">&quot;m&quot;</span>).setLongName(<span class=\"hljs-string\">&quot;my-option&quot;</span>));\n<span class=\"hljs-type\">CommandBuilder</span> <span class=\"hljs-variable\">command</span> <span class=\"hljs-operator\">=</span> CommandBuilder.command(cli);\ncommand.processHandler(process -&gt; {\n\n  <span class=\"hljs-type\">CommandLine</span> <span class=\"hljs-variable\">commandLine</span> <span class=\"hljs-operator\">=</span> process.commandLine();\n\n  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">argValue</span> <span class=\"hljs-operator\">=</span> commandLine.getArgumentValue(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">optValue</span> <span class=\"hljs-operator\">=</span> commandLine.getOptionValue(<span class=\"hljs-string\">&quot;my-option&quot;</span>);\n  process.write(<span class=\"hljs-string\">&quot;The argument is &quot;</span> + argValue + <span class=\"hljs-string\">&quot; and the option is &quot;</span> + optValue);\n\n  process.end();\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当一个名为 <em>help</em> 选项被添加到 CLI 对象中时，\nshell 将负责在该选项激活时生成命令的帮助文档：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">CLI</span> <span class=\"hljs-variable\">cli</span> <span class=\"hljs-operator\">=</span> CLI.create(<span class=\"hljs-string\">&quot;my-command&quot;</span>).\n  addArgument(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Argument</span>().setArgName(<span class=\"hljs-string\">&quot;my-arg&quot;</span>)).\n  addOption(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Option</span>().setArgName(<span class=\"hljs-string\">&quot;help&quot;</span>).setShortName(<span class=\"hljs-string\">&quot;h&quot;</span>).setLongName(<span class=\"hljs-string\">&quot;help&quot;</span>));\n<span class=\"hljs-type\">CommandBuilder</span> <span class=\"hljs-variable\">command</span> <span class=\"hljs-operator\">=</span> CommandBuilder.command(cli);\ncommand.processHandler(process -&gt; {\n  <span class=\"hljs-comment\">// ...</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>命令不仅提供了 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html\">process</a></code> 与 shell 互动，\n还提供了继承自 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html\">Tty</a></code> 的 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html\">CommandProcess</a></code>\n来与 terminal 互动。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_terminal_usage\"><a class=\"anchor\" href=\"#_terminal_usage\"></a>终端用法</h3>\n<div class=\"sect3\">\n<h4 id=\"_terminal_io\"><a class=\"anchor\" href=\"#_terminal_io\"></a>终端 I/O</h4>\n<div class=\"paragraph\">\n<p>当终端接收到数据时，<code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html#stdinHandler-io.vertx.core.Handler-\">stdinHandler</a></code> 注册的 <em>处理器</em> 会被调用，\n比如用户的键盘输入：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">tty.stdinHandler(data -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;Received &quot;</span> + data);\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>命令可以使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html#write-java.lang.String-\">write</a></code> 写入数据到标准输出流中。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">tty.write(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_terminal_size\"><a class=\"anchor\" href=\"#_terminal_size\"></a>终端窗口大小</h4>\n<div class=\"paragraph\">\n<p>当前的终端窗口大小可以使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html#width--\">width</a></code> 和\n<code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html#height--\">height</a></code> 来获取。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">tty.write(<span class=\"hljs-string\">&quot;Current terminal size: (&quot;</span> + tty.width() + <span class=\"hljs-string\">&quot;, &quot;</span> + tty.height() + <span class=\"hljs-string\">&quot;)&quot;</span>);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_resize_event\"><a class=\"anchor\" href=\"#_resize_event\"></a>窗口尺寸调整事件</h4>\n<div class=\"paragraph\">\n<p>当终端的窗口大小改变，<code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html#resizehandler-io.vertx.core.Handler-\">resizehandler</a></code> 将会被调用，\n新的终端窗口大小可以通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html#width--\">width</a></code> 和\n<code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html#height--\">height</a></code> 来获得。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">tty.resizehandler(v -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;terminal resized : &quot;</span> + tty.width() + <span class=\"hljs-string\">&quot; &quot;</span> + tty.height());\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_terminal_type\"><a class=\"anchor\" href=\"#_terminal_type\"></a>终端类型</h4>\n<div class=\"paragraph\">\n<p>终端类型被用来给远程的终端发送转义符号：\n<code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html#type--\">type</a></code> 方法返回当前终端的类型，如果终端没有指定该值，则可能返回为 null。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">System.out.println(<span class=\"hljs-string\">&quot;terminal type : &quot;</span> + tty.type());</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_shell_session\"><a class=\"anchor\" href=\"#_shell_session\"></a>Shell 会话</h3>\n<div class=\"paragraph\">\n<p>shell 是一个有连接的服务，所以它需要维护与客户端之间的会话，命令可以使用这个会话来限制数据的有效范围。\n任何命令都可以使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html#session--\">session</a></code> 来获取当前的会话。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">command.processHandler(process -&gt; {\n\n  <span class=\"hljs-type\">Session</span> <span class=\"hljs-variable\">session</span> <span class=\"hljs-operator\">=</span> process.session();\n\n  <span class=\"hljs-keyword\">if</span> (session.get(<span class=\"hljs-string\">&quot;my_key&quot;</span>) == <span class=\"hljs-literal\">null</span>) {\n    session.put(<span class=\"hljs-string\">&quot;my key&quot;</span>, <span class=\"hljs-string\">&quot;my value&quot;</span>);\n  }\n\n  process.end();\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_process_termination\"><a class=\"anchor\" href=\"#_process_termination\"></a>进程结束</h3>\n<div class=\"paragraph\">\n<p>调用 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html#end--\">end</a></code> 方法即可结束当前的处理进程，\n它可以在处理进程中的任何时候进行调用：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">command.processHandler(process -&gt; {\n  <span class=\"hljs-type\">Vertx</span> <span class=\"hljs-variable\">vertx</span> <span class=\"hljs-operator\">=</span> process.vertx();\n\n  <span class=\"hljs-comment\">// Set a timer</span>\n  vertx.setTimer(<span class=\"hljs-number\">1000</span>, id -&gt; {\n\n    <span class=\"hljs-comment\">// End the command when the timer is fired</span>\n    process.end();\n  });\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_process_events\"><a class=\"anchor\" href=\"#_process_events\"></a>进程事件</h3>\n<div class=\"paragraph\">\n<p>命令可以订阅一些进程事件.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_interrupt_event\"><a class=\"anchor\" href=\"#_interrupt_event\"></a>中断事件</h4>\n<div class=\"paragraph\">\n<p>当用户在命令执行的过程中键入 <em>Ctrl+C</em>，该中断事件将会被触发，随后该进程被中断，\n<code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html#interruptHandler-io.vertx.core.Handler-\">interruptHandler</a></code> 指定的 <em>处理器</em> 即被调用。\n该 handler 可以用来中断命令对 CLI 的 <em>阻塞</em>，然后优雅地结束命令进程。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">command.processHandler(process -&gt; {\n  <span class=\"hljs-type\">Vertx</span> <span class=\"hljs-variable\">vertx</span> <span class=\"hljs-operator\">=</span> process.vertx();\n\n  <span class=\"hljs-comment\">// 在控制台每隔1s打印一次信息</span>\n  <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">periodicId</span> <span class=\"hljs-operator\">=</span> vertx.setPeriodic(<span class=\"hljs-number\">1000</span>, id -&gt; {\n    process.write(<span class=\"hljs-string\">&quot;tick\\n&quot;</span>);\n  });\n\n  <span class=\"hljs-comment\">// 当用户按下 Ctrl+C：取消定时器的并结束当前进程</span>\n  process.interruptHandler(v -&gt; {\n    vertx.cancelTimer(periodicId);\n    process.end();\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果没有注册任何中断 <em>处理器</em>， 输入 <em>Ctrl+C</em> 不会对当前的命令进程产生丝毫影响，\n并且该事件很可能会被 shell 延期处理，就好像是在控制台换行一样。</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_suspendresume_events\"><a class=\"anchor\" href=\"#_suspendresume_events\"></a>挂起/恢复 事件</h4>\n<div class=\"paragraph\">\n<p>如果用户对正在运行的命令进行输入 <em>Ctrl+Z</em> ，那么由 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html#suspendHandler-io.vertx.core.Handler-\">suspendHandler</a></code> 注册的 <em>处理器</em> 即被调用，\n该命令则会被 <em>挂起</em>：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>如果命令注册了挂起事件，那么它将接收到该事件的触发。</p>\n</li>\n<li>\n<p>命令不会收到标准输入的任何数据</p>\n</li>\n<li>\n<p>shell 会提示用户继续输入</p>\n</li>\n<li>\n<p>命令可以收到中断事件和结束事件</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>当用户键入 <em>fg</em>，当前命令处理进程即可恢复，\n而 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html#resumeHandler-io.vertx.core.Handler-\">resumeHandler</a></code> 注册的 <em>处理器</em> 也会被调用：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>如果命令注册了恢复事件，那么它可以收到该事件的触发</p>\n</li>\n<li>\n<p>如果命令已经注册了 stdin <em>处理器</em>，那么它可以再一次从标准输入流中获取到数据</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">command.processHandler(process -&gt; {\n\n  <span class=\"hljs-comment\">// 命令被挂起</span>\n  process.suspendHandler(v -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;Suspended&quot;</span>);\n  });\n\n  <span class=\"hljs-comment\">// 命令恢复</span>\n  process.resumeHandler(v -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;Resumed&quot;</span>);\n  });\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_end_events\"><a class=\"anchor\" href=\"#_end_events\"></a>结束事件</h4>\n<div class=\"paragraph\">\n<p>当正在运行或者挂起的命令进程被终止时，\n<code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html#endHandler-io.vertx.core.Handler-\">endHandler</a></code> 将会被调用，\n比如 shell 会话关闭或者命令 <em>结束</em>。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">command.processHandler(process -&gt; {\n\n  <span class=\"hljs-comment\">// 命令终止</span>\n  process.endHandler(v -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;Terminated&quot;</span>);\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>一旦执行 <code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandProcess.html#end--\">end</a></code> 方法，结束 <em>处理器</em> 即被调用。</p>\n</div>\n<div class=\"paragraph\">\n<p>该 <em>处理器</em> 对于命令终止时的一些资源清理是非常有用的，比如关闭连接或者定时器等。</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_command_completion\"><a class=\"anchor\" href=\"#_command_completion\"></a>命令完成</h3>\n<div class=\"paragraph\">\n<p>命令提供了完成 <em>处理器</em> ，以便于实现上下文命令行的完成接口。</p>\n</div>\n<div class=\"paragraph\">\n<p>由于其实现是基于 Vert.x 服务，<code><a href=\"../../apidocs/io/vertx/ext/shell/command/CommandBuilder.html#completionHandler-io.vertx.core.Handler-\">completion\nhandler</a></code> 与其他处理 handler一样都是非阻塞的，比如文件系统。</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/cli/Completion.html#lineTokens--\">lineTokens</a></code> 返回从行起点到光标位置的 <code><a href=\"../../apidocs/io/vertx/ext/shell/cli/CliToken.html\">tokens</a></code> 列表，\n如果光标位于行起点，\n那么这个列表可能为空。</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/cli/Completion.html#rawLine--\">rawLine</a></code> 返回当前完成列表从行起点到光标位置的原始格式的数据，\n即没有任何字符转义。</p>\n</div>\n<div class=\"paragraph\">\n<p>通过调用 <code><a href=\"../../apidocs/io/vertx/ext/shell/cli/Completion.html#complete-java.util.List-\">complete</a></code> 来结束当前的完成事件。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_shell_server\"><a class=\"anchor\" href=\"#_shell_server\"></a>Shell 服务端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>无论是以编码的方式，还是作为一个 Vert.x 服务，Shell 服务提供了便利的方式来启动一个预配置的 shell。\n如果需要更大的灵活性，那么可以使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/ShellServer.html\">ShellServer</a></code> 来代替 shell 服务。</p>\n</div>\n<div class=\"paragraph\">\n<p>例如 shell http 终端可以配置成使用现有的路由，而不是启动一个自己的 http 服务端。</p>\n</div>\n<div class=\"paragraph\">\n<p>要想使用 shell 服务端需要配置明确，但也更加灵活，一个 shell 服务端配置需要以下几步：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">ShellServer</span> <span class=\"hljs-variable\">server</span> <span class=\"hljs-operator\">=</span> ShellServer.create(vertx); <b class=\"conum\">(1)</b>\n\n<span class=\"hljs-type\">Router</span> <span class=\"hljs-variable\">shellRouter</span> <span class=\"hljs-operator\">=</span> Router.router(vertx); <b class=\"conum\">(2)</b>\nrouter.mountSubRouter(<span class=\"hljs-string\">&quot;/shell&quot;</span>, shellRouter);\n<span class=\"hljs-type\">TermServer</span> <span class=\"hljs-variable\">httpTermServer</span> <span class=\"hljs-operator\">=</span> TermServer.createHttpTermServer(vertx, router);\n\n<span class=\"hljs-type\">TermServer</span> <span class=\"hljs-variable\">sshTermServer</span> <span class=\"hljs-operator\">=</span> TermServer.createSSHTermServer(vertx); <b class=\"conum\">(3)</b>\n\nserver.registerTermServer(httpTermServer); <b class=\"conum\">(4)</b>\nserver.registerTermServer(sshTermServer);\n\nserver.registerCommandResolver(CommandResolver.baseCommands(vertx)); <b class=\"conum\">(5)</b>\n\nserver.listen(); <b class=\"conum\">(6)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>创建一个 shell 服务端</p>\n</li>\n<li>\n<p>创建一个 HTTP 终端服务器挂载到现有的路由</p>\n</li>\n<li>\n<p>创建一个 SSH 终端的服务器</p>\n</li>\n<li>\n<p>注册终端服务器</p>\n</li>\n<li>\n<p>注册所有基本命令</p>\n</li>\n<li>\n<p>最后启动 shell 服务端</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>除此之外，shell 服务端还可以用于创建处理进程中shell会话：提供了一个可编码的交互式 shell 。</p>\n</div>\n<div class=\"paragraph\">\n<p>使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/ShellServer.html#createShell-io.vertx.ext.shell.term.Term-\">createShell</a></code> 来创建处理进程中 shell 会话：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">Shell</span> <span class=\"hljs-variable\">shell</span> <span class=\"hljs-operator\">=</span> shellServer.createShell();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>主要的作用是运行和命令测试：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">Shell</span> <span class=\"hljs-variable\">shell</span> <span class=\"hljs-operator\">=</span> shellServer.createShell();\n\n<span class=\"hljs-comment\">// 为当前命令创建一个任务</span>\n<span class=\"hljs-type\">Job</span> <span class=\"hljs-variable\">job</span> <span class=\"hljs-operator\">=</span> shell.createJob(<span class=\"hljs-string\">&quot;my-command 1234&quot;</span>);\n\n<span class=\"hljs-comment\">// 创建一个伪终端</span>\n<span class=\"hljs-type\">Pty</span> <span class=\"hljs-variable\">pty</span> <span class=\"hljs-operator\">=</span> Pty.create();\npty.stdoutHandler(data -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;Command wrote &quot;</span> + data);\n});\n\n<span class=\"hljs-comment\">// 运行命令</span>\njob.setTty(pty.slave());\njob.statusUpdateHandler(status -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;Command terminated with status &quot;</span> + status);\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当 shell 运行时，\n<code><a href=\"../../apidocs/io/vertx/ext/shell/term/Pty.html\">Pty</a></code> 伪终端是与命令互动的主要手段：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>使用标准的 输入/输出 来写入和读取数据</p>\n</li>\n<li>\n<p>调整终端的窗口大小</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>当使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/system/JobController.html#close-io.vertx.core.Handler-\">close</a></code> 关闭 shell 时，\n它将会结束当前 shell 会话中的所有任务。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_terminal_servers\"><a class=\"anchor\" href=\"#_terminal_servers\"></a>终端服务器</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Shell 还为那些需要写纯终端应用的开发者提供了裸终端服务器。</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/Term.html\">Term</a></code> 的 <em>处理器</em> 必须在终端服务器启动前配置好，\n当用户连接时，这个 <em>处理器</em> 将处理每个终端的数据。</p>\n</div>\n<div class=\"paragraph\">\n<p>{@code Auth*Options} 可以通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/SSHTermOptions.html\">SSHTermOptions</a></code> 和 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/HttpTermOptions.html\">HttpTermOptions</a></code> 来设置。\n或者，在终端服务器启动之前通过 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/TermServer.html#authProvider-io.vertx.ext.auth.AuthProvider-\">set</a></code> 直接设置\n<code><a href=\"../../apidocs/io/vertx/ext/auth/AuthProvider.html\">AuthProvider</a></code> 。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_ssh_term\"><a class=\"anchor\" href=\"#_ssh_term\"></a>SSH 终端</h3>\n<div class=\"paragraph\">\n<p>终端服务器提供了 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/Term.html\">Term</a></code> <em>处理器</em> 来接受传入的终端连接。\n当一个远程终端进行连接时，\n<code><a href=\"../../apidocs/io/vertx/ext/shell/term/Term.html\">Term</a></code> 可以用来与当前连接的终端互动。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">TermServer</span> <span class=\"hljs-variable\">server</span> <span class=\"hljs-operator\">=</span> TermServer.createSSHTermServer(vertx, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SSHTermOptions</span>().setPort(<span class=\"hljs-number\">5000</span>).setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>));\nserver.termHandler(term -&gt; {\n  term.stdinHandler(line -&gt; {\n    term.write(line);\n  });\n});\nserver.listen();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/shell/term/Term.html\">Term</a></code> 同时也是一个 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/Tty.html\">Tty</a></code>，\n本节将介绍如何使用 tty。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_telnet_term\"><a class=\"anchor\" href=\"#_telnet_term\"></a>Telnet 终端</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">TermServer</span> <span class=\"hljs-variable\">server</span> <span class=\"hljs-operator\">=</span> TermServer.createTelnetTermServer(vertx, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TelnetTermOptions</span>().setPort(<span class=\"hljs-number\">5000</span>).setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>));\nserver.termHandler(term -&gt; {\n  term.stdinHandler(line -&gt; {\n    term.write(line);\n  });\n});\nserver.listen();</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_term\"><a class=\"anchor\" href=\"#_http_term\"></a>HTTP 终端</h3>\n<div class=\"paragraph\">\n<p>使用 <code><a href=\"../../apidocs/io/vertx/ext/shell/term/TermServer.html#createHttpTermServer-io.vertx.core.Vertx-\">TermServer.createHttpTermServer</a></code> 方法创建一个 HTTP终端服务器，\n该服务器基于 Vert.x Web ，使用 SockJS 协议。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">TermServer</span> <span class=\"hljs-variable\">server</span> <span class=\"hljs-operator\">=</span> TermServer.createHttpTermServer(vertx, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpTermOptions</span>().setPort(<span class=\"hljs-number\">5000</span>).setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>));\nserver.termHandler(term -&gt; {\n  term.stdinHandler(line -&gt; {\n    term.write(line);\n  });\n});\nserver.listen();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>一个 HTTP终端可以启动自己的 HTTP 服务器，也可以复用 Vert.x Web 中已存在的 <code><a href=\"../../apidocs/io/vertx/ext/web/Router.html\">Router</a></code>。</p>\n</div>\n<div class=\"paragraph\">\n<p>shell 可以在 <code>/shell.html</code> 中找到。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">TermServer</span> <span class=\"hljs-variable\">server</span> <span class=\"hljs-operator\">=</span> TermServer.createHttpTermServer(vertx, router, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpTermOptions</span>().setPort(<span class=\"hljs-number\">5000</span>).setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>));\nserver.termHandler(term -&gt; {\n  term.stdinHandler(line -&gt; {\n    term.write(line);\n  });\n});\nserver.listen();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果 HTTP shell 集成到现有的 HTTP 服务器中，那么后面的配置将会很方便。</p>\n</div>\n<div class=\"paragraph\">\n<p>HTTP 终端服务器提供了一些默认配置：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>shell.html</code> 访问页面</p>\n</li>\n<li>\n<p><code><a href=\"https://github.com/chjj/term.js/\">term.js</a></code> 客户端js</p>\n</li>\n<li>\n<p>the <code>vertxshell.js</code> 客户端js</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><code>vertxshell.js</code> 集成 <code>term.js</code> 作为 HTTP终端客户端连接的一部分。</p>\n</div>\n<div class=\"paragraph\">\n<p>它将 <code>term.js</code> 与 SockJS 集成，并且需要 HTTP 终端服务器的地址作为访问地址：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">&#x27;http://localhost/shell&#x27;</span>;\n <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VertxTerm</span>(url, {\n   <span class=\"hljs-attr\">cols</span>: <span class=\"hljs-number\">80</span>,\n   <span class=\"hljs-attr\">rows</span>: <span class=\"hljs-number\">24</span>\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>也可以使用更直接的 websockets，如果是这样，远程的终端 URL 需要以 <code>/websocket</code> 开始：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">&#x27;ws://localhost/shell/websocket&#x27;</span>;\n <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VertxTerm</span>(url, {\n   <span class=\"hljs-attr\">cols</span>: <span class=\"hljs-number\">80</span>,\n   <span class=\"hljs-attr\">rows</span>: <span class=\"hljs-number\">24</span>\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>为了满足更多定制化需求，这些资源统一集中在 Vert.x Shell 模块下面的 <code>io.vertx.ext.shell</code> 包中，\n可以直接复制和修改。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_command_discovery\"><a class=\"anchor\" href=\"#_command_discovery\"></a>命令发现</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>命令发现可以用来在没有明确注册的情况下添加新的命令到 Vert.x 中。</p>\n</div>\n<div class=\"paragraph\">\n<p>比如，在 <em>Dropwizard</em> metrics 服务中，通过这种方式动态地添加特定的 metrics 命令到 shell 服务中。</p>\n</div>\n<div class=\"paragraph\">\n<p>这一切都是通过扩展自 <code>java.util.ServiceLoader</code> 的 <code><a href=\"../../apidocs/io/vertx/ext/shell/spi/CommandResolverFactory.html\">CommandResolverFactory</a></code> 实现的。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCommands</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CommandResolverFactory</span> {\n\n <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">resolver</span><span class=\"hljs-params\">(Vertx vertx, Handler&lt;AsyncResult&lt;CommandResolver&gt;&gt; resolverHandler)</span> {\n   resolverHandler.handler(() -&gt; Arrays.asList(myCommand1, myCommand2));\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>resolver</code> 方法是异步的，因为在命令被执行之前，\nresolver 可能需要等待一些条件。</p>\n</div>\n<div class=\"paragraph\">\n<p>shell 服务发现使用了服务加载机制：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">服务提供的加载文件 <code>META-INF/services/io.vertx.ext.shell.spi.CommandResolverFactory</code></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>my.CustomCommands</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这只对 <code><a href=\"../../apidocs/io/vertx/ext/shell/ShellService.html\">ShellService</a></code> 有效，\n<code><a href=\"../../apidocs/io/vertx/ext/shell/ShellServer.html\">ShellServer</a></code> 并没有使用该机制。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_command_pack\"><a class=\"anchor\" href=\"#_command_pack\"></a>命令包</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>命令包是一个提供了新的 Vert.x Shell 命令的 jar 包文件。</p>\n</div>\n<div class=\"paragraph\">\n<p>该 jar 文件只需要放在 classpath 目录下，然后就会被 Vertx. Shell 发现。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CommandPackExample</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CommandResolverFactory</span> {\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">resolver</span><span class=\"hljs-params\">(Vertx vertx, Handler&lt;AsyncResult&lt;CommandResolver&gt;&gt; resolveHandler)</span> {\n    List&lt;Command&gt; commands = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n\n    <span class=\"hljs-comment\">// 添加一个命令</span>\n    commands.add(Command.create(vertx, JavaCommandExample.class));\n\n    <span class=\"hljs-comment\">// 添加另一个命令</span>\n    commands.add(CommandBuilder.command(<span class=\"hljs-string\">&quot;another-command&quot;</span>).processHandler(process -&gt; {\n      <span class=\"hljs-comment\">// 命令处理逻辑</span>\n    }).build(vertx));\n\n    <span class=\"hljs-comment\">// 用命令来处理</span>\n    resolveHandler.handle(Future.succeededFuture(() -&gt; commands));\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>该命令包使用了命令发现机制，所以需要一些服务描述：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><code>META-INF/services/io.vertx.ext.shell.spi.CommandResolverFactory</code> 文件中添加内容</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>examples.pack.CommandPackExample</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.2.5"},"__N_SSG":true}