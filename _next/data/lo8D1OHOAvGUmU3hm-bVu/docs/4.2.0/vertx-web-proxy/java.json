{"pageProps":{"slug":"4.2.0/vertx-web-proxy/java","title":"Vert.x Web Proxy","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_web_proxy\">Using Vert.x Web Proxy</a></li>\n<li><a href=\"#_basic_web_proxy\">Basic Web Proxy</a></li>\n<li><a href=\"#_origin_server_backend\">Origin Server (Backend)</a></li>\n<li><a href=\"#_proxy_server\">Proxy Server</a></li>\n<li><a href=\"#_using_proxyhandler\">Using <code>ProxyHandler</code></a></li>\n<li><a href=\"#_using_proxyhandler_for_multiple_targets\">Using <code>ProxyHandler</code> for multiple targets</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Web Proxy</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Web Proxy provides a handler that handles the reverse proxy logic using\n<a href=\"https://github.com/eclipse-vertx/vertx-http-proxy\">Vert.x Http Proxy</a>.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nThis module has <em>Tech Preview</em> status, this means the API can change between versions.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_web_proxy\"><a class=\"anchor\" href=\"#_using_vert_x_web_proxy\"></a>Using Vert.x Web Proxy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use Vert.x Web Proxy, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web-proxy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.0.Beta1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-web-proxy:4.2.0.Beta1&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_basic_web_proxy\"><a class=\"anchor\" href=\"#_basic_web_proxy\"></a>Basic Web Proxy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In order to accomplish local reverse proxy with Vert.x Web Proxy you need the following:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><strong>Proxy Server</strong> that handles front requests and forward them to the <strong>origin server</strong> using <code>ProxyHandler</code>.</p>\n</li>\n<li>\n<p><strong>Origin Server</strong> that handles requests from the <strong>proxy server</strong> and handles responses accordingly.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Now, you have the overall concept so let&#8217;s dive in implementation and begin with <strong>origin server</strong> then\nthe <strong>proxy server</strong> using <code>ProxyHandler</code>:</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_origin_server_backend\"><a class=\"anchor\" href=\"#_origin_server_backend\"></a>Origin Server (Backend)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You simply create the <strong>origin server</strong> and handle requests with Vert.x Web <code>Router</code>, the <strong>origin server</strong>\nlistens to port <code>7070</code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HttpServer backendServer = vertx.createHttpServer();\n\nRouter backendRouter = Router.router(vertx);\n\nbackendRouter.route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/foo&quot;</span>).handler(rc -&gt; {\n  rc.response()\n    .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>)\n    .end(<span class=\"hljs-string\">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;I&#x27;m the target resource!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);\n});\n\nbackendServer.requestHandler(backendRouter).listen(<span class=\"hljs-number\">7070</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_proxy_server\"><a class=\"anchor\" href=\"#_proxy_server\"></a>Proxy Server</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Create the <strong>proxy server</strong> that listens to port <code>8080</code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HttpServer proxyServer = vertx.createHttpServer();\n\nRouter proxyRouter = Router.router(vertx);\n\nproxyServer.requestHandler(proxyRouter);\n\nproxyServer.listen(<span class=\"hljs-number\">8080</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_proxyhandler\"><a class=\"anchor\" href=\"#_using_proxyhandler\"></a>Using <code>ProxyHandler</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The last interesting part is to route <strong>proxy server</strong> requests to the <strong>origin server</strong>, so you need to create <code>HttpProxy</code>\nwith specified target and <code>ProxyHandler</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HttpClient proxyClient = vertx.createHttpClient();\n\nHttpProxy httpProxy = HttpProxy.reverseProxy(proxyClient);\nhttpProxy.origin(<span class=\"hljs-number\">7070</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n\nproxyRouter\n  .route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/foo&quot;</span>).handler(ProxyHandler.create(httpProxy));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or you can specify the target in <code>ProxyHandler</code> instead.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HttpClient proxyClient = vertx.createHttpClient();\n\nHttpProxy httpProxy = HttpProxy.reverseProxy(proxyClient);\n\nproxyRouter\n  .route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/foo&quot;</span>)\n  .handler(ProxyHandler.create(httpProxy, <span class=\"hljs-number\">7070</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Finally, the <strong>proxy server</strong> requests will be routed as a reverse proxy to the <strong>origin server</strong> conveniently.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_proxyhandler_for_multiple_targets\"><a class=\"anchor\" href=\"#_using_proxyhandler_for_multiple_targets\"></a>Using <code>ProxyHandler</code> for multiple targets</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In order to route <strong>proxy server</strong> requests to multiple <strong>origin servers</strong> you simply create <code>HttpProxy</code> for\neach one and specify the target independently.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HttpClient proxyClient = vertx.createHttpClient();\n\nHttpProxy httpProxy1 = HttpProxy.reverseProxy(proxyClient);\nhttpProxy1.origin(<span class=\"hljs-number\">7070</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n\nHttpProxy httpProxy2 = HttpProxy.reverseProxy(proxyClient);\nhttpProxy2.origin(<span class=\"hljs-number\">6060</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n\nproxyRouter\n  .route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/foo&quot;</span>).handler(ProxyHandler.create(httpProxy1));\n\nproxyRouter\n  .route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/bar&quot;</span>).handler(ProxyHandler.create(httpProxy2));</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.2.0"},"__N_SSG":true}