{"pageProps":{"slug":"3.9.2/vertx-infinispan/java","title":"Infinispan Cluster Manager","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_this_cluster_manager\">Using this cluster manager</a></li>\n<li><a href=\"#_configuring_this_cluster_manager\">Configuring this cluster manager</a></li>\n<li><a href=\"#_using_an_existing_infinispan_cache_manager\">Using an existing Infinispan Cache Manager</a></li>\n<li><a href=\"#_configuring_for_kubernetes\">Configuring for Kubernetes</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_rolling_updates\">Rolling updates</a></li>\n</ul>\n</li>\n<li><a href=\"#_configuring_for_docker_compose\">Configuring for Docker Compose</a></li>\n<li><a href=\"#_trouble_shooting_clustering\">Trouble shooting clustering</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_multicast_not_enabled_on_the_machine\">Multicast not enabled on the machine.</a></li>\n<li><a href=\"#_using_wrong_network_interface\">Using wrong network interface</a></li>\n<li><a href=\"#_using_a_vpn\">Using a VPN</a></li>\n<li><a href=\"#_when_multicast_is_not_available\">When multicast is not available</a></li>\n<li><a href=\"#_problems_with_ipv6\">Problems with IPv6</a></li>\n<li><a href=\"#_enabling_logging\">Enabling logging</a></li>\n</ul>\n</li>\n<li><a href=\"#_infinispan_logging\">Infinispan logging</a></li>\n<li><a href=\"#_jgroups_logging\">JGroups logging</a></li>\n<li><a href=\"#_shareddata_extensions\">SharedData extensions</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_asyncmap_content_streams\">AsyncMap content streams</a></li>\n</ul>\n</li>\n<li><a href=\"#_cluster_administration\">Cluster administration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_rebalancing\">Rebalancing</a></li>\n<li><a href=\"#_split_brain_syndrome\">Split-brain syndrome</a></li>\n<li><a href=\"#_recommendations\">Recommendations</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Infinispan Cluster Manager</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This is a cluster manager implementation for Vert.x that uses <a href=\"http://infinispan.org/\">Infinispan</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This implementation is packaged inside:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-infinispan<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In Vert.x a cluster manager is used for various functions including:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Discovery and group membership of Vert.x nodes in a cluster</p>\n</li>\n<li>\n<p>Maintaining cluster wide topic subscriber lists (so we know which nodes are interested in which event bus addresses)</p>\n</li>\n<li>\n<p>Distributed Map support</p>\n</li>\n<li>\n<p>Distributed Locks</p>\n</li>\n<li>\n<p>Distributed Counters</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Cluster managers <strong>do not</strong> handle the event bus inter-node transport, this is done directly by Vert.x with TCP connections.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_this_cluster_manager\"><a class=\"anchor\" href=\"#_using_this_cluster_manager\"></a>Using this cluster manager</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are using Vert.x from the command line, the jar corresponding to this cluster manager (it will be named <code>vertx-infinispan-3.9.2.jar</code>\nshould be in the <code>lib</code> directory of the Vert.x installation.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want clustering with this cluster manager in your Vert.x Maven or Gradle project then just add a dependency to\nthe artifact: <code>io.vertx:vertx-infinispan:3.9.2</code> in your project.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the jar is on your classpath as above then Vert.x will automatically detect this and use it as the cluster manager.\nPlease make sure you don&#8217;t have any other cluster managers on your classpath or Vert.x might\nchoose the wrong one.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also specify the cluster manager programmatically if you are embedding Vert.x by specifying it on the options\nwhen you are creating your Vert.x instance, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ClusterManager mgr = <span class=\"hljs-keyword\">new</span> InfinispanClusterManager();\n\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\n\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_this_cluster_manager\"><a class=\"anchor\" href=\"#_configuring_this_cluster_manager\"></a>Configuring this cluster manager</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The default cluster manager configuration can be modified with <code>infinispan.xml</code> and/or <code>jgroups.xml</code> files.\nThe former configures the data grid, the latter group management and member discovery.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can place one or both of them on your classpath.\nIf you want to embed your custom file in a fat jar, it must be located at the root of the fat jar.\nIf it&#8217;s an external file, the <strong>directory</strong> containing the file must be added to the classpath. For\nexample, if you are using the <em>launcher</em> class from Vert.x, the classpath enhancement can be done as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> If infinispan.xml and/or jgroups.xml files are <span class=\"hljs-keyword\">in</span> the current directory:</span>\njava -jar my-app.jar -cp . -cluster\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> If infinispan.xml and/or jgroups.xml files are <span class=\"hljs-keyword\">in</span> the conf directory:</span>\njava -jar my-app.jar -cp conf -cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Another way to override the configuration is by providing the file locations via system properties:\n<code>vertx.infinispan.config</code> and/or <code>vertx.jgroups.config</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Use a cluster configuration located <span class=\"hljs-keyword\">in</span> an external file</span>\njava -Dvertx.infinispan.config=./config/my-infinispan.xml -jar ... -cluster\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Or use a custom configuration from the classpath</span>\njava -Dvertx.infinispan.config=my/package/config/my-infinispan.xml -jar ... -cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The cluster manager will search for the file in classpath first, and fallback to the filesystem.</p>\n</div>\n<div class=\"paragraph\">\n<p>The system properties, when present, override any <code>infinispan.xml</code> or <code>jgroups.xml</code> on the classpath.</p>\n</div>\n<div class=\"paragraph\">\n<p>The xml files are Infinispan and JGroups configuration files and are described in detail in the documentation on the Infinispan and JGroups web-sites.</p>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\nif a <code>jgroups.xml</code> file is on the classpath or if you set the <code>vertx.jgroups.config</code> system property,\nit will override any JGroups <code>stack-file</code> path defined in the Infinispan configuration file.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>The default JGroups configuration uses multicast for discovery and TCP for group management.\nMake sure multicast is enabled on your network for this to work.</p>\n</div>\n<div class=\"paragraph\">\n<p>For full documentation on how to configure the transport differently or use a different transport please consult the\nInfinispan / JGroups documentations.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_an_existing_infinispan_cache_manager\"><a class=\"anchor\" href=\"#_using_an_existing_infinispan_cache_manager\"></a>Using an existing Infinispan Cache Manager</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can pass an existing <code>DefaultCacheManager</code> in the cluster manager to reuse an existing cache manager:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ClusterManager mgr = <span class=\"hljs-keyword\">new</span> InfinispanClusterManager(cacheManager);\n\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\n\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this case, vert.x is not the cache manager owner and so do not shut it down on close.</p>\n</div>\n<div class=\"paragraph\">\n<p>Notice that the custom Infinispan instance need to be configured with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache-container</span> <span class=\"hljs-attr\">default-cache</span>=<span class=\"hljs-string\">\"distributed-cache\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributed-cache</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"distributed-cache\"</span>/&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributed-cache</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"__vertx.subs\"</span>/&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">replicated-cache</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"__vertx.haInfo\"</span>/&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributed-cache-configuration</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"__vertx.distributed.cache.configuration\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cache-container</span>&gt;</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_for_kubernetes\"><a class=\"anchor\" href=\"#_configuring_for_kubernetes\"></a>Configuring for Kubernetes</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>On Kubernetes, JGroups should be configured to use the <code>KUBE_PING</code> protocol.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, add the <code>org.infinispan:infinispan-cloud:9.4.10.Final</code> dependency to your project.\nWith Maven it looks like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.infinispan<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>infinispan-cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>9.4.10.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then, set the <code>vertx.jgroups.config</code> system property to <code>default-configs/default-jgroups-kubernetes.xml</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">-Dvertx.jgroups.config=default-configs/default-jgroups-kubernetes.xml</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This JGroups stack file is located in the <code>infinispan-cloud</code> JAR and preconfigured for Kubernetes.</p>\n</div>\n<div class=\"paragraph\">\n<p>Also, set the project namespace as the scope for discovery.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Dockerfile\" data-lang=\"Dockerfile\"><span class=\"hljs-keyword\">ENV</span> KUBERNETES_NAMESPACE my-project</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Optionnaly, to create separate clusters in the same namespace, add a labels selector:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Dockerfile\" data-lang=\"Dockerfile\"><span class=\"hljs-keyword\">ENV</span> KUBERNETES_LABELS my-<span class=\"hljs-keyword\">label</span><span class=\"bash\">=my-value</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then, force usage of IPv4 in the JVM with a system property.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">-Djava.net.preferIPv4Stack=true</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Eventually, the setup needs a service account.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">oc policy add-role-to-user view system:serviceaccount:$(oc project -q):default -n $(oc project -q)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Further configuration details are available on the <a href=\"https://github.com/jgroups-extras/jgroups-kubernetes\">Kubernetes discovery protocol for JGroups repository</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_rolling_updates\"><a class=\"anchor\" href=\"#_rolling_updates\"></a>Rolling updates</h3>\n<div class=\"paragraph\">\n<p>During rolling udpates, the Infinispan team <a href=\"http://infinispan.org/docs/stable/user_guide/user_guide.html#using_kubernetes_and_openshift_rolling_updates\">recommends</a> to replace pods one by one.</p>\n</div>\n<div class=\"paragraph\">\n<p>To do so, we must configure Kubernetes to:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>never start more than one new pod at once</p>\n</li>\n<li>\n<p>forbid more than one unavailable pod during the process</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-attr\">spec:</span>\n <span class=\"hljs-attr\">strategy:</span>\n   <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">Rolling</span>\n   <span class=\"hljs-attr\">rollingParams:</span>\n     <span class=\"hljs-attr\">updatePeriodSeconds:</span> <span class=\"hljs-number\">10</span>\n     <span class=\"hljs-attr\">intervalSeconds:</span> <span class=\"hljs-number\">20</span>\n     <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">600</span>\n     <span class=\"hljs-attr\">maxUnavailable:</span> <span class=\"hljs-number\">1</span> <b class=\"conum\">(1)</b>\n     <span class=\"hljs-attr\">maxSurge:</span> <span class=\"hljs-number\">1</span> <b class=\"conum\">(2)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>the maximum number of pods that can be unavailable during the update process</p>\n</li>\n<li>\n<p>the maximum number of pods that can be created over the desired number of pods</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Also, pod readiness probe must take cluster health into account.\nPlease refer to the <a href=\"#one-by-one\">cluster administration</a> section for details on how to implement a readiness probe with <a href=\"../../vertx-health-check/java/\">Vert.x Health Checks</a>.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_for_docker_compose\"><a class=\"anchor\" href=\"#_configuring_for_docker_compose\"></a>Configuring for Docker Compose</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Make sure to start the Java Virtual Machines with those system properties:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">-Djava.net.preferIPv4Stack=true -Djgroups.tcp.address=NON_LOOPBACK</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This will make JGroups pick the interface of the virtual private network created by Docker.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_trouble_shooting_clustering\"><a class=\"anchor\" href=\"#_trouble_shooting_clustering\"></a>Trouble shooting clustering</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If the default multicast discovery configuration is not working here are some common causes:</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_multicast_not_enabled_on_the_machine\"><a class=\"anchor\" href=\"#_multicast_not_enabled_on_the_machine\"></a>Multicast not enabled on the machine.</h3>\n<div class=\"paragraph\">\n<p>It is quite common in particular on OSX machines for multicast to be disabled by default. Please google for\ninformation on how to enable this.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_wrong_network_interface\"><a class=\"anchor\" href=\"#_using_wrong_network_interface\"></a>Using wrong network interface</h3>\n<div class=\"paragraph\">\n<p>If you have more than one network interface on your machine (and this can also be the case if you are running\nVPN software on your machine), then JGroups may be using the wrong one.</p>\n</div>\n<div class=\"paragraph\">\n<p>To tell JGroups to use a specific interface you can provide the IP address of the interface in the <code>bind_addr</code>\nelement of the configuration. For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TCP</span> <span class=\"hljs-attr\">bind_addr</span>=<span class=\"hljs-string\">\"192.168.1.20\"</span>\n    <span class=\"hljs-attr\">...</span>\n    /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MPING</span> <span class=\"hljs-attr\">bind_addr</span>=<span class=\"hljs-string\">\"192.168.1.20\"</span>\n    <span class=\"hljs-attr\">...</span>\n    /&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Alternatively, if you want to stick with the bundled <code>jgroups.xml</code> file, you can set the <code>jgroups.tcp.address</code> system property:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>-Djgroups.tcp.address=192.168.1.20</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When running Vert.x is in clustered mode, you should also make sure that Vert.x knows about the correct interface.\nWhen running at the command line this is done by specifying the <code>cluster-host</code> option:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx run myverticle.js -cluster -cluster-host your-ip-address</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Where <code>your-ip-address</code> is the same IP address you specified in the JGroups configuration.</p>\n</div>\n<div class=\"paragraph\">\n<p>If using Vert.x programmatically you can specify this using\n<code><a href=\"../../apidocs/io/vertx/core/VertxOptions.html#setClusterHost-java.lang.String-\">setClusterHost</a></code>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_a_vpn\"><a class=\"anchor\" href=\"#_using_a_vpn\"></a>Using a VPN</h3>\n<div class=\"paragraph\">\n<p>This is a variation of the above case. VPN software often works by creating a virtual network interface which often\ndoesn&#8217;t support multicast. If you have a VPN running and you do not specify the correct interface to use in both the\nJGroups configuration and to Vert.x then the VPN interface may be chosen instead of the correct interface.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, if you have a VPN running you may have to configure both JGroups and Vert.x to use the correct interface as\ndescribed in the previous section.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_when_multicast_is_not_available\"><a class=\"anchor\" href=\"#_when_multicast_is_not_available\"></a>When multicast is not available</h3>\n<div class=\"paragraph\">\n<p>In some cases you may not be able to use multicast discovery as it might not be available in your environment. In that case\nyou should configure another protocol, e.g. <code>TCPPING</code> to use TCP sockets, or <code>S3_PING</code> when running on Amazon EC2.</p>\n</div>\n<div class=\"paragraph\">\n<p>For more information on available JGroups discovery protocols and how to configure them\nplease consult the <a href=\"http://www.jgroups.org/manual/index.html#Discovery\">JGroups documentation</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_problems_with_ipv6\"><a class=\"anchor\" href=\"#_problems_with_ipv6\"></a>Problems with IPv6</h3>\n<div class=\"paragraph\">\n<p>If you have troubles configuring an IPv6 host, force the use of IPv4 with the <code>java.net.preferIPv4Stack</code> system property.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>-Djava.net.preferIPv4Stack=true</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_enabling_logging\"><a class=\"anchor\" href=\"#_enabling_logging\"></a>Enabling logging</h3>\n<div class=\"paragraph\">\n<p>When trouble-shooting clustering issues with it&#8217;s often useful to get some logging output from Infinispan and JGroups\nto see if it&#8217;s forming a cluster properly. You can do this (when using the default JUL logging) by adding a file\ncalled <code>vertx-default-jul-logging.properties</code> on your classpath. This is a standard java.util.logging (JUL)\nconfiguration file. Inside it set:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>org.infinispan.level=INFO\norg.jgroups.level=INFO</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>and also</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>java.util.logging.ConsoleHandler.level=INFO\njava.util.logging.FileHandler.level=INFO</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_infinispan_logging\"><a class=\"anchor\" href=\"#_infinispan_logging\"></a>Infinispan logging</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Infinispan relies on JBoss logging. JBoss Logging is a logging bridge providing integration with numerous logging frameworks.</p>\n</div>\n<div class=\"paragraph\">\n<p>Add the logging JARs of you choice to the classpath and JBoss Logging will pick them up automatically.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have multiple logging backends on your classpath, you can force selection with the <code>org.jboss.logging.provider</code> system property.\nFor exeample:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>-Dorg.jboss.logging.provider=log4j2</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>See this <a href=\"http://docs.jboss.org/hibernate/orm/4.3/topical/html/logging/Logging.html\">JBoss Logging guide</a> for more details.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_jgroups_logging\"><a class=\"anchor\" href=\"#_jgroups_logging\"></a>JGroups logging</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>JGroups uses JDK logging by default. log4j and log4j2 are supported if the corresponding JARs are found on the classpath.</p>\n</div>\n<div class=\"paragraph\">\n<p>Please refer to the <a href=\"http://www.jgroups.org/manual/index.html#Logging\">JGroups logging documentation</a> if you need\nmore details or want to implement your own logging backend implementation.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_shareddata_extensions\"><a class=\"anchor\" href=\"#_shareddata_extensions\"></a>SharedData extensions</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_asyncmap_content_streams\"><a class=\"anchor\" href=\"#_asyncmap_content_streams\"></a>AsyncMap content streams</h3>\n<div class=\"paragraph\">\n<p>The <code>InfinispanAsyncMap</code> API allows to retrieve keys, values and entries as streams.\nThis can be useful if you need to go through the content of a large map for bulk processing.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">InfinispanAsyncMap&lt;K, V&gt; infinispanAsyncMap = InfinispanAsyncMap.unwrap(asyncMap);\nReadStream&lt;K&gt; keyStream = infinispanAsyncMap.keyStream();\nReadStream&lt;V&gt; valueStream = infinispanAsyncMap.valueStream();\nReadStream&lt;Map.Entry&lt;K, V&gt;&gt; entryReadStream = infinispanAsyncMap.entryStream();</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cluster_administration\"><a class=\"anchor\" href=\"#_cluster_administration\"></a>Cluster administration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Infinispan cluster manager works by turning Vert.x nodes into members of an Infinispan cluster.\nAs a consequence, Vert.x cluster manager administration should follow the Infinispan management guidelines.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, let&#8217;s take a step back and introduce rebalancing and split-brain syndrome.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_rebalancing\"><a class=\"anchor\" href=\"#_rebalancing\"></a>Rebalancing</h3>\n<div class=\"paragraph\">\n<p>Each Vert.x node holds pieces of the clustering data: eventbus subscriptions, async map entries, clustered counters&#8230;&#8203; etc.</p>\n</div>\n<div class=\"paragraph\">\n<p>When a member joins or leaves the cluster, Infinispan rebalances cache entries on the new set of members.\nIn other words, it moves data around to accomodate the new cluster topology.\nThis process may take some time, depending on the amount of clustered data and number of nodes.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_split_brain_syndrome\"><a class=\"anchor\" href=\"#_split_brain_syndrome\"></a>Split-brain syndrome</h3>\n<div class=\"paragraph\">\n<p>In a perfect world, there would be no network equipment failures.\nReality is, though, that sooner or later your cluster will be divided into smaller groups, unable to see each others.</p>\n</div>\n<div class=\"paragraph\">\n<p>Infinispan is capable of merging the nodes back into a single cluster.\nBut just as with rebalancing, this process may take some time.\nBefore the cluster is fully functional again, some eventbus consumers might not be able to get messages.\nOr high-availability may not be able to redeploy a failing verticle.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>It is difficult (if possible at all) to make a difference between a network partition and:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>long GC pauses (leading to missed pings),</p>\n</li>\n<li>\n<p>many nodes being killed forcefully, at-once, because you are deploying a new version of your application</p>\n</li>\n</ul>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_recommendations\"><a class=\"anchor\" href=\"#_recommendations\"></a>Recommendations</h3>\n<div class=\"paragraph\">\n<p>Considering the common clustering issues discussed above, it is recommended to stick to the following good practices.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_graceful_shutdown\"><a class=\"anchor\" href=\"#_graceful_shutdown\"></a>Graceful shutdown</h4>\n<div class=\"paragraph\">\n<p>Avoid stopping members forcefully (e.g, <code>kill -9</code> a node).</p>\n</div>\n<div class=\"paragraph\">\n<p>Of course process crashes are inevitable, but a graceful shutdown helps to get the remaining nodes in a stable state faster.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"one-by-one\"><a class=\"anchor\" href=\"#one-by-one\"></a>One node after the other</h4>\n<div class=\"paragraph\">\n<p>When rolling a new version of your app, scaling-up or down your cluster, add or remove nodes one after the other.</p>\n</div>\n<div class=\"paragraph\">\n<p>Stopping nodes one by one prevents the cluster from thinking a network partition occured.\nAdding them one by one allows for clean, incremental rebalancing operations.</p>\n</div>\n<div class=\"paragraph\">\n<p>The cluster healthiness can be verified with <a href=\"../../vertx-health-check/java/\">Vert.x Health Checks</a>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Handler&lt;Promise&lt;Status&gt;&gt; procedure = ClusterHealthCheck.createProcedure(vertx, <span class=\"hljs-keyword\">true</span>);\nHealthChecks checks = HealthChecks.create(vertx).register(<span class=\"hljs-string\">\"cluster-health\"</span>, procedure);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After creation, the health check can be exposed over HTTP with a <a href=\"../../vertx-web/java/\">Vert.x Web</a> router handler:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Router router = Router.router(vertx);\nrouter.get(<span class=\"hljs-string\">\"/readiness\"</span>).handler(HealthCheckHandler.createWithHealthChecks(checks));</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"3.9.2"},"__N_SSG":true}