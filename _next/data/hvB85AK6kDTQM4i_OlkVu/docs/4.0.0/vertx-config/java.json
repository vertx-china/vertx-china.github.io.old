{"pageProps":{"slug":"4.0.0/vertx-config/java","title":"Vert.x Config","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_concepts\">概念</a></li>\n<li><a href=\"#_using_the_config_retriever\">使用 Config Retriever</a></li>\n<li><a href=\"#_overloading_rules\">覆盖规则</a></li>\n<li><a href=\"#_using_the_retrieve_configuration\">使用配置</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_configuring_a_single_verticle\">配置一个单独的Verticle</a></li>\n<li><a href=\"#_configuring_a_set_of_verticles\">配置一组Verticles</a></li>\n<li><a href=\"#_configuring_vert_x_itself\">配置Vert.x自身</a></li>\n<li><a href=\"#_propagating_configuration_changes_to_the_event_bus\">向事件总线传播配置变更</a></li>\n</ul>\n</li>\n<li><a href=\"#_available_configuration_stores\">可用的配置中心</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_structure_of_the_configuration\">配置的结构</a></li>\n<li><a href=\"#_file\">文件</a></li>\n<li><a href=\"#_json\">JSON</a></li>\n<li><a href=\"#_environment_variables\">环境变量</a></li>\n<li><a href=\"#_system_properties\">系统参数</a></li>\n<li><a href=\"#_http\">HTTP</a></li>\n<li><a href=\"#_event_bus\">事件总线</a></li>\n<li><a href=\"#_directory\">目录</a></li>\n<li><a href=\"#_properties_文件和原始数据\">Properties 文件和原始数据</a></li>\n</ul>\n</li>\n<li><a href=\"#_获取上一次的配置\">获取上一次的配置</a></li>\n<li><a href=\"#_reading_configuration_as_a_stream\">以流的方式读取配置</a></li>\n<li><a href=\"#_processing_the_configuration\">处理配置</a></li>\n<li><a href=\"#_以future形式获取配置\">以Future形式获取配置</a></li>\n<li><a href=\"#_extending_the_config_retriever\">扩展 Config Retriever</a></li>\n<li><a href=\"#_其他格式\">其他格式</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_hocon_configuration_format\">Hocon 配置格式</a></li>\n<li><a href=\"#_yaml_配置格式\">Yaml 配置格式</a></li>\n</ul>\n</li>\n<li><a href=\"#_其他配置中心\">其他配置中心</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_git_configuration_store\">Git配置中心</a></li>\n<li><a href=\"#_kubernetes_configmap_store\">Kubernetes ConfigMap 配置中心</a></li>\n<li><a href=\"#_redis_configuration_store\">Redis配置中心</a></li>\n<li><a href=\"#_using_the_redis_configuration_store\">使用Redis配置中心</a></li>\n</ul>\n</li>\n<li><a href=\"#_configuring_the_store\">设置配置中心</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_zookeeper_configuration_store\">Zookeeper配置中心</a></li>\n<li><a href=\"#_consul_configuration_store\">Consul 配置中心</a></li>\n<li><a href=\"#_spring_config_server_store\">Spring配置中心</a></li>\n<li><a href=\"#_vault_config_store\">Vault配置中心</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x Config</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以使用 Vert.x Config 配置 Vert.x 应用。\n它：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>提供多种配置语法（JSON，properties，Yaml（extension），Hocon（extension）……）</p>\n</li>\n<li>\n<p>提供多种配置中心，例如文件、目录、HTTP、git（extension）、Redis（extension）、系统参数和环境变量。</p>\n</li>\n<li>\n<p>让您定义执行顺序以及覆盖规则</p>\n</li>\n<li>\n<p>支持运行时重新定义</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_concepts\"><a class=\"anchor\" href=\"#_concepts\"></a>概念</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>该库主要围绕：</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Config Retriever</strong> 的实例化，并用于 Vert.x 应用。\n它配置了一系列配置中心（Configuration store）\n<strong>Configuration store</strong> 定义了配置信息读取路径以及格式（默认JSON）</p>\n</div>\n<div class=\"paragraph\">\n<p>配置以 JSON 对象格式被接收。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_config_retriever\"><a class=\"anchor\" href=\"#_using_the_config_retriever\"></a>使用 Config Retriever</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>要使用 Config Retriever，\n则需要添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>以上工作完成之后，您第一件要做的事情就是实例化 <code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> ：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigRetriever retriever = ConfigRetriever.create(vertx);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>默认情况下，Config Retriever 可以使用下列配置中心进行配置\n（按下列顺序）：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Vert.x verticle <code>config()</code></p>\n</li>\n<li>\n<p>系统参数</p>\n</li>\n<li>\n<p>环境变量</p>\n</li>\n<li>\n<p><code>conf/config.json</code> 文件。这个路径可以用 <code>vertx-config-path</code> 系统参数或者\n<code>VERTX_CONFIG_PATH</code> 环境变量所覆盖。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>您可以指定您自己的配置中心：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions httpStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"http\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>).put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">8080</span>).put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"/conf\"</span>));\n\nConfigStoreOptions fileStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"file\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"my-config.json\"</span>));\n\nConfigStoreOptions sysPropsStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions().setType(<span class=\"hljs-string\">\"sys\"</span>);\n\n\nConfigRetrieverOptions options = <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如下可见更多关于覆盖规则和可用配置中心的细节信息。每一种配置中心都可以标记为 <code>可选的（optional）</code> 。\n如果正在从一个可选的配置中心中获取（或处理）配置的时候，捕获到一个失败事件，那么这个失败事件会被日志所记录，但是执行过程并没有失败。\n相反会返回一个空的 Json 对象（即：<code>{}</code>）。\n想要将一个配置中心标记为可选的，那么就使用 <code>optional</code> 属性：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions fileStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"file\"</span>)\n  .setOptional(<span class=\"hljs-keyword\">true</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"my-config.json\"</span>));\nConfigStoreOptions sysPropsStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions().setType(<span class=\"hljs-string\">\"sys\"</span>);\n\nConfigRetrieverOptions options = <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(fileStore).addStore(sysPropsStore);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>获取 Config Retriever 示例后，可按如下所示\n<em>获取</em> 配置：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">retriever.getConfig(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n    <span class=\"hljs-comment\">// 获取配置失败</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    JsonObject config = ar.result();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_overloading_rules\"><a class=\"anchor\" href=\"#_overloading_rules\"></a>覆盖规则</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>配置中心的声明顺序非常重要，\n因为它定义了覆盖顺序。对于冲突的key， <em>后</em>\n声明的配置中心会覆盖之前的。我们举个例子。\n我们有两个配置中心：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>A</code> 提供 <code>{a:value, b:1}</code> 配置</p>\n</li>\n<li>\n<p><code>B</code> 提供 <code>{a:value2, c:2}</code> 配置</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>以 A，B 的顺序声明配置，最终配置应该为：\n<code>{a:value2, b:1, c:2}</code> 。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果您将声明的顺序反过来（B，A），那么您会得到 <code>{a:value, b:1, c:2}</code> 。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_retrieve_configuration\"><a class=\"anchor\" href=\"#_using_the_retrieve_configuration\"></a>使用配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>获取到的配置可用于：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>配置verticles，</p>\n</li>\n<li>\n<p>配置端口，客户端，location等等，</p>\n</li>\n<li>\n<p>配置Vert.x自身</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>本节给出几个使用示例。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuring_a_single_verticle\"><a class=\"anchor\" href=\"#_configuring_a_single_verticle\"></a>配置一个单独的Verticle</h3>\n<div class=\"paragraph\">\n<p>以下示例代码可以放到 verticle 的 <code>start</code> 方法中。它获取了配置\n（用默认配置中心），并且利用该配置创建了一个HTTP服务。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigRetriever retriever = ConfigRetriever.create(vertx);\nretriever.getConfig(json -&gt; {\n  JsonObject result = json.result();\n\n  vertx.createHttpServer()\n    .requestHandler(req -&gt; result.getString(<span class=\"hljs-string\">\"message\"</span>))\n    .listen(result.getInteger(<span class=\"hljs-string\">\"port\"</span>));\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuring_a_set_of_verticles\"><a class=\"anchor\" href=\"#_configuring_a_set_of_verticles\"></a>配置一组Verticles</h3>\n<div class=\"paragraph\">\n<p>The following example configures 2 verticles using the configurations contained in the <code>verticles.json</code> file:\n以下示例用 <code>verticles.json</code> 文件中的配置创建了2个verticle</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigRetriever retriever = ConfigRetriever.create(vertx, <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .addStore(<span class=\"hljs-keyword\">new</span> ConfigStoreOptions().setType(<span class=\"hljs-string\">\"file\"</span>).setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"verticles.json\"</span>))));\n\nretriever.getConfig(json -&gt; {\n  JsonObject a = json.result().getJsonObject(<span class=\"hljs-string\">\"a\"</span>);\n  JsonObject b = json.result().getJsonObject(<span class=\"hljs-string\">\"b\"</span>);\n  vertx.deployVerticle(GreetingVerticle<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">getName</span>(), <span class=\"hljs-title\">new</span> <span class=\"hljs-title\">DeploymentOptions</span>().<span class=\"hljs-title\">setConfig</span>(<span class=\"hljs-title\">a</span>))</span>;\n  vertx.deployVerticle(GreetingVerticle<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">getName</span>(), <span class=\"hljs-title\">new</span> <span class=\"hljs-title\">DeploymentOptions</span>().<span class=\"hljs-title\">setConfig</span>(<span class=\"hljs-title\">b</span>))</span>;\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuring_vert_x_itself\"><a class=\"anchor\" href=\"#_configuring_vert_x_itself\"></a>配置Vert.x自身</h3>\n<div class=\"paragraph\">\n<p>您也可以直接配置Vert.x自身。您需要一个临时Vert.x对象用来获取配置。\n然后创建实际Vert.x实例：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx();\n<span class=\"hljs-comment\">// 创建 config retriever</span>\nConfigRetriever retriever = ConfigRetriever.create(vertx, <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .addStore(<span class=\"hljs-keyword\">new</span> ConfigStoreOptions().setType(<span class=\"hljs-string\">\"file\"</span>).setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"vertx.json\"</span>))));\n\n<span class=\"hljs-comment\">// 获取配置</span>\nretriever.getConfig(json -&gt; {\n  JsonObject result = json.result();\n  <span class=\"hljs-comment\">// 关闭vertx对象，我们再也用不到它了</span>\n  vertx.close();\n\n  <span class=\"hljs-comment\">// 用获取到的配置创建一个新的Vert.x实例</span>\n  VertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions(result);\n  Vertx newVertx = Vertx.vertx(options);\n\n  <span class=\"hljs-comment\">// 部署您的Verticle</span>\n  newVertx.deployVerticle(GreetingVerticle<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">getName</span>(), <span class=\"hljs-title\">new</span> <span class=\"hljs-title\">DeploymentOptions</span>().<span class=\"hljs-title\">setConfig</span>(<span class=\"hljs-title\">result</span>.<span class=\"hljs-title\">getJsonObject</span>(\"<span class=\"hljs-title\">a</span>\")))</span>;\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_propagating_configuration_changes_to_the_event_bus\"><a class=\"anchor\" href=\"#_propagating_configuration_changes_to_the_event_bus\"></a>向事件总线传播配置变更</h3>\n<div class=\"paragraph\">\n<p>当配置变化时，Vert.x Config 会通知您。如果您需要对这个事件做出响应，您需要自己实现这个逻辑。\n例如，您可以下线/重新部署verticle或者向事件总线发送新的配置。\n下列实例展示了后者的场景。它向事件总线发送新的配置。\n与事件关联的 verticle可以监听这个address并更新自身：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigRetriever retriever = ConfigRetriever.create(vertx, <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .addStore(<span class=\"hljs-keyword\">new</span> ConfigStoreOptions().setType(<span class=\"hljs-string\">\"file\"</span>).setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"verticles.json\"</span>))));\n\nretriever.getConfig(json -&gt; {\n  <span class=\"hljs-comment\">//...</span>\n});\n\nretriever.listen(change -&gt; {\n  JsonObject json = change.getNewConfiguration();\n  vertx.eventBus().publish(<span class=\"hljs-string\">\"new-configuration\"</span>, json);\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_available_configuration_stores\"><a class=\"anchor\" href=\"#_available_configuration_stores\"></a>可用的配置中心</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Config Retriever 提供一系列的配置中心和配置格式。\n更多可用的配置中心请参考本文后续介绍的扩展，您可以也自己实现.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_structure_of_the_configuration\"><a class=\"anchor\" href=\"#_structure_of_the_configuration\"></a>配置的结构</h3>\n<div class=\"paragraph\">\n<p>每一个声明的数据配置中心必须要指定 <code>类型（type）</code> ，它也定义了 <code>格式（format）</code> 。\n如果没有设置，默认用JSON。</p>\n</div>\n<div class=\"paragraph\">\n<p>一些配置中心要求额外的配置（比如路径……）。这项配置需要用 <code><a href=\"../../apidocs/io/vertx/config/ConfigStoreOptions.html#setConfig-io.vertx.core.json.JsonObject-\">setConfig</a></code> 方法传入一个JSON 对象来指定。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_file\"><a class=\"anchor\" href=\"#_file\"></a>文件</h3>\n<div class=\"paragraph\">\n<p>此配置中心仅从文件中获得配置。\n他支持所有的格式。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions file = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"file\"</span>)\n  .setFormat(<span class=\"hljs-string\">\"properties\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"path-to-file.properties\"</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>path</code> 配置项是必填项。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_json\"><a class=\"anchor\" href=\"#_json\"></a>JSON</h3>\n<div class=\"paragraph\">\n<p>JSON配置中心按原样提供给定的JSON配置</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions json = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"json\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"key\"</span>, <span class=\"hljs-string\">\"value\"</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这个配置中心仅仅支持JSON格式。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_environment_variables\"><a class=\"anchor\" href=\"#_environment_variables\"></a>环境变量</h3>\n<div class=\"paragraph\">\n<p>这个配置中心将环境变量转换为用于全局配置的\nJSON obejct</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions json = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"env\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这个配置中心不支持 <code>format</code> 配置项。\n获取到的值默认会被传输到JSON兼容的结构当中（数字，字符串，布尔，JSON 对象和JSON 数组）。\n如果要避免这种转换，则需要配置 <code>raw-data</code> 属性：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions json = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"env\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"raw-data\"</span>, <span class=\"hljs-keyword\">true</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您可以配置 <code>raw-data</code> 属性（默认为 <code>false</code> ）。如果 <code>raw-data</code> 为 <code>true</code> ，\n则不会对值进行转换。用 <code>config.getString(key)</code> 方法，您会得到原始值。\n当操作大整型数时，这很有用。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果您想选择一系列key值来导入，那么用 <code>keys</code> 属性。他将未选择的key值都过滤掉了。\nkey必须独立列出：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions json = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"env\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"keys\"</span>, <span class=\"hljs-keyword\">new</span> JsonArray().add(<span class=\"hljs-string\">\"SERVICE1_HOST\"</span>).add(<span class=\"hljs-string\">\"SERVICE2_HOST\"</span>)));</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_system_properties\"><a class=\"anchor\" href=\"#_system_properties\"></a>系统参数</h3>\n<div class=\"paragraph\">\n<p>这个配置中心将系统参数转换为用于全局配置的\nJSON 对象</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions json = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"sys\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"cache\"</span>, <span class=\"hljs-keyword\">false</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这个配置中心不支持 <code>format</code> 配置项。</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以配置 <code>cache</code> 属性（默认为 <code>true</code>）\n来决定是否在第一次访问时缓存系统参数而后不再重新加载他们。</p>\n</div>\n<div class=\"paragraph\">\n<p>您也可以配置 <code>raw-data</code> 属性（默认为 <code>false</code> ）。如果 <code>raw-data</code> 为 <code>true</code> ，\n则不会对值进行转换。用 <code>config.getString(key)</code> 方法，您会得到原始值。\n当操作大整型数时，这很有用。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http\"><a class=\"anchor\" href=\"#_http\"></a>HTTP</h3>\n<div class=\"paragraph\">\n<p>这个配置中心从HTTP地址获取配置。\n可以用任何支持的格式。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions http = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"http\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>)\n    .put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">8080</span>)\n    .put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"/A\"</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>他创建了一个带有 <code>配置中心的配置</code> 的Vert.x HTTP客户端（见下一小段）。\n为了简化配置，您也可以用\n<code>host</code>, <code>port</code> 和 <code>path</code> 属性来分别配置他们。\n您也可以用 <code>headers</code> 属性来配置可选的HTTP请求头，\n<code>timeout</code> 属性配置超时时间（默认3000毫秒），\n<code>followRedirects</code> 属性来指定是否重定向（默认情况下为false）。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions http = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"http\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"defaultHost\"</span>, <span class=\"hljs-string\">\"localhost\"</span>)\n    .put(<span class=\"hljs-string\">\"defaultPort\"</span>, <span class=\"hljs-number\">8080</span>)\n    .put(<span class=\"hljs-string\">\"ssl\"</span>, <span class=\"hljs-keyword\">true</span>)\n    .put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"/A\"</span>)\n    .put(<span class=\"hljs-string\">\"headers\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"Accept\"</span>, <span class=\"hljs-string\">\"application/json\"</span>)));</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_event_bus\"><a class=\"anchor\" href=\"#_event_bus\"></a>事件总线</h3>\n<div class=\"paragraph\">\n<p>这个配置中心从事件总线获取配置。\n此种配置中心可以让您在本地和分布式组件之间传输配置。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions eb = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"event-bus\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"address\"</span>, <span class=\"hljs-string\">\"address-getting-the-conf\"</span>)\n  );</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这个配置中心支持任何格式。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_directory\"><a class=\"anchor\" href=\"#_directory\"></a>目录</h3>\n<div class=\"paragraph\">\n<p>这个配置中心和 <code>文件</code> 配置中心很相似，\n但是它并不是去读单个文件，而是从一个目录中读取多个文件</p>\n</div>\n<div class=\"paragraph\">\n<p>这个配置中心必须要配置如下项：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>一个 <code>path</code> - 读取文件的根目录</p>\n</li>\n<li>\n<p>至少一个 <code>fileset</code> - 一个用于选择文件的对象</p>\n</li>\n<li>\n<p>对于properties文件，您可以用 <code>raw-data</code> 属性来禁止类型转换。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>每一个 <code>fileset</code> 都包含：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>一个 <code>pattern</code> ：一个Ant风格的pattern用于选择文件。\n这个pattern应用于相对当前工作目录的相对路径。</p>\n</li>\n<li>\n<p>一个可选的 <code>format</code> ，它制定了文件的格式（每一个fileset可以用一个不同的format，\n但是同一个fileset共用一个format）</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions dir = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"directory\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"config\"</span>)\n    .put(<span class=\"hljs-string\">\"filesets\"</span>, <span class=\"hljs-keyword\">new</span> JsonArray()\n      .add(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"pattern\"</span>, <span class=\"hljs-string\">\"dir/*json\"</span>))\n      .add(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"pattern\"</span>, <span class=\"hljs-string\">\"dir/*.properties\"</span>)\n        .put(<span class=\"hljs-string\">\"format\"</span>, <span class=\"hljs-string\">\"properties\"</span>))\n    ));\n\nConfigStoreOptions dirWithRawData = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"directory\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"config\"</span>)\n    .put(<span class=\"hljs-string\">\"filesets\"</span>, <span class=\"hljs-keyword\">new</span> JsonArray()\n      .add(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"pattern\"</span>, <span class=\"hljs-string\">\"dir/*json\"</span>))\n      .add(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"pattern\"</span>, <span class=\"hljs-string\">\"dir/*.properties\"</span>)\n        .put(<span class=\"hljs-string\">\"format\"</span>, <span class=\"hljs-string\">\"properties\"</span>).put(<span class=\"hljs-string\">\"raw-data\"</span>, <span class=\"hljs-keyword\">true</span>))\n    ));</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_properties_文件和原始数据\"><a class=\"anchor\" href=\"#_properties_文件和原始数据\"></a>Properties 文件和原始数据</h3>\n<div class=\"paragraph\">\n<p>Vert.x Config可以读一个properties文件。当读取一个这样的文件，您可以传入 <code>raw-data</code>\n参数来提醒Vert.x不要转换它的值。这在操作大整型数字时很有用。\n这些值可以用 <code>config.getString(key)</code> 方法来获取。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions propertyWithRawData = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setFormat(<span class=\"hljs-string\">\"properties\"</span>)\n  .setType(<span class=\"hljs-string\">\"file\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"raw.properties\"</span>).put(<span class=\"hljs-string\">\"raw-data\"</span>, <span class=\"hljs-keyword\">true</span>)\n  );</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>一些properties配置可能本来就是多级的。\n当读取到这样的文件，您可以设置 <code>hierarchical</code>\n参数来提醒Vert.x，当操作这个多级属性时，则将配置转换到 Json 对象当中，\n这与前述方法设置扁平结构形成了对比。</p>\n</div>\n<div class=\"paragraph\">\n<p>例如：</p>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre>server.host=localhost\nserver.port=8080\nmultiple.values=1,2,3</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>获取值：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions propertyWitHierarchical = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setFormat(<span class=\"hljs-string\">\"properties\"</span>)\n  .setType(<span class=\"hljs-string\">\"file\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"hierarchical.properties\"</span>).put(<span class=\"hljs-string\">\"hierarchical\"</span>, <span class=\"hljs-keyword\">true</span>)\n  );\nConfigRetrieverOptions options = <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .addStore(propertyWitHierarchical);\n\nConfigRetriever configRetriever = ConfigRetriever.create(Vertx.vertx(), options);\n\nconfigRetriever.configStream().handler(config -&gt; {\n  String host = config.getJsonObject(<span class=\"hljs-string\">\"server\"</span>).getString(<span class=\"hljs-string\">\"host\"</span>);\n  Integer port = config.getJsonObject(<span class=\"hljs-string\">\"server\"</span>).getInteger(<span class=\"hljs-string\">\"port\"</span>);\n  JsonArray multiple = config.getJsonObject(<span class=\"hljs-string\">\"multiple\"</span>).getJsonArray(<span class=\"hljs-string\">\"values\"</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; multiple.size(); i++) {\n    Integer value = multiple.getInteger(i);\n  }\n});</code></pre>\n</div>\n</div>\n<div id=\"_listening_for_configuration_changes\" class=\"paragraph\">\n<p>监听配置的变更</p>\n</div>\n<div class=\"paragraph\">\n<p>Configuration Retriever 定期获取配置信息，\n如果获取到的结果与当前不同，那么您可以重新配置应用。\n默认情况下配置每5秒重新加载一次。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigRetrieverOptions options = <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .setScanPeriod(<span class=\"hljs-number\">2000</span>)\n  .addStore(store1)\n  .addStore(store2);\n\nConfigRetriever retriever = ConfigRetriever.create(Vertx.vertx(), options);\nretriever.getConfig(json -&gt; {\n  <span class=\"hljs-comment\">// 初始化获取配置</span>\n});\n\nretriever.listen(change -&gt; {\n  <span class=\"hljs-comment\">// 之前的配置</span>\n  JsonObject previous = change.getPreviousConfiguration();\n  <span class=\"hljs-comment\">// 新配置</span>\n  JsonObject conf = change.getNewConfiguration();\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_获取上一次的配置\"><a class=\"anchor\" href=\"#_获取上一次的配置\"></a>获取上一次的配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以获取上一次获取到的配置而不用 \"等到\" 被获取的时候。\n这需要用如下方式实现：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject last = retriever.getCachedConfig();</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_reading_configuration_as_a_stream\"><a class=\"anchor\" href=\"#_reading_configuration_as_a_stream\"></a>以流的方式读取配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 提供了一个访问配置流的方法。\n这是一个 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> 的 <code><a href=\"../../apidocs/io/vertx/core/streams/ReadStream.html\">ReadStream</a></code> 。通过注册正确的处理器集合，您\n会收到通知：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>当获取到一个新的配置</p>\n</li>\n<li>\n<p>当获取配置时发生错误</p>\n</li>\n<li>\n<p>当 configuration retriever 关闭（即\n<code><a href=\"../../apidocs/io/vertx/core/streams/ReadStream.html#endHandler-io.vertx.core.Handler-\">endHandler</a></code> 被调用）</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigRetrieverOptions options = <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .setScanPeriod(<span class=\"hljs-number\">2000</span>)\n  .addStore(store1)\n  .addStore(store2);\n\nConfigRetriever retriever = ConfigRetriever.create(Vertx.vertx(), options);\nretriever.configStream()\n  .endHandler(v -&gt; {\n    <span class=\"hljs-comment\">// retriever 关闭</span>\n  })\n  .exceptionHandler(t -&gt; {\n    <span class=\"hljs-comment\">// 当获取配置时捕获到错误</span>\n  })\n  .handler(conf -&gt; {\n    <span class=\"hljs-comment\">// 配置</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_processing_the_configuration\"><a class=\"anchor\" href=\"#_processing_the_configuration\"></a>处理配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以配置一个 <em>processor</em> ，它可以校验并更新配置。\n可以通过调用 <code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html#setConfigurationProcessor-java.util.function.Function-\">setConfigurationProcessor</a></code> 方法来实现。</p>\n</div>\n<div class=\"paragraph\">\n<p>处理过程绝对不能返回 <code>null</code> 。处理器获取到配置然后返回处理过的配置。\n如果处理器不更新配置，它必须将输入的配置返回。\n处理器可以抛出异常（例如，校验失败）。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_以future形式获取配置\"><a class=\"anchor\" href=\"#_以future形式获取配置\"></a>以Future形式获取配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 提供了一个\n以 <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code> 形式接收配置的方式：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Future&lt;JsonObject&gt; future = retriever.getConfig();\nfuture.onComplete(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n    <span class=\"hljs-comment\">// 获取配置失败</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    JsonObject config = ar.result();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_extending_the_config_retriever\"><a class=\"anchor\" href=\"#_extending_the_config_retriever\"></a>扩展 Config Retriever</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>通过实现如下方式，您可以扩展配置：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/config/spi/ConfigProcessor.html\">ConfigProcessor</a></code>\nSPI 来增加对新格式的支持</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/config/spi/ConfigStoreFactory.html\">ConfigStoreFactory</a></code>\nSPI来增加配置中心的支持（获取配置数据的位置）</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_其他格式\"><a class=\"anchor\" href=\"#_其他格式\"></a>其他格式</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>尽管Vert.x对于开箱即用的格式都提供了支持，但是 Vert.x Config\n还是提供了额外的格式以供您的应用使用。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_hocon_configuration_format\"><a class=\"anchor\" href=\"#_hocon_configuration_format\"></a>Hocon 配置格式</h3>\n<div class=\"paragraph\">\n<p>Hocon 配置格式扩展了 Vert.x Configuration Retriever 并提供了对 HOCON 格式\n（https://github.com/typesafehub/config/blob/master/HOCON.md）的支持</p>\n</div>\n<div class=\"paragraph\">\n<p>它支持 json、properties、macros 等格式</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_the_hocon_configuration_format\"><a class=\"anchor\" href=\"#_using_the_hocon_configuration_format\"></a>使用 Hocon 配置格式</h4>\n<div class=\"paragraph\">\n<p>要使用Hocon配置格式，\n添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-hocon<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-hocon:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_configuring_the_store_to_use_hocon\"><a class=\"anchor\" href=\"#_configuring_the_store_to_use_hocon\"></a>指定配置中心以使用hocon</h4>\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 来使用这个格式：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"file\"</span>)\n  .setFormat(<span class=\"hljs-string\">\"hocon\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"my-config.conf\"</span>)\n  );\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您必须将 <code>format</code> 设置为 <code>hocon</code> 。</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_yaml_配置格式\"><a class=\"anchor\" href=\"#_yaml_配置格式\"></a>Yaml 配置格式</h3>\n<div id=\"_yaml_configuration_format\" class=\"paragraph\">\n<p>Yaml 配置格式扩展了 Vert.x Configuration Retriever\n并提供了对 Yaml格式 的支持</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_the_yaml_configuration_format\"><a class=\"anchor\" href=\"#_using_the_yaml_configuration_format\"></a>使用Yaml配置格式</h4>\n<div class=\"paragraph\">\n<p>要使用Yaml配置格式，\n添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-yaml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-yaml:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_configuring_the_store_to_use_yaml\"><a class=\"anchor\" href=\"#_configuring_the_store_to_use_yaml\"></a>指定配置中心以使用yaml</h4>\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 来使用这个格式：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"file\"</span>)\n  .setFormat(<span class=\"hljs-string\">\"yaml\"</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"my-config.yaml\"</span>)\n  );\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您必须将 <code>format</code> 设置为 <code>yaml</code> 。</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_其他配置中心\"><a class=\"anchor\" href=\"#_其他配置中心\"></a>其他配置中心</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>尽管Vert.x对于开箱即用的配置中心都提供了支持，但是 Vert.x Config\n还是提供了额外的格式以供您的应用使用。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_git_configuration_store\"><a class=\"anchor\" href=\"#_git_configuration_store\"></a>Git配置中心</h3>\n<div class=\"paragraph\">\n<p>git配置中心是对 Vert.x Configuration Retriever 的扩展，\n用于从Git仓库获取配置。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_the_git_configuration_store\"><a class=\"anchor\" href=\"#_using_the_git_configuration_store\"></a>使用git配置中心</h4>\n<div class=\"paragraph\">\n<p>要使用Git配置中心，\n则添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven（在您的 <code>pom.xml</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-git<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle（在您的 <code>build.gradle</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-git:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_configuring_the_store\"><a class=\"anchor\" href=\"#_configuring_the_store\"></a>设置配置中心</h4>\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 以使用该配置中心：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions git = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n    .setType(<span class=\"hljs-string\">\"git\"</span>)\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">\"url\"</span>, <span class=\"hljs-string\">\"https://github.com/cescoffier/vertx-config-test.git\"</span>)\n        .put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"local\"</span>)\n        .put(<span class=\"hljs-string\">\"filesets\"</span>,\n            <span class=\"hljs-keyword\">new</span> JsonArray().add(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"pattern\"</span>, <span class=\"hljs-string\">\"*.json\"</span>))));\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(git));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>配置需要如下信息：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>url</code> ：git仓库的地址</p>\n</li>\n<li>\n<p><code>path</code> ：仓库被clone的路径（本地目录）</p>\n</li>\n<li>\n<p><code>user</code> ：仓库的git用户名（默认不需要认证）</p>\n</li>\n<li>\n<p><code>password</code> ： git用户的密码</p>\n</li>\n<li>\n<p><code>idRsaKeyPath</code> ：私有仓库所需的 ssh rsa 密钥 uri</p>\n</li>\n<li>\n<p><code>fileset</code> ：指定要读取的文件集合\n（与配置中心的目录配置意义相同）</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>您也可以配置要使用的分支（ <code>branch</code> 参数，默认为 <code>master</code> ），\n以及远程仓库名（ <code>remote</code> 参数，默认为 <code>origin</code> ）</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_how_does_it_works\"><a class=\"anchor\" href=\"#_how_does_it_works\"></a>如何工作</h4>\n<div class=\"paragraph\">\n<p>如果本地的仓库目录（由 <code>path</code> 参数指定）不存在，那么配置中心会 clone 远程仓库到这个本地目录。\n然后它会读取符合 <code>fileset</code> 配置的文件。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果本地的仓库目录（由 <code>path</code> 参数指定）存在，它会尝试更新（按需切换分支）。\n如果更新失败，则视为获取配置失败。</p>\n</div>\n<div class=\"paragraph\">\n<p>配置中心会周期性更新 git 仓库来检查配置是否更新。</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_kubernetes_configmap_store\"><a class=\"anchor\" href=\"#_kubernetes_configmap_store\"></a>Kubernetes ConfigMap 配置中心</h3>\n<div class=\"paragraph\">\n<p>Kubernetes ConfigMap 配置中心扩展了 Vert.x Configuration Retriever 并提供了 对于 Kubernetes 的 ConfigMap 和 Secrets 的支持。\n所以，配置是从 k8s 里的 configMap 或者 secret 对象中读取的。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_the_kubernetes_configmap_store\"><a class=\"anchor\" href=\"#_using_the_kubernetes_configmap_store\"></a>使用 Kubernetes ConfigMap 配置中心</h4>\n<div class=\"paragraph\">\n<p>f\n要使用 Kubernetes ConfigMap 配置中心，\n则添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-kubernetes-configmap<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-kubernetes-configmap:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_configuring_the_store\"><a class=\"anchor\" href=\"#_configuring_the_store\"></a>设置配置中心</h4>\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 来使用这个配置中心：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n    .setType(<span class=\"hljs-string\">\"configmap\"</span>)\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">\"namespace\"</span>, <span class=\"hljs-string\">\"my-project-namespace\"</span>)\n        .put(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"configmap-name\"</span>)\n    );\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您需要设置这个配置中心来找到正确的configMap。这通过如下配置项来解决：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>namespace</code> - 项目的namespace，默认值为 <code>default</code> 。如果设置了 <code>KUBERNETES_NAMESPACE</code> 环境变量，\n则会覆盖其值。</p>\n</li>\n<li>\n<p><code>name</code> - configMap的名称</p>\n</li>\n<li>\n<p><code>optional</code> - configMap是否是可选项（默认为 <code>true</code> ）</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>如果configMap是由数个元素组成，您可以用 <code>key</code> 参数来告诉 Vert.x\n来读取哪一个 <code>key</code> 。</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x应用必须要有读取configMap的权限。</p>\n</div>\n<div class=\"paragraph\">\n<p>要从secret中读取数据，只需要将 <code>secret</code> 属性配置为 <code>true</code> ：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n    .setType(<span class=\"hljs-string\">\"configmap\"</span>)\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">\"namespace\"</span>, <span class=\"hljs-string\">\"my-project-namespace\"</span>)\n        .put(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"my-secret\"</span>)\n        .put(<span class=\"hljs-string\">\"secret\"</span>, <span class=\"hljs-keyword\">true</span>)\n    );\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果configMap访问不到，那么您会得到一个空的JSON object对象作为配置块。\n要禁用这个行为并显式声明失败，您需要设置 <code>optional</code> 为 <code>false</code> .</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_redis_configuration_store\"><a class=\"anchor\" href=\"#_redis_configuration_store\"></a>Redis配置中心</h3>\n<div class=\"paragraph\">\n<p>Reids配置中心扩展了 Vert.x Configuration Retriever\n并提供了从Redis服务获取配置的方法。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_the_redis_configuration_store\"><a class=\"anchor\" href=\"#_using_the_redis_configuration_store\"></a>使用Redis配置中心</h3>\n<div class=\"paragraph\">\n<p>要使用Redis配置中心，\n添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-redis:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_the_store\"><a class=\"anchor\" href=\"#_configuring_the_store\"></a>设置配置中心</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 来使用这个配置中心：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n    .setType(<span class=\"hljs-string\">\"redis\"</span>)\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>)\n        .put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">6379</span>)\n        .put(<span class=\"hljs-string\">\"key\"</span>, <span class=\"hljs-string\">\"my-configuration\"</span>)\n    );\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>配置中心的配置用于创建 <code><a href=\"../../apidocs/io/vertx/redis/client/Redis.html\">Redis</a></code> 对象。\n更多细节请查阅\nVert.x Redis Client 文档</p>\n</div>\n<div class=\"paragraph\">\n<p>另外，您可以设置 <code>key</code> 属性来指示配置中心中的某一 <em>field</em> ，\n默认为 <code>configuration</code> 属性。</p>\n</div>\n<div class=\"paragraph\">\n<p>Redis客户端使用 <code>HGETALL</code> 配置项来获取配置。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_zookeeper_configuration_store\"><a class=\"anchor\" href=\"#_zookeeper_configuration_store\"></a>Zookeeper配置中心</h3>\n<div class=\"paragraph\">\n<p>Zookeeper配置中心扩展了 Vert.x Configuration Retriever\n并提供了从Zookeeper服务获取配置的方法。它使用 Apache Curator 作为客户端</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_the_zookeeper_configuration_store\"><a class=\"anchor\" href=\"#_using_the_zookeeper_configuration_store\"></a>使用zookeeper配置中心</h4>\n<div class=\"paragraph\">\n<p>要使用zookeeper配置中心，\n添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在您的 <code>pom.xml</code> ）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-zookeeper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在您的 <code>build.gradle</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-zookeeper:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_configuring_the_store\"><a class=\"anchor\" href=\"#_configuring_the_store\"></a>设置配置中心</h4>\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 来使用这个配置中心：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n    .setType(<span class=\"hljs-string\">\"zookeeper\"</span>)\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">\"connection\"</span>, <span class=\"hljs-string\">\"localhost:2181\"</span>)\n        .put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"/path/to/my/conf\"</span>)\n    );\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这个配置用来配置 Apache Curator 客户端和包含配置的zookeeper节点的 <em>路径</em> 。\n注意：配置的格式可以是JSON等任何Vert.x支持的格式。</p>\n</div>\n<div class=\"paragraph\">\n<p>这项配置必须需要 <code>connection</code> 属性指定zk服务的连接 <em>字符串</em> （译者注：英文逗号隔开的多个zk服务节点），\n以及 <code>path</code> 属性指定包含配置项的节点（znode）的路径。</p>\n</div>\n<div class=\"paragraph\">\n<p>您还可以额外配置：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>maxRetries</code> ：重连次数，默认3次。</p>\n</li>\n<li>\n<p><code>baseSleepTimeBetweenRetries</code> ：重试间隔毫秒值，默认1000毫秒。</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consul_configuration_store\"><a class=\"anchor\" href=\"#_consul_configuration_store\"></a>Consul 配置中心</h3>\n<div class=\"paragraph\">\n<p>Consul配置中心扩展了 Vert.x Configuration Retriever ，\n并提供了从 <a href=\"https://www.consul.io\">Consul</a> 获取配置的方法。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_the_consul_configuration_store\"><a class=\"anchor\" href=\"#_using_the_consul_configuration_store\"></a>使用Consul配置中心</h4>\n<div class=\"paragraph\">\n<p>使用Consul配置中心，\n需在您的项目构建配置中添加如下 <em>依赖</em> ：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven（在您的 <code>pom.xml</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-consul<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在您的 <code>build.gradle</code> 文件）:</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-consul:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_configuring_the_store_5\"><a class=\"anchor\" href=\"#_configuring_the_store_5\"></a>设置配置中心</h4>\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 以使用该配置中心：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n    .setType(<span class=\"hljs-string\">\"consul\"</span>)\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n      .put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>)\n      .put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">8500</span>)\n      .put(<span class=\"hljs-string\">\"prefix\"</span>, <span class=\"hljs-string\">\"foo\"</span>)\n      .put(<span class=\"hljs-string\">\"raw-data\"</span>, <span class=\"hljs-keyword\">false</span>)\n    );\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这个配置用来创建\n<code><a href=\"../../apidocs/io/vertx/ext/consul/ConsulClient.html\">ConsulClient</a></code> 对象。更多详细信息请查阅Vert.x Consul Client文档。\n以下为设置 Consul 配置中心所需的参数：</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>prefix</code></dt>\n<dd>\n<p>构建配置树时需要被忽略的前缀，默认为空。</p>\n</dd>\n<dt class=\"hdlist1\"><code>delimiter</code></dt>\n<dd>\n<p>用来分割Consul中的key的分隔符，用以维护配置树中的级别。默认为 \"/\"。</p>\n</dd>\n<dt class=\"hdlist1\"><code>raw-data</code></dt>\n<dd>\n<p>如果 <code>raw-data</code> 为 <code>true</code> ，则配置值不会进行类型转换，并且您可以用\n<code>config.getString(key)</code> 来获取原始数据，默认为 <code>true</code> 。</p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_spring_config_server_store\"><a class=\"anchor\" href=\"#_spring_config_server_store\"></a>Spring配置中心</h3>\n<div class=\"paragraph\">\n<p>Spring配置中心扩展了 Vert.x Configuration Retriever\n并提供了从 Spring服务获取配置的方法。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_the_spring_config_server_store\"><a class=\"anchor\" href=\"#_using_the_spring_config_server_store\"></a>使用Spring配置中心</h4>\n<div class=\"paragraph\">\n<p>要使用Spring配置中心，\n则添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在您的 <code>pom.xml</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-spring-config-server<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在您的 <code>build.gradle</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-spring-config-server:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_设置配置中心\"><a class=\"anchor\" href=\"#_设置配置中心\"></a>设置配置中心</h4>\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 来使用这个配置中心：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n    .setType(<span class=\"hljs-string\">\"spring-config-server\"</span>)\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"url\"</span>, <span class=\"hljs-string\">\"http://localhost:8888/foo/development\"</span>));\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n    <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>可配置的属性如下：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>url</code> - 获取配置的 <code>url</code> （强制必填），支持两种格式：</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>/{application}/{environment}</code> ，分别用不同的配置源来生成响应</p>\n</li>\n<li>\n<p><code>/{application}-{environment}.json</code> ，以具有唯一字段的JSON生成响应，并解析spring占位符</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code>timeout</code> - 获取配置超时时间（毫秒），默认3000毫秒。</p>\n</li>\n<li>\n<p><code>user</code> - 用户（默认无需认证）</p>\n</li>\n<li>\n<p><code>password</code> - 密码</p>\n</li>\n<li>\n<p><code>httpClientConfiguration</code> - 底层HTTP客户端的配置</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_vault_config_store\"><a class=\"anchor\" href=\"#_vault_config_store\"></a>Vault配置中心</h3>\n<div class=\"paragraph\">\n<p>Vault配置中心扩展了 Vert.x Configuration Retriever 并提供了从 Vault (<a href=\"https://www.vaultproject.io/\" class=\"bare\">https://www.vaultproject.io/</a>) 获取配置的方法。\n所以，配置（即secrets）是从Vault获取的。</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>这个配置中心的 secrets 引擎是 Vault 的 Key/Value version 1 和 version 2 引擎（ <a href=\"https://www.vaultproject.io/docs/secrets/kv/index.html\" class=\"bare\">https://www.vaultproject.io/docs/secrets/kv/index.html</a> ）。暂不支持其他secrets引擎。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_the_vault_config_store\"><a class=\"anchor\" href=\"#_using_the_vault_config_store\"></a>使用Vault配置中心</h4>\n<div class=\"paragraph\">\n<p>要使用Vault配置中心，\n添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在您的 <code>pom.xml</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config-vault<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-config<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在您的 <code>build.gradle</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-config:4.0.0'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-config-vault:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_指定配置中心\"><a class=\"anchor\" href=\"#_指定配置中心\"></a>指定配置中心</h4>\n<div class=\"paragraph\">\n<p>将该库加入classpath或者项目依赖后，您需要配置\n<code><a href=\"../../apidocs/io/vertx/config/ConfigRetriever.html\">ConfigRetriever</a></code> 来使用这个配置中心：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"vault\"</span>)\n  .setConfig(config);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n  <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>要使用Vault配置中心，则设置 <code>type</code> 为 <code>vault</code> 。其配置以JSON形式提供。\n它配置了对Vault的访问权限、认证信息和secret路径：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject vault_config = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>) <span class=\"hljs-comment\">// The host name</span>\n  .put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">8200</span>) <span class=\"hljs-comment\">// The port</span>\n  .put(<span class=\"hljs-string\">\"ssl\"</span>, <span class=\"hljs-keyword\">true</span>); <span class=\"hljs-comment\">// 是否使用SSL (默认禁用)</span>\n\n<span class=\"hljs-comment\">// 认证</span>\nPemKeyCertOptions certs = <span class=\"hljs-keyword\">new</span> PemKeyCertOptions()\n  .addCertPath(<span class=\"hljs-string\">\"target/vault/config/ssl/client-cert.pem\"</span>)\n  .addKeyPath(<span class=\"hljs-string\">\"target/vault/config/ssl/client-privatekey.pem\"</span>);\nvault_config.put(<span class=\"hljs-string\">\"pemKeyCertOptions\"</span>, certs.toJson());\n\n<span class=\"hljs-comment\">// Truststore</span>\nJksOptions jks = <span class=\"hljs-keyword\">new</span> JksOptions()\n  .setPath(<span class=\"hljs-string\">\"target/vault/config/ssl/truststore.jks\"</span>);\nvault_config.put(<span class=\"hljs-string\">\"trustStoreOptions\"</span>, jks.toJson());\n\n<span class=\"hljs-comment\">// 读取secret的路径</span>\nvault_config.put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"secret/my-secret\"</span>);\n\nConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"vault\"</span>)\n  .setConfig(vault_config);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n  <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>vault_config</code> 对象可以包含 HTTP client / Web client 的配置，\n例如 trust stores、timeout、certificates、port和host。 <code>path</code> 和 <code>host</code> 强制必填。\n<code>path</code> 指定了需要获取的secret。 <code>host</code> 是Vault服务的hostname。默认情况下使用8200端口。\n默认SSL关闭，但是生产环境下您需要开启它。</p>\n</div>\n<div class=\"paragraph\">\n<p>然后，您需要用如下中的一个方法来配置token或者认证机制。</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_an_existing_token\"><a class=\"anchor\" href=\"#_using_an_existing_token\"></a>使用已经存在的token</h4>\n<div class=\"paragraph\">\n<p>如果您已经得到了token，则在配置中设置 <code>token</code> 属性：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject vault_config = <span class=\"hljs-keyword\">new</span> JsonObject();\n\n<span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-comment\">//  读取secret的路径</span>\nvault_config.put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"secret/my-secret\"</span>);\n\n<span class=\"hljs-comment\">// The token</span>\nvault_config.put(<span class=\"hljs-string\">\"token\"</span>, token);\n\nConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"vault\"</span>)\n  .setConfig(vault_config);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n  <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您可以使用root token，但是不建议这样做。当token被回收，则对secret的访问也会受阻。\n如果token可刷新，则当它过期的时候会被刷新。</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_generating_a_token\"><a class=\"anchor\" href=\"#_generating_a_token\"></a>生成token</h4>\n<div class=\"paragraph\">\n<p>如果您的token本身具有创建token的权限，您可以请求生成token：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject vault_config = <span class=\"hljs-keyword\">new</span> JsonObject();\n\n<span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-comment\">// 读取secret的路径</span>\nvault_config.put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"secret/my-secret\"</span>);\n\n<span class=\"hljs-comment\">// 生成token的配置</span>\n\n<span class=\"hljs-comment\">// 配置token请求 (https://www.vaultproject.io/docs/auth/token.html)</span>\nJsonObject tokenRequest = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"ttl\"</span>, <span class=\"hljs-string\">\"1h\"</span>)\n  .put(<span class=\"hljs-string\">\"noDefault\"</span>, <span class=\"hljs-keyword\">true</span>)\n\n  <span class=\"hljs-comment\">// (parts of the tokenRequest object) 用来做生成操作的token（tokenRequest object 的一部分）</span>\n  .put(<span class=\"hljs-string\">\"token\"</span>, token);\n\nvault_config.put(<span class=\"hljs-string\">\"auth-backend\"</span>, <span class=\"hljs-string\">\"token\"</span>) <span class=\"hljs-comment\">// 指定所用的 auth backend</span>\n  .put(<span class=\"hljs-string\">\"renew-window\"</span>, <span class=\"hljs-number\">5000L</span>) <span class=\"hljs-comment\">// 更新误差容限（毫秒）</span>\n  .put(<span class=\"hljs-string\">\"token-request\"</span>, tokenRequest); <span class=\"hljs-comment\">// 传入token生成的配置</span>\n\nConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"vault\"</span>)\n  .setConfig(vault_config);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n  <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当用这种方式，根配置中不必提供token，然后，用于生成token的token嵌于JSON数据被传入。\n如果生成的token可刷新，那么在它过期的时候会自动刷新。\n<code>renew-window</code> 是更新token有效性的时间窗口。\n如果生成的token失效，则访问权限受阻。</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_使用证书\"><a class=\"anchor\" href=\"#_使用证书\"></a>使用证书</h4>\n<div class=\"paragraph\">\n<p>您可以使用TLS证书作为认证机制。所以，您不需要自己生成token，\n它是自动生成的。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject vault_config = <span class=\"hljs-keyword\">new</span> JsonObject();\n\n<span class=\"hljs-comment\">// ...</span>\n\nPemKeyCertOptions certs = <span class=\"hljs-keyword\">new</span> PemKeyCertOptions()\n  .addCertPath(<span class=\"hljs-string\">\"target/vault/config/ssl/client-cert.pem\"</span>)\n  .addKeyPath(<span class=\"hljs-string\">\"target/vault/config/ssl/client-privatekey.pem\"</span>);\nvault_config.put(<span class=\"hljs-string\">\"pemKeyCertOptions\"</span>, certs.toJson());\n\nPemTrustOptions trust = <span class=\"hljs-keyword\">new</span> PemTrustOptions()\n  .addCertPath(<span class=\"hljs-string\">\"target/vault/config/ssl/cert.pem\"</span>);\nvault_config.put(<span class=\"hljs-string\">\"pemTrustStoreOptions\"</span>, trust.toJson());\n\nJksOptions jks = <span class=\"hljs-keyword\">new</span> JksOptions()\n  .setPath(<span class=\"hljs-string\">\"target/vault/config/ssl/truststore.jks\"</span>);\nvault_config.put(<span class=\"hljs-string\">\"trustStoreOptions\"</span>, jks.toJson());\n\nvault_config.put(<span class=\"hljs-string\">\"auth-backend\"</span>, <span class=\"hljs-string\">\"cert\"</span>);\n\n<span class=\"hljs-comment\">// 读取secret的路径</span>\nvault_config.put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"secret/my-secret\"</span>);\n\nConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"vault\"</span>)\n  .setConfig(vault_config);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n  <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>查看HTTP客户端和Web客户端的配置来传输证书。如果生成的token可刷新，\n那么token会被刷新；如果不是，则配置中心会再次尝试认证。</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_approle\"><a class=\"anchor\" href=\"#_using_approle\"></a>使用 AppRole</h4>\n<div class=\"paragraph\">\n<p>当您的应用被Vault所知悉且您已经持有 <code>appRoleId</code> 和 <code>secretId</code> , 此时会用到 <code>AppRole</code> 。\n您不需要自己生成token，这个token会自动生成：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject vault_config = <span class=\"hljs-keyword\">new</span> JsonObject();\n\n<span class=\"hljs-comment\">// ...</span>\n\nvault_config\n  .put(<span class=\"hljs-string\">\"auth-backend\"</span>, <span class=\"hljs-string\">\"approle\"</span>) <span class=\"hljs-comment\">// Set the auth-backend to approle</span>\n  .put(<span class=\"hljs-string\">\"approle\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()  <span class=\"hljs-comment\">// Configure the role id and secret it</span>\n    .put(<span class=\"hljs-string\">\"role-id\"</span>, appRoleId).put(<span class=\"hljs-string\">\"secret-id\"</span>, secretId)\n  );\n\n<span class=\"hljs-comment\">// 读取secret的路径</span>\nvault_config.put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"secret/my-secret\"</span>);\n\nConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"vault\"</span>)\n  .setConfig(vault_config);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n  <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果生成的token可刷新，那么他会被刷新；否则配置中心会再次尝试认证。</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_使用_username_和_password\"><a class=\"anchor\" href=\"#_使用_username_和_password\"></a>使用 username 和 password</h4>\n<div class=\"paragraph\">\n<p>user/app 在使用 username/password做认证的时候，会以 <code>userpass</code> 作为验证后台。\n您并不需要自己生成token，因为认证过程中token已经生成：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject vault_config = <span class=\"hljs-keyword\">new</span> JsonObject();\n\n<span class=\"hljs-comment\">// ...</span>\n\nvault_config\n  .put(<span class=\"hljs-string\">\"auth-backend\"</span>, <span class=\"hljs-string\">\"userpass\"</span>) <span class=\"hljs-comment\">// 使用 userpass 作为验证后端</span>\n  .put(<span class=\"hljs-string\">\"user-credentials\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"username\"</span>, username).put(<span class=\"hljs-string\">\"password\"</span>, password)\n  );\n\n<span class=\"hljs-comment\">// 读取secrete路径</span>\nvault_config.put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"secret/my-secret\"</span>);\n\nConfigStoreOptions store = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">\"vault\"</span>)\n  .setConfig(vault_config);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx,\n  <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions().addStore(store));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果生成的token可刷新，那么他会被刷新；否则配置中心会再次尝试认证。</p>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"4.0.0"},"__N_SSG":true}