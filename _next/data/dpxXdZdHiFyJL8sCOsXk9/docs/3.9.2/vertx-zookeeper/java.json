{"pageProps":{"slug":"3.9.2/vertx-zookeeper/java","title":"Zookeeper Cluster Manager","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_how_to_work\">How to work</a></li>\n<li><a href=\"#_using_this_cluster_manager\">Using this cluster manager</a></li>\n<li><a href=\"#_configuring_this_cluster_manager\">Configuring this cluster manager</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_enabling_logging\">Enabling logging</a></li>\n</ul>\n</li>\n<li><a href=\"#_about_zookeeper_version\">About Zookeeper version</a></li>\n</ul>\n</div>","contents":"<h1>Zookeeper Cluster Manager</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This is a cluster manager implementation for Vert.x that uses <a href=\"http://zookeeper.apache.org/\">Zookeeper</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>It implements interfaces of vert.x cluster totally. So you can using it to instead of vertx-hazelcast if you want.\nThis implementation is packaged inside:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-zookeeper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In Vert.x a cluster manager is used for various functions including:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Discovery and group membership of Vert.x nodes in a cluster</p>\n</li>\n<li>\n<p>Maintaining cluster wide topic subscriber lists (so we know which nodes are interested in which event busaddresses)</p>\n</li>\n<li>\n<p>Distributed Map support</p>\n</li>\n<li>\n<p>Distributed Locks</p>\n</li>\n<li>\n<p>Distributed Counters</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Cluster managersdo not* handle the event bus inter-node transport, this is done directly by Vert.x with TCP connections.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_how_to_work\"><a class=\"anchor\" href=\"#_how_to_work\"></a>How to work</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We are using <a href=\"http://curator.apache.org/\">Apache Curator</a> framework rather than zookeeper client directly, so\nwe have a dependency for libraries used in Curator such as <code>guava</code>, <code>slf4j</code> and of course <code>zookeeper</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Since ZK using tree dictionary to store data, we can take root path as namespace default root path is <code>io.vertx</code> which in default-zookeeper.json.\nand there are another 5 sub path to record other information for functions in vert.x cluster manager, all you can change the path is <code>root path</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>you can find all the vert.x node information in path of <code>/io.vertx/cluster/nodes/</code>,\n<code>/io.vertx/asyncMap/$name/</code> record all the <code>AsyncMap</code> you created with <code>io.vertx.core.shareddata.AsyncMap</code> interface.\n<code>/io.vertx/asyncMultiMap/$name/</code> record all the <code>AsyncMultiMap</code> you created with <code>io.vertx.core.spi.cluster.AsyncMultiMap</code> interface.\n<code>/io.vertx/locks/</code> record distributed Locks information.\n<code>/io.vertx/counters/</code> record distributed Count information.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_this_cluster_manager\"><a class=\"anchor\" href=\"#_using_this_cluster_manager\"></a>Using this cluster manager</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are using Vert.x from the command line, the jar corresponding to this cluster manager (it will be named <code>vertx-zookeeper-3.9.2</code>.jar`\nshould be in the <code>lib</code> directory of the Vert.x installation.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want clustering with this cluster manager in your Vert.x Maven or Gradle project then just add a dependency to\nthe artifact: <code>io.vertx:vertx-zookeeper:${version}</code> in your project.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the jar is on your classpath as above then Vert.x will automatically detect this and use it as the cluster manager.\nPlease make sure you don&#8217;t have any other cluster managers on your classpath or Vert.x might\nchoose the wrong one.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also specify the cluster manager programmatically if you are embedding Vert.x by specifying it on the options\nwhen you are creating your Vert.x instance, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ClusterManager mgr = <span class=\"hljs-keyword\">new</span> ZookeeperClusterManager();\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_this_cluster_manager\"><a class=\"anchor\" href=\"#_configuring_this_cluster_manager\"></a>Configuring this cluster manager</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Usually the cluster manager is configured by a file\n<a href=\"https://github.com/vert-x3/vertx-zookeeper/blob/master/src/main/resources/default-zookeeper.json\"><code>default-zookeeper.json</code></a>\nwhich is packaged inside the jar.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to override this configuration you can provide a file called <code>zookeeper.json</code> on your classpath and this\nwill be used instead. If you want to embed the <code>zookeeper.json</code> file in a fat jar, it must be located at the root of the\nfat jar. If it&#8217;s an external file, the*directory** containing the file must be added to the classpath. For\nexample, if you are using the <em>launcher</em> class from Vert.x, the classpath enhancement can be done as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code># If the zookeeper.json is in the current directory:\njava -jar ... -cp . -cluster\nvertx run MyVerticle -cp . -cluster\n\n# If the zookeeper.json is in the conf directory\njava -jar ... -cp conf -cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Another way to override the configuration is by providing the system property <code>vertx.zookeeper.conf</code> with a\nlocation:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code># Use a cluster configuration located in an external file\njava -Dvertx.zookeeper.config=./config/my-zookeeper-conf.json -jar ... -cluster\n\n# Or use a custom configuration from the classpath\njava -Dvertx.zookeeper.config=classpath:my/package/config/my-cluster-config.json -jar ... -cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>vertx.zookeeper.config</code> system property, when present, overrides any <code>zookeeper.json</code> from the classpath, but if\nloading\nfrom this system property fails, then loading falls back to either <code>zookeeper.json</code> or the Zookeeper default configuration.</p>\n</div>\n<div class=\"paragraph\">\n<p>The configuration file is described in detail in `default-zookeeper.json&#8217;s comment.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also specify configuration programmatically if embedding:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject zkConfig = <span class=\"hljs-keyword\">new</span> JsonObject();\nzkConfig.put(<span class=\"hljs-string\">\"zookeeperHosts\"</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>);\nzkConfig.put(<span class=\"hljs-string\">\"rootPath\"</span>, <span class=\"hljs-string\">\"io.vertx\"</span>);\nzkConfig.put(<span class=\"hljs-string\">\"retry\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"initialSleepTime\"</span>, <span class=\"hljs-number\">3000</span>)\n    .put(<span class=\"hljs-string\">\"maxTimes\"</span>, <span class=\"hljs-number\">3</span>));\n\n\nClusterManager mgr = <span class=\"hljs-keyword\">new</span> ZookeeperClusterManager(zkConfig);\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\n\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\nYou can also configure the zookeeper hosts using the <code>vertx.zookeeper.hosts</code> system property.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_enabling_logging\"><a class=\"anchor\" href=\"#_enabling_logging\"></a>Enabling logging</h3>\n<div class=\"paragraph\">\n<p>When trouble-shooting clustering issues with Zookeeper it&#8217;s often useful to get some logging output from Zookeeper\nto see if it&#8217;s forming a cluster properly. You can do this (when using the default JUL logging) by adding a file\ncalled <code>vertx-default-jul-logging.properties</code> on your classpath. This is a standard java.util.logging (JUL)\nconfiguration file. Inside it set:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>org.apache.zookeeper.level=INFO</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>and also</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>java.util.logging.ConsoleHandler.level=INFO\njava.util.logging.FileHandler.level=INFO</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_about_zookeeper_version\"><a class=\"anchor\" href=\"#_about_zookeeper_version\"></a>About Zookeeper version</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We use Curator 2.13.0, as Zookeeper latest stable is 3.4.8 so we do not support any features of 3.5.x</p>\n</div>\n</div>\n</div>","version":"3.9.2"},"__N_SSG":true}