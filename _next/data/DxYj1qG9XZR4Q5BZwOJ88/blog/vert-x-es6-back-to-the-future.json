{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Vert.x ES6 back to the future","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"On October 21th, 2015 we all rejoiced with the return from the past of Marty McFly with his flying car and so on, however in the Vert.x world we were quite sad about our rather old JavaScript support."},"date":"2015-11-25","slug":"vert-x-es6-back-to-the-future","readingTime":{"text":"3 min read","minutes":2.42,"time":145200,"words":484},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\"\n    }, props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"On \", _jsx(_components.a, {\n          href: \"http://backtothefuture.wikia.com/wiki/2015\",\n          children: \"Oc­to­ber 21th, 2015\"\n        }), \" we all re­joiced with the re­turn from the past of\\nMarty McFly with his fly­ing car and so on, how­ever in the Vert.x world we were quite sad that the JavaScript sup­port we\\nhave was still using a tech­nol­ogy re­leased in \", _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/ECMAScript#Versions\",\n          children: \"De­cem­ber 2009\"\n        }), \". The\\nsup­port for ES5 is not some­thing that we Vert.x team con­trols but some­thing that is in­her­ited from run­ning on top of\\n\", _jsx(_components.a, {\n          href: \"http://openjdk.java.net/projects/nashorn/\",\n          children: \"Nashorn\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"With all these nos­tal­gic thoughts on my mind I’ve de­cided to bring us back to the fu­ture and by fu­ture I mean, let’s\\nstart using a mod­ern JavaScript, or more cor­rectly, let’s start using \", _jsx(_components.a, {\n          href: \"http://es6-features.org/\",\n          children: \"EC­MAScript 6\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"It turned out to be quite sim­ple to achieve this so I’ll pick the hello world ex­am­ple and write it in ES6 just to show\\nhow you can port your code to ES6 and still use the cur­rent Vert.x APIs. Note that Vert.x in­ter­nals still are ES5 and\\nhave not been touched or mod­i­fied to sup­port any of ES6 fea­tures.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"main\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#main\"\n        }), \"main\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Tra­di­tion­ally your \", _jsx(_components.code, {\n          children: \"main.js\"\n        }), \" file would re­side in the root of your mod­ule (this is where \", _jsx(_components.code, {\n          children: \"NPM\"\n        }), \" will look for it by\\nde­fault); how­ever as we are going to tran­spile to \", _jsx(_components.code, {\n          children: \"ES5\"\n        }), \" you’ll want to put your index file in \", _jsx(_components.code, {\n          children: \"/src/main.js\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"How­ever, be­cause we are tran­spiling to \", _jsx(_components.code, {\n          children: \"ES5\"\n        }), \", your \", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \"’s main block should point to the tran­spiled \", _jsx(_components.code, {\n          children: \"index.js\"\n        }), \"\\nfile in the \", _jsx(_components.code, {\n          children: \"/lib\"\n        }), \" di­rec­tory.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-json\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"name\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx-es6\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"version\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"0.0.1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"private\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"true\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"main\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"lib/main.js\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"scripts\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"{\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"build\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"rm -Rf lib && ./node_modules/.bin/babel --out-dir lib src\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"start\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"./node_modules/.bin/vertx run lib/main.js\\\"\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"dependencies\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"{\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"vertx3-full\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"3.1.0\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"babel-cli\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"6.2.0\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \",\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"babel-preset-es2015\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"6.1.18\\\"\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"}\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As you can see, the main idea is to in­voke the tran­spiler (Babel) when we are build­ing our project, and run it using the\\ngen­er­ated files. This is slightly equiv­a­lent to a com­pi­la­tion process you would have using com­piled lan­guage.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"npmignore\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#npmignore\"\n        }), \".npmignore\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you’re plan­ning to de­ploy your pack­age to npm ei­ther local or pri­vate you should be aware that npm will ex­clude\\nany­thing listed on your \", _jsx(_components.code, {\n          children: \".gitignore\"\n        }), \" since we should ig­nore the gen­er­ated code from git it need to in­form npm to ig­nore\\nthat rule and keep the \", _jsx(_components.code, {\n          children: \"lib\"\n        }), \" di­rec­tory. The \", _jsx(_components.code, {\n          children: \".gitignore\"\n        }), \" should be some­thing like:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-text\",\n          children: \"/lib\\n/node_modules\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And the \", _jsx(_components.code, {\n          children: \".npmignore\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-text\",\n          children: \"/.gitignore\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"hello-fat-arrows-and-let-keywords\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#hello-fat-arrows-and-let-keywords\"\n        }), \"Hello fat arrows and let keywords\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So all the heavy work has been done, in order to cre­ate our hello world we just need to code some \", _jsx(_components.code, {\n          children: \"ES6\"\n        }), \" in our\\n\", _jsx(_components.code, {\n          children: \"src/main.js\"\n        }), \" file:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Router\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"require\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx-web-js/router\\\"\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" server = vertx.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createHttpServer\"\n          }), \"();\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" router = \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Router\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"router\"\n          }), \"(vertx);\\n\\nrouter.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"get\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \").\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"handler\"\n          }), \"(\", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-params\",\n              children: \"ctx\"\n            }), \") =>\"]\n          }), \" {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"let\"\n          }), \" response = ctx.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"response\"\n          }), \"();\\n    response.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"putHeader\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/plain\\\"\"\n          }), \");\\n\\n    response.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"end\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello ES6 World!\\\"\"\n          }), \");\\n});\\n\\nserver.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"requestHandler\"\n          }), \"(router.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"accept\"\n          }), \").\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"listen\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you can see we’re using fat ar­rows in­stead of writ­ing a func­tion clo­sure and scoped vari­ables using \", _jsx(_components.code, {\n          children: \"let\"\n        }), \" key­word. If\\nyou now com­pile your project:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-arduino\",\n          children: \"npm run build\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"And then start it:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [\"npm \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"start\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You have your first back to the fu­ture \", _jsx(_components.code, {\n          children: \"ES6\"\n        }), \" ver­ti­cle!\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"},"prevPost":{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"},"nextPost":{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}