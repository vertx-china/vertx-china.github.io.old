{"pageProps":{"slug":"4.1.4/vertx-json-schema/java","title":"Vert.x Json Schema","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_json_schema\">Using Vert.x Json Schema</a></li>\n<li><a href=\"#_concepts\">Concepts</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_schema\">Schema</a></li>\n<li><a href=\"#_schemaparser_schemarouter\">SchemaParser &amp; SchemaRouter</a></li>\n</ul>\n</li>\n<li><a href=\"#_parse_a_schema\">Parse a schema</a></li>\n<li><a href=\"#_validate\">Validate</a></li>\n<li><a href=\"#_adding_custom_formats\">Adding custom formats</a></li>\n<li><a href=\"#_adding_custom_keywords\">Adding custom keywords</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_synchronous_keywords\">Synchronous keywords</a></li>\n<li><a href=\"#_asynchronous_keywords\">Asynchronous keywords</a></li>\n</ul>\n</li>\n<li><a href=\"#_building_your_schemas_from_code\">Building your schemas from code</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_creating_the_schema\">Creating the schema</a></li>\n<li><a href=\"#_using_the_keywords\">Using the keywords</a></li>\n<li><a href=\"#_defining_the_schema_structure\">Defining the schema structure</a></li>\n<li><a href=\"#_ref_and_aliases\"><code>$ref</code> and aliases</a></li>\n<li><a href=\"#_using_the_schema\">Using the schema</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x Json Schema</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Json Schema provides an extendable and asynchronous implementation for <a href=\"https://json-schema.org/\">Json Schema</a> specification.\nYou can use Json Schemas to validate every json structure. This module provides:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Implementation of <a href=\"https://tools.ietf.org/html/draft-handrews-json-schema-validation-02\">Json Schema draft2019-09</a></p>\n</li>\n<li>\n<p>Implementation of <a href=\"https://tools.ietf.org/html/draft-handrews-json-schema-validation-01\">Json Schema draft-7</a></p>\n</li>\n<li>\n<p>Implementation of <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#schemaObject\">OpenAPI 3 dialect</a>.</p>\n</li>\n<li>\n<p>Non blocking <code>$ref</code> resolution and caching</p>\n</li>\n<li>\n<p>Lookup into the schema cache using <code><a href=\"../../apidocs/io/vertx/core/json/pointer/JsonPointer.html\">JsonPointer</a></code></p>\n</li>\n<li>\n<p>Synchronous and asynchronous validation</p>\n</li>\n<li>\n<p>Ability to extend the validation tree adding new keywords and new format predicates</p>\n</li>\n<li>\n<p>DSL to build schemas programmatically</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_json_schema\"><a class=\"anchor\" href=\"#_using_vert_x_json_schema\"></a>Using Vert.x Json Schema</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use Vert.x Json Schema, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-json-schema<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-json-schema:4.1.4&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_concepts\"><a class=\"anchor\" href=\"#_concepts\"></a>Concepts</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_schema\"><a class=\"anchor\" href=\"#_schema\"></a>Schema</h3>\n<div class=\"paragraph\">\n<p>Each parsed schema is represented by a <code><a href=\"../../apidocs/io/vertx/json/schema/Schema.html\">Schema</a></code> instance. A schema is a tree of <code><a href=\"../../apidocs/io/vertx/json/schema/common/Validator.html\">Validator</a></code> objects,\nwhere each one contains the necessary logic to perform the validation. The performed validation is <em>fail-fast</em>: as soon as a validation error is encountered, the validation fails without going further</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_schemaparser_schemarouter\"><a class=\"anchor\" href=\"#_schemaparser_schemarouter\"></a>SchemaParser &amp; SchemaRouter</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/json/schema/SchemaParser.html\">SchemaParser</a></code> is the component that parses the schemas from Json data structures to <code><a href=\"../../apidocs/io/vertx/json/schema/Schema.html\">Schema</a></code> instances.\nThe <code><a href=\"../../apidocs/io/vertx/json/schema/SchemaRouter.html\">SchemaRouter</a></code> is the component able to cache parsed schemas and resolve <code>$ref</code>.\nEvery time a new <code>$ref</code> is solved or a <code><a href=\"../../apidocs/io/vertx/json/schema/SchemaParser.html\">SchemaParser</a></code> parses a new schema, the new schema will be cached inside the corresponding <code><a href=\"../../apidocs/io/vertx/json/schema/SchemaRouter.html\">SchemaRouter</a></code>.\nThe <code><a href=\"../../apidocs/io/vertx/json/schema/SchemaParser.html\">SchemaParser</a></code> can be extended to support custom keywords and formats.</p>\n</div>\n<div class=\"paragraph\">\n<p>The available <code><a href=\"../../apidocs/io/vertx/json/schema/SchemaParser.html\">SchemaParser</a></code> are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/json/schema/draft201909/Draft201909SchemaParser.html\">Draft201909SchemaParser</a></code> for Json Schema Draft 2019-09</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/json/schema/draft7/Draft7SchemaParser.html\">Draft7SchemaParser</a></code> for Json Schema Draft 7</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/json/schema/openapi3/OpenAPI3SchemaParser.html\">OpenAPI3SchemaParser</a></code> for OpenAPI 3 dialect</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_parse_a_schema\"><a class=\"anchor\" href=\"#_parse_a_schema\"></a>Parse a schema</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To parse a schema you first need a schema router and a schema parser matching your schema <em>dialect</em>.\nFor example to instantiate a <em>draft 2019-09</em> schema parser:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SchemaRouter schemaRouter = SchemaRouter.create(vertx, <span class=\"hljs-keyword\">new</span> SchemaRouterOptions());\nSchemaParser schemaParser = SchemaParser.createDraft201909SchemaParser(schemaRouter);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can reuse <code>SchemaRouter</code> instance for different <code>SchemaParser</code> and you can parse different <code>Schema</code> with same <code>SchemaParser</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now you can parse the schema:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Schema schema = parser.parse(object, schemaPointer);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you parse a schema you must provide the <strong>schema pointer</strong>, a pointer that identifies the location of the schema.\nIf you don&#8217;t have any schema pointer <code>SchemaParser</code> will generate one for you:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Schema schema = parser.parse(object);\nschema.getScope(); <span class=\"hljs-comment\">// Get generated scope of schema (schema pointer)</span></code></pre>\n</div>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>Remember that the schema pointer is required to reference this schema later using Json Schema <code>$ref</code>\nand to resolve relative references. If you load a schema from filesystem and you use relative references, <strong>provide the correct pointer</strong> or the\n<code>SchemaRouter</code> won&#8217;t be able to resolve the local filesystem <code>$ref</code>.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_validate\"><a class=\"anchor\" href=\"#_validate\"></a>Validate</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A schema could have two states:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Synchronous: The validators tree can provide a synchronous validation. You can validate your json both using <code><a href=\"../../apidocs/io/vertx/json/schema/Schema.html#validateSync-java.lang.Object-\">validateSync</a></code> and <code><a href=\"../../apidocs/io/vertx/json/schema/Schema.html#validateAsync-java.lang.Object-\">validateAsync</a></code></p>\n</li>\n<li>\n<p>Asynchronous: One or more branches of the validator tree requires an asynchronous validation. You must use <code><a href=\"../../apidocs/io/vertx/json/schema/Schema.html#validateAsync-java.lang.Object-\">validateAsync</a></code> to validate your json. If you use <code><a href=\"../../apidocs/io/vertx/json/schema/Schema.html#validateSync-java.lang.Object-\">validateSync</a></code> it will throw a <code><a href=\"../../apidocs/io/vertx/json/schema/NoSyncValidationException.html\">NoSyncValidationException</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>To validate a schema in an asynchronous state:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">schema.validateAsync(json).onComplete(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-comment\">// Validation succeeded</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Validation failed</span>\n    ar.cause(); <span class=\"hljs-comment\">// Contains ValidationException</span>\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To validate a schema in a synchronous state:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">try</span> {\n  schema.validateSync(json);\n  <span class=\"hljs-comment\">// Successful validation</span>\n} <span class=\"hljs-keyword\">catch</span> (ValidationException e) {\n  <span class=\"hljs-comment\">// Failed validation</span>\n} <span class=\"hljs-keyword\">catch</span> (NoSyncValidationException e) {\n  <span class=\"hljs-comment\">// Cannot validate synchronously. You must validate using validateAsync</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To check the schema state you can use method <code><a href=\"../../apidocs/io/vertx/json/schema/Schema.html#isSync--\">isSync</a></code>.\nThe schema can mutate the state in time, e.g. if you have a schema that is asynchronous because of a <code>$ref</code>,\nafter the first validation the external schema is cached and the schema will switch to synchronous state.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>If you use <code><a href=\"../../apidocs/io/vertx/json/schema/Schema.html#validateAsync-java.lang.Object-\">validateAsync</a></code> while the schema is in a synchronous state,\nthe schema will validate synchronously wrapping the result in the returned <code>Future</code>, avoiding unnecessary async computations and memory usage</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_adding_custom_formats\"><a class=\"anchor\" href=\"#_adding_custom_formats\"></a>Adding custom formats</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can add custom formats to use with validation keyword <code>format</code> before parsing the schemas:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">parser.withStringFormatValidator(<span class=\"hljs-string\">&quot;firstUppercase&quot;</span>, str -&gt; Character.isUpperCase(str.charAt(<span class=\"hljs-number\">0</span>)));\n\nJsonObject mySchema = <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;format&quot;</span>, <span class=\"hljs-string\">&quot;firstUppercase&quot;</span>);\nSchema schema = parser.parse(mySchema);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_adding_custom_keywords\"><a class=\"anchor\" href=\"#_adding_custom_keywords\"></a>Adding custom keywords</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>For every new keyword type you want to provide, you must implement <code><a href=\"../../apidocs/io/vertx/json/schema/common/ValidatorFactory.html\">ValidatorFactory</a></code>\nand provide an instance to <code>SchemaParser</code> using <code><a href=\"../../apidocs/io/vertx/json/schema/SchemaParser.html#withValidatorFactory-io.vertx.json.schema.common.ValidatorFactory-\">withValidatorFactory</a></code>.\nWhen parsing happens, the <code>SchemaParser</code> calls <code><a href=\"../../apidocs/io/vertx/json/schema/common/ValidatorFactory.html#canConsumeSchema-io.vertx.core.json.JsonObject-\">canConsumeSchema</a></code> for each registered factory.\nIf the factory can consume the schema, then the method <code><a href=\"../../apidocs/io/vertx/json/schema/common/ValidatorFactory.html#createValidator-io.vertx.core.json.JsonObject-io.vertx.core.json.pointer.JsonPointer-io.vertx.json.schema.common.SchemaParserInternal-io.vertx.json.schema.common.MutableStateValidator-\">createValidator</a></code>\nis called. This method returns an instance of <code><a href=\"../../apidocs/io/vertx/json/schema/common/Validator.html\">Validator</a></code>, that represents the object that will perform the validation.\nIf something goes wrong during <code>Validator</code> creation, a <code><a href=\"../../apidocs/io/vertx/json/schema/SchemaException.html\">SchemaException</a></code> should be thrown</p>\n</div>\n<div class=\"paragraph\">\n<p>You can add custom keywords of three types:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Keywords that always validate the input synchronously</p>\n</li>\n<li>\n<p>Keywords that always validate the input asynchronously</p>\n</li>\n<li>\n<p>Keywords with mutable state</p>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_synchronous_keywords\"><a class=\"anchor\" href=\"#_synchronous_keywords\"></a>Synchronous keywords</h3>\n<div class=\"paragraph\">\n<p>Synchronous validators must implement the interface <code><a href=\"../../apidocs/io/vertx/json/schema/common/SyncValidator.html\">SyncValidator</a></code>.\nIn the example below I add a keyword that checks if the number of properties in a json object is a multiple of a provided number:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">`link:../../apidocs/examples/PropertiesMultipleOfValidator.html[PropertiesMultipleOfValidator]`</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After we defined the keyword validator we can define the factory:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">`link:../../apidocs/examples/PropertiesMultipleOfValidatorFactory.html[PropertiesMultipleOfValidatorFactory]`</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now we can mount the new validator factory:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">parser.withValidatorFactory(<span class=\"hljs-keyword\">new</span> PropertiesMultipleOfValidatorFactory());\n\nJsonObject mySchema = <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;propertiesMultipleOf&quot;</span>, <span class=\"hljs-number\">2</span>);\nSchema schema = parser.parse(mySchema);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_asynchronous_keywords\"><a class=\"anchor\" href=\"#_asynchronous_keywords\"></a>Asynchronous keywords</h3>\n<div class=\"paragraph\">\n<p>Asynchronous validators must implement the interface <code><a href=\"../../apidocs/io/vertx/json/schema/common/AsyncValidator.html\">AsyncValidator</a></code>.\nIn this example I add a keyword that retrieves from the Vert.x Event bus an enum of values:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">`link:../../apidocs/examples/AsyncEnumValidator.html[AsyncEnumValidator]`</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After we defined the keyword validator we can define the factory:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">`link:../../apidocs/examples/AsyncEnumValidatorFactory.html[AsyncEnumValidatorFactory]`</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now we can mount the new validator factory:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">parser.withValidatorFactory(<span class=\"hljs-keyword\">new</span> AsyncEnumValidatorFactory(vertx));\n\nJsonObject mySchema = <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;asyncEnum&quot;</span>, <span class=\"hljs-string\">&quot;enums.myapplication&quot;</span>);\nSchema schema = parser.parse(mySchema);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_building_your_schemas_from_code\"><a class=\"anchor\" href=\"#_building_your_schemas_from_code\"></a>Building your schemas from code</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you want to build schemas from code, you can use the included DSL. Only Draft-7 is supported for this feature.</p>\n</div>\n<div class=\"paragraph\">\n<p>To start, add static imports for <code><a href=\"../../apidocs/io/vertx/json/schema/draft7/dsl/Schemas.html\">Schemas</a></code> and <code><a href=\"../../apidocs/io/vertx/json/schema/draft7/dsl/Keywords.html\">Keywords</a></code></p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_creating_the_schema\"><a class=\"anchor\" href=\"#_creating_the_schema\"></a>Creating the schema</h3>\n<div class=\"paragraph\">\n<p>Inside <code><a href=\"../../apidocs/io/vertx/json/schema/draft7/dsl/Schemas.html\">Schemas</a></code> there are static methods to create the schema:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SchemaBuilder intSchemaBuilder = intSchema();\nSchemaBuilder objectSchemaBuilder = objectSchema();</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_the_keywords\"><a class=\"anchor\" href=\"#_using_the_keywords\"></a>Using the keywords</h3>\n<div class=\"paragraph\">\n<p>For every schema you can add keywords built with <code><a href=\"../../apidocs/io/vertx/json/schema/draft7/dsl/Keywords.html\">Keywords</a></code> methods,\ndepending on the type of the schema:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">stringSchema()\n  .with(format(StringFormat.DATETIME));\narraySchema()\n  .with(maxItems(<span class=\"hljs-number\">10</span>));\nschema() <span class=\"hljs-comment\">// Generic schema that accepts both arrays and integers</span>\n  .with(type(SchemaType.ARRAY, SchemaType.INT));</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_defining_the_schema_structure\"><a class=\"anchor\" href=\"#_defining_the_schema_structure\"></a>Defining the schema structure</h3>\n<div class=\"paragraph\">\n<p>Depending on the schema you create, you can define a structure.</p>\n</div>\n<div class=\"paragraph\">\n<p>To create an object schema with some properties schemas and additional properties schema:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">objectSchema()\n  .requiredProperty(<span class=\"hljs-string\">&quot;name&quot;</span>, stringSchema())\n  .requiredProperty(<span class=\"hljs-string\">&quot;age&quot;</span>, intSchema())\n  .additionalProperties(stringSchema());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To create an array schema:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">arraySchema()\n  .items(stringSchema());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To create a tuple schema:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">tupleSchema()\n  .item(stringSchema()) <span class=\"hljs-comment\">// First item</span>\n  .item(intSchema()) <span class=\"hljs-comment\">// Second item</span>\n  .item(booleanSchema()); <span class=\"hljs-comment\">// Third item</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_ref_and_aliases\"><a class=\"anchor\" href=\"#_ref_and_aliases\"></a><code>$ref</code> and aliases</h3>\n<div class=\"paragraph\">\n<p>To add a <code>$ref</code> schema you can use the <code><a href=\"../../apidocs/io/vertx/json/schema/common/dsl/Schemas.html#ref-io.vertx.core.json.pointer.JsonPointer-\">Schemas.ref</a></code> method.\nTo assign an <code>$id</code> keyword to a schema, use <code><a href=\"../../apidocs/io/vertx/json/schema/common/dsl/SchemaBuilder.html#id-io.vertx.core.json.pointer.JsonPointer-\">id</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>You can also refer to schemas defined with this dsl using aliases. You can use <code><a href=\"../../apidocs/io/vertx/json/schema/common/dsl/SchemaBuilder.html#alias-java.lang.String-\">alias</a></code> to assign an alias to\na schema. Then you can refer to a schema with an alias using <code><a href=\"../../apidocs/io/vertx/json/schema/common/dsl/Schemas.html#refToAlias-java.lang.String-\">Schemas.refToAlias</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">intSchema()\n  .alias(<span class=\"hljs-string\">&quot;myInt&quot;</span>);\n\nobjectSchema()\n  .requiredProperty(<span class=\"hljs-string\">&quot;anInteger&quot;</span>, refToAlias(<span class=\"hljs-string\">&quot;myInt&quot;</span>));</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_the_schema\"><a class=\"anchor\" href=\"#_using_the_schema\"></a>Using the schema</h3>\n<div class=\"paragraph\">\n<p>After you defined the schema, you can call <code><a href=\"../../apidocs/io/vertx/json/schema/common/dsl/SchemaBuilder.html#build-io.vertx.json.schema.SchemaParser-\">build</a></code> to parse and use the schema:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Schema schema = objectSchema()\n  .requiredProperty(<span class=\"hljs-string\">&quot;name&quot;</span>, stringSchema())\n  .requiredProperty(<span class=\"hljs-string\">&quot;age&quot;</span>, intSchema())\n  .additionalProperties(stringSchema())\n  .build(parser);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"4.1.4"},"__N_SSG":true}