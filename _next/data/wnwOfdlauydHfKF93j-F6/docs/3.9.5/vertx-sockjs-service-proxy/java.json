{"pageProps":{"slug":"3.9.5/vertx-sockjs-service-proxy/java","title":"Vert.x SockJS Service Proxy","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_sockjs_service_proxy\">Using Vert.x SockJS Service Proxy</a></li>\n<li><a href=\"#_consuming_your_service_from_a_browser_or_from_node_js\">Consuming your service from a browser or from Node.js</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x SockJS Service Proxy</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you compose a vert.x application, you may want to isolate a functionality somewhere and make it available to\nthe rest of your application. That&#8217;s the main purpose of service proxies. It lets you expose a <em>service</em> on the\nevent bus, so, any other vert.x component can consume it, as soon as they know the <em>address</em> on which the service\nis published. This is achieved by the vert.x service proxies. However, vert.x service clients, form the bare vert\n.x service proxies, cannot be consumed from your browser or from node.js. Vert.x SockJS Service Proxy generates\nservice clients that you can use from your browser or from a node.js application. These clients rely on the\nSockJS bridge that propagate events from the vert.x event bus to / from SockJS.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_sockjs_service_proxy\"><a class=\"anchor\" href=\"#_using_vert_x_sockjs_service_proxy\"></a>Using Vert.x SockJS Service Proxy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Vert.x SockJS Service Proxy, add the following dependencies to the <em>dependencies</em> section of\nyour build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-sockjs-service-proxy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-service-proxy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${vertx.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-sockjs-service-proxy:3.9.5'</span>\ncompile <span class=\"hljs-string\">'io.vertx:vertx-service-proxy:${vertx.version}'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Be aware that as the service proxy mechanism relies on code generation, so modifications to the <em>service interface</em>\nrequire to re-compile the sources to regenerate the code.</p>\n</div>\n<div class=\"paragraph\">\n<p>Before going further you should check how to use <code>vertx-service-proxies</code> from the\n<a href=\"http://vertx.io/docs/vertx-service-proxy/java\">documentation page</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_consuming_your_service_from_a_browser_or_from_node_js\"><a class=\"anchor\" href=\"#_consuming_your_service_from_a_browser_or_from_node_js\"></a>Consuming your service from a browser or from Node.js</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The previous section has shown how you can create a service proxy in Java. However, you can consume your service\ndirectly from your browser or from a node.js application using a SockJS-based proxy.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, you need to configure the SockJS bridge, in order to let the proxy communicate with the service. You will\nfind more details about the SockJS bridge in\n<a href=\"http://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge\">vertx-web</a>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SomeDatabaseService service = <span class=\"hljs-keyword\">new</span> SomeDatabaseServiceImpl();\nProxyHelper.registerService(SomeDatabaseService<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">vertx</span>, <span class=\"hljs-title\">service</span>,\n    \"<span class=\"hljs-title\">database</span>-<span class=\"hljs-title\">service</span>-<span class=\"hljs-title\">address</span>\")</span>;\n\n\nRouter router = Router.router(vertx);\n<span class=\"hljs-comment\">// Allow events for the designated addresses in/out of the event bus bridge</span>\nSockJSBridgeOptions opts = <span class=\"hljs-keyword\">new</span> SockJSBridgeOptions()\n    .addInboundPermitted(<span class=\"hljs-keyword\">new</span> PermittedOptions()\n        .setAddress(<span class=\"hljs-string\">\"database-service-address\"</span>))\n    .addOutboundPermitted(<span class=\"hljs-keyword\">new</span> PermittedOptions()\n        .setAddress(<span class=\"hljs-string\">\"database-service-address\"</span>));\n\n<span class=\"hljs-comment\">// Create the event bus bridge and add it to the router.</span>\nrouter.mountSubRouter(<span class=\"hljs-string\">\"/eventbus\"</span>, SockJSHandler.create(vertx).bridge(opts));\n\nvertx.createHttpServer().requestHandler(router).listen(<span class=\"hljs-number\">8080</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you have the sockJS bridge configured, other applications developed in JavaScript can interact with your\nservice directly. During the service compilation, a JS proxy module is generated, and is named as follows:\n<code>module_name-js/server-interface_simple_name</code> + <code>-proxy.js</code>. So for instance, if your interface is named <code>MyService</code>,\nthe proxy module is named <code>my_service-proxy.js</code>. Again, this proxy is usable from your browser or from node.js.</p>\n</div>\n<div class=\"paragraph\">\n<p>The generated proxy is a JavaScript module compatible with CommonJS, AMD and Webpack. The proxy then just needs to\n instantiated with the EventBus bridge and the service EventBus address:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">&lt;script src=<span class=\"hljs-string\">\"http://cdn.sockjs.org/sockjs-0.3.4.min.js\"</span>&gt;&lt;<span class=\"hljs-regexp\">/script&gt;\n&lt;script src=\"https:/</span><span class=\"hljs-regexp\">/cdnjs.cloudflare.com/</span>ajax/libs/vertx/<span class=\"hljs-number\">3.4</span><span class=\"hljs-number\">.2</span>/vertx-eventbus.min.js<span class=\"hljs-string\">\"&gt;&lt;/script&gt;\n&lt;!-- This is your generated service proxy --&gt;\n&lt;script src=\"</span>vertx-database-js/some_database_service-proxy.js<span class=\"hljs-string\">\"&gt;&lt;/script&gt;\n&lt;script&gt;\n var eb = new EventBus('http://localhost:8080/eventbus');\n eb.onopen = function() {\n   var svc = new SomeDatabaseService(eb, \"</span>database-service-address<span class=\"hljs-string\">\");\n   // use the service\n };\n&lt;/script&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For node.js application, it would be used as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> EventBus = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'vertx3-eventbus-client'</span>);\n<span class=\"hljs-keyword\">var</span> SomeDatabaseService = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../some_database_service-proxy'</span>);\n\n<span class=\"hljs-keyword\">var</span> eb = <span class=\"hljs-keyword\">new</span> EventBus(<span class=\"hljs-string\">'http://localhost:8080/eventbus/'</span>);\neb.onopen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-keyword\">var</span> svc = <span class=\"hljs-keyword\">new</span> SomeDatabaseService(eb, <span class=\"hljs-string\">\"database-service-address\"</span>);\n<span class=\"hljs-comment\">// use the service</span>\n};</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"3.9.5"},"__N_SSG":true}