{"pageProps":{"slug":"4.2.0/vertx-sql-client-templates/java","title":"SQL Client Templates","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">Usage</a></li>\n<li><a href=\"#_getting_started\">Getting started</a></li>\n<li><a href=\"#_template_syntax\">Template syntax</a></li>\n<li><a href=\"#_row_mapping\">Row mapping</a></li>\n<li><a href=\"#_anemic_json_row_mapping\">Anemic JSON row mapping</a></li>\n<li><a href=\"#_parameters_mapping\">Parameters mapping</a></li>\n<li><a href=\"#_anemic_json_parameters_mapping\">Anemic JSON parameters mapping</a></li>\n<li><a href=\"#_mapping_with_jackson_databind\">Mapping with Jackson databind</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_java_datetime_api_mapping\">Java Date/Time API mapping</a></li>\n</ul>\n</li>\n<li><a href=\"#_mapping_with_vert_x_data_objects\">Mapping with Vert.x data objects</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_code_generation\">Code generation</a></li>\n<li><a href=\"#_row_mapping_2\">Row mapping</a></li>\n<li><a href=\"#_parameters_mapping_2\">Parameters mapping</a></li>\n<li><a href=\"#_java_enum_types_mapping\">Java enum types mapping</a></li>\n<li><a href=\"#_naming_format\">Naming format</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>SQL Client Templates</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>SQL Client Templates is a small library designed to facilitate the execution of SQL queries.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use SQL Client Templates add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-sql-client-templates<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n implementation <span class=\"hljs-string\">&#x27;io.vertx:vertx-sql-client-templates:4.2.0&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Here is the simplest way to use an SQL template.</p>\n</div>\n<div class=\"paragraph\">\n<p>A SQL template consumes <em>named</em> parameters and thus takes (by default) a map as parameters sources instead of a tuple.</p>\n</div>\n<div class=\"paragraph\">\n<p>A SQL template produces (by default) a <code>RowSet&lt;Row&gt;</code> like a client <code>PreparedQuery</code>. In fact the template is a thin\nwrapper for a <code>PreparedQuery</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Map&lt;String, Object&gt; parameters = Collections.singletonMap(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>);\n\nSqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=#{id}&quot;</span>)\n  .execute(parameters)\n  .onSuccess(users -&gt; {\n    users.forEach(row -&gt; {\n      System.out.println(row.getString(<span class=\"hljs-string\">&quot;first_name&quot;</span>) + <span class=\"hljs-string\">&quot; &quot;</span> + row.getString(<span class=\"hljs-string\">&quot;last_name&quot;</span>));\n    });\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you need to perform an insert or update operation and you do not care of the result, you can use <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/SqlTemplate.html#forUpdate-io.vertx.sqlclient.SqlClient-java.lang.String-\">SqlTemplate.forUpdate</a></code> instead:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Map&lt;String, Object&gt; parameters = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\nparameters.put(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>);\nparameters.put(<span class=\"hljs-string\">&quot;firstName&quot;</span>, <span class=\"hljs-string\">&quot;Dale&quot;</span>);\nparameters.put(<span class=\"hljs-string\">&quot;lastName&quot;</span>, <span class=\"hljs-string\">&quot;Cooper&quot;</span>);\n\nSqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">&quot;INSERT INTO users VALUES (#{id},#{firstName},#{lastName})&quot;</span>)\n  .execute(parameters)\n  .onSuccess(v -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;Successful update&quot;</span>);\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_template_syntax\"><a class=\"anchor\" href=\"#_template_syntax\"></a>Template syntax</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The template syntax uses <code>#{XXX}</code> syntax where <code>XXX</code> is a valid <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.8\">java identifier</a> string\n(without the keyword restriction).</p>\n</div>\n<div class=\"paragraph\">\n<p>You can use the backslash char <code>\\</code> to escape  any <code><mark></code> character, i.e <code>\\</mark>{foo}</code> will be interpreted as <code>#{foo}</code> string without a <code>foo</code> parameter.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_row_mapping\"><a class=\"anchor\" href=\"#_row_mapping\"></a>Row mapping</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>By default templates produce <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> as result type.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can provide a custom <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/RowMapper.html\">RowMapper</a></code> to achieve row level mapping instead:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">RowMapper&lt;User&gt; ROW_USER_MAPPER = row -&gt; {\n  User user = <span class=\"hljs-keyword\">new</span> User();\n  user.id = row.getInteger(<span class=\"hljs-string\">&quot;id&quot;</span>);\n  user.firstName = row.getString(<span class=\"hljs-string\">&quot;firstName&quot;</span>);\n  user.lastName = row.getString(<span class=\"hljs-string\">&quot;lastName&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> user;\n};</code></pre>\n</div>\n</div>\n<div id=\"row_mapping_with_custom_mapper\" class=\"paragraph\">\n<p>to achieve row level mapping instead:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=#{id}&quot;</span>)\n  .mapTo(ROW_USER_MAPPER)\n  .execute(Collections.singletonMap(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>))\n  .onSuccess(users -&gt; {\n    users.forEach(user -&gt; {\n      System.out.println(user.firstName + <span class=\"hljs-string\">&quot; &quot;</span> + user.lastName);\n    });\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_anemic_json_row_mapping\"><a class=\"anchor\" href=\"#_anemic_json_row_mapping\"></a>Anemic JSON row mapping</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Anemic JSON row mapping is a trivial mapping between template row columns and a JSON object\nusing the <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html#toJson--\">toJson</a></code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=#{id}&quot;</span>)\n  .mapTo(Row::toJson)\n  .execute(Collections.singletonMap(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>))\n  .onSuccess(users -&gt; {\n    users.forEach(user -&gt; {\n      System.out.println(user.encode());\n    });\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_parameters_mapping\"><a class=\"anchor\" href=\"#_parameters_mapping\"></a>Parameters mapping</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Templates consume <code>Map&lt;String, Object&gt;</code> as default input.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can provide a custom mapper:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">TupleMapper&lt;User&gt; PARAMETERS_USER_MAPPER = TupleMapper.mapper(user -&gt; {\n  Map&lt;String, Object&gt; parameters = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n  parameters.put(<span class=\"hljs-string\">&quot;id&quot;</span>, user.id);\n  parameters.put(<span class=\"hljs-string\">&quot;firstName&quot;</span>, user.firstName);\n  parameters.put(<span class=\"hljs-string\">&quot;lastName&quot;</span>, user.lastName);\n  <span class=\"hljs-keyword\">return</span> parameters;\n});</code></pre>\n</div>\n</div>\n<div id=\"params_mapping_with_custom_mapper\" class=\"paragraph\">\n<p>to achieve parameter mapping instead:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">User user = <span class=\"hljs-keyword\">new</span> User();\nuser.id = <span class=\"hljs-number\">1</span>;\nuser.firstName = <span class=\"hljs-string\">&quot;Dale&quot;</span>;\nuser.firstName = <span class=\"hljs-string\">&quot;Cooper&quot;</span>;\n\nSqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">&quot;INSERT INTO users VALUES (#{id},#{firstName},#{lastName})&quot;</span>)\n  .mapFrom(PARAMETERS_USER_MAPPER)\n  .execute(user)\n  .onSuccess(res -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;User inserted&quot;</span>);\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also perform batching easily:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">&quot;INSERT INTO users VALUES (#{id},#{firstName},#{lastName})&quot;</span>)\n  .mapFrom(PARAMETERS_USER_MAPPER)\n  .executeBatch(users)\n  .onSuccess(res -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;Users inserted&quot;</span>);\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_anemic_json_parameters_mapping\"><a class=\"anchor\" href=\"#_anemic_json_parameters_mapping\"></a>Anemic JSON parameters mapping</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Anemic JSON parameters mapping is a trivial mapping between template parameters and a JSON object:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject user = <span class=\"hljs-keyword\">new</span> JsonObject();\nuser.put(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>);\nuser.put(<span class=\"hljs-string\">&quot;firstName&quot;</span>, <span class=\"hljs-string\">&quot;Dale&quot;</span>);\nuser.put(<span class=\"hljs-string\">&quot;lastName&quot;</span>, <span class=\"hljs-string\">&quot;Cooper&quot;</span>);\n\nSqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">&quot;INSERT INTO users VALUES (#{id},#{firstName},#{lastName})&quot;</span>)\n  .mapFrom(TupleMapper.jsonObject())\n  .execute(user)\n  .onSuccess(res -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;User inserted&quot;</span>);\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mapping_with_jackson_databind\"><a class=\"anchor\" href=\"#_mapping_with_jackson_databind\"></a>Mapping with Jackson databind</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can do mapping using Jackson databind capabilities.</p>\n</div>\n<div class=\"paragraph\">\n<p>You need to add the Jackson databind dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-databind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${jackson.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;com.fasterxml.jackson.core:jackson-databind:${jackson.version}&#x27;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Row mapping is achieved by creating a <code>JsonObject</code> using the row key/value pairs and then calling\n<code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#mapTo-java.lang.Class-\">mapTo</a></code> to map it to any Java class with Jackson databind.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=#{id}&quot;</span>)\n  .mapTo(User.class)\n  .execute(Collections.singletonMap(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>))\n  .onSuccess(users -&gt; {\n    users.forEach(user -&gt; {\n      System.out.println(user.firstName + <span class=\"hljs-string\">&quot; &quot;</span> + user.lastName);\n    });\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Likewise parameters mapping is achieved by mapping the object to a <code>JsonObject</code> using  <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#mapFrom-java.lang.Object-\">JsonObject.mapFrom</a></code>\nand then using the key/value pairs to produce template parameters.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">User u = <span class=\"hljs-keyword\">new</span> User();\nu.id = <span class=\"hljs-number\">1</span>;\n\nSqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">&quot;INSERT INTO users VALUES (#{id},#{firstName},#{lastName})&quot;</span>)\n  .mapFrom(User.class)\n  .execute(u)\n  .onSuccess(res -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;User inserted&quot;</span>);\n  });</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_java_datetime_api_mapping\"><a class=\"anchor\" href=\"#_java_datetime_api_mapping\"></a>Java Date/Time API mapping</h3>\n<div class=\"paragraph\">\n<p>You can map <code>java.time</code> types with the <em>jackson-modules-java8</em> Jackson extension.</p>\n</div>\n<div class=\"paragraph\">\n<p>You need to add the Jackson JSR 310 datatype dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${jackson.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson.version}&#x27;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then you need to register the time module to the Jackson <code>ObjectMapper</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ObjectMapper mapper = io.vertx.core.json.jackson.DatabindCodec.mapper();\n\nmapper.registerModule(<span class=\"hljs-keyword\">new</span> JavaTimeModule());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can now use <code>java.time</code> types such as <code>LocalDateTime</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LocalDateTimePojo</span> </span>{\n\n <span class=\"hljs-keyword\">public</span> LocalDateTime localDateTime;\n\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mapping_with_vert_x_data_objects\"><a class=\"anchor\" href=\"#_mapping_with_vert_x_data_objects\"></a>Mapping with Vert.x data objects</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The SQL Client Templates component can generate mapping function for Vert.x data objects.</p>\n</div>\n<div class=\"paragraph\">\n<p>A Vert.x data object is a simple Java bean class annotated with the <code>@DataObject</code> annotation.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_code_generation\"><a class=\"anchor\" href=\"#_code_generation\"></a>Code generation</h3>\n<div class=\"paragraph\">\n<p>Any data object annotated by <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/RowMapped.html\">@RowMapped</a></code> or <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/ParametersMapped.html\">@ParametersMapped</a></code>\nwill trigger  the generation of a corresponding mapper class.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <em>codegen</em> annotation processor generates these classes at compilation time. It is a feature of the Java\ncompiler so <em>no extra step</em> is required, it is just a matter of configuring correctly your build:</p>\n</div>\n<div class=\"paragraph\">\n<p>Just add the <code>io.vertx:vertx-codegen:processor</code> and <code>io.vertx:vertx-sql-client-templates</code>\ndependencies to your build.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here a configuration example for Maven:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-codegen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">classifier</span>&gt;</span>processor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">classifier</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-sql-client-templates<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This feature can also be used in Gradle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>annotationProcessor \"io.vertx:vertx-codegen:4.2.0:processor\"\ncompile \"io.vertx:vertx-sql-client-templates:4.2.0\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>IDEs usually provide usually support for annotation processors.</p>\n</div>\n<div class=\"paragraph\">\n<p>The codegen <code>processor</code> classifier adds to the jar the automatic configuration of the service proxy annotation processor\nvia the <code>META-INF/services</code> plugin mechanism.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want you can use it too with the regular jar but you need then to declare the annotation processor\nexplicitly, for instance in Maven:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">annotationProcessors</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">annotationProcessor</span>&gt;</span>io.vertx.codegen.CodeGenProcessor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">annotationProcessor</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">annotationProcessors</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_row_mapping_2\"><a class=\"anchor\" href=\"#_row_mapping_2\"></a>Row mapping</h3>\n<div class=\"paragraph\">\n<p>You can generate a row mapper by annotating your data object by <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/RowMapped.html\">@RowMapped</a></code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@RowMapped</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>By default each column name is bound after the data object properties, e.g the <code>userName</code> property binds to\nthe <code>userName</code> column.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can use custom names thanks to the <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/Column.html\">@Column</a></code>\nannotation.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@RowMapped</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-meta\">@Column(name = &quot;first_name&quot;)</span>\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-meta\">@Column(name = &quot;last_name&quot;)</span>\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can annotate the field, the getter or the setter.</p>\n</div>\n<div class=\"paragraph\">\n<p>The generated mapper can be used to perform row mapping like explained in <a href=\"#row_mapping_with_custom_mapper\">row mapping chapter</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=#{id}&quot;</span>)\n  .mapTo(UserDataObjectRowMapper.INSTANCE)\n  .execute(Collections.singletonMap(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>))\n  .onSuccess(users -&gt; {\n    users.forEach(user -&gt; {\n      System.out.println(user.getFirstName() + <span class=\"hljs-string\">&quot; &quot;</span> + user.getLastName());\n    });\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_parameters_mapping_2\"><a class=\"anchor\" href=\"#_parameters_mapping_2\"></a>Parameters mapping</h3>\n<div class=\"paragraph\">\n<p>You can generate a parameters mapper by annotating your data object by <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/ParametersMapped.html\">@ParametersMapped</a></code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@ParametersMapped</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>By default each parameter is bound after the data object properties, e.g the <code>userName</code> property binds to\nthe <code>userName</code> parameter.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can use custom names thanks to the <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/TemplateParameter.html\">@TemplateParameter</a></code>\nannotation.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@ParametersMapped</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-meta\">@TemplateParameter(name = &quot;first_name&quot;)</span>\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-meta\">@TemplateParameter(name = &quot;last_name&quot;)</span>\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can annotate the field, the getter or the setter.</p>\n</div>\n<div class=\"paragraph\">\n<p>The generated mapper can be used to perform param mapping like explained in <a href=\"#params_mapping_with_custom_function\">parameter mapping chapter</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">UserDataObject user = <span class=\"hljs-keyword\">new</span> UserDataObject().setId(<span class=\"hljs-number\">1</span>);\n\nSqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=#{id}&quot;</span>)\n  .mapFrom(UserDataObjectParamMapper.INSTANCE)\n  .execute(user)\n  .onSuccess(users -&gt; {\n    users.forEach(row -&gt; {\n      System.out.println(row.getString(<span class=\"hljs-string\">&quot;firstName&quot;</span>) + <span class=\"hljs-string\">&quot; &quot;</span> + row.getString(<span class=\"hljs-string\">&quot;lastName&quot;</span>));\n    });\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_java_enum_types_mapping\"><a class=\"anchor\" href=\"#_java_enum_types_mapping\"></a>Java enum types mapping</h3>\n<div class=\"paragraph\">\n<p>You can map Java enum types when the client supports it (e.g the Reactive PostgreSQL client).</p>\n</div>\n<div class=\"paragraph\">\n<p>Usually Java enum types are mapped to string / numbers and possibly custom database enumerated types.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_naming_format\"><a class=\"anchor\" href=\"#_naming_format\"></a>Naming format</h3>\n<div class=\"paragraph\">\n<p>The default template use the same case for parameters and columns. You can override the default names in the <code>Column</code>\nand <code>TemplateParameter</code> annotations and use the formatting you like.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also configure a specific formatting case of a mapper in the <code>RowMapped</code> and <code>ParametersMapped</code> annotations:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@RowMapped(formatter = SnakeCase.class)</span>\n<span class=\"hljs-meta\">@ParametersMapped(formatter = QualifiedCase.class)</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The following cases can be used:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/CamelCase.html\">CamelCase</a></code> : <code>FirstName</code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/LowerCamelCase.html\">LowerCamelCase</a></code> : <code>firstName</code> - like camel case but starts with a lower case, this is the default case</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/SnakeCase.html\">SnakeCase</a></code> : <code>first_name</code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/KebabCase.html\">KebabCase</a></code> : <code>first-name</code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/QualifiedCase.html\">QualifiedCase</a></code> : <code>first.name</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","version":"4.2.0"},"__N_SSG":true}