{"pageProps":{"slug":"3.9.2/vertx-sync/java","title":"Vertx-Sync","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introduction\">Introduction</a></li>\n<li><a href=\"#_syncverticle\">SyncVerticle</a></li>\n<li><a href=\"#_instrumentation\">Instrumentation</a></li>\n<li><a href=\"#_getting_one_shot_async_results\">Getting one-shot async results</a></li>\n<li><a href=\"#_getting_one_shot_events\">Getting one-shot events</a></li>\n<li><a href=\"#_streams_of_events\">Streams of events</a></li>\n<li><a href=\"#_using_a_fiberhandler\">Using a <code>FiberHandler</code></a></li>\n<li><a href=\"#_further_examples\">Further examples</a></li>\n<li><a href=\"#_what_if_you_get_exceptions\">What if you get exceptions?</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_instrumentation_warnings\">Instrumentation warnings</a></li>\n<li><a href=\"#_calling_fiber_code_from_outside_a_fiber\">Calling fiber code from outside a fiber</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vertx-Sync</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vertx-sync is a set of utilities that allow you to perform asynchronous operations and receive events in a\nsynchronous way, but without blocking kernel threads.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introduction\"><a class=\"anchor\" href=\"#_introduction\"></a>Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>One of the key advantages of Vert.x over many legacy application platforms is that it is almost entirely non-blocking\n(of kernel threads) - this allows it to handle a lot of concurrency (e.g. handle many connections, or messages) using\na very small number of kernel threads, which allows it to scale very well.</p>\n</div>\n<div class=\"paragraph\">\n<p>The non blocking nature of Vert.x leads to asynchronous APIs. Asynchronous APIs can take various forms including\ncallback style, promises or Rx-style. Vert.x uses callback style in most places (although it also supports Rx).</p>\n</div>\n<div class=\"paragraph\">\n<p>In some cases, programming using asynchronous APIs can be more challenging than using a direct synchronous style, in\nparticular if you have several operations that you want to do in sequence. Also error propagation is often more complex\nwhen using asynchronous APIs.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vertx-sync allows you to work with asynchronous APIs, but using a direct synchronous style that you&#8217;re already\nfamiliar with.</p>\n</div>\n<div class=\"paragraph\">\n<p>It does this by using <code>fibers</code>. Fibers are very lightweight threads that do not correspond to underlying kernel threads.\nWhen they are blocked they do not block a kernel thread.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert-sync uses <a href=\"http://docs.paralleluniverse.co/quasar/\">Quasar</a> to implement the fibers.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nVert-sync currently only works with Java.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_syncverticle\"><a class=\"anchor\" href=\"#_syncverticle\"></a>SyncVerticle</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In order to use vertx-sync you must deploy your code as instances of <code>io.vertx.ext.sync.SyncVerticle</code>.\nYou should override the <code>start()</code> and (optionally) the <code>stop()</code> methods of the verticle.</p>\n</div>\n<div class=\"paragraph\">\n<p>Those methodsmust* be annotated with the <code>@Suspendable</code> annotation.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you&#8217;ve written your sync verticle(s) you deploy them in exactly the same way as any other verticle.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_instrumentation\"><a class=\"anchor\" href=\"#_instrumentation\"></a>Instrumentation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x uses Quasar which implements fibers by using bytecode instrumentation. This is done at run-time using a java\nagent.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order for this to work you must start the JVM specifying the java agent jar which is located in the quasar-core\njar.</p>\n</div>\n<div class=\"paragraph\">\n<p>TODO how to reference quasar core jar in fatjar?</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>-javaagent:/path/to/quasar/core/quasar-core.jar</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If you are using the <code>vertx</code> command line tools, the agent configuration can be enabled by setting the <code>ENABLE_VERTX_SYNC_AGENT</code>\nenvironment variable to <code>true</code>, before executing <code>vertx</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also use a offline instrumentation as with the <a href=\"https://github.com/vy/quasar-maven-plugin\">quasar-maven-plugin</a> or  or <a href=\"https://github.com/mtatheonly/quasar-gradle-plugin\">quasar-gradle-plugin</a>.\nCheck the <a href=\"http://docs.paralleluniverse.co/quasar/\">Quasar documentation</a> for more details.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_one_shot_async_results\"><a class=\"anchor\" href=\"#_getting_one_shot_async_results\"></a>Getting one-shot async results</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Many async operations in Vert.x-land take a <code>Handler&lt;AsyncResult&lt;T&gt;&gt;</code> as the last argument. An example would\nexecuting a find using the Vert.x Mongo client or sending an event bus message and getting a reply.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vertx-sync allows you to get the result of a one-shot asynchronous operation in a synchronous way.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is done by using the <code><a href=\"../../apidocs/io/vertx/ext/sync/Sync.html#awaitResult-java.util.function.Consumer-\">Sync.awaitResult</a></code> method.</p>\n</div>\n<div class=\"paragraph\">\n<p>The method is executed specifying the asynchronous operation that you want to execute in the form of a <code><a href=\"../../apidocs/java/util/function/Consumer.html\">Consumer</a></code>,\nthe consumer is passed the handler at run-time.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">EventBus eb = vertx.eventBus();\n\n<span class=\"hljs-comment\">// Send a message and get the reply synchronously</span>\n\nMessage&lt;String&gt; reply = awaitResult(h -&gt; eb.send(<span class=\"hljs-string\">\"someaddress\"</span>, <span class=\"hljs-string\">\"ping\"</span>, h));\n\nSystem.out.println(<span class=\"hljs-string\">\"Received reply \"</span> + reply.body());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the above example the fiber is blocked until the reply is returned but no kernel thread is blocked.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_one_shot_events\"><a class=\"anchor\" href=\"#_getting_one_shot_events\"></a>Getting one-shot events</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vertx-sync can be used to get one-shot events in a synchronous way, for example firings of timers, or the executing of\nan end handler. This is achieved using the <code><a href=\"../../apidocs/io/vertx/ext/sync/Sync.html#awaitEvent-java.util.function.Consumer-\">Sync.awaitEvent</a></code> method.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">long</span> tid = awaitEvent(h -&gt; vertx.setTimer(<span class=\"hljs-number\">1000</span>, h));\n\nSystem.out.println(<span class=\"hljs-string\">\"Timer has now fired\"</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_streams_of_events\"><a class=\"anchor\" href=\"#_streams_of_events\"></a>Streams of events</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In many places in Vert.x streams of events are provided by passing them to handlers.</p>\n</div>\n<div class=\"paragraph\">\n<p>Examples include event bus message consumers and HTTP server requests on an HTTP server.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert-sync allows you to receive events from such streams in a synchronous way.</p>\n</div>\n<div class=\"paragraph\">\n<p>You do this with an instance of <code><a href=\"../../apidocs/io/vertx/ext/sync/HandlerReceiverAdaptor.html\">HandlerReceiverAdaptor</a></code> which implements both\n<code><a href=\"../../apidocs/io/vertx/core/Handler.html\">Handler</a></code> and <code><a href=\"../../apidocs/io/vertx/ext/sync/Receiver.html\">Receiver</a></code>. You create an instance using\n<code><a href=\"../../apidocs/io/vertx/ext/sync/Sync.html#streamAdaptor--\">Sync.streamAdaptor</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can set it as a normal handler and then use the methods on <code><a href=\"../../apidocs/io/vertx/ext/sync/Receiver.html\">Receiver</a></code> to receive\nevents synchronously.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example using an event bus message consumer:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">EventBus eb = vertx.eventBus();\n\nHandlerReceiverAdaptor&lt;Message&lt;String&gt;&gt; adaptor = streamAdaptor();\n\neb.&lt;String&gt;consumer(<span class=\"hljs-string\">\"some-address\"</span>).handler(adaptor);\n\n<span class=\"hljs-comment\">// Receive 10 messages from the consumer:</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n\n  Message&lt;String&gt; received1 = adaptor.receive();\n\n  System.out.println(<span class=\"hljs-string\">\"got message: \"</span> + received1.body());\n\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_a_fiberhandler\"><a class=\"anchor\" href=\"#_using_a_fiberhandler\"></a>Using a <code>FiberHandler</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you want to do use fibers in a normal handler, e.g. in the request handler of an Http Server then you must first\nconvert the normal handler to a fiber handler.</p>\n</div>\n<div class=\"paragraph\">\n<p>The fiber handler runs the normal handler on a fiber.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">EventBus eb = vertx.eventBus();\n\nvertx.createHttpServer().requestHandler(fiberHandler(req -&gt; {\n\n  <span class=\"hljs-comment\">// Send a message to address and wait for a reply</span>\n  Message&lt;String&gt; reply = awaitResult(h -&gt; eb.send(<span class=\"hljs-string\">\"some-address\"</span>, <span class=\"hljs-string\">\"blah\"</span>, h));\n\n  System.out.println(<span class=\"hljs-string\">\"Got reply: \"</span> + reply.body());\n\n  <span class=\"hljs-comment\">// Now end the response</span>\n  req.response().end(<span class=\"hljs-string\">\"blah\"</span>);\n\n})).listen(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">\"localhost\"</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_further_examples\"><a class=\"anchor\" href=\"#_further_examples\"></a>Further examples</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are a set of working examples demonstrating vertx-sync in action in the\n<a href=\"https://github.com/vert-x3/vertx-examples/tree/master/sync-examples\">examples repository</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_what_if_you_get_exceptions\"><a class=\"anchor\" href=\"#_what_if_you_get_exceptions\"></a>What if you get exceptions?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Quasar and co-routines do not <em>\"automagically\"</em> transform blocking code into non-blocking code.\nEspecially, blocking using <code>Thread.sleep</code> or using <code>synchronized</code> blocks and methods <em>is</em> a problem.</p>\n</div>\n<div class=\"paragraph\">\n<p>There are 2 types of exceptions that you may observe when using <code>vertx-sync</code>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_instrumentation_warnings\"><a class=\"anchor\" href=\"#_instrumentation_warnings\"></a>Instrumentation warnings</h3>\n<div class=\"paragraph\">\n<p>You may encounter stack traces like the following in your logs:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>(...)\n[quasar] ERROR: while transforming io/vertx/core/impl/DeploymentManager$DeploymentImpl: Unable to instrument vertx/core/impl/DeploymentManager$DeploymentImpl#lambda$rollback$1(Ljava/lang/Throwable;Lio/vertx/core/impl/ContextInternal;Lio/vertx/core/Handler;/vertx/core/impl/ContextImpl;Lio/vertx/core/AsyncResult;)V because of synchronization\nco.paralleluniverse.fibers.instrument.UnableToInstrumentException: Unable to instrument vertx/core/impl/DeploymentManager$DeploymentImpl#lambda$rollback$1(Ljava/lang/Throwable;Lio/vertx/core/impl/ContextInternal;Lio/vertx/core/Handler;/vertx/core/impl/ContextImpl;Lio/vertx/core/AsyncResult;)V because of synchronization\n       at co.paralleluniverse.fibers.instrument.InstrumentMethod.dumpCodeBlock(InstrumentMethod.java:720)\n       at co.paralleluniverse.fibers.instrument.InstrumentMethod.accept(InstrumentMethod.java:415)\n       at co.paralleluniverse.fibers.instrument.InstrumentClass.visitEnd(InstrumentClass.java:265)\n(...)</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>These errors are actually warnings from Quasar as it tries to instrument both your code and libraries (including Vert.x modules!).</p>\n</div>\n<div class=\"paragraph\">\n<p>Quasar may encounter blocking constructs such as thread blocking and <code>synchronized</code> blocks or methods.\nThere is sometimes little you can do, but this does not mean that your application will not be functional.</p>\n</div>\n<div class=\"paragraph\">\n<p>There are just some parts reported by Quasar where coroutines may block without being able to yield execution to another coroutine.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_calling_fiber_code_from_outside_a_fiber\"><a class=\"anchor\" href=\"#_calling_fiber_code_from_outside_a_fiber\"></a>Calling fiber code from outside a fiber</h3>\n<div class=\"paragraph\">\n<p>You may encounter exceptions that prevent your application to function, such as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>(...)\nio.vertx.core.VertxException: java.lang.IllegalThreadStateException: Method called not from within a fiber\n       at co.paralleluniverse.fibers.FiberAsync.requestSync(FiberAsync.java:289)\n       at co.paralleluniverse.fibers.FiberAsync.runSync(FiberAsync.java:255)\n       at co.paralleluniverse.fibers.FiberAsync.run(FiberAsync.java:111)\n(...)</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This happens when you call fiber code (e.g., a method annotated with <code>@Suspendable</code>) from outside a fiber, such as from an event-loop thread.</p>\n</div>\n<div class=\"paragraph\">\n<p>In most of the cases the solution lies in wrapping the call to the first fiber code using one of the helper methods from <code><a href=\"../../apidocs/io/vertx/ext/sync/Sync.html\">Sync</a></code>: <code>awaitResult</code>, <code>awaitEvent</code>, <code>fiberHandler</code> and <code>streamAdaptor</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Suppose that we have a fiber method like the following:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Suspendable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">readData</span><span class=\"hljs-params\">()</span> </span>{\n <span class=\"hljs-keyword\">boolean</span> exists = Sync.awaitResult(h -&gt; vertx.fileSystem().exists(<span class=\"hljs-string\">\"file.txt\"</span>, h));\n <span class=\"hljs-keyword\">if</span> (exists) {\n   Buffer buf = Sync.awaitResult(h -&gt; vertx.fileSystem().readFile(<span class=\"hljs-string\">\"file.txt\"</span>, h));\n\t\t <span class=\"hljs-keyword\">return</span> buf.toString();\n }\n <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now suppose that we want to call this method in response to an event-bus method.\nTo ensure that the event-bus message processing is from a fiber and we can call the <code>readData</code> method, then we need adapting with <code>fiberHandler</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.eventBus().consumer(<span class=\"hljs-string\">\"read\"</span>, Sync.fiberHandler(m -&gt; m.reply(readData())));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Conversely, if you do not use <code>fiberHandler</code> then you will get an exception as above:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-comment\">// This crashes!</span>\nvertx.eventBus().consumer(<span class=\"hljs-string\">\"read\"</span>, m -&gt; m.reply(readData()));</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">提示</div>\n</td>\n<td class=\"content\">\nIf you need more flexibility you can always use <code><a href=\"../../apidocs/io/vertx/ext/sync/Sync.html#getContextScheduler--\">Sync.getContextScheduler</a></code> to access the verticle context scheduler and start Quasar fibers / strands.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>","version":"3.9.2"},"__N_SSG":true}