{"pageProps":{"slug":"3.9.2/vertx-reactive-streams/java","title":"Vert.x Reactive Streams Integration","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_reactive_streams\">Using Vert.x Reactive Streams</a></li>\n<li><a href=\"#_reactive_read_stream\">Reactive Read Stream</a></li>\n<li><a href=\"#_reactive_write_stream\">Reactive Write Stream</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Reactive Streams Integration</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"http://www.reactive-streams.org/\">Reactive Streams</a> is an initiative to provide a standard for asynchronous stream\nprocessing with non-blocking back pressure on the JVM.</p>\n</div>\n<div class=\"paragraph\">\n<p>This library provides an implementation of reactive streams for Vert.x.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x provides its own mechanisms for handling streams of data and pumping them with back pressure from one to another\nusing the <code>io.vertx.core.streams.ReadStream</code>, <code>io.vertx.core.streams.WriteStream</code> and <code>io.vertx.core.streams.Pump</code>.\nPlease see the Vert.x core manual for more information on Vert.x streams.</p>\n</div>\n<div class=\"paragraph\">\n<p>This library provides implementations of read stream and write stream which also act as reactive streams publishers\nand subscribers. This allows us to treat any reactive streams publisher or subscriber and deal with it like any other\nVert.x read or write stream.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_reactive_streams\"><a class=\"anchor\" href=\"#_using_vert_x_reactive_streams\"></a>Using Vert.x Reactive Streams</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use Vert.x Reactive Streams, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-reactive-streams<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile io.<span class=\"hljs-string\">vertx:</span>vertx-reactive-<span class=\"hljs-string\">streams:</span><span class=\"hljs-number\">3.9</span><span class=\"hljs-number\">.2</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_reactive_read_stream\"><a class=\"anchor\" href=\"#_reactive_read_stream\"></a>Reactive Read Stream</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We provide an implementation of the Vert.x <code>ReadStream</code> interface with <code><a href=\"../../apidocs/io/vertx/ext/reactivestreams/ReactiveReadStream.html\">ReactiveReadStream</a></code>\nwhich also implements a reactive streams <code>Subscriber</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can pass an instance of this to any reactive streams <code>Publisher</code> (e.g. a Publisher from Akka) and then you will be\nable to read from that just like any other Vert.x <code>ReadStream</code> (e.g. use a <code>Pump</code> to pump it to a <code>WriteStream</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of taking a publisher from some other reactive streams implementation (e.g. Akka) and pumping that\nstream to the body of a server side HTTP response. This will handle back pressure automatically.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ReactiveReadStream&lt;Buffer&gt; rrs = ReactiveReadStream.readStream();\n\n<span class=\"hljs-comment\">// Subscribe the read stream to the publisher</span>\notherPublisher.subscribe(rrs);\n\n<span class=\"hljs-comment\">// Pump from the read stream to the http response</span>\nPump pump = Pump.pump(rrs, response);\n\npump.start();</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_reactive_write_stream\"><a class=\"anchor\" href=\"#_reactive_write_stream\"></a>Reactive Write Stream</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We also provide an implementation of the Vert.x <code>WriteStream</code> interface with <code><a href=\"../../apidocs/io/vertx/ext/reactivestreams/ReactiveWriteStream.html\">ReactiveWriteStream</a></code>\nwhich also implements a reactive streams <code>Publisher</code>. You can take any reactive streams <code>Subscriber</code>\n(e.g. a Subscriber from Akka) and then you will be able* to write to it like any other Vert.x <code>WriteStream</code>.\n(e.g. use a <code>Pump</code> to pump it from a <code>ReadStream</code>).</p>\n</div>\n<div class=\"paragraph\">\n<p>You use <code>pause</code>, <code>resume</code>, and <code>writeQueueFull</code>, as you would with any Vert.x read stream to handle your back pressure.\nThis is automatically translated internally into the reactive streams method of propagating back pressure\n(requesting more items).</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of taking a subscriber from some other reactive streams implementation and pumping the body of\na server side HTTP request to that subscriber. This will handle back pressure automatically.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ReactiveWriteStream&lt;Buffer&gt; rws = ReactiveWriteStream.writeStream(vertx);\n\n<span class=\"hljs-comment\">// Subscribe the other subscriber to the write stream</span>\nrws.subscribe(otherSubscriber);\n\n<span class=\"hljs-comment\">// Pump the http request to the write stream</span>\nPump pump = Pump.pump(request, rws);\n\npump.start();</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"3.9.2"},"__N_SSG":true}