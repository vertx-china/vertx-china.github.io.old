{"pageProps":{"slug":"3.9.0/vertx-web-api-service/java","title":"Vert.x Web API Service","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_api_service\">Using Vert.x API Service</a></li>\n<li><a href=\"#_recap_on_vert_x_web_api_contract\">Recap on Vert.x Web API Contract</a></li>\n<li><a href=\"#_define_your_service_interface\">Define your Service interface</a></li>\n<li><a href=\"#_implement_your_service\">Implement your service</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_the_operationrequest_data_object\">The <code>OperationRequest</code> data object</a></li>\n<li><a href=\"#_the_operationresponse_data_object\">The <code>OperationResponse</code> data object</a></li>\n</ul>\n</li>\n<li><a href=\"#_mount_to_router_factory\">Mount to Router Factory</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_using_the_extension_x_vertx_event_bus\">Using the extension <code>x-vertx-event-bus</code></a></li>\n</ul>\n</li>\n<li><a href=\"#_run_the_service\">Run the service</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Web API Service</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Web API Service helps you routing the API requests incoming from a Vert.x Web Router built with <a href=\"https://vertx.io/docs/vertx-web-api-contract/java/\">Vert.x Web API Contract Router Factory</a> to event bus.\nEvent Bus provides itself important features like load balancing and distribution of requests across different Vert.x instances. We encourage you to give a look at <a href=\"https://vertx.io/docs/vertx-core/java/#event_bus\">Event Bus documentation</a></p>\n</div>\n<div class=\"paragraph\">\n<p>It&#8217;s based on same concept of <a href=\"https://vertx.io/docs/vertx-service-proxy/java/\">Vert.x service proxies</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_api_service\"><a class=\"anchor\" href=\"#_using_vert_x_api_service\"></a>Using Vert.x API Service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use Vert.x API Service, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-codegen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">classifier</span>&gt;</span>processor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">classifier</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web-api-service<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle &lt; 5 (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'io.vertx:vertx-codegen:3.9.0:processor'</span>\n compile <span class=\"hljs-string\">'io.vertx:vertx-web-api-service:3.9.0'</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle &gt;= 5 (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n annotationProcessor <span class=\"hljs-string\">'io.vertx:vertx-codegen:3.9.0:processor'</span>\n annotationProcessor <span class=\"hljs-string\">'io.vertx:vertx-web-api-service:3.9.0'</span>\n compile <span class=\"hljs-string\">'io.vertx:vertx-web-api-service:3.9.0'</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You need to import <code>vertx-codegen</code> to trigger the code generation from annotated interfaces</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to use the interface you write in different languages, you will need to add the <em>language</em> dependency such as\n<code>vertx-lang-groovy</code> for Groovy.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_recap_on_vert_x_web_api_contract\"><a class=\"anchor\" href=\"#_recap_on_vert_x_web_api_contract\"></a>Recap on Vert.x Web API Contract</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Web API Contract helps you to build a Vert.x Web router compliant to an OpenAPI spec, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerFactory.addHandlerByOperationId(<span class=\"hljs-string\">\"operationId\"</span>, routingContext -&gt; {\n  RequestParameters parameters = routingContext.get(<span class=\"hljs-string\">\"parsedParameters\"</span>);\n  <span class=\"hljs-comment\">// Process the request</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>With Vert.x Web API Service you can define an event bus service that connects automatically to the router factory, allowing automatic request routing to Vert.x Event Bus.</p>\n</div>\n<div class=\"paragraph\">\n<p>We encourage you to read <a href=\"https://vertx.io/docs/vertx-service-proxy/java/\">Service Proxy documentation</a> before going further</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_define_your_service_interface\"><a class=\"anchor\" href=\"#_define_your_service_interface\"></a>Define your Service interface</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Let&#8217;s start with defining your service interface. We want to define the service interface for this OpenAPI operations definition:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-string\">/api/transactions:</span>\n <span class=\"hljs-attr\">get:</span>\n   <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">getTransactionsList</span>\n   <span class=\"hljs-attr\">parameters:</span>\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">from</span>\n       <span class=\"hljs-attr\">in:</span> <span class=\"hljs-string\">query</span>\n       <span class=\"hljs-attr\">style:</span> <span class=\"hljs-string\">form</span>\n       <span class=\"hljs-attr\">explode:</span> <span class=\"hljs-literal\">false</span>\n       <span class=\"hljs-attr\">required:</span> <span class=\"hljs-literal\">false</span>\n       <span class=\"hljs-attr\">schema:</span>\n         <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">string</span>\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">to</span>\n       <span class=\"hljs-attr\">in:</span> <span class=\"hljs-string\">query</span>\n       <span class=\"hljs-attr\">style:</span> <span class=\"hljs-string\">form</span>\n       <span class=\"hljs-attr\">explode:</span> <span class=\"hljs-literal\">false</span>\n       <span class=\"hljs-attr\">required:</span> <span class=\"hljs-literal\">false</span>\n       <span class=\"hljs-attr\">schema:</span>\n         <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">string</span>\n   <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n <span class=\"hljs-attr\">put:</span>\n   <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">putTransaction</span>\n   <span class=\"hljs-attr\">requestBody:</span>\n     <span class=\"hljs-attr\">required:</span> <span class=\"hljs-literal\">true</span>\n     <span class=\"hljs-attr\">content:</span>\n       <span class=\"hljs-attr\">application/json:</span>\n         <span class=\"hljs-attr\">schema:</span>\n           <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">object</span>\n           <span class=\"hljs-attr\">properties:</span>\n             <span class=\"hljs-attr\">from:</span>\n               <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">string</span>\n               <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">email</span>\n             <span class=\"hljs-attr\">to:</span>\n               <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">string</span>\n               <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">email</span>\n             <span class=\"hljs-attr\">value:</span>\n               <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">number</span>\n               <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">double</span>\n           <span class=\"hljs-attr\">additionalProperties:</span> <span class=\"hljs-literal\">false</span>\n           <span class=\"hljs-attr\">required:</span>\n             <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">from</span>\n             <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">to</span>\n             <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">value</span>\n   <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now we can build the interface that specifies a <strong>TransactionService</strong> that handles <em>getTransactionsList</em> and <em>putTransaction</em> operations. For each operation you need to write a method with name corresponding to operation id with following parameters:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Last parameter must be a <code>Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt;</code></p>\n</li>\n<li>\n<p>Second to last parameter must be a <code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationRequest.html\">OperationRequest</a></code></p>\n</li>\n<li>\n<p>All parameters from first to second to last (excluded) are extracted from <code><a href=\"../../apidocs/io/vertx/ext/web/api/RequestParameter.html\">RequestParameter</a></code> with specified type automatically, but they need to respect <a href=\"https://vertx.io/docs/vertx-service-proxy/java/#_restrictions_for_service_interface\">service proxy restrictions</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@WebApiServiceGen</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">TransactionService</span> </span>{\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getTransactionsList</span><span class=\"hljs-params\">(String from, String to, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putTransaction</span><span class=\"hljs-params\">(JsonObject body, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you receive a request at <code>TransactionService.getTransactionsList()</code> the generated service handler will automatically extract <code>from</code> and <code>to</code> parameter (if present) from <code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationRequest.html\">OperationRequest</a></code>. In <code>putTransaction()</code> we use the <code>body</code> parameter name to extract the json body.</p>\n</div>\n<div class=\"paragraph\">\n<p>The service handler is also capable to translate <code>JsonObject</code> to Vert.x data objects automatically, for example if you have a <code>Transaction</code> data object that matches the json schema above, you can rewrite the <code>putTransaction()</code> signature as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putTransaction</span><span class=\"hljs-params\">(Transaction body, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note that generated service handler matches method parameters with spec&#8217;s parameter name and not with the location of parameter, so avoid duplicated parameter names in your spec</p>\n</div>\n<div class=\"paragraph\">\n<p>We also encourage to extract with <code><a href=\"../../apidocs/io/vertx/ext/web/api/RequestParameter.html\">RequestParameter</a></code> parameters that uses json schema allOf/anyOf/oneOf/not keywords because the extraction can produce undefined behaviours</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_implement_your_service\"><a class=\"anchor\" href=\"#_implement_your_service\"></a>Implement your service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now you can implement your service. The <code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationRequest.html\">OperationRequest</a></code> object contains headers and parameters maps.</p>\n</div>\n<div class=\"paragraph\">\n<p>To write the request you must call the <code>resultHandler</code> with an <code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationResponse.html\">OperationResponse</a></code>. To construct the <code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationResponse.html\">OperationResponse</a></code> you can use some handy methods like <code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationResponse.html#completedWithJson-io.vertx.core.buffer.Buffer-\">OperationResponse.completedWithJson</a></code> or <code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationResponse.html#completedWithPlainText-io.vertx.core.buffer.Buffer-\">OperationResponse.completedWithPlainText</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">resultHandler.handle(\n  Future.succeededFuture(\n    OperationResponse.completedWithPlainText(Buffer.buffer(<span class=\"hljs-string\">\"Hello world!\"</span>))\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_the_operationrequest_data_object\"><a class=\"anchor\" href=\"#_the_operationrequest_data_object\"></a>The <code>OperationRequest</code> data object</h3>\n<div class=\"paragraph\">\n<p><code>OperationRequest</code> it&#8217;s a <em>serializable</em> version of <code>RoutingContext</code>. It doesn&#8217;t contain all data encapsulated in <code>RoutingContext</code>. It transports to your service:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationRequest.html#getHeaders--\">getHeaders</a></code>: Headers of the request</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationRequest.html#getParams--\">getParams</a></code>: Contains <code>routingContext.get(\"parsedParameters\")</code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationRequest.html#getUser--\">getUser</a></code>: Contains <code>routingContext.user().principal()</code>, null if no user is authenticated</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/api/OperationRequest.html#getExtra--\">getExtra</a></code>: Contains an extra configurable payload</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>You can configure a lambda that builds the extra payload with <code><a href=\"../../apidocs/io/vertx/ext/web/api/contract/RouterFactory.html#setExtraOperationContextPayloadMapper-java.util.function.Function-\">setExtraOperationContextPayloadMapper</a></code></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_the_operationresponse_data_object\"><a class=\"anchor\" href=\"#_the_operationresponse_data_object\"></a>The <code>OperationResponse</code> data object</h3>\n<div class=\"paragraph\">\n<p><code>OperationResponse</code> is composed by:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Headers of the response</p>\n</li>\n<li>\n<p>Status code/Status message</p>\n</li>\n<li>\n<p>Body as a payload. If you set the payload as null no body will be sent</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mount_to_router_factory\"><a class=\"anchor\" href=\"#_mount_to_router_factory\"></a>Mount to Router Factory</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now that your service is ready you need to mount it to <code><a href=\"../../apidocs/io/vertx/ext/web/api/contract/openapi3/OpenAPI3RouterFactory.html\">OpenAPI3RouterFactory</a></code>. When you use one of the methods below, the router factory mounts an handler that routes the request through the event bus to the service at the address specified. Pay attention to specify the correct address to event bus endpoint.</p>\n</div>\n<div class=\"paragraph\">\n<p>You have four methods to match the service with router operation handlers:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Mount manually every operation to a specified address with <code><a href=\"../../apidocs/io/vertx/ext/web/api/contract/openapi3/OpenAPI3RouterFactory.html#mountOperationToEventBus-java.lang.String-java.lang.String-\">mountOperationToEventBus</a></code></p>\n</li>\n<li>\n<p>Mount operations matching a tag[<a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#operation-object\" class=\"bare\">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#operation-object</a>] to a specified address with <code><a href=\"../../apidocs/io/vertx/ext/web/api/contract/openapi3/OpenAPI3RouterFactory.html#mountServiceFromTag-java.lang.String-java.lang.String-\">mountServiceFromTag</a></code>.</p>\n</li>\n<li>\n<p>Specify the class interface and the address of the service with <code><a href=\"../../apidocs/io/vertx/ext/web/api/contract/openapi3/OpenAPI3RouterFactory.html#mountServiceInterface-java.lang.Class-java.lang.String-\">mountServiceInterface</a></code>. This method introspects the interface public methods and mounts all matching method names with operation ids</p>\n</li>\n<li>\n<p>Specify inside the OpenAPI specification the <code>x-vertx-event-bus</code> extension for operations you want to route to your service and scan all operations that contains it with <code><a href=\"../../apidocs/io/vertx/ext/web/api/contract/openapi3/OpenAPI3RouterFactory.html#mountServicesFromExtensions--\">mountServicesFromExtensions</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>We suggest you to use the extension <code>x-vertx-event-bus</code> over all other methods. If you don&#8217;t want to modify your spec adding extensions, we recommend you to use <code><a href=\"../../apidocs/io/vertx/ext/web/api/contract/openapi3/OpenAPI3RouterFactory.html#mountServiceInterface-java.lang.Class-java.lang.String-\">mountServiceInterface</a></code></p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_the_extension_x_vertx_event_bus\"><a class=\"anchor\" href=\"#_using_the_extension_x_vertx_event_bus\"></a>Using the extension <code>x-vertx-event-bus</code></h3>\n<div class=\"paragraph\">\n<p>The <code>x-vertx-event-bus</code> can be configured both in path item object or in operation object. It can be:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>A string containing the address of service</p>\n</li>\n<li>\n<p>An object containing:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The field <code>address</code> that specifies the address of the service</p>\n</li>\n<li>\n<p>The field <code>method</code> that specifies the interface method name (valid only when you specify it in operation object)</p>\n</li>\n<li>\n<p>The delivery options <code>timeout</code> and <code>headers</code> (Look at <code><a href=\"../../apidocs/io/vertx/core/eventbus/DeliveryOptions.html\">DeliveryOptions</a></code>)</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>For example if I want to route <em>getTransactionsList</em> to <code>TransactionService</code> mounted at event bus address <code>transaction_service.my_application</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-string\">/api/transactions:</span>\n <span class=\"hljs-attr\">get:</span>\n   <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">getTransactionsList</span>\n   <span class=\"hljs-attr\">parameters:</span> <span class=\"hljs-string\">...</span>\n   <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n   <span class=\"hljs-attr\">x-vertx-event-bus:</span> <span class=\"hljs-string\">transaction_service.my_application</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-string\">/api/transactions:</span>\n <span class=\"hljs-attr\">get:</span>\n   <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">getTransactionsList</span>\n   <span class=\"hljs-attr\">parameters:</span> <span class=\"hljs-string\">...</span>\n   <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n   <span class=\"hljs-attr\">x-vertx-event-bus:</span>\n     <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">transaction_service.my_application</span>\n     <span class=\"hljs-attr\">method:</span> <span class=\"hljs-string\">getTransactionsList</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can specify both in path item and operation the extension and router factory will take care of merging it:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-string\">/api/transactions:</span>\n <span class=\"hljs-attr\">x-vertx-event-bus:</span>\n   <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">transaction_service.my_application</span>\n   <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">1000</span>\n <span class=\"hljs-attr\">get:</span>\n   <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">getTransactionsList</span>\n   <span class=\"hljs-attr\">parameters:</span> <span class=\"hljs-string\">...</span>\n   <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n <span class=\"hljs-attr\">post:</span>\n   <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">postTransaction</span>\n   <span class=\"hljs-attr\">parameters:</span> <span class=\"hljs-string\">...</span>\n   <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n   <span class=\"hljs-attr\">x-vertx-event-bus:</span>\n     <span class=\"hljs-attr\">method:</span> <span class=\"hljs-string\">postTransactionToDb</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this example:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>getTransactionList</code> operation is mapped to service at address <code>transaction_service.my_application</code> and method <code>getTransactionList</code></p>\n</li>\n<li>\n<p><code>postTransaction</code> operation is mapped to service at address <code>transaction_service.my_application</code> and method <code>postTransactionToDb</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Then you can call <code><a href=\"../../apidocs/io/vertx/ext/web/api/contract/openapi3/OpenAPI3RouterFactory.html#mountServicesFromExtensions--\">mountServicesFromExtensions</a></code> that scans entire spec and mounts the handlers that route to your service the requests</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_run_the_service\"><a class=\"anchor\" href=\"#_run_the_service\"></a>Run the service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now you can register your service to event bus:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">TransactionService service = <span class=\"hljs-keyword\">new</span> TransactionServiceImpl();\n<span class=\"hljs-keyword\">final</span> ServiceBinder serviceBinder = <span class=\"hljs-keyword\">new</span> ServiceBinder(vertx).setAddress(<span class=\"hljs-string\">\"address\"</span>);\nMessageConsumer&lt;JsonObject&gt; serviceConsumer = serviceBinder.register(TransactionService<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">service</span>)</span>;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For more info look at <a href=\"https://vertx.io/docs/vertx-service-proxy/java/#_exposing_your_service\">Vert.x service proxy documentation</a></p>\n</div>\n</div>\n</div>","version":"3.9.0"},"__N_SSG":true}