{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"OpenAPI (fka Swagger) 3 support in Eclipse Vert.x now in test stage!","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"As GSoC 2017's student, I'm working on an embedded support to OpenAPI 3 standard inside Eclipse Vert.x framework. Now, after a lot of work, you can try it!"},"date":"2017-07-04","slug":"openapi-fka-swagger-3-support-in-eclipse-vert-x-now-in-test-stage","readingTime":{"text":"6 min read","minutes":5.8,"time":348000,"words":1160},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Alert, {\n    info: true,\n    title: \"Now on upstream!\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"We have pub\\xADlished this pack\\xADage with name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-web-api-contract\"))), mdx(\"p\", null, \"As GSoC 2017\\u2019s stu\\xADdent, I\\u2019m ac\\xADtu\\xADally work\\xADing on an em\\xADbed\\xADded sup\\xADport to Ope\\xADnAPI 3 stan\\xADdard in\\xADside Eclipse Vert.x frame\\xADwork. Now, after a lot of work, you can try it!\"), mdx(\"h2\", {\n    \"id\": \"why-openapi-3\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#why-openapi-3\"\n  })), \"Why OpenAPI 3?\"), mdx(\"p\", null, \"Ope\\xADnAPI 2 is the most im\\xADpor\\xADtant industry-\\u200Bgrade stan\\xADdard for API Spec\\xADi\\xADfi\\xADca\\xADtions. As you can see on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.openapis.org/blog/2017/05/25/the-open-api-initiative-is-sending-you-a-save-the-date-card?utm_source=Blog&utm_medium=Twitter&utm_campaign=SaveTheDate\"\n  }), \"of\\xADfi\\xADcial blog of Ope\\xADnAPI Ini\\xADtia\\xADtive\"), \", the re\\xADlease of ver\\xADsion 3 is be\\xADhind the cor\\xADner, so we want to give to our com\\xADmu\\xADnity the lat\\xADest tools for the lat\\xADest stan\\xADdards!\"), mdx(\"p\", null, \"Vert.x project ob\\xADjec\\xADtive is to give you more in\\xADte\\xADgrated tools. With this new sup\\xADport, it gives you the abil\\xADity to use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swaggerhub.com/blog/api-design/design-first-or-code-first-api-development/\"\n  }), \"De\\xADsign Dri\\xADven\"), \" (or De\\xADsign First) ap\\xADproach \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"with\\xADout load\\xADing any thirds par\\xADties li\\xADbraries\"), \".\"), mdx(\"h2\", {\n    \"id\": \"features\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#features\"\n  })), \"Features\"), mdx(\"p\", null, \"The ac\\xADtu\\xADally sup\\xADported fea\\xADtures are the fol\\xADlow\\xADing (we reefer to Ope\\xADnAPI ver\\xADsion 3.0.0):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ope\\xADnAPI 3 com\\xADpli\\xADant API spec\\xADi\\xADfi\\xADca\\xADtion val\\xADi\\xADda\\xADtion with \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"load\\xADing of ex\\xADter\\xADnal Json schemas\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Au\\xADto\\xADmatic re\\xADquest val\\xADi\\xADda\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Au\\xADto\\xADmatic mount of se\\xADcu\\xADrity val\\xADi\\xADda\\xADtion han\\xADdlers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Au\\xADto\\xADmatic 501 re\\xADsponse for not im\\xADple\\xADmented op\\xADer\\xADa\\xADtions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Router fac\\xADtory to pro\\xADvide all this fea\\xADtures to users\")), mdx(\"p\", null, \"Au\\xADto\\xADmatic re\\xADquest val\\xADi\\xADda\\xADtion is pro\\xADvided by a new han\\xADdler: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationHandler\"), \". You can also de\\xADfine your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationHandler\"), \" with\\xADout API spec\\xADi\\xADfi\\xADca\\xADtions, but I will dis\\xADcuss it later.\"), mdx(\"p\", null, \"The re\\xADquest val\\xADi\\xADda\\xADtion (pro\\xADvided by sub\\xADclass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenAPI3RequestValidationHandler\"), \") ac\\xADtu\\xADally sup\\xADports:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pa\\xADra\\xADme\\xADters de\\xADfined in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#parameter-object\"\n  }), \"Pa\\xADra\\xADme\\xADter ob\\xADject\"), \". We sup\\xADport every type of pa\\xADra\\xADme\\xADter, in\\xADclud\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"object\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"array\"), \". We also sup\\xADport every type de\\xADscrip\\xADtion field (for ex\\xADam\\xADple \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"format\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"minimum\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"maximum\"), \", etc). Also, at the mo\\xADment, we sup\\xADport every com\\xADbi\\xADna\\xADtion of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"style\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"explode\"), \" field (ex\\xADcluded styles \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"matrix\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Body de\\xADfined in new \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#request-body-object\"\n  }), \"Re\\xADquest\\xADBody ob\\xADject\"), \". In par\\xADtic\\xADu\\xADlar:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"application/json\"), \" the val\\xADi\\xADda\\xADtion han\\xADdler will take schema that you have de\\xADfined in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"schema\"), \" ob\\xADject and will val\\xADi\\xADdate json bod\\xADies with it\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"application/x-www-form-urlencoded\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"multipart/form-data\"), \" the val\\xADi\\xADda\\xADtion han\\xADdler will take care of val\\xADi\\xADdate every pa\\xADra\\xADme\\xADters in form at\\xADtrib\\xADutes. It ac\\xADtu\\xADally sup\\xADports only comma sep\\xADa\\xADrated val\\xADues for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"object\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"arrays\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For other pa\\xADra\\xADme\\xADter types it will check \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Content-Type\"), \" header\")))), mdx(\"p\", null, \"Re\\xADquest val\\xADi\\xADda\\xADtion er\\xADrors will be car\\xADried with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RoutingContext\"), \" en\\xADcap\\xADsu\\xADlated in an ob\\xADject called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationHandler\"), \", so you have to at\\xADtach fail\\xADure han\\xADdler to check if some\\xADthing went wrong dur\\xADing val\\xADi\\xADda\\xADtion. Also the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RoutingContext\"), \" carry a new ob\\xADject called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RequestParameters\"), \" that en\\xADcap\\xADsu\\xADlate all re\\xADquest pa\\xADra\\xADme\\xADters de\\xADse\\xADri\\xADal\\xADized and parsed.\"), mdx(\"p\", null, \"Router fac\\xADtory is in\\xADtended to give you a re\\xADally sim\\xADple user in\\xADter\\xADface to use Ope\\xADnAPI 3 sup\\xADport. Most im\\xADpor\\xADtant fea\\xADtures are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Async load\\xADing of spec\\xADi\\xADfi\\xADca\\xADtion and its schema de\\xADpen\\xADden\\xADcies\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Au\\xADto\\xADmatic con\\xADvert Ope\\xADnAPI style paths to Vert.x style paths\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lazy meth\\xADods: op\\xADer\\xADa\\xADtions (com\\xADbi\\xADna\\xADtion of paths and HTTP meth\\xADods) are mounted in de\\xADf\\xADi\\xADn\\xADi\\xADtion order in\\xADside spec\\xADi\\xADfi\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Au\\xADto\\xADmatic mount of se\\xADcu\\xADrity val\\xADi\\xADda\\xADtion han\\xADdlers\")), mdx(\"p\", null, \"Also, it\\u2019s planned to re\\xADlease a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"project skele\\xADton gen\\xADer\\xADa\\xADtor\"), \" based on API spec.\"), mdx(\"h2\", {\n    \"id\": \"startup-your-project\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#startup-your-project\"\n  })), \"Startup your project\"), mdx(\"p\", null, \"We are in a test\\xADing stage, so the vertx-\\u200Bweb of\\xADfi\\xADcial repo doesn\\u2019t con\\xADtain it. To in\\xADclude the mod\\xADi\\xADfied ver\\xADsion of vertx-\\u200Bweb re\\xADplace your vertx-\\u200Bweb maven de\\xADpen\\xADdency with this one:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-web-api-contract\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.6.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"Now you can start using Ope\\xADnAPI 3 in\\xADside your Vert.x pow\\xADered app!\"), mdx(\"p\", null, \"First of all you need to load the spec\\xADi\\xADfi\\xADca\\xADtion and con\\xADstruct the router fac\\xADtory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Load the api spec. This operation is asynchronous\"), \"\\nOpenAPI3RouterFactory.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".vertx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"src/main/resources/petstore.yaml\\\"\"), \", ar -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Spec loaded with success\"), \"\\n        OpenAPI3RouterFactory routerFactory = ar.result();\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Something went wrong during router factory initialization\"), \"\\n        Throwable exception = ar.cause();\\n        logger.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Ops!\\\"\"), \", exception);\\n    }\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"handlers-mounting\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#handlers-mounting\"\n  })), \"Handlers mounting\"), mdx(\"p\", null, \"Now load han\\xADdlers to your op\\xADer\\xADa\\xADtions. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addHandlerByOperationId(String operationId, Handler<RoutingContext> handler)\"), \" to add an han\\xADdler to a route that matches the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"operationId\"), \". To add a fail\\xADure han\\xADdler use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addFailureHandlerByOperationId(String operationId, Handler<RoutingContext> failureHandler) \")), mdx(\"p\", null, \"You can, of course, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"add mul\\xADti\\xADple han\\xADdlers to same op\\xADer\\xADa\\xADtion\"), \", with\\xADout over\\xADwrit\\xADing the ex\\xADist\\xADing ones.\"), mdx(\"p\", null, \"This is an ex\\xADam\\xADple of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addHandlerByOperationId()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Add an handler with operationId\"), \"\\nrouterFactory.addHandlerByOperationId(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"listPets\\\"\"), \", routingContext -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Handle listPets operation (GET /pets)\"), \"\\n}, routingContext -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Handle failure\"), \"\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"request-parameters\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#request-parameters\"\n  })), \"Request parameters\"), mdx(\"p\", null, \"Now you can freely use re\\xADquest pa\\xADra\\xADme\\xADters. To get the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RequestParameters\"), \" ob\\xADject:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"RequestParameters params = routingContext.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"parsedParameters\\\"\"), \");\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RequestParameters\"), \" ob\\xADject pro\\xADvides all meth\\xADods to ac\\xADcess to query, cookie, header, path, form and en\\xADtire body pa\\xADra\\xADme\\xADters. Here are some ex\\xADam\\xADples of how to use this ob\\xADject.\"), mdx(\"p\", null, \"Pa\\xADra\\xADme\\xADter with name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awesomeParameter\"), \" with type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"integer\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"RequestParameter awesomeParameter = params.queryParameter(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"awesomeParameter\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (awesomeParameter != \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// awesomeParameter parameter exists, but we are not sure that is empty or not (query parameters can be empty with allowEmptyValue: true)\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!awesomeParameter.isEmpty()) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Now we are sure that it exists and it's not empty, so we can extract it\"), \"\\n      Integer awesome = awesomeParameter.getInteger();\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Parameter exists, but it's empty value\"), \"\\n    }\\n} \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Parameter doesn't exist (it's not required)\"), \"\\n}\\n\")), mdx(\"p\", null, \"As you can see, every pa\\xADra\\xADme\\xADter is mapped in re\\xADspec\\xADtive ob\\xADjects (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"integer\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Integer\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"integer\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"format: int64\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Long\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"float\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Float\"), \" and so on)\"), mdx(\"p\", null, \"Comma sep\\xADa\\xADrated array with name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awesomeParameters\"), \" with type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"integer\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"RequestParameter awesomeParameters = params.queryParameter(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"awesomeParameters\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (awesomeParameters != \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \" && !awesomeParameters.isEmpty()) {\\n    List<RequestParameter> awesomeList = awesomeParameters.getArray();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" (RequestParameter awesome : awesomeList) {\\n      Integer a = awesome.getInteger();\\n    }\\n} \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// awesomeParameters not found or empty string\"), \"\\n}\\n\")), mdx(\"p\", null, \"JSON Body:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"RequestParameter body = params.body();\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (body != \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \")\\n  JsonObject jsonBody = body.getJsonObject();\\n\")), mdx(\"h2\", {\n    \"id\": \"security-handling\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#security-handling\"\n  })), \"Security handling\"), mdx(\"p\", null, \"You can mount only one se\\xADcu\\xADrity han\\xADdler for a com\\xADbi\\xADna\\xADtion of schema and scope.\"), mdx(\"p\", null, \"To add a se\\xADcu\\xADrity han\\xADdler only with a schema name:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"routerFactory.addSecurityHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"security_scheme_name\\\"\"), \", routingContext -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Handle security here and then call next()\"), \"\\n    routingContext.next();\\n});\\n\")), mdx(\"p\", null, \"To add a se\\xADcu\\xADrity han\\xADdler with a com\\xADbi\\xADna\\xADtion of schema name and scope:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"routerFactory.addSecuritySchemaScopeValidator(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"security_scheme_name\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"scope_name\\\"\"), \", routingContext -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Handle security here and then call next()\"), \"\\n    routingContext.next();\\n});\\n\")), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"You can de\\xADfine se\\xADcu\\xADrity han\\xADdlers where you want but de\\xADfine it! | Dur\\xADing Router in\\xADstan\\xADti\\xADa\\xADtion, if fac\\xADtory finds a path that re\\xADquire a se\\xADcu\\xADrity schema with\\xADout an as\\xADsigned han\\xADdler, It will throw a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RouterFactoryException\"))), mdx(\"h2\", {\n    \"id\": \"error-handling\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#error-handling\"\n  })), \"Error handling\"), mdx(\"p\", null, \"Every time you add an han\\xADdler for an op\\xADer\\xADa\\xADtion you can add a fail\\xADure han\\xADdler. To han\\xADdle a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationException\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Throwable failure = routingContext.failure();\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (failure \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"instanceof\"), \" ValidationException)\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Handle Validation Exception\"), \"\\n    routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \").setStatusMessage(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"ValidationError\\\"\"), \").end(failure.getMessage());\\n\")), mdx(\"p\", null, \"Also the router fac\\xADtory pro\\xADvides two other tools:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It au\\xADto\\xADmat\\xADi\\xADcally mounts a 501 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Not Implemented\"), \" han\\xADdler for op\\xADer\\xADa\\xADtions where you haven\\u2019t mounted any han\\xADdler\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It can load a de\\xADfault \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ValidationException\"), \" fail\\xADure han\\xADdler\")), mdx(\"p\", null, \"Both these op\\xADtions are con\\xADfig\\xADurable with \", mdx(Link, {\n    href: \"/docs/apidocs/io/vertx/ext/web/api/contract/RouterFactoryOptions.html\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"RouterFactoryOptions\")))), mdx(\"h2\", {\n    \"id\": \"and-now-use-it\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#and-now-use-it\"\n  })), \"And now use it!\"), mdx(\"p\", null, \"Now you are ready to gen\\xADer\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \"!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Router router = routerFactory.getRouter();\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Now you can use your Router instance\"), \"\\nHttpServer server = vertx.createHttpServer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" HttpServerOptions().setPort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \").setHost(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \"));\\nserver.requestHandler(router::accept).listen();\\n\")), mdx(Alert, {\n    info: true,\n    title: \"Lazy methods!\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getRouter()\"), \" gen\\xADer\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \" ob\\xADject, so you don\\u2019t have to care about code de\\xADf\\xADi\\xADn\\xADi\\xADtion order\")), mdx(\"h2\", {\n    \"id\": \"and-now\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#and-now\"\n  })), \"And now?\"), mdx(\"p\", null, \"You can find a com\\xADplete ex\\xADam\\xADple on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/master/web-examples#http-request-validation-and-openapi-3-router-factory\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"vertx-examples\"))), mdx(\"p\", null, \"You can ac\\xADcess to \", mdx(Link, {\n    href: \"/docs/#web\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion here\")), \" and \", mdx(Link, {\n    href: \"/docs/apidocs/io/vertx/ext/web/api/contract/package-summary.html\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Javadoc here\"))), mdx(Alert, {\n    info: true,\n    title: \"We want you!\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Please give us your feed\\xADback open\\xADing an issue \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/slinkydeveloper/vertx-web/issues\"\n  }), \"here\"))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<div class=\"alert info\"><div class=\"alert-title\">Now on upstream!</div><p>We have pub­lished this pack­age with name <code>vertx-web-api-contract</code></p></div><p>As GSoC 2017’s stu­dent, I’m ac­tu­ally work­ing on an em­bed­ded sup­port to Ope­nAPI 3 stan­dard in­side Eclipse Vert.x frame­work. Now, after a lot of work, you can try it!</p><h2 id=\"why-openapi-3\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#why-openapi-3\"></a>Why OpenAPI 3?</h2><p>Ope­nAPI 2 is the most im­por­tant industry-​grade stan­dard for API Spec­i­fi­ca­tions. As you can see on <a href=\"https://www.openapis.org/blog/2017/05/25/the-open-api-initiative-is-sending-you-a-save-the-date-card?utm_source=Blog&amp;utm_medium=Twitter&amp;utm_campaign=SaveTheDate\">of­fi­cial blog of Ope­nAPI Ini­tia­tive</a>, the re­lease of ver­sion 3 is be­hind the cor­ner, so we want to give to our com­mu­nity the lat­est tools for the lat­est stan­dards!</p><p>Vert.x project ob­jec­tive is to give you more in­te­grated tools. With this new sup­port, it gives you the abil­ity to use the <a href=\"https://swaggerhub.com/blog/api-design/design-first-or-code-first-api-development/\">De­sign Dri­ven</a> (or De­sign First) ap­proach <strong>with­out load­ing any thirds par­ties li­braries</strong>.</p><h2 id=\"features\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#features\"></a>Features</h2><p>The ac­tu­ally sup­ported fea­tures are the fol­low­ing (we reefer to Ope­nAPI ver­sion 3.0.0):</p><ul><li>Ope­nAPI 3 com­pli­ant API spec­i­fi­ca­tion val­i­da­tion with <strong>load­ing of ex­ter­nal Json schemas</strong></li><li>Au­to­matic re­quest val­i­da­tion</li><li>Au­to­matic mount of se­cu­rity val­i­da­tion han­dlers</li><li>Au­to­matic 501 re­sponse for not im­ple­mented op­er­a­tions</li><li>Router fac­tory to pro­vide all this fea­tures to users</li></ul><p>Au­to­matic re­quest val­i­da­tion is pro­vided by a new han­dler: <code>ValidationHandler</code>. You can also de­fine your own <code>ValidationHandler</code> with­out API spec­i­fi­ca­tions, but I will dis­cuss it later.</p><p>The re­quest val­i­da­tion (pro­vided by sub­class <code>OpenAPI3RequestValidationHandler</code>) ac­tu­ally sup­ports:</p><ul><li>Pa­ra­me­ters de­fined in <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#parameter-object\">Pa­ra­me­ter ob­ject</a>. We sup­port every type of pa­ra­me­ter, in­clud­ing <code>object</code> and <code>array</code>. We also sup­port every type de­scrip­tion field (for ex­am­ple <code>format</code>, <code>minimum</code>, <code>maximum</code>, etc). Also, at the mo­ment, we sup­port every com­bi­na­tion of <code>style</code> and <code>explode</code> field (ex­cluded styles <code>matrix</code> and <code>label</code>)</li><li>Body de­fined in new <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#request-body-object\">Re­quest­Body ob­ject</a>. In par­tic­u­lar:<ul><li>For <code>application/json</code> the val­i­da­tion han­dler will take schema that you have de­fined in <code>schema</code> ob­ject and will val­i­date json bod­ies with it</li><li>For <code>application/x-www-form-urlencoded</code> and <code>multipart/form-data</code> the val­i­da­tion han­dler will take care of val­i­date every pa­ra­me­ters in form at­trib­utes. It ac­tu­ally sup­ports only comma sep­a­rated val­ues for <code>object</code> and <code>arrays</code></li><li>For other pa­ra­me­ter types it will check <code>Content-Type</code> header</li></ul></li></ul><p>Re­quest val­i­da­tion er­rors will be car­ried with <code>RoutingContext</code> en­cap­su­lated in an ob­ject called <code>ValidationHandler</code>, so you have to at­tach fail­ure han­dler to check if some­thing went wrong dur­ing val­i­da­tion. Also the <code>RoutingContext</code> carry a new ob­ject called <code>RequestParameters</code> that en­cap­su­late all re­quest pa­ra­me­ters de­se­ri­al­ized and parsed.</p><p>Router fac­tory is in­tended to give you a re­ally sim­ple user in­ter­face to use Ope­nAPI 3 sup­port. Most im­por­tant fea­tures are:</p><ul><li>Async load­ing of spec­i­fi­ca­tion and its schema de­pen­den­cies</li><li>Au­to­matic con­vert Ope­nAPI style paths to Vert.x style paths</li><li>Lazy meth­ods: op­er­a­tions (com­bi­na­tion of paths and HTTP meth­ods) are mounted in de­f­i­n­i­tion order in­side spec­i­fi­ca­tion</li><li>Au­to­matic mount of se­cu­rity val­i­da­tion han­dlers</li></ul><p>Also, it’s planned to re­lease a <strong>project skele­ton gen­er­a­tor</strong> based on API spec.</p><h2 id=\"startup-your-project\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#startup-your-project\"></a>Startup your project</h2><p>We are in a test­ing stage, so the vertx-​web of­fi­cial repo doesn’t con­tain it. To in­clude the mod­i­fied ver­sion of vertx-​web re­place your vertx-​web maven de­pen­dency with this one:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web-api-contract<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.6.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>Now you can start using Ope­nAPI 3 in­side your Vert.x pow­ered app!</p><p>First of all you need to load the spec­i­fi­ca­tion and con­struct the router fac­tory:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Load the api spec. This operation is asynchronous</span>\nOpenAPI3RouterFactory.create(<span class=\"hljs-keyword\">this</span>.vertx, <span class=\"hljs-string\">&quot;src/main/resources/petstore.yaml&quot;</span>, ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n        <span class=\"hljs-comment\">// Spec loaded with success</span>\n        OpenAPI3RouterFactory routerFactory = ar.result();\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Something went wrong during router factory initialization</span>\n        Throwable exception = ar.cause();\n        logger.error(<span class=\"hljs-string\">&quot;Ops!&quot;</span>, exception);\n    }\n});\n</code></pre><h2 id=\"handlers-mounting\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#handlers-mounting\"></a>Handlers mounting</h2><p>Now load han­dlers to your op­er­a­tions. Use <code>addHandlerByOperationId(String operationId, Handler&lt;RoutingContext&gt; handler)</code> to add an han­dler to a route that matches the <code>operationId</code>. To add a fail­ure han­dler use <code>addFailureHandlerByOperationId(String operationId, Handler&lt;RoutingContext&gt; failureHandler) </code></p><p>You can, of course, <strong>add mul­ti­ple han­dlers to same op­er­a­tion</strong>, with­out over­writ­ing the ex­ist­ing ones.</p><p>This is an ex­am­ple of <code>addHandlerByOperationId()</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Add an handler with operationId</span>\nrouterFactory.addHandlerByOperationId(<span class=\"hljs-string\">&quot;listPets&quot;</span>, routingContext -&gt; {\n    <span class=\"hljs-comment\">// Handle listPets operation (GET /pets)</span>\n}, routingContext -&gt; {\n    <span class=\"hljs-comment\">// Handle failure</span>\n});\n</code></pre><h2 id=\"request-parameters\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#request-parameters\"></a>Request parameters</h2><p>Now you can freely use re­quest pa­ra­me­ters. To get the <code>RequestParameters</code> ob­ject:</p><pre><code class=\"hljs language-java\">RequestParameters params = routingContext.get(<span class=\"hljs-string\">&quot;parsedParameters&quot;</span>);\n</code></pre><p>The <code>RequestParameters</code> ob­ject pro­vides all meth­ods to ac­cess to query, cookie, header, path, form and en­tire body pa­ra­me­ters. Here are some ex­am­ples of how to use this ob­ject.</p><p>Pa­ra­me­ter with name <code>awesomeParameter</code> with type <code>integer</code> in <code>query</code>:</p><pre><code class=\"hljs language-java\">RequestParameter awesomeParameter = params.queryParameter(<span class=\"hljs-string\">&quot;awesomeParameter&quot;</span>);\n<span class=\"hljs-keyword\">if</span> (awesomeParameter != <span class=\"hljs-keyword\">null</span>) {\n    <span class=\"hljs-comment\">// awesomeParameter parameter exists, but we are not sure that is empty or not (query parameters can be empty with allowEmptyValue: true)</span>\n    <span class=\"hljs-keyword\">if</span> (!awesomeParameter.isEmpty()) {\n      <span class=\"hljs-comment\">// Now we are sure that it exists and it&#x27;s not empty, so we can extract it</span>\n      Integer awesome = awesomeParameter.getInteger();\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// Parameter exists, but it&#x27;s empty value</span>\n    }\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Parameter doesn&#x27;t exist (it&#x27;s not required)</span>\n}\n</code></pre><p>As you can see, every pa­ra­me­ter is mapped in re­spec­tive ob­jects (<code>integer</code> in <code>Integer</code>, <code>integer</code> with <code>format: int64</code> in <code>Long</code>, <code>float</code> in <code>Float</code> and so on)</p><p>Comma sep­a­rated array with name <code>awesomeParameters</code> with type <code>integer</code> in <code>query</code>:</p><pre><code class=\"hljs language-java\">RequestParameter awesomeParameters = params.queryParameter(<span class=\"hljs-string\">&quot;awesomeParameters&quot;</span>);\n<span class=\"hljs-keyword\">if</span> (awesomeParameters != <span class=\"hljs-keyword\">null</span> &amp;&amp; !awesomeParameters.isEmpty()) {\n    List&lt;RequestParameter&gt; awesomeList = awesomeParameters.getArray();\n    <span class=\"hljs-keyword\">for</span> (RequestParameter awesome : awesomeList) {\n      Integer a = awesome.getInteger();\n    }\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// awesomeParameters not found or empty string</span>\n}\n</code></pre><p>JSON Body:</p><pre><code class=\"hljs language-java\">RequestParameter body = params.body();\n<span class=\"hljs-keyword\">if</span> (body != <span class=\"hljs-keyword\">null</span>)\n  JsonObject jsonBody = body.getJsonObject();\n</code></pre><h2 id=\"security-handling\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#security-handling\"></a>Security handling</h2><p>You can mount only one se­cu­rity han­dler for a com­bi­na­tion of schema and scope.</p><p>To add a se­cu­rity han­dler only with a schema name:</p><pre><code class=\"hljs language-java\">routerFactory.addSecurityHandler(<span class=\"hljs-string\">&quot;security_scheme_name&quot;</span>, routingContext -&gt; {\n    <span class=\"hljs-comment\">// Handle security here and then call next()</span>\n    routingContext.next();\n});\n</code></pre><p>To add a se­cu­rity han­dler with a com­bi­na­tion of schema name and scope:</p><pre><code class=\"hljs language-java\">routerFactory.addSecuritySchemaScopeValidator(<span class=\"hljs-string\">&quot;security_scheme_name&quot;</span>, <span class=\"hljs-string\">&quot;scope_name&quot;</span>, routingContext -&gt; {\n    <span class=\"hljs-comment\">// Handle security here and then call next()</span>\n    routingContext.next();\n});\n</code></pre><div class=\"alert info\"><p>You can de­fine se­cu­rity han­dlers where you want but de­fine it! | Dur­ing Router in­stan­ti­a­tion, if fac­tory finds a path that re­quire a se­cu­rity schema with­out an as­signed han­dler, It will throw a <code>RouterFactoryException</code></p></div><h2 id=\"error-handling\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#error-handling\"></a>Error handling</h2><p>Every time you add an han­dler for an op­er­a­tion you can add a fail­ure han­dler. To han­dle a <code>ValidationException</code>:</p><pre><code class=\"hljs language-java\">Throwable failure = routingContext.failure();\n<span class=\"hljs-keyword\">if</span> (failure <span class=\"hljs-keyword\">instanceof</span> ValidationException)\n    <span class=\"hljs-comment\">// Handle Validation Exception</span>\n    routingContext.response().setStatusCode(<span class=\"hljs-number\">400</span>).setStatusMessage(<span class=\"hljs-string\">&quot;ValidationError&quot;</span>).end(failure.getMessage());\n</code></pre><p>Also the router fac­tory pro­vides two other tools:</p><ul><li>It au­to­mat­i­cally mounts a 501 <code>Not Implemented</code> han­dler for op­er­a­tions where you haven’t mounted any han­dler</li><li>It can load a de­fault <code>ValidationException</code> fail­ure han­dler</li></ul><p>Both these op­tions are con­fig­urable with <a href=\"/docs/apidocs/io/vertx/ext/web/api/contract/RouterFactoryOptions.html\"><code>RouterFactoryOptions</code></a></p><h2 id=\"and-now-use-it\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#and-now-use-it\"></a>And now use it!</h2><p>Now you are ready to gen­er­ate the <code>Router</code>!</p><pre><code class=\"hljs language-java\">Router router = routerFactory.getRouter();\n\n<span class=\"hljs-comment\">// Now you can use your Router instance</span>\nHttpServer server = vertx.createHttpServer(<span class=\"hljs-keyword\">new</span> HttpServerOptions().setPort(<span class=\"hljs-number\">8080</span>).setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>));\nserver.requestHandler(router::accept).listen();\n</code></pre><div class=\"alert info\"><div class=\"alert-title\">Lazy methods!</div><p><code>getRouter()</code> gen­er­ate the <code>Router</code> ob­ject, so you don’t have to care about code de­f­i­n­i­tion order</p></div><h2 id=\"and-now\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#and-now\"></a>And now?</h2><p>You can find a com­plete ex­am­ple on <a href=\"https://github.com/vert-x3/vertx-examples/tree/master/web-examples#http-request-validation-and-openapi-3-router-factory\"><code>vertx-examples</code></a></p><p>You can ac­cess to <a href=\"/docs/#web\">doc­u­men­ta­tion here</a> and <a href=\"/docs/apidocs/io/vertx/ext/web/api/contract/package-summary.html\">Javadoc here</a></p><div class=\"alert info\"><div class=\"alert-title\">We want you!</div><p>Please give us your feed­back open­ing an issue <a href=\"https://github.com/slinkydeveloper/vertx-web/issues\">here</a></p></div>","scope":{}}},"prevPost":{"meta":{"title":"Vert.x 3.5.0.Beta1","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"It's summer time and we have just released Vert.x 3.5.0.Beta1!"},"date":"2017-08-10","slug":"vert-x-3-5-0-beta1"},"nextPost":{"meta":{"title":"Preview of a guide for Java developers","category":"news","authors":[{"name":"Julien Ponge","github_id":"jponge"}],"summary":"We are introducing the book “A gentle guide to asynchronous programming with Eclipse Vert.x for enterprise application developers”."},"date":"2017-06-09","slug":"preview-of-a-guide-for-java-developers"},"relatedPosts":[{"meta":{"title":"Vert.x Web API Service Introduction","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"This blog post teaches you how to use the new module vertx-web-api-service to combine the Web Router and the OpenAPI Router Factory with service proxies."},"date":"2018-12-13","slug":"vert-x-web-api-service-introduction"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Eclipse Vert.x 4 milestone 5 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We are extremely pleased to announce the fifth 4.0 milestone release of Eclipse Vert.x. This release aims to provide a reliable distribution of the current development of Vert.x 4."},"date":"2020-06-10","slug":"eclipse-vert-x-4-milestone-5-released"}]},"__N_SSG":true}