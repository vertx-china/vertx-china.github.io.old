{"pageProps":{"slug":"3.8.5/vertx-docker","title":"Vert.x Docker Images","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introduction\">Introduction</a></li>\n<li><a href=\"#_the_base_image\">The base image</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_deploying_a_javascript_verticle_in_a_docker_container\">Deploying a JavaScript verticle in a docker container</a></li>\n<li><a href=\"#_deploying_a_groovy_verticle_in_a_docker_container\">Deploying a Groovy verticle in a docker container</a></li>\n<li><a href=\"#_deploying_a_ruby_verticle_in_a_docker_container\">Deploying a Ruby verticle in a docker container</a></li>\n<li><a href=\"#_deploying_a_java_verticle_in_a_docker_container\">Deploying a Java verticle in a docker container</a></li>\n<li><a href=\"#_configuration\">Configuration</a></li>\n<li><a href=\"#_build_docker_images_with_maven\">Build Docker Images with Maven</a></li>\n<li><a href=\"#_build_docker_images_for_fabric_8\">Build Docker Images for Fabric 8</a></li>\n</ul>\n</li>\n<li><a href=\"#_the_executable_image\">The executable image</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_customizing_the_stack\">Customizing the stack</a></li>\n</ul>\n</li>\n<li><a href=\"#_deploying_a_fat_jar\">Deploying a fat jar</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Docker Images</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Execute Vert.x applications in Docker containers.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introduction\"><a class=\"anchor\" href=\"#_introduction\"></a>Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://www.docker.com/\">Docker</a> lets you deploy applications inside lightweight and isolated software containers.\nApplications run side by side in isolated Linux containers. If you never used Docker before check this online <a href=\"https://docs.docker.com/get-started/\">tutorial</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x provides Docker images that you can use to run your applications. Two Docker images are provided:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>vertx/vertx3</code> is the base image you need to extend to run your own application</p>\n</li>\n<li>\n<p><code>vertx/vertx3-exec</code> is providing the <code>vertx</code> command to your system without having to install <code>vert.x</code> yourself.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The images are available from <a href=\"https://hub.docker.com/u/vertx/\">Docker Hub</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This guide presents how to use these two images but also how to automate Docker image creation using Maven, generate\nFabric8 metadata and use <em>fat jars</em>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_the_base_image\"><a class=\"anchor\" href=\"#_the_base_image\"></a>The base image</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The base image (<code>vertx/vertx3</code>) lets you run your vert.x application in a Docker container. For this, you must\n<em>extend</em> the image to deploy your own application - <em>i.e.</em> create your own <code>Dockerfile</code> inheriting from\n<code>vertx/vertx3</code>. Your application is then  launched using the <code>vertx</code> command (but in the container).</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_deploying_a_javascript_verticle_in_a_docker_container\"><a class=\"anchor\" href=\"#_deploying_a_javascript_verticle_in_a_docker_container\"></a>Deploying a JavaScript verticle in a docker container</h3>\n<div class=\"paragraph\">\n<p>Let&#8217;s start with a simple JavaScript verticle such as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">hello-verticle.js</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">vertx.createHttpServer().requestHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">request</span>) </span>{\n    request.response().end(<span class=\"hljs-string\">\"Hello world\"</span>);\n}).listen(<span class=\"hljs-number\">8080</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Create in the same directory a <code>Dockerfile</code> with the following content:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code># Extend vert.x image                       <b class=\"conum\">(1)</b>\nFROM vertx/vertx3\n\n# Set the name of the verticle to deploy    <b class=\"conum\">(2)</b>\nENV VERTICLE_NAME hello-verticle.js\n\n# Set the location of the verticles         <b class=\"conum\">(3)</b>\nENV VERTICLE_HOME /usr/verticles\n\nEXPOSE 8080\n\n# Copy your verticle to the container       <b class=\"conum\">(4)</b>\nCOPY $VERTICLE_NAME $VERTICLE_HOME/\n\n# Launch the verticle                       <b class=\"conum\">(5)</b>\nWORKDIR $VERTICLE_HOME\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"exec vertx run $VERTICLE_NAME -cp $VERTICLE_HOME/*\"]</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>First extend the image provided by vert.x</p>\n</li>\n<li>\n<p>Set the name of the verticle</p>\n</li>\n<li>\n<p>It sets the location in the container where the verticle file is placed</p>\n</li>\n<li>\n<p>Copy the verticle files</p>\n</li>\n<li>\n<p>Instructions to launch the verticle</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Then do build the image, just launch:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">docker build -t sample/vertx-javascript .</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then, run it with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">docker run -t -i -p 8080:8080 sample/vertx-javascript</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To see the result, open a browser to <a href=\"http://localhost:8080\" class=\"bare\">http://localhost:8080</a> or <a href=\"http://192.168.59.103:8080\" class=\"bare\">http://192.168.59.103:8080</a> if your are using boot2docker.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nThe container is launched with the '-t -i` flags meaning <em>interactive</em>. Stop the container by hitting <code>CTRL+C</code>\n. More details about the Docker <code>run</code> command are available <a href=\"http://docs.docker.com/reference/run/\">here</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>You may have noticed the <code>EXPOSE 8080</code> in the <code>Dockerfile</code> and the <code>-p 8080:8080</code> in the <code>run</code> command. The first one\nis an optional information telling that the application wants to listen the port 8080. The second one is\n<strong>mandatory</strong> and instructs docker to forward the port 8080 from the host to the 8080 of the container.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nYou may also have noticed the convoluted way to launch the application. Instead of calling <code>vertx</code> directly, it\n uses <code>sh -c</code> along with <code>exec</code>. <code>sh -c</code> is to turn around a Docker limitation not expanding variables in <code>CMD</code>.\n This way the launched shell does. More details on the Docker <a href=\"http://docs.docker.com/reference/builder/#cmd\">builder documentation</a>.\n <code>exec</code> is to make the <code>vertx</code> command process replace the shell, so that it gets pid 1 and receives signals,\n like <code>SIGTERM</code> when running <code>docker stop</code>. Without <code>exec</code> the shell keeps running along with the <code>vertx</code> command process,\n and the <code>vertx</code> command does not get signals, thus preventing graceful shutdown.\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_deploying_a_groovy_verticle_in_a_docker_container\"><a class=\"anchor\" href=\"#_deploying_a_groovy_verticle_in_a_docker_container\"></a>Deploying a Groovy verticle in a docker container</h3>\n<div class=\"paragraph\">\n<p>Running a groovy verticle in a docker container is not much different. Instead of the <code>hello-verticle.js</code> from the\nprevious example, we now have a <code>hello-verticle.groovy</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">hello-verticle.groovy</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">vertx.createHttpServer().requestHandler({ request -&gt;\n    request.response().end(<span class=\"hljs-string\">\"Groovy world\"</span>)\n}).listen(<span class=\"hljs-number\">8080</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>So, in the <code>Dockerfile</code> we just change the verticle file name:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code># Extend vert.x image\nFROM vertx/vertx3\n\n# Set the name of the verticle to deploy\nENV VERTICLE_NAME hello-verticle.groovy\n\n# Set the location of the verticles\nENV VERTICLE_HOME /usr/verticles\n\nEXPOSE 8080\n\n# Copy your verticle to the container\nCOPY $VERTICLE_NAME $VERTICLE_HOME/\n\n# Launch the verticle\nWORKDIR $VERTICLE_HOME\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"exec vertx run $VERTICLE_NAME -cp $VERTICLE_HOME/*\"]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The build and run instructions are very close to the previous ones:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>&gt; docker build -t sample/vertx-groovy .\n....\n&gt; docker run -t -i -p 8080:8080 sample/vertx-groovy</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_deploying_a_ruby_verticle_in_a_docker_container\"><a class=\"anchor\" href=\"#_deploying_a_ruby_verticle_in_a_docker_container\"></a>Deploying a Ruby verticle in a docker container</h3>\n<div class=\"paragraph\">\n<p>Running a groovy verticle in a docker container is not much different. Instead of the <code>hello-verticle.js/groovy</code> from\n the previous examples, we now have a <code>hello-verticle.rb</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">hello-verticle.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">$vertx.create_http_server().request_handler() { <span class=\"hljs-params\">|request|</span>\n    request.response().<span class=\"hljs-keyword\">end</span>(<span class=\"hljs-string\">\"A ruby world full of gems\"</span>)\n}.listen(<span class=\"hljs-number\">8080</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>So, in the <code>Dockerfile</code> we just change the verticle file name:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code># Extend vert.x image\nFROM vertx/vertx3\n\n# Set the name of the verticle to deploy\nENV VERTICLE_NAME hello-verticle.rb\n\n# Set the location of the verticles\nENV VERTICLE_HOME /usr/verticles\n\nEXPOSE 8080\n\n# Copy your verticle to the container\nCOPY $VERTICLE_NAME $VERTICLE_HOME/\n\n# Launch the verticle\nWORKDIR $VERTICLE_HOME\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"exec vertx run $VERTICLE_NAME -cp $VERTICLE_HOME/*\"]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The build and run instructions are very close to the previous ones:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>&gt; docker build -t sample/vertx-ruby .\n....\n&gt; docker run -t -i -p 8080:8080 sample/vertx-ruby</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_deploying_a_java_verticle_in_a_docker_container\"><a class=\"anchor\" href=\"#_deploying_a_java_verticle_in_a_docker_container\"></a>Deploying a Java verticle in a docker container</h3>\n<div class=\"paragraph\">\n<p>So, now let&#8217;s see how to deploy a Java verticle. Again it&#8217;s not different from the previous examples, except that we\ncopy the verticle <em>jar</em> file to the container. Let&#8217;s take the following verticle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">io.vertx.sample.hello.HelloVerticle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">package</span> io.vertx.sample.hello;\n\n<span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    vertx.createHttpServer().requestHandler(request -&gt; {\n      request.response().end(<span class=\"hljs-string\">\"Hello Java world\"</span>);\n    }).listen(<span class=\"hljs-number\">8080</span>);\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s now imagine that this verticle is packaged into the <code>target/hello-verticle-1.0.-SNAPSHOT.jar</code> jar file. So the\n<code>Dockerfile</code> needs to copy this file but also gives to vert.x the verticle class name:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Dockerfile</div>\n<div class=\"content\">\n<pre># Extend vert.x image\nFROM vertx/vertx3\n\n#                                                       <b class=\"conum\">(1)</b>\nENV VERTICLE_NAME io.vertx.sample.hello.HelloVerticle\nENV VERTICLE_FILE target/hello-verticle-1.0-SNAPSHOT.jar\n\n# Set the location of the verticles\nENV VERTICLE_HOME /usr/verticles\n\nEXPOSE 8080\n\n# Copy your verticle to the container                   <b class=\"conum\">(2)</b>\nCOPY $VERTICLE_FILE $VERTICLE_HOME/\n\n# Launch the verticle\nWORKDIR $VERTICLE_HOME\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"exec vertx run $VERTICLE_NAME -cp $VERTICLE_HOME/*\"]</pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Unlike the previous examples, here we set the verticle class name and the jar file</p>\n</li>\n<li>\n<p>The jar file is copied.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Build and run instructions do not change:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>&gt; docker build -t sample/vertx-java .\n....\n&gt; docker run -t -i -p 8080:8080 sample/vertx-java</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuration\"><a class=\"anchor\" href=\"#_configuration\"></a>Configuration</h3>\n<div class=\"paragraph\">\n<p>The previous `Dockerfile`s did not configure vert.x. Let&#8217;s see how such configuration can be added.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_configuring_the_java_virtual_machine\"><a class=\"anchor\" href=\"#_configuring_the_java_virtual_machine\"></a>Configuring the Java Virtual Machine</h4>\n<div class=\"paragraph\">\n<p>You can configure the Java Virtual Machine using the <code>JAVA_OPTS</code> environment variable. So in the <code>Dockerfile</code> adds:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>ENV JAVA_OPTS \"-Dfoo=bar\"</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_vertx_opts\"><a class=\"anchor\" href=\"#_vertx_opts\"></a>VERTX_OPTS</h4>\n<div class=\"paragraph\">\n<p>System variables specific to vert.x can be configured using the <code>VERTX_OPTS</code> environment variable:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>ENV VERTX_OPTS \"-Dvertx.options.eventLoopPoolSize=26 -Dvertx.options.deployment.worker=true\"</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_classpath\"><a class=\"anchor\" href=\"#_classpath\"></a>Classpath</h4>\n<div class=\"paragraph\">\n<p>You can configure the classpath of the application using either the <code>-cp</code> parameter of the vert.x command or the\n<code>CLASSPATH</code> environment variable:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>ENV CLASSPATH \"/usr/verticles/libs/foo.jar:/usr/verticles/libs/bar.jar:\"</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_logging\"><a class=\"anchor\" href=\"#_logging\"></a>Logging</h4>\n<div class=\"paragraph\">\n<p>To configure the <code>logging.properties</code> file (that let you customize JUL loggers`), set the <code>VERTX_JUL_CONFIG</code>\nenvironment variables:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>COPY ./logging.properties $VERTICLE_HOME/                       <b class=\"conum\">(1)</b>\nENV VERTX_JUL_CONFIG $VERTICLE_HOME/logging.properties          <b class=\"conum\">(2)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Copy your <code>logging.properties</code> file</p>\n</li>\n<li>\n<p>Set the <code>VERTX_JUL_CONFIG</code> environment variable</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_clustering\"><a class=\"anchor\" href=\"#_clustering\"></a>Clustering</h4>\n<div class=\"paragraph\">\n<p>You can provide your own <code>cluster.xml</code> file, and add it to the classpath. To build a dynamic classpath from all the\nfile contained in <code>$VERTICLE_HOME</code> you can use:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>COPY ./cluster.xml $VERTICLE_HOME/\n# ...\nCMD [export CLASSPATH=`find $VERTICLE_HOME -printf '%p:' | sed 's/:$//'`; exec vertx run $VERTICLE_NAME\"]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Notice the <code>export CLASSPATH=&#8230;&#8203;;</code> part in the <code>CMD</code> instruction. It builds the value of the <code>CLASSPATH</code> variable from\nthe content of the <code>$VERTICLE_HOME</code> directory. This tricks is useful to compute large and dynamic classpath.</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_build_docker_images_with_maven\"><a class=\"anchor\" href=\"#_build_docker_images_with_maven\"></a>Build Docker Images with Maven</h3>\n<div class=\"paragraph\">\n<p>There are a couple of Maven plugins to build your Docker images during your Maven build process. This example uses the\n<a href=\"https://github.com/spotify/docker-maven-plugin\">docker-maven-plugin</a> from Spotify.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, create your Java project as usual. So your sources are located in <code>src/main/java</code>&#8230;&#8203; Then create a\n<code>src/main/docker</code> directory and create a <code>Dockerfile</code> inside:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>.\n├── pom.xml\n├── src\n│   └── main\n│       ├── docker\n│       │   └── Dockerfile\n│       └── java\n│           └── io\n│               └── vertx\n│                   └── example\n│                       └── HelloWorldVerticle.java\n├── target</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the <code>pom.xml</code> file add the following plugin configuration</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.spotify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.2.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>docker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>package<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>build<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerDirectory</span>&gt;</span>${project.basedir}/src/main/docker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerDirectory</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- Configure the image name --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">imageName</span>&gt;</span>sample/vertx-hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">imageName</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">targetPath</span>&gt;</span>/verticles<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">targetPath</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>${project.build.directory}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">includes</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>${project.artifactId}-${project.version}.jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">includes</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- don't forget to also add all the dependencies required by your application --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The plugin copies the listed content into <code>target/docker</code>. Each resource is copied into the set <code>targetPath</code>. So edit\n the <code>src/main/docker/Dockerfile</code> and add the following content:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>FROM vertx/vertx3\n\nENV VERTICLE_HOME /usr/verticles\nENV VERTICLE_NAME io.vertx.example.HelloWorldVerticle\n\nCOPY ./verticles $VERTICLE_HOME\n\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"exec vertx run $VERTICLE_NAME -cp $VERTICLE_HOME/*\"]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It&#8217;s basically the same content as we saw above. The copy is a bit different as the plugin have placed\nfiles in the same directory as the <code>Dockerfile</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once configured the image is built using: <code>mvn clean package</code></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_build_docker_images_for_fabric_8\"><a class=\"anchor\" href=\"#_build_docker_images_for_fabric_8\"></a>Build Docker Images for Fabric 8</h3>\n<div class=\"paragraph\">\n<p><a href=\"http://fabric8.io/\">Fabric 8</a> is an open source set of micro-services that run on top of Kubernetes and OpenShift V3 to\n provide management, continuous delivery and iPaas facilities. You can execute vert.x application on top of Fabric 8\n by packaging them into a Docker image. However, additional metadata is required. In this example, we are going to\n use the <a href=\"https://github.com/rhuss/docker-maven-plugin\">docker-maven-plugin</a> from Roland Huß.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s set up the following structure:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>.\n├── pom.xml\n├── src\n│   └── main\n│       ├── docker\n│       │   └── assembly.xml\n│       └── java\n│           └── io\n│               └── vertx\n│                   └── example\n│                       └── HelloWorldVerticle.java\n└── target</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Unlike the maven plugin from Spotify, this plugin takes an <code>assembly.xml</code> as input. The file lists all the files that\n need to be copied to the docker container such as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">assembly</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencySets</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencySet</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">includes</span>&gt;</span>\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>:${project.artifactId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">includes</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">outputDirectory</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">outputDirectory</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencySet</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencySets</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">assembly</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The rest of the <code>Dockerfile configuration is given in the `pom.xml</code> file. Add the following plugin to the <code>pom.xml</code>\n file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.jolokia<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.11.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>build<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>package<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>build<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">images</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>${docker.image}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">from</span>&gt;</span>vertx/vertx3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">from</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tags</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tag</span>&gt;</span>${project.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tag</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tags</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ports</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span>8080<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">port</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ports</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">command</span>&gt;</span>vertx run io.vertx.example.HelloWorldVerticle -cp\n            /usr/verticles/${project.artifactId}-${project.version}.jar\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">command</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">assembly</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mode</span>&gt;</span>dir<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mode</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">basedir</span>&gt;</span>/usr/verticles<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">basedir</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">descriptor</span>&gt;</span>assembly.xml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">descriptor</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">assembly</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">images</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To configure the container more finely, check the\n<a href=\"https://github.com/rhuss/docker-maven-plugin/blob/master/doc/manual.md\">manual</a>. All the <em>instructions</em> we put in the\n<code>Dockerfile</code> can be set from the plugin.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nThe previous <code>pom.xml</code> file use a properties called <code>docker.image</code> setting the image name. Don&#8217;t forget to set\nit in your pom.xml` file.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Once you have this configuration in place, we need a second plugin to generate the metadata required by Fabric8:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.fabric8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fabric8-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>json<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>generate-resources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>json<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>attach<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>package<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>attach<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once set up, you can build your docker image with: <code>mvn clean package</code>. It creates the <code>kubernates.json</code> file\nrequired by Fabric8. Then push your image on the Docker Registry provided by Fabric8:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sh\" data-lang=\"sh\">docker push <span class=\"hljs-variable\">$DOCKER_REGISTRY</span>/sample/vertx-hello</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Don&#8217;t forget to set the <code>DOCKER_REGISTRY</code> url to point on the registry managed by Fabric8. The last step is to\n<em>apply</em> it with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sh\" data-lang=\"sh\">mvn io.fabric8:fabric8-maven-plugin:2.1.4:apply</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_the_executable_image\"><a class=\"anchor\" href=\"#_the_executable_image\"></a>The executable image</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code>vertx/vertx3-exec</code> image provides the <code>vertx</code> command to the host. So no need to install vert.x on your machine,\n you can just use this docker image.</p>\n</div>\n<div class=\"paragraph\">\n<p>For instance:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\"><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> docker run -i -t vertx/vertx3-exec -version</span>\n3.6.2</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To run a verticle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">docker run -i -t -p 8080:8080 \\\n    -v $PWD:/verticles vertx/vertx3-exec \\\n    run io.vertx.sample.RandomGeneratorVerticle \\\n    -cp /verticles/MY_VERTICLE.jar</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This command mounts the current directory (<code>PWD</code>) into <code>/verticles</code> and then launch the <code>vertx run</code> command. Notice the\n<code>-cp</code> parameter reusing the <code>/verticles</code> directory.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_customizing_the_stack\"><a class=\"anchor\" href=\"#_customizing_the_stack\"></a>Customizing the stack</h3>\n<div class=\"paragraph\">\n<p>The <code>vertx/vertx3-exec</code> image provides the default \"full\" Vert.x stack. You may want to customize this stack and create\n your own exec image. First, create a <code>vertx-stack.json</code> file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n  <span class=\"hljs-attr\">\"variables\"</span>: {\n    <span class=\"hljs-attr\">\"vertx.version\"</span>: <span class=\"hljs-string\">\"3.3.3\"</span>\n  },\n  <span class=\"hljs-attr\">\"dependencies\"</span>: [\n    {\n      <span class=\"hljs-attr\">\"groupId\"</span>: <span class=\"hljs-string\">\"io.vertx\"</span>,\n      <span class=\"hljs-attr\">\"artifactId\"</span>: <span class=\"hljs-string\">\"vertx-web\"</span>,\n      <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"${vertx.version}\"</span>,\n      <span class=\"hljs-attr\">\"included\"</span>: <span class=\"hljs-literal\">true</span>\n    },\n    {\n      <span class=\"hljs-attr\">\"groupId\"</span>: <span class=\"hljs-string\">\"io.vertx\"</span>,\n      <span class=\"hljs-attr\">\"artifactId\"</span>: <span class=\"hljs-string\">\"vertx-lang-js\"</span>,\n      <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"${vertx.version}\"</span>,\n      <span class=\"hljs-attr\">\"included\"</span>: <span class=\"hljs-literal\">true</span>\n    }\n  ]\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can list any dependency you need, not just the Vert.x artifacts\n(refer to the <a href=\"http://vertx.io/docs/vertx-stack-manager/stack-manager/\">Stack Manager documentation</a> for details).</p>\n</div>\n<div class=\"paragraph\">\n<p>Then write a <code>Dockerfile</code> for your custom executable image:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>FROM vertx/vertx3-exec                                     <b class=\"conum\">(1)</b>\n\nCOPY vertx-stack.json ${VERTX_HOME}/vertx-stack.json       <b class=\"conum\">(2)</b>\n\nRUN vertx resolve &amp;&amp; rm -rf ${HOME}/.m2                    <b class=\"conum\">(3)</b></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Extend the Vert.x executable image</p>\n</li>\n<li>\n<p>Replace the stack file in the Vert.x command installation</p>\n</li>\n<li>\n<p>Resolve dependencies</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>You should know be able to build your custom executable image:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">docker build -t mycompany/my-vertx3-exec .</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And run your verticle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">docker run -i -t -p 8080:8080 \\\n    -v $PWD:/verticles mycompany/my-vertx3-exec \\\n    run io.vertx.sample.RandomGeneratorVerticle \\\n    -cp /verticles/MY_VERTICLE.jar</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_deploying_a_fat_jar\"><a class=\"anchor\" href=\"#_deploying_a_fat_jar\"></a>Deploying a fat jar</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>It is also possible to deploy a Vert.x application packaged as a <em>fat jar</em> into a docker container. For this you\ndon&#8217;t need the images provided by Vert.x, you can directly use a base <em>Java</em> image. Let&#8217;s have a look.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, be sure your application is packaged as a <em>fat jar</em>. Then, use the following <code>Dockerfile</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>FROM openjdk:8-jre-alpine                                           <b class=\"conum\">(1)</b>\n\nENV VERTICLE_FILE hello-verticle-fatjar-3.0.0-SNAPSHOT-fat.jar      <b class=\"conum\">(2)</b>\n\n# Set the location of the verticles\nENV VERTICLE_HOME /usr/verticles\n\nEXPOSE 8080\n\n# Copy your fat jar to the container\nCOPY target/$VERTICLE_FILE $VERTICLE_HOME/                          <b class=\"conum\">(3)</b>\n\n# Launch the verticle\nWORKDIR $VERTICLE_HOME\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"exec java -jar $VERTICLE_FILE\"]                               <b class=\"conum\">(4)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Extend the image providing OpenJDK 8, use the one you want</p>\n</li>\n<li>\n<p>Set the <code>VERTICLE_FILE</code> to point on the <em>fat jar</em></p>\n</li>\n<li>\n<p>Copy the <em>Fat jar</em> from <em>target</em>. Change it if you don&#8217;t use Maven.</p>\n</li>\n<li>\n<p>Launch the application using the <code>java</code> executable (instead of <code>vertx</code></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>It&#8217;s basically the same <code>Dockerfile</code> as before. However, this time we extend <code>java:8</code> instead of the <code>vertx/vertx3</code>\nimage. Then we copy the fat jar to the container, and launch it with the <code>java</code> executable. All the configuration\nsettings presented above are still valid.</p>\n</div>\n<div class=\"paragraph\">\n<p>Build and run the container with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>&gt; docker build -t sample/vertx-java-fat .\n....\n&gt; docker run -t -i -p 8080:8080 sample/vertx-java-fat</code></pre>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}