{"pageProps":{"slug":"3.9.6/vertx-maven-service-factory/java","title":"Maven verticle factory","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">Usage</a></li>\n<li><a href=\"#_declaring_the_verticle_factory_programmatically\">Declaring the Verticle Factory programmatically</a></li>\n<li><a href=\"#_configuring_repositories\">Configuring repositories</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_programmatically\">Programmatically</a></li>\n</ul>\n</li>\n<li><a href=\"#_remote_repository_access_through_authenticated_https\">Remote repository access through authenticated https</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_using_system_properties\">Using system properties</a></li>\n<li><a href=\"#_programmatically_2\">Programmatically</a></li>\n</ul>\n</li>\n<li><a href=\"#_remote_repository_access_through_proxies\">Remote repository access through proxies</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_using_system_properties_2\">Using system properties</a></li>\n<li><a href=\"#_programmatically_3\">Programmatically</a></li>\n</ul>\n</li>\n<li><a href=\"#_configuring_authentication\">Configuring authentication</a></li>\n<li><a href=\"#_configuring_remote_snapshot_refresh_policy\">Configuring Remote Snapshot Refresh Policy</a></li>\n<li><a href=\"#_customizing_the_resolver\">Customizing the resolver</a></li>\n</ul>\n</div>","contents":"<h1>Maven verticle factory</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Maven verticle factory is an implementation of verticle factory loading a service dynamically from a Maven\nrepository at run-time. It&#8217;s useful if you don&#8217;t want to package all your service dependencies at build-time into\nyour application, but would rather install and deploy them dynamically at run-time when they are requested.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x picks up <code>VerticleFactory</code> implementations from the classpath, so you just need to make sure the\nvertx-maven-service-factory jar file on the classpath. First you need to add the Maven verticle factory to your application&#8217;s\nclasspath. If you are using a fat jar, you can use the following dependencies:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-maven-service-factory<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-maven-service-factory:3.9.6'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This <code>VerticleFactory</code> uses the prefix <code>maven:</code> to select it when deploying services.\nThe service identifier is made up of the Maven co-ordinates of the artifact that contains the service, e.g.\n<code>com.mycompany:main-services:1.2</code> followed by a double colon <code>::</code> followed by the service name. The service name is\nused to find the service descriptor file inside the artifact which is named by the service name with a <code>.json</code>\nextension. This is explained in the the\n<a href=\"http://vertx.io/docs/vertx-service-factory/java\">vert.x service factory documentation</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, to deploy a service that exists in Maven artifact <code>com.mycompany:my-artifact:1.2</code> called <code>my-service</code> you\nwould use the string <code>maven:com.mycompany:main-services:1.2::my-service</code>. Given this string, the verticle factory</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>uses the Aether client try and locate the artifact <code>com.mycompany:my-artifact:1.2</code> and all its dependencies in\nthe configured Maven repositories and download and install it locally if it&#8217;s not already installed.</p>\n</li>\n<li>\n<p>constructs a classpath including all those artifacts and creates a classloader with that classpath</p>\n</li>\n<li>\n<p>service using the <a href=\"http://vertx.io/docs/vertx-service-factory/java\">vert.x service factory</a>.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Note that if the current Vert.x classpath contains already an artifact, then this dependency will not be\noverridden and will be effectively used. Vert.x does not attempt to make some class loading magic, conflicts\nshould be resolved by modifying the Vert.x classpath to not contain this dependency.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Service Verticle Factory will look for a descriptor file called <code>my-service.json</code> (in the previous example) on\nthe constructed classpath to actually load the service.</p>\n</div>\n<div class=\"paragraph\">\n<p>Given a service identifier the service can be deployed programmatically e.g.:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:com.mycompany:my-artifact:1.2::my-service\"</span>, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or can be deployed on the command line with:</p>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>vertx run maven:com.mycompany:my-artifact:1.2::my-service\n---</p>\n</div>\n<div class=\"paragraph\">\n<p>The service name (<code>my-service</code>) can be omitted when the <em>META-INF/MANIFEST</em> in the jar containing the\nservice contains a <code>Main-Verticle</code> entry that declares the verticle to run:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:com.mycompany:my-artifact:1.2\"</span>, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And the manifest contains:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>Main-Verticle: service:my-service</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_declaring_the_verticle_factory_programmatically\"><a class=\"anchor\" href=\"#_declaring_the_verticle_factory_programmatically\"></a>Declaring the Verticle Factory programmatically</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can also declare the verticle factory programmatically:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.registerVerticleFactory(<span class=\"hljs-keyword\">new</span> MavenVerticleFactory());</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_repositories\"><a class=\"anchor\" href=\"#_configuring_repositories\"></a>Configuring repositories</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Maven local repository location can be configured using the <code>vertx.maven.localRepo</code> system property - this should\npoint to the local repository directory on disc. The default value is: <code>{user.home}/.m2/repository</code></p>\n</div>\n<div class=\"paragraph\">\n<p>The list of remote repositories can be configured using the <code>vertx.maven.remoteRepos</code> system property - this should\ncontain a*space** separated list of urls to the remote repositories. The default value is\n<code><a href=\"https://repo.maven.apache.org/maven2/\" class=\"bare\">https://repo.maven.apache.org/maven2/</a> <a href=\"https://oss.sonatype.org/content/repositories/snapshots/\" class=\"bare\">https://oss.sonatype.org/content/repositories/snapshots/</a></code></p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_programmatically\"><a class=\"anchor\" href=\"#_programmatically\"></a>Programmatically</h3>\n<div class=\"paragraph\">\n<p>You can also configure the repositories programmatically by passing a <code><a href=\"../../apidocs/io/vertx/maven/ResolverOptions.html\">ResolverOptions</a></code>\nobject to the constructor of the <code><a href=\"../../apidocs/io/vertx/maven/MavenVerticleFactory.html\">MavenVerticleFactory</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.registerVerticleFactory(<span class=\"hljs-keyword\">new</span> MavenVerticleFactory(\n    <span class=\"hljs-keyword\">new</span> ResolverOptions()\n        .setLocalRepository(local)\n        .setRemoteRepositories(remotes))\n);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_remote_repository_access_through_authenticated_https\"><a class=\"anchor\" href=\"#_remote_repository_access_through_authenticated_https\"></a>Remote repository access through authenticated https</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can specify https URLs for remote repositories, the client will uses the JSSE system properties\nconfiguration. It can be achieved via JVM system properties, you can read more at\n<a href=\"http://maven.apache.org/guides/mini/guide-repository-ssl.html\" class=\"bare\">http://maven.apache.org/guides/mini/guide-repository-ssl.html</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_system_properties\"><a class=\"anchor\" href=\"#_using_system_properties\"></a>Using system properties</h3>\n<div class=\"paragraph\">\n<p>It can configured when running the JVM: for instance:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>java -jar my-fat-jar -Djavax.net.ssl.trustStore=/my_trust_store.jks -Djavax.net.ssl.trustStorePassword=somepassword</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_programmatically_2\"><a class=\"anchor\" href=\"#_programmatically_2\"></a>Programmatically</h3>\n<div class=\"paragraph\">\n<p>To configure the HTTPS property, use:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">System.setProperty(<span class=\"hljs-string\">\"javax.net.ssl.trustStore\"</span>, <span class=\"hljs-string\">\"/my_trust_store.jks\"</span>);\nSystem.setProperty(<span class=\"hljs-string\">\"javax.net.ssl.trustStorePassword\"</span>, <span class=\"hljs-string\">\"somepassword\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note that programmatic configuration must be done before using the underlying Aether client (so before\ninstantiating the <code><a href=\"../../apidocs/io/vertx/maven/MavenVerticleFactory.html\">MavenVerticleFactory</a></code>.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_remote_repository_access_through_proxies\"><a class=\"anchor\" href=\"#_remote_repository_access_through_proxies\"></a>Remote repository access through proxies</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_using_system_properties_2\"><a class=\"anchor\" href=\"#_using_system_properties_2\"></a>Using system properties</h3>\n<div class=\"paragraph\">\n<p>Repositories can be accessed using an http proxy using the <code>vertx.maven.httpProxy</code> and <code>vertx.maven.httpsProxy</code>.\nThe former configures a proxy for remote http repositories and the later configures a proxy for remote http repositories.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_programmatically_3\"><a class=\"anchor\" href=\"#_programmatically_3\"></a>Programmatically</h3>\n<div class=\"paragraph\">\n<p>You can also configure the repositories programmatically using the\n<code><a href=\"../../apidocs/io/vertx/maven/ResolverOptions.html#setHttpProxy-java.lang.String-\">setHttpProxy</a></code> and\n<code><a href=\"../../apidocs/io/vertx/maven/ResolverOptions.html#setHttpsProxy-java.lang.String-\">setHttpsProxy</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.registerVerticleFactory(<span class=\"hljs-keyword\">new</span> MavenVerticleFactory(\n    <span class=\"hljs-keyword\">new</span> ResolverOptions().setHttpProxy(proxy))\n);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_authentication\"><a class=\"anchor\" href=\"#_configuring_authentication\"></a>Configuring authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Basic authentication can be achieved by adding a username and/or password in the repository or proxy configuration.\nFor instance <code><a href=\"http://julien:secret@myrepository.com/\" class=\"bare\">http://julien:secret@myrepository.com/</a></code> will configure to use <code>julien</code> username and <code>secret</code>\npassword if the remote server needs authentication. Proxies are also supported.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_remote_snapshot_refresh_policy\"><a class=\"anchor\" href=\"#_configuring_remote_snapshot_refresh_policy\"></a>Configuring Remote Snapshot Refresh Policy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>By default <em>SNAPSHOT</em> dependencies are updated once a day. This behavior can be modified using the system property\n<code>vertx.maven.remoteSnapshotPolicy</code>. This can be set to <code>always</code> to ensure <em>SNAPSHOT</em> dependencies are updated every\ntime, <code>daily</code> to update just once a day, which is the default, or to <code>never</code> to ensure they are never updated.</p>\n</div>\n<div class=\"paragraph\">\n<p>It can also be set to <code>interval:X</code> where <code>X</code> is the number of minutes to allow before updating a <em>SNAPSHOT</em>\ndependency.</p>\n</div>\n<div class=\"paragraph\">\n<p>The refresh policy can also be configured from the <code><a href=\"../../apidocs/io/vertx/maven/ResolverOptions.html\">ResolverOptions</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.registerVerticleFactory(<span class=\"hljs-keyword\">new</span> MavenVerticleFactory(\n    <span class=\"hljs-keyword\">new</span> ResolverOptions().setRemoteSnapshotPolicy(<span class=\"hljs-string\">\"never\"</span>))\n);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_customizing_the_resolver\"><a class=\"anchor\" href=\"#_customizing_the_resolver\"></a>Customizing the resolver</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can create an instance of\n<code><a href=\"../../apidocs/io/vertx/maven/MavenVerticleFactory.html\">MavenVerticleFactory</a></code> using your own <code><a href=\"../../apidocs/io/vertx/maven/Resolver.html\">Resolver</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.registerVerticleFactory(<span class=\"hljs-keyword\">new</span> MavenVerticleFactory(myResolver)\n);</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"3.9.6"},"__N_SSG":true}