{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Eclipse Vert.x meets GraphQL","category":"guides","authors":[{"name":"Johannes SchÃ¼th","github_id":"jotschi"}],"summary":"In this blog post, we will look at an example application written in Vert.x that uses the new GraphQL API of Gentics Mesh."},"date":"2017-11-14","slug":"eclipse-vert-x-meets-graphql","readingTime":{"text":"7 min read","minutes":6.31,"time":378600,"words":1262},"content":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,h=Object.prototype.propertyIsEnumerable;var p=(a,t,r)=>t in a?c(a,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):a[t]=r,e=(a,t)=>{for(var r in t||(t={}))o.call(t,r)&&p(a,r,t[r]);if(n)for(var r of n(t))h.call(t,r)&&p(a,r,t[r]);return a},i=(a,t)=>d(a,m(t));var l=(a,t)=>{var r={};for(var s in a)o.call(a,s)&&t.indexOf(s)<0&&(r[s]=a[s]);if(a!=null&&n)for(var s of n(a))t.indexOf(s)<0&&h.call(a,s)&&(r[s]=a[s]);return r};const makeShortcode=a=>function(r){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},r))},Alert=makeShortcode(\"Alert\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var s=r,{components:a}=s,t=l(s,[\"components\"]);return mdx(MDXLayout,i(e(e({},layoutProps),t),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"I re\\xADcently added GraphQL sup\\xADport to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/gentics/mesh\"}),\"Gen\\xADtics Mesh\"),` and I thought it would be a good idea to boil down the essence of my im\\xADple\\xADmen\\xADta\\xADtion in ex\\xADam\\xADple so that I could share it in a sim\\xADpler form.\nThe ex\\xADam\\xADple I\\u2019m about to show will not cover all as\\xADpects that I have added to the `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://getmesh.io/docs/beta/graphql.html\"}),\"Gen\\xADtics Mesh API\"),` (e.g. pag\\xADing, search and error han\\xADdling) but it will give you a basic overview of the parts that I put to\\xADgether.\nGraphQL does not re\\xADquire a GraphDB even if the name might sug\\xADgest it.`),mdx(\"p\",null,\"Using a graphdb in com\\xADbi\\xADna\\xADtion with GraphQL does nev\\xADer\\xADthe\\xADless pro\\xADvide you with some ad\\xADvan\\xADtages which I will high\\xADlight later on.\"),mdx(\"h2\",e({},{id:\"what-is-graphql-what-is-it-good-for\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#what-is-graphql-what-is-it-good-for\"})),\"What is GraphQL? What is it good for?\"),mdx(\"p\",null,\"GraphQL as the name sug\\xADgests is a new query lan\\xADguage which can be used to load ex\\xADactly the amount of data which you ask for. \"),mdx(\"p\",null,`The query is de\\xADfined in way that the query fields cor\\xADre\\xADlate to the JSON data that is being re\\xADtrieved.\nIn our Star\\xADWars Demo do\\xADmain model this query will load the name of human 1001 which is Darth Vader.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-clojure\"}),`{\n  vader: human(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-name\"}),\"id:\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"1001\"),`) {\n    name\n  }\n}\n`)),mdx(\"p\",null,\"Would re\\xADsult in:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-json\"}),`{\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-attr\"}),'\"data\"'),`: {\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-attr\"}),'\"vader\"'),`: {\n      `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-attr\"}),'\"name\"'),\": \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Darth Vader\"'),`\n    }\n  }\n}\n`)),mdx(\"h2\",e({},{id:\"the-demo-app\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#the-demo-app\"})),\"The Demo App\"),mdx(\"p\",null,\"The demo ap\\xADpli\\xADca\\xADtion I build makes use of the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/graphql-java/graphql-java\"}),\"graphql-\\u200Bjava\"),` li\\xADbrary. The data is being stored in a graph data\\xADbase.\nI use `,mdx(\"a\",e({parentName:\"p\"},{href:\"http://orientdb.com/orientdb/\"}),\"Ori\\xADentDB\"),\" in com\\xADbi\\xADna\\xADtion with the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Syncleus/Ferma\"}),\"OGM Ferma\"),` to pro\\xADvide a data ac\\xADcess layer.\nGraphQL does not nec\\xADes\\xADsar\\xADily re\\xADquire a graph data\\xADbase but in this ex\\xADam\\xADple I will make use of one and high\\xADlight the ben\\xADe\\xADfits of using a GraphDB for my use\\xADcase.`),mdx(\"p\",null,\"You can find the sources here: \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Jotschi/vertx-graphql-example\"}),\"https://github.com/Jotschi/vertx-\\u200Bgraphql-example\")),mdx(\"h3\",e({},{id:\"data\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#data\"})),\"Data\"),mdx(\"p\",null,\"The \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/data/StarWarsData.java\"}),\"Star\\xADWars\\xADData\"),` class cre\\xADates a Graph which con\\xADtains the Star Wars Movies and Char\\xADac\\xADters, Plan\\xADets and their re\\xADla\\xADtions.\nThe model is fairly sim\\xADple. There is a sin\\xADgle Star\\xADWars\\xADRoot ver\\xADtex which acts as a start el\\xADe\\xADment for var\\xADi\\xADous ag\\xADgre\\xADga\\xADtion ver\\xADtices: Movies are stored in Movie\\xADRoot, Plan\\xADets in Plan\\xADet\\xADs\\xADRoot, Char\\xADac\\xADters are stored in Hu\\xADman\\xADs\\xADRoot and Droid\\xADs\\xADRoot.`),mdx(\"p\",null,\"The model classes are used for wrap\\xADpers of the spe\\xADcific graph ver\\xADtices. The \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://syncleus.com/Ferma/\"}),\"Ferma OGM\"),` is used to pro\\xADvide these wrap\\xADpers. Each class con\\xADtains meth\\xADods which can be used to tra\\xADverse the graph to lo\\xADcate the needed ver\\xADtices.\nThe found ver\\xADtices are in turn again wrapped and can be used to lo\\xADcate other graph el\\xADe\\xADments.`),mdx(\"h3\",e({},{id:\"schema\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#schema\"})),\"Schema\"),mdx(\"p\",null,\"The next thing we need is the GraphQL schema. The schema de\\xADscribes each el\\xADe\\xADment which can be re\\xADtrieved. It also de\\xADscribes the prop\\xADer\\xADties and re\\xADla\\xADtion\\xADships for these el\\xADe\\xADments.\"),mdx(\"p\",null,\"The graphql-\\u200Bjava li\\xADbrary pro\\xADvides an API to cre\\xADate the ob\\xADject types and schema in\\xADfor\\xADma\\xADtion.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-clojure\"}),`private GraphQLObjectType createMovieType() {\n  return newObject().name(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Movie\"'),`)\n    .description(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"One of the films in the Star Wars universe.\"'),`)\n\n    // .title\n    .field(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-name\"}),\"newFieldDefinition\"),\"().name(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"title\"'),`)\n        .description(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Title of the episode.\"'),`)\n        .type(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-name\"}),\"GraphQLString\"),`)\n        .dataFetcher((`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-name\"}),\"env\"),`) -> {\n          Movie movie = env.getSource()`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\";\"),`\n          return movie.getName()`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\";\"),`\n        }))\n\n    // .description\n    .field(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-name\"}),\"newFieldDefinition\"),\"().name(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"description\"'),`)\n        .description(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Description of the episode.\"'),`)\n        .type(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-name\"}),\"GraphQLString\"),`))\n\n    .build()`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\";\"),`\n}\n`)),mdx(\"p\",null,\"A type can be ref\\xADer\\xADenced via a \",mdx(\"inlineCode\",{parentName:\"p\"},\"GraphQLTypeReference\"),` once it has been cre\\xADated and added to the schema. This is es\\xADpe\\xADcially im\\xADpor\\xADtant if you need to add fields which ref\\xADer\\xADence other types.\nData fetch\\xADers are used to ac\\xADcess the con\\xADtext, tra\\xADverse the graph and re\\xADtrieve prop\\xADer\\xADties from graph el\\xADe\\xADments.`),mdx(\"p\",null,\"An\\xADother great source to learn more about the schema op\\xADtions is the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/graphql-java/graphql-java/blob/master/src/test/groovy/graphql/GarfieldSchema.java\"}),\"Garfield\\xADSchema\"),\" ex\\xADam\\xADple.\"),mdx(\"p\",null,\"Fi\\xADnally all the cre\\xADated types must be ref\\xADer\\xADenced by a cen\\xADtral ob\\xADject type \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/data/StarWarsSchema.java#L204\"}),\"Query\\xADType\"),`.\nThe query type ob\\xADject is ba\\xADsi\\xADcally the root ob\\xADject for the query.\nIt de\\xADfines what query op\\xADtions are ini\\xADtially pos\\xADsi\\xADble. In our case it is pos\\xADsi\\xADble to load the hero of the sage, spe\\xADcific movies, hu\\xADmans or droids.`),mdx(\"h3\",e({},{id:\"verticle\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#verticle\"})),\"Verticle\"),mdx(\"p\",null,\"The \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/GraphQLVerticle.java\"}),\"GraphQLVer\\xADti\\xADcle\"),\" is used to ac\\xADcept the GraphQL re\\xADquest and process it.\"),mdx(\"p\",null,\"The ver\\xADti\\xADcle also con\\xADtains a Sta\\xADticHan\\xADdler to pro\\xADvide the Graphiql Browser web in\\xADter\\xADface. This in\\xADter\\xADface will allow you to quickly dis\\xADcover and ex\\xADper\\xADi\\xADment with GraphQL.\"),mdx(\"p\",null,\"The \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/GraphQLVerticle.java#L77\"}),\"query han\\xADdler\"),\" ac\\xADcepts the query JSON data. \"),mdx(\"p\",null,\"An Ori\\xADentDB trans\\xADac\\xADtion is being opened and the query is ex\\xADe\\xADcuted:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),`demoData.getGraph().asyncTx((tx) -> {\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\"// Invoke the query and handle the resulting JSON\"),`\n  GraphQL graphQL = newGraphQL(schema).build();\n  ExecutionInput input = `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),\" ExecutionInput(query, \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"null\"),`, queryJson, demoData.getRoot(), extractVariables(queryJson));\n  tx.complete(graphQL.execute(input));\n}, (AsyncResult<ExecutionResult> rh) -> {\n  ...\n});\n`)),mdx(\"p\",null,`The ex\\xADe\\xADcute method ini\\xADtially needs a con\\xADtext vari\\xADable. This con\\xADtext passed along with the query.\nIn our case the con\\xADtext is the root el\\xADe\\xADment of the graph `,mdx(\"inlineCode\",{parentName:\"p\"},\"demoData.getRoot()\"),`.\nThis con\\xADtext el\\xADe\\xADment also serves as the ini\\xADtial source for our data fetch\\xADers.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),`.dataFetcher((env) -> {\n  StarWarsRoot root = env.getSource();\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"return\"),` root.getHero();\n}))\n`)),mdx(\"p\",null,`The data fetch\\xADers for the hero type on the other hand will be able to ac\\xADcess the hero el\\xADe\\xADment since the fetcher above re\\xADturned the el\\xADe\\xADment.\nUsing this mech\\xADa\\xADnism it is pos\\xADsi\\xADble to tra\\xADverse the graph. It is im\\xADpor\\xADtant to note that each in\\xADvo\\xADca\\xADtion on the do\\xADmain model meth\\xADods will di\\xADrectly ac\\xADcess the graph data\\xADbase.\nThis way it is pos\\xADsi\\xADble to in\\xADflu\\xADence the graph data\\xADbase query down to the low\\xADest level. When omit\\xADting a prop\\xADerty from the graphql query it will not be loaded from the graph.\nThus there is no need to write an ad\\xADdi\\xADtional data ac\\xADcess layer. All op\\xADer\\xADa\\xADtions are di\\xADrectly mapped to graph data\\xADbase.`),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"StarWarsRoot\"),\" Ferma class \",mdx(\"inlineCode\",{parentName:\"p\"},\"getHero()\"),\" method in turn de\\xADfines a \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://tinkerpop.apache.org/docs/3.3.0/tutorials/getting-started/#_graph_traversal_staying_simple\"}),\"Tin\\xADker\\xADPop Grem\\xADlin tra\\xADver\\xADsal\"),\" which is used to load the Ver\\xADtex which rep\\xADre\\xADsents the hero of the Star Wars saga.\"),mdx(Alert,{info:!0,mdxType:\"Alert\"},mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"http://tinkerpop.apache.org/\"}),\"Apache Tin\\xADker\\xADPop\"),` is an open source, vendor-\\u200Bagnostic, graph frame\\xADwork / API which is sup\\xADported by many graph data\\xADbase ven\\xADdors.\nOne part of Tin\\xADker\\xADPop is the Grem\\xADlin tra\\xADver\\xADsal lan\\xADguage which is great to query graph data\\xADbases.`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),`...\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" Droid \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"getHero\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),\"()\"),\" \"),`{\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\"// Follow the HAS_ROOT edge and return the first found Vertex which could be found. \"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\"// Wrap the Vertex explicitly in the Droid Ferma class.  \"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"return\"),\" traverse((g) -> g.out(HAS_HERO)).nextOrDefaultExplicit(Droid.class, \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"null\"),`);\n}\n...\n`)),mdx(\"p\",null,`Once the query has been ex\\xADe\\xADcuted the re\\xADsult han\\xADdler is being in\\xADvoked. It con\\xADtains some code to process the re\\xADsult data and po\\xADten\\xADtial er\\xADrors.\nIt is im\\xADpor\\xADtant to note that a GraphQL query will al\\xADways be an\\xADswered with a 2xx HTTP sta\\xADtus code.\nIf an el\\xADe\\xADment which is being ref\\xADer\\xADenced in the query can\\u2019t be loaded an error will be added to the re\\xADsponse JSON ob\\xADject.`),mdx(\"h3\",e({},{id:\"testing\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#testing\"})),\"Testing\"),mdx(\"p\",null,`Test\\xADing is fairly straight for\\xADward. Al\\xADthough there are mul\\xADti\\xADple ap\\xADproaches. One ap\\xADproach is to use unit test\\xADing di\\xADrectly on the GraphQL types.\nAn\\xADother op\\xADtion is to run queries against the end\\xADpoint.  `),mdx(\"p\",null,\"The \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/test/java/de/jotschi/vertx/GraphQLTest.java\"}),\"GraphQL\\xADTest class\"),` I wrote will run mul\\xADti\\xADple queries against the end\\xADpoint.\nA Pa\\xADra\\xADme\\xADter\\xADized JUnit test is used it\\xADer\\xADate over the queries.`),mdx(\"p\",null,\"A \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/test/resources/graphql/full-query\"}),\"typ\\xADi\\xADcal query\"),` does not only con\\xADtain the query data.\nThe as\\xADser\\xADtions on the re\\xADsponse JSON are di\\xADrectly in\\xADcluded in query using plain com\\xADments.`),mdx(\"p\",null,\"I build an \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://joel-costigliola.github.io/assertj/\"}),\"As\\xADsertJ\"),\" as\\xADser\\xADtion to check the com\\xADments of a query and ver\\xADify that the as\\xADser\\xADtion matches the re\\xADsponse.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),`  assertThat(response).compliesToAssertions(queryName);\n`)),mdx(\"h2\",e({},{id:\"run-the-example\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#run-the-example\"})),\"Run the example\"),mdx(\"p\",null,\"You can run the ex\\xADam\\xADple by ex\\xADe\\xADcut\\xADing the \",mdx(\"inlineCode\",{parentName:\"p\"},\"GraphQLServer\"),\" class and ac\\xADcess the \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://localhost:3000/browser/?query=%7B%0A%20%20movies%20%7B%0A%20%20%20%20title%0A%20%20%7D%0A%20%20hero%20%7B%0A%20%20%20%20name%0A%20%20%7D%0A%7D%0A\"}),\"Graphiql browser on http://lo\\xADcal\\xADhost:3000/browser/\")),mdx(\"h2\",e({},{id:\"where-to-go-from-here\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#where-to-go-from-here\"})),\"Where to go from here?\"),mdx(\"p\",null,`The ex\\xADam\\xADple is read-\\u200Bonly. GraphQL also sup\\xADports data mu\\xADta\\xADtion which can be used to ac\\xADtu\\xADally mod\\xADify and store data.\nI have not yet ex\\xADplored that part of GraphQL but I as\\xADsume it might not be that hard to add mu\\xADta\\xADtion sup\\xADport to the ex\\xADam\\xADple.`),mdx(\"p\",null,\"Ad\\xADdi\\xADtion\\xADally it does not cover how to ac\\xADtu\\xADally make use of such API. I re\\xADcently \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/gentics/mesh-vertx-example/\"}),\"up\\xADdated my Vert.x ex\\xADam\\xADple\"),\" which shows how to use Vert.x tem\\xADplate han\\xADdlers to build a small server which ren\\xADders some pages using data which was loaded via GraphQL.\"),mdx(\"p\",null,\"Thanks for read\\xADing. If you have any fur\\xADther ques\\xADtions or feed\\xADback don\\u2019t hes\\xADi\\xADtate to send me a tweet to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://twitter.com/Jotschi/\"}),\"@Jotschi\"),\" or \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://twitter.com/genticsmesh/\"}),\"@gen\\xADtic\\xADsmesh\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"prevPost":{"meta":{"title":"TCP Client using Eclipse Vert.x, Kotlin and Gradle build","category":"guides","authors":[{"name":"Usman Saleem","github_id":"usmansaleem"}],"summary":"In this blog post, I demonstrate how to write a very simple TCP client that keeps a connection open to a custom-written server in cloud."},"date":"2017-12-20","slug":"tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build"},"nextPost":{"meta":{"title":"Eclipse Vert.x 3.5.0 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"The Vert.x team is pleased to announce the release of Eclipse Vert.x 3.5.0."},"date":"2017-10-20","slug":"eclipse-vert-x-3-5-0-released"},"relatedPosts":[{"meta":{"title":"An Introduction to the Vert.x Context Object","category":"guides","authors":[{"name":"Jez Prime","github_id":"millross"}],"summary":"Under the hood, the vert.x Context class plays a critical part in maintaining the thread-safety guarantees of verticles. Most of the time, vert.x coders don't need to make use of Context objects directly."},"date":"2017-01-31","slug":"an-introduction-to-the-vert-x-context-object"},{"meta":{"title":"JWT Authorization for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn about JWT foundations, protect routes with JWT Authorization, JWT encoded tokens, and RBAC with Keycloak"},"date":"2020-10-01","slug":"jwt-authorization-for-vert-x-with-keycloak"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}