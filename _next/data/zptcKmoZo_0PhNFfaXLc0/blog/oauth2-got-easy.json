{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"OAuth2 got easy","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"Oauth2 support exists in Eclipse Vert.x since version 3.2.0. The implementation follows the principles that rule the whole vert.x ecosystem."},"date":"2016-12-02","slug":"oauth2-got-easy","readingTime":{"text":"2 min read","minutes":1.865,"time":111900,"words":373},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Oauth2\"), \" sup\\xADport ex\\xADists in Eclipse Vert.x since ver\\xADsion 3.2.0. The im\\xADple\\xADmen\\xADta\\xADtion fol\\xADlows the prin\\xADci\\xADples that rule the whole vert.x ecosys\\xADtem: un\\xADopin\\xADion\\xADated, it does what you want it to do, sim\\xADple but not too sim\\xADple.\"), mdx(\"p\", null, \"This works fine be\\xADcause \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OAuth2\"), \" is a widely spread stan\\xADdard and ven\\xADdors ad\\xADhere to it quite well. How\\xADever due to the API and the de\\xADtails of the spec\\xADi\\xADfi\\xADca\\xADtion it re\\xADquires some knowl\\xADedge on what kind of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"flow\"), \" your ap\\xADpli\\xADca\\xADtion needs to sup\\xADport, what are the end\\xADpoints for au\\xADtho\\xADriz\\xADing and get\\xADting to\\xADkens. This in\\xADfor\\xADma\\xADtion, even though eas\\xADily ac\\xADces\\xADsi\\xADble to any\\xADone who\\u2019s got the time and will, to read the ven\\xADdor doc\\xADu\\xADmen\\xADta\\xADtion is easy to find, but it means that de\\xADvel\\xADop\\xADers would need to spend time in a non-\\u200Bproject problem-\\u200Brelated task.\"), mdx(\"p\", null, \"Vert.x thrives for being fast and pro\\xADduc\\xADtive, so what if we could help you fo\\xADcus\\xADing on your de\\xADvel\\xADop\\xADment tasks rather than read\\xADing Oauth2 provider doc\\xADu\\xADmen\\xADta\\xADtion? This is what you can ex\\xADpect for the next re\\xADlease.\"), mdx(\"p\", null, \"Out of the box you will find out that you can in\\xADstan\\xADti\\xADate an OAuth2 provider as easy as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"Provider.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"vertx\"), \", clientId, clientSecret)\\n\")), mdx(\"p\", null, \"That\\u2019s it! sim\\xADple, to the point, sure it makes some as\\xADsump\\xADtions, it as\\xADsumes that you want to use the \\u201D\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AUTH_CODE\"), \"\\u201D flow which is what you nor\\xADmally do for web ap\\xADpli\\xADca\\xADtions with a back\\xADend.\"), mdx(\"p\", null, \"The sup\\xADported \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Provider\"), \" im\\xADple\\xADmen\\xADta\\xADtions will con\\xADfig\\xADure the base API (which will be still avail\\xADable) with the cor\\xADrect URLs, scope en\\xADcod\\xADing scheme or extra con\\xADfig\\xADu\\xADra\\xADtion such as \\u201D\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shopId\"), \"\\u201D/\\u201D\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GUID\"), \"\\u201D for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shopify\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Azure AD\"), \".\"), mdx(\"p\", null, \"So what sup\\xADported \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Provider\"), \"s can you al\\xADready find?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://app.net/\"\n  }), \"App.net\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://azure.microsoft.com/en-us/\"\n  }), \"Azure\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://box.com\"\n  }), \"Box.com\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://dropbox.com\"\n  }), \"Drop\\xADbox\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://facebook.com\"\n  }), \"Face\\xADbook\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://foursquare.com\"\n  }), \"Foursquare\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://github.com\"\n  }), \"Github\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://google.com\"\n  }), \"Google\"), \" (ei\\xADther \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AUTH_CODE\"), \" flow or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Server to Server\"), \" flow) \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://instagram.com\"\n  }), \"In\\xADsta\\xADgram\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://keycloak.org\"\n  }), \"Key\\xADcloak\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://linkedin.com\"\n  }), \"LinkedIn\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://mailchimp.com\"\n  }), \"Mailchimp\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://salesforce.com\"\n  }), \"Sales\\xADforce\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://shopify.com\"\n  }), \"Shopify\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://soundcloud.com\"\n  }), \"Sound\\xADcloud\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stripe.com\"\n  }), \"Stripe\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://twitter.com\"\n  }), \"Twit\\xADter\"))), mdx(\"p\", null, \"That\\u2019s a hand\\xADful of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Provider\"), \"s, but there is more. Say that you want to en\\xADsure that your SSL con\\xADnec\\xADtions are valid and want to con\\xADtrol the cer\\xADtifi\\xADcate val\\xADi\\xADda\\xADtion. Every provider also ac\\xADcepts a Http\\xADClien\\xADtOp\\xADtions ob\\xADject that will be used in\\xADter\\xADnally when con\\xADtact\\xADing your provider, so in this case, you have full se\\xADcu\\xADrity con\\xADtrol of your con\\xADnec\\xADtion, not just de\\xADfaults.\"), mdx(\"p\", null, \"You can ex\\xADpect this new code to land for 3.4 as it is not avail\\xADable in the cur\\xADrent re\\xADlease (3.3.3).\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><code>Oauth2</code> sup­port ex­ists in Eclipse Vert.x since ver­sion 3.2.0. The im­ple­men­ta­tion fol­lows the prin­ci­ples that rule the whole vert.x ecosys­tem: un­opin­ion­ated, it does what you want it to do, sim­ple but not too sim­ple.</p><p>This works fine be­cause <code>OAuth2</code> is a widely spread stan­dard and ven­dors ad­here to it quite well. How­ever due to the API and the de­tails of the spec­i­fi­ca­tion it re­quires some knowl­edge on what kind of <em>flow</em> your ap­pli­ca­tion needs to sup­port, what are the end­points for au­tho­riz­ing and get­ting to­kens. This in­for­ma­tion, even though eas­ily ac­ces­si­ble to any­one who’s got the time and will, to read the ven­dor doc­u­men­ta­tion is easy to find, but it means that de­vel­op­ers would need to spend time in a non-​project problem-​related task.</p><p>Vert.x thrives for being fast and pro­duc­tive, so what if we could help you fo­cus­ing on your de­vel­op­ment tasks rather than read­ing Oauth2 provider doc­u­men­ta­tion? This is what you can ex­pect for the next re­lease.</p><p>Out of the box you will find out that you can in­stan­ti­ate an OAuth2 provider as easy as:</p><pre><code class=\"hljs language-clojure\">Provider.create(<span class=\"hljs-name\">vertx</span>, clientId, clientSecret)\n</code></pre><p>That’s it! sim­ple, to the point, sure it makes some as­sump­tions, it as­sumes that you want to use the ”<code>AUTH_CODE</code>” flow which is what you nor­mally do for web ap­pli­ca­tions with a back­end.</p><p>The sup­ported <code>Provider</code> im­ple­men­ta­tions will con­fig­ure the base API (which will be still avail­able) with the cor­rect URLs, scope en­cod­ing scheme or extra con­fig­u­ra­tion such as ”<code>shopId</code>”/”<code>GUID</code>” for <code>Shopify</code>/<code>Azure AD</code>.</p><p>So what sup­ported <code>Provider</code>s can you al­ready find?</p><ul><li><a href=\"https://app.net/\">App.net</a></li><li><a href=\"https://azure.microsoft.com/en-us/\">Azure</a></li><li><a href=\"https://box.com\">Box.com</a></li><li><a href=\"https://dropbox.com\">Drop­box</a></li><li><a href=\"https://facebook.com\">Face­book</a></li><li><a href=\"https://foursquare.com\">Foursquare</a></li><li><a href=\"http://github.com\">Github</a></li><li><a href=\"https://google.com\">Google</a> (ei­ther <code>AUTH_CODE</code> flow or <code>Server to Server</code> flow) </li><li><a href=\"https://instagram.com\">In­sta­gram</a></li><li><a href=\"https://keycloak.org\">Key­cloak</a></li><li><a href=\"https://linkedin.com\">LinkedIn</a></li><li><a href=\"https://mailchimp.com\">Mailchimp</a></li><li><a href=\"https://salesforce.com\">Sales­force</a></li><li><a href=\"https://shopify.com\">Shopify</a></li><li><a href=\"https://soundcloud.com\">Sound­cloud</a></li><li><a href=\"https://stripe.com\">Stripe</a></li><li><a href=\"https://twitter.com\">Twit­ter</a></li></ul><p>That’s a hand­ful of <code>Provider</code>s, but there is more. Say that you want to en­sure that your SSL con­nec­tions are valid and want to con­trol the cer­tifi­cate val­i­da­tion. Every provider also ac­cepts a Http­Clien­tOp­tions ob­ject that will be used in­ter­nally when con­tact­ing your provider, so in this case, you have full se­cu­rity con­trol of your con­nec­tion, not just de­faults.</p><p>You can ex­pect this new code to land for 3.4 as it is not avail­able in the cur­rent re­lease (3.3.3).</p>","scope":{}}},"prevPost":{"meta":{"title":"Getting started with new fabric8 Vert.x Maven Plugin","category":"guides","authors":[{"name":"Kamesh Sampath","github_id":"kameshsampath"}],"summary":"The all new fabric8 Vert.x Maven Plugin allows you to setup, package, run, start, stop and redeploy easily with a very little configuration resulting in a less verbose pom.xml."},"date":"2016-12-07","slug":"getting-started-with-new-fabric8-vert-x-maven-plugin"},"nextPost":{"meta":{"title":"Vert.x featuring Continuous Delivery with Jenkins and Ansible","category":"guides","authors":[{"name":"Ricardo Hernandez","github_id":"ricardohmon"}],"summary":"This blog entry describes an approach to adopt Continuous Delivery for Vert.x applications using Jenkins and Ansible by taking advantage of the Jenkins Job DSL and Ansible plugins."},"date":"2016-09-28","slug":"vert-x-featuring-continuous-delivery-with-jenkins-and-ansible"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Contract Driven REST Services with Vert.x3","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"We see a new trend in development where we are shifting from developing applications to APIs. More and more we see services being offered as REST APIs that we are allowed to consume."},"date":"2015-09-17","slug":"contract-driven-rest-services-with-vert-x3"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}