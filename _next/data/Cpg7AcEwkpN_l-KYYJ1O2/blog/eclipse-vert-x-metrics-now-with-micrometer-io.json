{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Eclipse Vert.x metrics now with Micrometer.io","category":"guides","authors":[{"name":"Joel Takvorian","github_id":"jotak"}],"summary":"The new vertx-micrometer-metrics module provides support for collecting metrics with Micrometer.io and storing them in backends such as Graphite or InfluxDB."},"date":"2018-04-09","slug":"eclipse-vert-x-metrics-now-with-micrometer-io","readingTime":{"text":"8 min read","minutes":7.365,"time":441900.00000000006,"words":1473},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x has al\\xADready been pro\\xADvid\\xADing met\\xADrics for some time, through the \", mdx(Link, {\n    href: \"/docs/vertx-dropwizard-metrics/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"vertx-\\u200Bdropwizard-metrics\")), \" and \", mdx(Link, {\n    href: \"/docs/vertx-hawkular-metrics/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"vertx-\\u200Bhawkular-metrics\")), \" mod\\xADules. Both of them im\\xADple\\xADment a ser\\xADvice provider in\\xADter\\xADface (SPI) to col\\xADlect the Vert.x met\\xADrics and make them avail\\xADable to their re\\xADspec\\xADtive back\\xADends.\"), mdx(\"p\", null, \"A new mod\\xADule, \", mdx(Link, {\n    href: \"/docs/vertx-micrometer-metrics/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"vertx-\\u200Bmicrometer-metrics\")), \", is now added to the fam\\xADily. It im\\xADple\\xADments the same SPI, which means that it is able to pro\\xADvide the same met\\xADrics.\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://micrometer.io/\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Mi\\xADcrom\\xADe\\xADter.io\")), \" is a pretty new met\\xADrics li\\xADbrary, quite com\\xADpa\\xADra\\xADble to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"drop\\xADwiz\\xADard met\\xADrics\"), \" in that it col\\xADlects met\\xADrics in a local, in-\\u200Bmemory reg\\xADistry and is able to store them in var\\xADi\\xADous back\\xADends such as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Graphite\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADfluxDB\"), \". It has sev\\xADeral ad\\xADvan\\xADtages as we will see below.\"), mdx(\"h2\", {\n    \"id\": \"tell-me-more-about-micrometer\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#tell-me-more-about-micrometer\"\n  })), \"Tell me more about Micrometer\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://micrometer.io/\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Mi\\xADcrom\\xADe\\xADter.io\")), \" de\\xADscribes it\\xADself as a a vendor-\\u200Bneutral ap\\xADpli\\xADca\\xADtion met\\xADrics fa\\xADcade.\\nIt pro\\xADvides a well de\\xADsigned API, in Java, to de\\xADfine \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gauges\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"coun\\xADters\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"timers\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dis\\xADtri\\xADb\\xADu\\xADtion sum\\xADmaries\"), \".\"), mdx(\"p\", null, \"Among the avail\\xADable back\\xADends, Mi\\xADcrom\\xADe\\xADter na\\xADtively sup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Graphite\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADfluxDB\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JMX\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Prometheus\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://micrometer.io/docs\"\n  }), \"sev\\xADeral oth\\xADers\"), \". Prometheus is very pop\\xADu\\xADlar in the Ku\\xADber\\xADnetes and mi\\xADcroser\\xADvices ecosys\\xADtems, so its sup\\xADport by Mi\\xADcrom\\xADe\\xADter was a strong mo\\xADti\\xADva\\xADtion for im\\xADple\\xADment\\xADing it in Vert.x.\"), mdx(\"p\", null, \"For the the mo\\xADment, our im\\xADple\\xADmen\\xADta\\xADtion in Vert.x sup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Prometheus\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADfluxDB\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JMX\"), \". More should quickly come in the near fu\\xADture.\"), mdx(\"h3\", {\n    \"id\": \"dimensionality\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#dimensionality\"\n  })), \"Dimensionality\"), mdx(\"p\", null, \"An\\xADother in\\xADter\\xADest\\xADing as\\xADpect in Mi\\xADcrom\\xADe\\xADter is that it han\\xADdles met\\xADrics \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"di\\xADmen\\xADsion\\xADal\\xADity\"), \": met\\xADrics can be as\\xADso\\xADci\\xADated with a set of key/value pairs (some\\xADtimes ref\\xADered as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tags\"), \", some\\xADtimes as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"la\\xADbels\"), \"). Every value brings a new di\\xADmen\\xADsion to the met\\xADric, so that in Prometheus or any other back\\xADend that sup\\xADports di\\xADmen\\xADsion\\xADal\\xADity, we can query for dat\\xADa\\xADpoints of one or sev\\xADeral di\\xADmen\\xADsions, or query for dat\\xADa\\xADpoints ag\\xADgre\\xADgated over sev\\xADeral di\\xADmen\\xADsions.\"), mdx(\"p\", null, \"  \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ex\\xADam\\xADple: our met\\xADric \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"vertx_http_server_connections\"), \" ac\\xADcepts la\\xADbels \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"local\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"remote\"), \", that are used to store ad\\xADdresses on HTTP con\\xADnec\\xADtions\")), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Prometheus is used in the fol\\xADlow\\xADing ex\\xADam\\xADples, but equiv\\xADa\\xADlent queries can be per\\xADformed with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADfluxDB\"), \".\")), mdx(\"p\", null, \"In Prometheus, the query \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_http_server_connections\"), \" will re\\xADturn as many time\\xADseries as there are com\\xADbi\\xADna\\xADtions of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"local\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remote\"), \" val\\xADues. Ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-basic\"\n  }), \"vertx_http_server_connections{local=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0:8080\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"remote=\\\"1.1.1.1\\\"}\"), \"\\nvertx_http_server_connections{local=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0:8080\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"remote=\\\"2.2.2.2\\\"}\"), \"\\nvertx_http_server_connections{local=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0:8080\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"remote=\\\"3.3.3.3\\\"}\"), \"\\n\")), mdx(\"p\", null, \"To query on a sin\\xADgle di\\xADmen\\xADsion, we must pro\\xADvide the la\\xADbels:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_http_server_connections{local=\\\"0.0.0.0:8080\\\",remote=\\\"1.1.1.1\\\"}\"), \". It will re\\xADturn a sin\\xADgle time\\xADseries.\"), mdx(\"p\", null, \"To get an ag\\xADgre\\xADgate, Prometheus (PromQL) pro\\xADvides sev\\xADeral \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators\"\n  }), \"ag\\xADgre\\xADga\\xADtion op\\xADer\\xADa\\xADtors\"), \":\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sum(vertx_http_server_connections)\"), \" will re\\xADturn the sum across all di\\xADmen\\xADsions.\"), mdx(\"h2\", {\n    \"id\": \"so-what-are-the-vertx-metrics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#so-what-are-the-vertx-metrics\"\n  })), \"So what are the Vert.x metrics?\"), mdx(\"p\", null, \"Peo\\xADple al\\xADready fa\\xADmil\\xADiar with the ex\\xADist\\xADing met\\xADrics mod\\xADules (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"drop\\xADwiz\\xADard\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hawku\\xADlar\"), \") will not be too dis\\xADori\\xADented. They are roughly the same. The main dif\\xADfer\\xADence is where pre\\xADvi\\xADously, some met\\xADric names could have a vari\\xADable part within - such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.eventbus.handlers.myaddress\"), \" - here we take ad\\xADvan\\xADtage of di\\xADmen\\xADsion\\xADal\\xADity and we will have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_eventbus_handlers{address=\\\"myaddress\\\"}\"), \".\"), mdx(\"p\", null, \"Some other met\\xADrics are no longer use\\xADful, for in\\xADstance the drop\\xADwiz\\xADard\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.eventbus.messages.pending\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.eventbus.messages.pending-local\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.eventbus.messages.pending-remote\"), \" are now just \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_eventbus_pending{side=local}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_eventbus_pending{side=remote}\"), \" in mi\\xADcrom\\xADe\\xADter. The sum of them can eas\\xADily be com\\xADputed at query time.\"), mdx(\"p\", null, \"The met\\xADrics pro\\xADvided by Vert.x are dis\\xADpatched into eight big fam\\xADi\\xADlies:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Net client\"), \": dis\\xADtri\\xADb\\xADu\\xADtion sum\\xADmaries of bytes sent and re\\xADceived, num\\xADber of con\\xADnec\\xADtions, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Net server\"), \": dis\\xADtri\\xADb\\xADu\\xADtion sum\\xADmaries of bytes sent and re\\xADceived, num\\xADber of con\\xADnec\\xADtions, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"HTTP client\"), \": counter of re\\xADquests, re\\xADsponse times, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"HTTP server\"), \": counter of re\\xADquests, pro\\xADcess\\xADing times, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Event bus\"), \": counter of han\\xADdlers, mes\\xADsages sent and re\\xADceived, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pool\"), \": for worker pools and some data\\xADsource pools, queue size and wait\\xADing time, pro\\xADcess\\xADing time, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Ver\\xADti\\xADcles\"), \": num\\xADber of ver\\xADti\\xADcles de\\xADployed.\")), mdx(\"p\", null, \"The full list of col\\xADlected met\\xADrics is \", mdx(Link, {\n    href: \"/docs/vertx-micrometer-metrics/java/#_vert_x_core_tools_metrics\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"avail\\xADable here\")), \".\"), mdx(\"h2\", {\n    \"id\": \"getting-started\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#getting-started\"\n  })), \"Getting started\"), mdx(\"p\", null, \"This sec\\xADtion will guide you through a quick setup to run a Vert.x ap\\xADpli\\xADca\\xADtion with Mi\\xADcrom\\xADe\\xADter. The code ex\\xADam\\xADples used here are taken from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"micrometer-metrics-example\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-examples\"), \" repos\\xADi\\xADtory, in Java, using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"maven\"), \". But the same could be done with other Vert.x sup\\xADported lan\\xADguages, as well as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gra\\xADdle\"), \" in\\xADstead of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"maven\"), \".\"), mdx(\"h3\", {\n    \"id\": \"maven-configuration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#maven-configuration\"\n  })), \"Maven configuration\"), mdx(\"p\", null, \"The con\\xADfig\\xADu\\xADra\\xADtion and the maven im\\xADports will vary ac\\xADcord\\xADing to the back\\xADend stor\\xADage that will be used. For maven, the com\\xADmon part is al\\xADways:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-micrometer-metrics\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.5.1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Then, to re\\xADport to In\\xADfluxDB:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.micrometer\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"micrometer-registry-influx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or Prometheus:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.micrometer\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"micrometer-registry-prometheus\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-web\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.5.1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"Re\\xADmark that, since Prometheus pulls met\\xADrics from their source, they must be ex\\xADposed on an HTTP end\\xADpoint. That\\u2019s why \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-web\"), \" is im\\xADported here. It is not \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ab\\xADsolutely\"), \" nec\\xADes\\xADsary (it\\u2019s pos\\xADsi\\xADble to get the met\\xADrics reg\\xADistry con\\xADtent and ex\\xADpose it in any other way) but it\\u2019s prob\\xADa\\xADbly the eas\\xADi\\xADest way to do.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or JMX:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.micrometer\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"micrometer-registry-jmx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"At the mo\\xADment, it is not pos\\xADsi\\xADble to re\\xADport met\\xADrics to sev\\xADeral back\\xADends at the same time. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\"\n  }), \"It might be soon im\\xADple\\xADmented\"), \".\")), mdx(\"h3\", {\n    \"id\": \"setting-up-vertx-options\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#setting-up-vertx-options\"\n  })), \"Setting up Vert.x options\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MicrometerMetricsOptions\"), \" ob\\xADject must be cre\\xADated and passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VertxOptions\"), \", with one back\\xADend con\\xADfig\\xADured (though hav\\xADing no back\\xADend is pos\\xADsi\\xADble: you would get met\\xADrics sent to a de\\xADfault Mi\\xADcrom\\xADe\\xADter reg\\xADistry, but with\\xADout any per\\xADsis\\xADtent stor\\xADage).\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In\\xADfluxDB ex\\xADam\\xADple:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Default InfluxDB options will push metrics to localhost:8086, db \\\"default\\\"\"), \"\\nMicrometerMetricsOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MicrometerMetricsOptions()\\n  .setInfluxDbOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxInfluxDbOptions().setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \"))\\n  .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\nVertx vertx = Vertx.vertx(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxOptions().setMetricsOptions(options));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Then deploy verticles with this vertx instance\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prometheus ex\\xADam\\xADple:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Deploy with embedded server: prometheus metrics will be automatically exposed,\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// independently from any other HTTP server defined\"), \"\\nMicrometerMetricsOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MicrometerMetricsOptions()\\n  .setPrometheusOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxPrometheusOptions()\\n    .setStartEmbeddedServer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \")\\n    .setEmbeddedServerOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" HttpServerOptions().setPort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8081\"), \"))\\n    .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \"))\\n  .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\nVertx vertx = Vertx.vertx(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxOptions().setMetricsOptions(options));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Then deploy verticles with this vertx instance\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or Prometheus with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/metrics\"), \" end\\xADpoint bound to an ex\\xADist\\xADing HTTP server:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Deploy without embedded server: we need to \\\"manually\\\" expose the prometheus metrics\"), \"\\nMicrometerMetricsOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MicrometerMetricsOptions()\\n  .setPrometheusOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxPrometheusOptions().setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \"))\\n  .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\nVertx vertx = Vertx.vertx(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxOptions().setMetricsOptions(options));\\n\\nRouter router = Router.router(vertx);\\nPrometheusMeterRegistry registry = (PrometheusMeterRegistry) BackendRegistries.getDefaultNow();\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Setup a route for metrics\"), \"\\nrouter.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/metrics\\\"\"), \").handler(ctx -> {\\n  String response = registry.scrape();\\n  ctx.response().end(response);\\n});\\nvertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JMX ex\\xADam\\xADple:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Default JMX options will publish MBeans under domain \\\"metrics\\\"\"), \"\\nMicrometerMetricsOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MicrometerMetricsOptions()\\n  .setJmxMetricsOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxJmxMetricsOptions().setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \"))\\n  .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\nVertx vertx = Vertx.vertx(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxOptions().setMetricsOptions(options));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Then deploy verticles with this vertx instance\"), \"\\n\")), mdx(\"h3\", {\n    \"id\": \"setup-the-backend-server\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#setup-the-backend-server\"\n  })), \"Setup the backend server\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.influxdata.com/\"\n  }), \"In\\xADfluxDB\"), \", by de\\xADfault, is ex\\xADpected to run on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"localhost:8086\"), \" with\\xADout au\\xADthen\\xADti\\xADca\\xADtion, data\\xADbase \\u201Cde\\xADfault\\u201D. It is con\\xADfig\\xADurable in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"VertxInfluxDbOptions\"), \".\\nIf you don\\u2019t have a run\\xADning in\\xADstance of In\\xADfluxDB, the short\\xADest way to start is cer\\xADtainly with docker, just run:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"docker run -p 8086:8086 influxdb\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://prometheus.io/docs/prometheus/latest/getting_started/\"\n  }), \"Prometheus\"), \" needs some con\\xADfig\\xADu\\xADra\\xADtion since it pulls met\\xADrics from the sources. Once it is in\\xADstalled, con\\xADfig\\xADure the scrape end\\xADpoints in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"prometheus.yml\"), \":\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"job_name:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'vertx-8081'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"static_configs:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"targets:\"), \" [\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'localhost:8081'\"), \"]\\n\")), mdx(\"p\", null, \"or, when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/metrics\"), \" end\\xADpoint bound to an ex\\xADist\\xADing HTTP server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"job_name:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'vertx-8080'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"static_configs:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"targets:\"), \" [\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'localhost:8080'\"), \"]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For JMX there is noth\\xADing spe\\xADcial to con\\xADfig\\xADure.\")), mdx(\"h3\", {\n    \"id\": \"collecting-vertx-metrics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#collecting-vertx-metrics\"\n  })), \"Collecting Vert.x metrics\"), mdx(\"p\", null, \"From now on, all Vert.x met\\xADrics will be col\\xADlected and sent to the con\\xADfig\\xADured back\\xADend. In our Vert.x ex\\xADam\\xADple, we setup an HTTP server met\\xADrics:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Router router = Router.router(vertx);\\nrouter.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \").handler(ctx -> {\\n  ctx.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello Micrometer from HTTP!\\\"\"), \");\\n});\\nvertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\")), mdx(\"p\", null, \" And some event bus ping-\\u200Bpong:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Producer side\"), \"\\nvertx.setPeriodic(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\"), \", x -> {\\n  vertx.eventBus().send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"greeting\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello Micrometer from event bus!\\\"\"), \");\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Consumer side\"), \"\\nvertx.eventBus().<String>consumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"greeting\\\"\"), \", message -> {\\n  String greeting = message.body();\\n  System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Received: \\\"\"), \" + greeting);\\n  message.reply(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello back!\\\"\"), \");\\n});\\n\")), mdx(\"p\", null, \"To trig\\xADger some ac\\xADtiv\\xADity on the HTTP server, we can write a small bash script:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"do\"), \" curl http://localhost:8080/\\n    sleep .8\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"done\"), \"\\n\")), mdx(\"h3\", {\n    \"id\": \"viewing-the-results\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#viewing-the-results\"\n  })), \"Viewing the results\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://grafana.com/\"\n  }), \"Grafana\"), \" can be used to dis\\xADplay the In\\xADfluxDB and Prometheus met\\xADrics. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-examples\"), \" repos\\xADi\\xADtory con\\xADtains two dash\\xADboards for that: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-InfluxDB.json\"\n  }), \"for In\\xADfluxDB\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-Prometheus.json\"\n  }), \"for Prometheus\"), \".\"), mdx(\"h5\", {\n    \"id\": \"http-server-metrics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#http-server-metrics\"\n  })), \"HTTP server metrics\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/http-server-metrics.png\",\n    \"alt\": \"HTTP server metrics\"\n  }))), mdx(\"h5\", {\n    \"id\": \"event-bus-metrics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#event-bus-metrics\"\n  })), \"Event bus metrics\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/eventbus-metrics.png\",\n    \"alt\": \"Event bus metrics\"\n  }))), mdx(\"h2\", {\n    \"id\": \"going-further\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#going-further\"\n  })), \"Going further\"), mdx(\"p\", null, \"We\\u2019ve seen the basic setup. There is a good bunch of op\\xADtions avail\\xADable, de\\xADtailed \", mdx(Link, {\n    href: \"/docs/vertx-micrometer-metrics/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"in the doc\\xADu\\xADmen\\xADta\\xADtion\")), \": how to dis\\xADable some met\\xADrics do\\xADmains, how to fil\\xADter or re\\xADarrange la\\xADbels, how to ex\\xADport met\\xADrics snap\\xADshots to Json ob\\xADjects, how to add JVM or proces\\xADsor in\\xADstru\\xADmen\\xADta\\xADtion, etc.\"), mdx(\"p\", null, \"Be\\xADfore we fin\\xADish, there is one im\\xADpor\\xADtant point that we can cover here: defin\\xADing cus\\xADtom met\\xADrics.\\nBe\\xADcause the mod\\xADule gives you ac\\xADcess to its Mi\\xADcrom\\xADe\\xADter reg\\xADistry, you can add your cus\\xADtom met\\xADrics there.\"), mdx(\"p\", null, \"Get\\xADting the de\\xADfault reg\\xADistry is straight\\xADfor\\xADward:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"MeterRegistry registry = BackendRegistries.getDefaultNow();\\n\")), mdx(\"p\", null, \"Then you have plain ac\\xADcess to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://micrometer.io/docs/concepts\"\n  }), \"Mi\\xADcrom\\xADe\\xADter API\"), \".\"), mdx(\"p\", null, \"For in\\xADstance, here is how you can track the ex\\xADe\\xADcu\\xADtion time of a piece of code that is reg\\xADu\\xADlarly called:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"MeterRegistry registry = BackendRegistries.getDefaultNow();\\nTimer timer = Timer\\n  .builder(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my.timer\\\"\"), \")\\n  .description(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Time tracker for my extremely sophisticated algorithm\\\"\"), \")\\n  .register(registry);\\n\\nvertx.setPeriodic(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\"), \", l -> {\\n  timer.record(() -> myExtremelySophisticatedAlgorithm());\\n});\\n\")), mdx(\"p\", null, \"Since it is using the same reg\\xADistry, there is no extra back\\xADend con\\xADfig\\xADu\\xADra\\xADtion to do.\"), mdx(\"h2\", {\n    \"id\": \"whats-next\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#whats-next\"\n  })), \"What\\u2019s next?\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-micrometer-metrics\"), \" mod\\xADule will con\\xADtinue to be im\\xADproved, with al\\xADready two planned en\\xADhance\\xADments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/15\"\n  }), \"Adding more back\\xADends\"), \", like Graphite.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\"\n  }), \"Allow to con\\xADfig\\xADure sev\\xADeral back\\xADends\"), \", and not only one at the same time.\")), mdx(\"p\", null, \"Would you miss any fea\\xADture, please \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-micrometer-metrics/issues\"\n  }), \"ask on GitHub\"), \". Con\\xADtri\\xADbu\\xADtions and bug fixes are also wel\\xADcome!\"), mdx(\"p\", null, \"Now is time to enter the Met\\xADrics.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x has al­ready been pro­vid­ing met­rics for some time, through the <a href=\"/docs/vertx-dropwizard-metrics/java/\">vertx-​dropwizard-metrics</a> and <a href=\"/docs/vertx-hawkular-metrics/java/\">vertx-​hawkular-metrics</a> mod­ules. Both of them im­ple­ment a ser­vice provider in­ter­face (SPI) to col­lect the Vert.x met­rics and make them avail­able to their re­spec­tive back­ends.</p><p>A new mod­ule, <a href=\"/docs/vertx-micrometer-metrics/java/\">vertx-​micrometer-metrics</a>, is now added to the fam­ily. It im­ple­ments the same SPI, which means that it is able to pro­vide the same met­rics.\n<a href=\"http://micrometer.io/\"><em>Mi­crom­e­ter.io</em></a> is a pretty new met­rics li­brary, quite com­pa­ra­ble to <em>drop­wiz­ard met­rics</em> in that it col­lects met­rics in a local, in-​memory reg­istry and is able to store them in var­i­ous back­ends such as <em>Graphite</em> or <em>In­fluxDB</em>. It has sev­eral ad­van­tages as we will see below.</p><h2 id=\"tell-me-more-about-micrometer\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#tell-me-more-about-micrometer\"></a>Tell me more about Micrometer</h2><p><a href=\"http://micrometer.io/\"><em>Mi­crom­e­ter.io</em></a> de­scribes it­self as a a vendor-​neutral ap­pli­ca­tion met­rics fa­cade.\nIt pro­vides a well de­signed API, in Java, to de­fine <em>gauges</em>, <em>coun­ters</em>, <em>timers</em> and <em>dis­tri­b­u­tion sum­maries</em>.</p><p>Among the avail­able back­ends, Mi­crom­e­ter na­tively sup­ports <em>Graphite</em>, <em>In­fluxDB</em>, <em>JMX</em>, <em>Prometheus</em> and <a href=\"http://micrometer.io/docs\">sev­eral oth­ers</a>. Prometheus is very pop­u­lar in the Ku­ber­netes and mi­croser­vices ecosys­tems, so its sup­port by Mi­crom­e­ter was a strong mo­ti­va­tion for im­ple­ment­ing it in Vert.x.</p><p>For the the mo­ment, our im­ple­men­ta­tion in Vert.x sup­ports <em>Prometheus</em>, <em>In­fluxDB</em> and <em>JMX</em>. More should quickly come in the near fu­ture.</p><h3 id=\"dimensionality\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#dimensionality\"></a>Dimensionality</h3><p>An­other in­ter­est­ing as­pect in Mi­crom­e­ter is that it han­dles met­rics <em>di­men­sion­al­ity</em>: met­rics can be as­so­ci­ated with a set of key/value pairs (some­times ref­ered as <em>tags</em>, some­times as <em>la­bels</em>). Every value brings a new di­men­sion to the met­ric, so that in Prometheus or any other back­end that sup­ports di­men­sion­al­ity, we can query for dat­a­points of one or sev­eral di­men­sions, or query for dat­a­points ag­gre­gated over sev­eral di­men­sions.</p><p>  <em>Ex­am­ple: our met­ric <code>vertx_http_server_connections</code> ac­cepts la­bels <code>local</code> and <code>remote</code>, that are used to store ad­dresses on HTTP con­nec­tions</em></p><div class=\"alert info\"><p>Prometheus is used in the fol­low­ing ex­am­ples, but equiv­a­lent queries can be per­formed with <em>In­fluxDB</em>.</p></div><p>In Prometheus, the query <code>vertx_http_server_connections</code> will re­turn as many time­series as there are com­bi­na­tions of <code>local</code> and <code>remote</code> val­ues. Ex­am­ple:</p><pre><code class=\"hljs language-basic\">vertx_http_server_connections{local=<span class=\"hljs-string\">&quot;0.0.0.0:8080&quot;</span>,<span class=\"hljs-comment\">remote=&quot;1.1.1.1&quot;}</span>\nvertx_http_server_connections{local=<span class=\"hljs-string\">&quot;0.0.0.0:8080&quot;</span>,<span class=\"hljs-comment\">remote=&quot;2.2.2.2&quot;}</span>\nvertx_http_server_connections{local=<span class=\"hljs-string\">&quot;0.0.0.0:8080&quot;</span>,<span class=\"hljs-comment\">remote=&quot;3.3.3.3&quot;}</span>\n</code></pre><p>To query on a sin­gle di­men­sion, we must pro­vide the la­bels:</p><p><code>vertx_http_server_connections{local=&quot;0.0.0.0:8080&quot;,remote=&quot;1.1.1.1&quot;}</code>. It will re­turn a sin­gle time­series.</p><p>To get an ag­gre­gate, Prometheus (PromQL) pro­vides sev­eral <a href=\"https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators\">ag­gre­ga­tion op­er­a­tors</a>:</p><p><code>sum(vertx_http_server_connections)</code> will re­turn the sum across all di­men­sions.</p><h2 id=\"so-what-are-the-vertx-metrics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#so-what-are-the-vertx-metrics\"></a>So what are the Vert.x metrics?</h2><p>Peo­ple al­ready fa­mil­iar with the ex­ist­ing met­rics mod­ules (<em>drop­wiz­ard</em> or <em>hawku­lar</em>) will not be too dis­ori­ented. They are roughly the same. The main dif­fer­ence is where pre­vi­ously, some met­ric names could have a vari­able part within - such as <code>vertx.eventbus.handlers.myaddress</code> - here we take ad­van­tage of di­men­sion­al­ity and we will have <code>vertx_eventbus_handlers{address=&quot;myaddress&quot;}</code>.</p><p>Some other met­rics are no longer use­ful, for in­stance the drop­wiz­ard’s <code>vertx.eventbus.messages.pending</code>, <code>vertx.eventbus.messages.pending-local</code> and <code>vertx.eventbus.messages.pending-remote</code> are now just <code>vertx_eventbus_pending{side=local}</code> and <code>vertx_eventbus_pending{side=remote}</code> in mi­crom­e­ter. The sum of them can eas­ily be com­puted at query time.</p><p>The met­rics pro­vided by Vert.x are dis­patched into eight big fam­i­lies:</p><ul><li><strong>Net client</strong>: dis­tri­b­u­tion sum­maries of bytes sent and re­ceived, num­ber of con­nec­tions, etc.</li><li><strong>Net server</strong>: dis­tri­b­u­tion sum­maries of bytes sent and re­ceived, num­ber of con­nec­tions, etc.</li><li><strong>HTTP client</strong>: counter of re­quests, re­sponse times, etc.</li><li><strong>HTTP server</strong>: counter of re­quests, pro­cess­ing times, etc.</li><li><strong>Event bus</strong>: counter of han­dlers, mes­sages sent and re­ceived, etc.</li><li><strong>Pool</strong>: for worker pools and some data­source pools, queue size and wait­ing time, pro­cess­ing time, etc.</li><li><strong>Ver­ti­cles</strong>: num­ber of ver­ti­cles de­ployed.</li></ul><p>The full list of col­lected met­rics is <a href=\"/docs/vertx-micrometer-metrics/java/#_vert_x_core_tools_metrics\">avail­able here</a>.</p><h2 id=\"getting-started\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#getting-started\"></a>Getting started</h2><p>This sec­tion will guide you through a quick setup to run a Vert.x ap­pli­ca­tion with Mi­crom­e­ter. The code ex­am­ples used here are taken from the <code>micrometer-metrics-example</code> in <code>vertx-examples</code> repos­i­tory, in Java, using <em>maven</em>. But the same could be done with other Vert.x sup­ported lan­guages, as well as <em>gra­dle</em> in­stead of <em>maven</em>.</p><h3 id=\"maven-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#maven-configuration\"></a>Maven configuration</h3><p>The con­fig­u­ra­tion and the maven im­ports will vary ac­cord­ing to the back­end stor­age that will be used. For maven, the com­mon part is al­ways:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-micrometer-metrics<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><ul><li>Then, to re­port to In­fluxDB:</li></ul><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-influx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><ul><li>Or Prometheus:</li></ul><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>Re­mark that, since Prometheus pulls met­rics from their source, they must be ex­posed on an HTTP end­point. That’s why <code>vertx-web</code> is im­ported here. It is not <em>ab­solutely</em> nec­es­sary (it’s pos­si­ble to get the met­rics reg­istry con­tent and ex­pose it in any other way) but it’s prob­a­bly the eas­i­est way to do.</p><ul><li>Or JMX:</li></ul><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-jmx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><div class=\"alert info\"><p>At the mo­ment, it is not pos­si­ble to re­port met­rics to sev­eral back­ends at the same time. <a href=\"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\">It might be soon im­ple­mented</a>.</p></div><h3 id=\"setting-up-vertx-options\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#setting-up-vertx-options\"></a>Setting up Vert.x options</h3><p>A <code>MicrometerMetricsOptions</code> ob­ject must be cre­ated and passed to <code>VertxOptions</code>, with one back­end con­fig­ured (though hav­ing no back­end is pos­si­ble: you would get met­rics sent to a de­fault Mi­crom­e­ter reg­istry, but with­out any per­sis­tent stor­age).</p><ul><li>In­fluxDB ex­am­ple:</li></ul><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Default InfluxDB options will push metrics to localhost:8086, db &quot;default&quot;</span>\nMicrometerMetricsOptions options = <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n  .setInfluxDbOptions(<span class=\"hljs-keyword\">new</span> VertxInfluxDbOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n  .setEnabled(<span class=\"hljs-keyword\">true</span>);\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(options));\n<span class=\"hljs-comment\">// Then deploy verticles with this vertx instance</span>\n</code></pre><ul><li>Prometheus ex­am­ple:</li></ul><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Deploy with embedded server: prometheus metrics will be automatically exposed,</span>\n<span class=\"hljs-comment\">// independently from any other HTTP server defined</span>\nMicrometerMetricsOptions options = <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n  .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions()\n    .setStartEmbeddedServer(<span class=\"hljs-keyword\">true</span>)\n    .setEmbeddedServerOptions(<span class=\"hljs-keyword\">new</span> HttpServerOptions().setPort(<span class=\"hljs-number\">8081</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>))\n  .setEnabled(<span class=\"hljs-keyword\">true</span>);\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(options));\n<span class=\"hljs-comment\">// Then deploy verticles with this vertx instance</span>\n</code></pre><ul><li>Or Prometheus with the <code>/metrics</code> end­point bound to an ex­ist­ing HTTP server:</li></ul><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Deploy without embedded server: we need to &quot;manually&quot; expose the prometheus metrics</span>\nMicrometerMetricsOptions options = <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n  .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n  .setEnabled(<span class=\"hljs-keyword\">true</span>);\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(options));\n\nRouter router = Router.router(vertx);\nPrometheusMeterRegistry registry = (PrometheusMeterRegistry) BackendRegistries.getDefaultNow();\n<span class=\"hljs-comment\">// Setup a route for metrics</span>\nrouter.route(<span class=\"hljs-string\">&quot;/metrics&quot;</span>).handler(ctx -&gt; {\n  String response = registry.scrape();\n  ctx.response().end(response);\n});\nvertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n</code></pre><ul><li>JMX ex­am­ple:</li></ul><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Default JMX options will publish MBeans under domain &quot;metrics&quot;</span>\nMicrometerMetricsOptions options = <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n  .setJmxMetricsOptions(<span class=\"hljs-keyword\">new</span> VertxJmxMetricsOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n  .setEnabled(<span class=\"hljs-keyword\">true</span>);\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(options));\n<span class=\"hljs-comment\">// Then deploy verticles with this vertx instance</span>\n</code></pre><h3 id=\"setup-the-backend-server\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#setup-the-backend-server\"></a>Setup the backend server</h3><ul><li><a href=\"https://www.influxdata.com/\">In­fluxDB</a>, by de­fault, is ex­pected to run on <code>localhost:8086</code> with­out au­then­ti­ca­tion, data­base “de­fault”. It is con­fig­urable in <code>VertxInfluxDbOptions</code>.\nIf you don’t have a run­ning in­stance of In­fluxDB, the short­est way to start is cer­tainly with docker, just run:</li></ul><pre><code class=\"hljs language-bash\">docker run -p 8086:8086 influxdb\n</code></pre><ul><li><a href=\"https://prometheus.io/docs/prometheus/latest/getting_started/\">Prometheus</a> needs some con­fig­u­ra­tion since it pulls met­rics from the sources. Once it is in­stalled, con­fig­ure the scrape end­points in <code>prometheus.yml</code>:</li></ul><pre><code class=\"hljs language-yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">&#x27;vertx-8081&#x27;</span>\n  <span class=\"hljs-attr\">static_configs:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">targets:</span> [<span class=\"hljs-string\">&#x27;localhost:8081&#x27;</span>]\n</code></pre><p>or, when using <code>/metrics</code> end­point bound to an ex­ist­ing HTTP server:</p><pre><code class=\"hljs language-yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">&#x27;vertx-8080&#x27;</span>\n  <span class=\"hljs-attr\">static_configs:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">targets:</span> [<span class=\"hljs-string\">&#x27;localhost:8080&#x27;</span>]\n</code></pre><ul><li>For JMX there is noth­ing spe­cial to con­fig­ure.</li></ul><h3 id=\"collecting-vertx-metrics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#collecting-vertx-metrics\"></a>Collecting Vert.x metrics</h3><p>From now on, all Vert.x met­rics will be col­lected and sent to the con­fig­ured back­end. In our Vert.x ex­am­ple, we setup an HTTP server met­rics:</p><pre><code class=\"hljs language-java\">Router router = Router.router(vertx);\nrouter.get(<span class=\"hljs-string\">&quot;/&quot;</span>).handler(ctx -&gt; {\n  ctx.response().end(<span class=\"hljs-string\">&quot;Hello Micrometer from HTTP!&quot;</span>);\n});\nvertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n</code></pre><p> And some event bus ping-​pong:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Producer side</span>\nvertx.setPeriodic(<span class=\"hljs-number\">1000</span>, x -&gt; {\n  vertx.eventBus().send(<span class=\"hljs-string\">&quot;greeting&quot;</span>, <span class=\"hljs-string\">&quot;Hello Micrometer from event bus!&quot;</span>);\n});\n</code></pre><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Consumer side</span>\nvertx.eventBus().&lt;String&gt;consumer(<span class=\"hljs-string\">&quot;greeting&quot;</span>, message -&gt; {\n  String greeting = message.body();\n  System.out.println(<span class=\"hljs-string\">&quot;Received: &quot;</span> + greeting);\n  message.reply(<span class=\"hljs-string\">&quot;Hello back!&quot;</span>);\n});\n</code></pre><p>To trig­ger some ac­tiv­ity on the HTTP server, we can write a small bash script:</p><pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">do</span> curl http://localhost:8080/\n    sleep .8\n<span class=\"hljs-keyword\">done</span>\n</code></pre><h3 id=\"viewing-the-results\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#viewing-the-results\"></a>Viewing the results</h3><p><a href=\"https://grafana.com/\">Grafana</a> can be used to dis­play the In­fluxDB and Prometheus met­rics. The <code>vertx-examples</code> repos­i­tory con­tains two dash­boards for that: <a href=\"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-InfluxDB.json\">for In­fluxDB</a> and <a href=\"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-Prometheus.json\">for Prometheus</a>.</p><h5 id=\"http-server-metrics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#http-server-metrics\"></a>HTTP server metrics</h5><p><img src=\"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/http-server-metrics.png\" alt=\"HTTP server metrics\"/></p><h5 id=\"event-bus-metrics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#event-bus-metrics\"></a>Event bus metrics</h5><p><img src=\"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/eventbus-metrics.png\" alt=\"Event bus metrics\"/></p><h2 id=\"going-further\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#going-further\"></a>Going further</h2><p>We’ve seen the basic setup. There is a good bunch of op­tions avail­able, de­tailed <a href=\"/docs/vertx-micrometer-metrics/java/\">in the doc­u­men­ta­tion</a>: how to dis­able some met­rics do­mains, how to fil­ter or re­arrange la­bels, how to ex­port met­rics snap­shots to Json ob­jects, how to add JVM or proces­sor in­stru­men­ta­tion, etc.</p><p>Be­fore we fin­ish, there is one im­por­tant point that we can cover here: defin­ing cus­tom met­rics.\nBe­cause the mod­ule gives you ac­cess to its Mi­crom­e­ter reg­istry, you can add your cus­tom met­rics there.</p><p>Get­ting the de­fault reg­istry is straight­for­ward:</p><pre><code class=\"hljs language-java\">MeterRegistry registry = BackendRegistries.getDefaultNow();\n</code></pre><p>Then you have plain ac­cess to the <a href=\"https://micrometer.io/docs/concepts\">Mi­crom­e­ter API</a>.</p><p>For in­stance, here is how you can track the ex­e­cu­tion time of a piece of code that is reg­u­larly called:</p><pre><code class=\"hljs language-java\">MeterRegistry registry = BackendRegistries.getDefaultNow();\nTimer timer = Timer\n  .builder(<span class=\"hljs-string\">&quot;my.timer&quot;</span>)\n  .description(<span class=\"hljs-string\">&quot;Time tracker for my extremely sophisticated algorithm&quot;</span>)\n  .register(registry);\n\nvertx.setPeriodic(<span class=\"hljs-number\">1000</span>, l -&gt; {\n  timer.record(() -&gt; myExtremelySophisticatedAlgorithm());\n});\n</code></pre><p>Since it is using the same reg­istry, there is no extra back­end con­fig­u­ra­tion to do.</p><h2 id=\"whats-next\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#whats-next\"></a>What’s next?</h2><p>The <code>vertx-micrometer-metrics</code> mod­ule will con­tinue to be im­proved, with al­ready two planned en­hance­ments:</p><ul><li><a href=\"https://github.com/vert-x3/vertx-micrometer-metrics/issues/15\">Adding more back­ends</a>, like Graphite.</li><li><a href=\"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\">Allow to con­fig­ure sev­eral back­ends</a>, and not only one at the same time.</li></ul><p>Would you miss any fea­ture, please <a href=\"https://github.com/vert-x3/vertx-micrometer-metrics/issues\">ask on GitHub</a>. Con­tri­bu­tions and bug fixes are also wel­come!</p><p>Now is time to enter the Met­rics.</p>","scope":{}}},"prevPost":{"meta":{"title":"New community channels","category":"news","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"In order to better support the community, we (the core team and module maintainers) now also provide help on Stack Overflow and Gitter."},"date":"2018-04-13","slug":"new-community-channels"},"nextPost":{"meta":{"title":"Google Summer of Code 2018","category":"news","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"It's this time of year again! Google Summer of Code 2018 submission period has just started!"},"date":"2018-03-13","slug":"google-summer-of-code-2018"},"relatedPosts":[{"meta":{"title":"Eclipse Vert.x meets GraphQL","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"In this blog post, we will look at an example application written in Vert.x that uses the new GraphQL API of Gentics Mesh."},"date":"2017-11-14","slug":"eclipse-vert-x-meets-graphql"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"}]},"__N_SSG":true}