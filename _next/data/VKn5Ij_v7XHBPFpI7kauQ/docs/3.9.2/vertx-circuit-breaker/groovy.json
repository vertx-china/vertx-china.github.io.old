{"pageProps":{"slug":"3.9.2/vertx-circuit-breaker/groovy","title":"Vert.x Circuit Breaker","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_vert_x_circuit_breaker\">Vert.x Circuit Breaker</a></li>\n<li><a href=\"#_using_the_vert_x_circuit_breaker\">Using the vert.x circuit breaker</a></li>\n<li><a href=\"#_using_the_circuit_breaker\">Using the circuit breaker</a></li>\n<li><a href=\"#_retries\">Retries</a></li>\n<li><a href=\"#_callbacks\">Callbacks</a></li>\n<li><a href=\"#_event_bus_notification\">Event bus notification</a></li>\n<li><a href=\"#_the_half_open_state\">The half-open state</a></li>\n<li><a href=\"#_reported_exceptions\">Reported exceptions</a></li>\n<li><a href=\"#_pushing_circuit_breaker_metrics_to_the_hystrix_dashboard\">Pushing circuit breaker metrics to the Hystrix Dashboard</a></li>\n</ul>\n</div>","contents":"\n<div class=\"sect1\">\n<h2 id=\"_vert_x_circuit_breaker\"><a class=\"anchor\" href=\"#_vert_x_circuit_breaker\"></a>Vert.x Circuit Breaker</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Circuit Breaker is an implementation of the Circuit Breaker <em>pattern</em> for Vert.x. It keeps track of the\nnumber of failures and <em>opens the circuit</em> when a threshold is reached. Optionally, a fallback is executed.</p>\n</div>\n<div class=\"paragraph\">\n<p>Supported failures are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>failures reported by your code in a <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code></p>\n</li>\n<li>\n<p>exception thrown by your code</p>\n</li>\n<li>\n<p>uncompleted futures (timeout)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Operations guarded by a circuit breaker are intended to be non-blocking and asynchronous in order to benefit from\nthe Vert.x execution model.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_vert_x_circuit_breaker\"><a class=\"anchor\" href=\"#_using_the_vert_x_circuit_breaker\"></a>Using the vert.x circuit breaker</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Vert.x Circuit Breaker, add the following dependency to the <em>dependencies</em> section of your build\ndescriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-circuit-breaker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-circuit-breaker:3.9.2'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_circuit_breaker\"><a class=\"anchor\" href=\"#_using_the_circuit_breaker\"></a>Using the circuit breaker</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the circuit breaker you need to:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Create a circuit breaker, with the configuration you want (timeout, number of failure before opening the circuit)</p>\n</li>\n<li>\n<p>Execute some code using the breaker</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p><strong>Important</strong>: Don&#8217;t recreate a circuit breaker on every call. A circuit breaker is a staful entity. It is recommended\nto store the circuit breaker instance in a field.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> breaker = CircuitBreaker.create(<span class=\"hljs-string\">\"my-circuit-breaker\"</span>, vertx, [\n<span class=\"hljs-symbol\">  maxFailures:</span><span class=\"hljs-number\">5</span>,\n<span class=\"hljs-symbol\">  timeout:</span><span class=\"hljs-number\">2000</span>,\n<span class=\"hljs-symbol\">  fallbackOnFailure:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-symbol\">  resetTimeout:</span><span class=\"hljs-number\">10000</span>\n])\n\n<span class=\"hljs-comment\">// ---</span>\n<span class=\"hljs-comment\">// Store the circuit breaker in a field and access it as follows</span>\n<span class=\"hljs-comment\">// ---</span>\n\nbreaker.execute({ future -&gt;\n  <span class=\"hljs-comment\">// some code executing with the breaker</span>\n  <span class=\"hljs-comment\">// the code reports failures or success on the given future.</span>\n  <span class=\"hljs-comment\">// if this future is marked as failed, the breaker increased the</span>\n  <span class=\"hljs-comment\">// number of failures</span>\n}).setHandler({ ar -&gt;\n  <span class=\"hljs-comment\">// Get the operation result.</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The executed block receives a <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code> object as parameter, to denote the\nsuccess or failure of the operation as well as the result. For example in the following example, the result is the\noutput of a REST endpoint invocation:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> breaker = CircuitBreaker.create(<span class=\"hljs-string\">\"my-circuit-breaker\"</span>, vertx, [\n<span class=\"hljs-symbol\">  maxFailures:</span><span class=\"hljs-number\">5</span>,\n<span class=\"hljs-symbol\">  timeout:</span><span class=\"hljs-number\">2000</span>\n])\n\n<span class=\"hljs-comment\">// ---</span>\n<span class=\"hljs-comment\">// Store the circuit breaker in a field and access it as follows</span>\n<span class=\"hljs-comment\">// ---</span>\n\nbreaker.execute({ future -&gt;\n  vertx.createHttpClient().getNow(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-string\">\"/\"</span>, { response -&gt;\n    <span class=\"hljs-keyword\">if</span> (response.statusCode() != <span class=\"hljs-number\">200</span>) {\n      future.fail(<span class=\"hljs-string\">\"HTTP error\"</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n      response.exceptionHandler(future.&amp;fail).bodyHandler({ buffer -&gt;\n        future.complete(buffer.toString())\n      })\n    }\n  })\n}).setHandler({ ar -&gt;\n  <span class=\"hljs-comment\">// Do something with the result</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The result of the operation is provided using the:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>returned <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code> when calling <code>execute</code> methods</p>\n</li>\n<li>\n<p>provided <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code> when calling the <code>executeAndReport</code> methods</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Optionally, you can provide a fallback which is executed when the circuit is open:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> breaker = CircuitBreaker.create(<span class=\"hljs-string\">\"my-circuit-breaker\"</span>, vertx, [\n<span class=\"hljs-symbol\">  maxFailures:</span><span class=\"hljs-number\">5</span>,\n<span class=\"hljs-symbol\">  timeout:</span><span class=\"hljs-number\">2000</span>\n])\n\n<span class=\"hljs-comment\">// ---</span>\n<span class=\"hljs-comment\">// Store the circuit breaker in a field and access it as follows</span>\n<span class=\"hljs-comment\">// ---</span>\n\nbreaker.executeWithFallback({ future -&gt;\n  vertx.createHttpClient().getNow(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-string\">\"/\"</span>, { response -&gt;\n    <span class=\"hljs-keyword\">if</span> (response.statusCode() != <span class=\"hljs-number\">200</span>) {\n      future.fail(<span class=\"hljs-string\">\"HTTP error\"</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n      response.exceptionHandler(future.&amp;fail).bodyHandler({ buffer -&gt;\n        future.complete(buffer.toString())\n      })\n    }\n  })\n}, { v -&gt;\n  <span class=\"hljs-comment\">// Executed when the circuit is opened</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello\"</span>\n}).setHandler({ ar -&gt;\n  <span class=\"hljs-comment\">// Do something with the result</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The fallback is called whenever the circuit is open, or if the\n<code><a href=\"../../apidocs/io/vertx/circuitbreaker/CircuitBreakerOptions.html#isFallbackOnFailure--\">isFallbackOnFailure</a></code> is enabled. When a fallback is\nset, the result is using the output of the fallback function. The fallback function takes as parameter a\n<code><a href=\"../../apidocs/java/lang/Throwable.html\">Throwable</a></code> object and returns an object of the expected type.</p>\n</div>\n<div class=\"paragraph\">\n<p>The fallback can also be set on the <code><a href=\"../../apidocs/io/vertx/circuitbreaker/CircuitBreaker.html\">CircuitBreaker</a></code> object directly:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> breaker = CircuitBreaker.create(<span class=\"hljs-string\">\"my-circuit-breaker\"</span>, vertx, [\n<span class=\"hljs-symbol\">  maxFailures:</span><span class=\"hljs-number\">5</span>,\n<span class=\"hljs-symbol\">  timeout:</span><span class=\"hljs-number\">2000</span>\n]).fallback({ v -&gt;\n  <span class=\"hljs-comment\">// Executed when the circuit is opened.</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hello\"</span>\n})\n\nbreaker.execute({ future -&gt;\n  vertx.createHttpClient().getNow(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-string\">\"/\"</span>, { response -&gt;\n    <span class=\"hljs-keyword\">if</span> (response.statusCode() != <span class=\"hljs-number\">200</span>) {\n      future.fail(<span class=\"hljs-string\">\"HTTP error\"</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n      response.exceptionHandler(future.&amp;fail).bodyHandler({ buffer -&gt;\n        future.complete(buffer.toString())\n      })\n    }\n  })\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_retries\"><a class=\"anchor\" href=\"#_retries\"></a>Retries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can also specify how often the circuit breaker should try your code before failing with\n<code><a href=\"../../apidocs/io/vertx/circuitbreaker/CircuitBreakerOptions.html#setMaxRetries-int-\">setMaxRetries</a></code>.\nIf you set this to something higher than 0 your code gets executed several times before finally failing\nin the last execution. If the code succeeded in one of the retries your handler gets notified and any\nretries left are skipped. Retries are only supported when the circuit is closed.</p>\n</div>\n<div class=\"paragraph\">\n<p>Notice that if you set <code>maxRetries</code> to 2 for instance, your operation may be called 3 times: the initial attempt\nand 2 retries.</p>\n</div>\n<div class=\"paragraph\">\n<p>By default the timeout between retries is set to 0 which means that retries will be executed one after another without\nany delay. This, however, will result in increased load on the called service and may delay it&#8217;s recovery.\nIn order to mitigate this problem it is recommended to execute retries with delays. <code><a href=\"../../apidocs/io/vertx/circuitbreaker/CircuitBreaker.html#retryPolicy-java.util.function.Function-\">retryPolicy</a></code>\nmethod can be used to specify retry policy. Retry policy is a function which receives retry count as single argument\nand returns timeout in milliseconds before retry is executed and allows to implement a more complex policy, e.g.\nexponential backoff with jitter. Below is an example of retry timeout which grows linearly with each retry count:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> breaker = CircuitBreaker.create(<span class=\"hljs-string\">\"my-circuit-breaker\"</span>, vertx, [\n<span class=\"hljs-symbol\">  maxFailures:</span><span class=\"hljs-number\">5</span>,\n<span class=\"hljs-symbol\">  maxRetries:</span><span class=\"hljs-number\">5</span>,\n<span class=\"hljs-symbol\">  timeout:</span><span class=\"hljs-number\">2000</span>\n]).openHandler({ v -&gt;\n  println(<span class=\"hljs-string\">\"Circuit opened\"</span>)\n}).closeHandler({ v -&gt;\n  println(<span class=\"hljs-string\">\"Circuit closed\"</span>)\n}).retryPolicy({ retryCount -&gt;\n  retryCount * <span class=\"hljs-number\">100</span>L\n})\n\nbreaker.execute({ future -&gt;\n  vertx.createHttpClient().getNow(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-string\">\"/\"</span>, { response -&gt;\n    <span class=\"hljs-keyword\">if</span> (response.statusCode() != <span class=\"hljs-number\">200</span>) {\n      future.fail(<span class=\"hljs-string\">\"HTTP error\"</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// Do something with the response</span>\n      future.complete()\n    }\n  })\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_callbacks\"><a class=\"anchor\" href=\"#_callbacks\"></a>Callbacks</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can also configures callbacks invoked when the circuit is opened or closed:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> breaker = CircuitBreaker.create(<span class=\"hljs-string\">\"my-circuit-breaker\"</span>, vertx, [\n<span class=\"hljs-symbol\">  maxFailures:</span><span class=\"hljs-number\">5</span>,\n<span class=\"hljs-symbol\">  timeout:</span><span class=\"hljs-number\">2000</span>\n]).openHandler({ v -&gt;\n  println(<span class=\"hljs-string\">\"Circuit opened\"</span>)\n}).closeHandler({ v -&gt;\n  println(<span class=\"hljs-string\">\"Circuit closed\"</span>)\n})\n\nbreaker.execute({ future -&gt;\n  vertx.createHttpClient().getNow(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-string\">\"/\"</span>, { response -&gt;\n    <span class=\"hljs-keyword\">if</span> (response.statusCode() != <span class=\"hljs-number\">200</span>) {\n      future.fail(<span class=\"hljs-string\">\"HTTP error\"</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// Do something with the response</span>\n      future.complete()\n    }\n  })\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also be notified when the circuit breaker decides to attempt to reset (half-open state). You can register\nsuch a callback with <code><a href=\"../../apidocs/io/vertx/circuitbreaker/CircuitBreaker.html#halfOpenHandler-io.vertx.core.Handler-\">halfOpenHandler</a></code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_event_bus_notification\"><a class=\"anchor\" href=\"#_event_bus_notification\"></a>Event bus notification</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Every time the circuit state changes, an event is published on the event bus. The address on which the events are\nsent is configurable with\n<code><a href=\"../../apidocs/io/vertx/circuitbreaker/CircuitBreakerOptions.html#setNotificationAddress-java.lang.String-\">setNotificationAddress</a></code>. If <code>null</code> is\npassed to this method, the notifications are disabled. By default, the used address is <code>vertx.circuit-breaker</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Each event contains a Json Object with:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>state</code> : the new circuit breaker state (<code>OPEN</code>, <code>CLOSED</code>, <code>HALF_OPEN</code>)</p>\n</li>\n<li>\n<p><code>name</code> : the name of the circuit breaker</p>\n</li>\n<li>\n<p><code>failures</code> : the number of failures</p>\n</li>\n<li>\n<p><code>node</code> : the identifier of the node (<code>local</code> if Vert.x is not running in cluster mode)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_the_half_open_state\"><a class=\"anchor\" href=\"#_the_half_open_state\"></a>The half-open state</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When the circuit is \"open\", calls to the circuit breaker fail immediately, without any attempt to execute the real\noperation. After a suitable amount of time (configured from\n<code><a href=\"../../apidocs/io/vertx/circuitbreaker/CircuitBreakerOptions.html#setResetTimeout-long-\">setResetTimeout</a></code>, the circuit breaker decides that the\noperation has a chance of succeeding, so it goes into the <code>half-open</code> state. In this state, the next call to the\ncircuit breaker is allowed to execute the dangerous operation. Should the call succeed, the circuit breaker resets\nand returns to the <code>closed</code> state, ready for more routine operation. If this trial call fails, however, the circuit\nbreaker returns to the <code>open</code> state until another timeout elapses.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_reported_exceptions\"><a class=\"anchor\" href=\"#_reported_exceptions\"></a>Reported exceptions</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The fallback receives a:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/circuitbreaker/OpenCircuitException.html\">OpenCircuitException</a></code> when the circuit breaker is opened</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/circuitbreaker/TimeoutException.html\">TimeoutException</a></code> when the operation timed out</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pushing_circuit_breaker_metrics_to_the_hystrix_dashboard\"><a class=\"anchor\" href=\"#_pushing_circuit_breaker_metrics_to_the_hystrix_dashboard\"></a>Pushing circuit breaker metrics to the Hystrix Dashboard</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Netflix Hystrix comes with a dashboard to present the current state of the circuit breakers. The Vert.x circuit\nbreakers can publish their metrics in order to be consumed by this Hystrix Dashboard. The Hystrix dashboard requires\na SSE stream sending the metrics. This stream is provided by the\n<code><a href=\"../../apidocs/io/vertx/circuitbreaker/HystrixMetricHandler.html\">HystrixMetricHandler</a></code> Vert.x Web Handler:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Create the circuit breaker as usual.</span>\n<span class=\"hljs-keyword\">def</span> breaker = CircuitBreaker.create(<span class=\"hljs-string\">\"my-circuit-breaker\"</span>, vertx)\n<span class=\"hljs-keyword\">def</span> breaker2 = CircuitBreaker.create(<span class=\"hljs-string\">\"my-second-circuit-breaker\"</span>, vertx)\n\n<span class=\"hljs-comment\">// Create a Vert.x Web router</span>\n<span class=\"hljs-keyword\">def</span> router = Router.router(vertx)\n<span class=\"hljs-comment\">// Register the metric handler</span>\nrouter.get(<span class=\"hljs-string\">\"/hystrix-metrics\"</span>).handler(HystrixMetricHandler.create(vertx))\n\n<span class=\"hljs-comment\">// Create the HTTP server using the router to dispatch the requests</span>\nvertx.createHttpServer().requestHandler(router).listen(<span class=\"hljs-number\">8080</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the Hystrix Dashboard, configure the stream url like: <code><a href=\"http://localhost:8080/metrics\" class=\"bare\">http://localhost:8080/metrics</a></code>. The dashboard now consumes\nthe metrics from the Vert.x circuit breakers.</p>\n</div>\n<div class=\"paragraph\">\n<p>Notice that the metrics are collected by the Vert.x Web handler using the event bus notifications. If you don&#8217;t use\nthe default notification address, you need to pass it when creating the metrics handler.</p>\n</div>\n</div>\n</div>","version":"3.9.2"},"__N_SSG":true}