{"pageProps":{"slug":"3.9.6/vertx-micrometer-metrics/java","title":"Vert.x Micrometer Metrics","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_features\">Features</a></li>\n<li><a href=\"#_influxdb\">InfluxDB</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_prerequisites\">Prerequisites</a></li>\n<li><a href=\"#_getting_started\">Getting started</a></li>\n<li><a href=\"#_configuration_examples\">Configuration examples</a></li>\n</ul>\n</li>\n<li><a href=\"#_prometheus\">Prometheus</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_prerequisites_2\">Prerequisites</a></li>\n<li><a href=\"#_getting_started_2\">Getting started</a></li>\n<li><a href=\"#_configuration_examples_2\">Configuration examples</a></li>\n</ul>\n</li>\n<li><a href=\"#_jmx\">JMX</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_getting_started_3\">Getting started</a></li>\n<li><a href=\"#_configuration_examples_3\">Configuration examples</a></li>\n</ul>\n</li>\n<li><a href=\"#_other_backends_or_combinations\">Other backends or combinations</a></li>\n<li><a href=\"#_advanced_usage\">Advanced usage</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_averages_and_quantiles_in_prometheus\">Averages and quantiles in Prometheus</a></li>\n<li><a href=\"#_disable_some_metric_domains\">Disable some metric domains</a></li>\n<li><a href=\"#_user_defined_metrics\">User-defined metrics</a></li>\n<li><a href=\"#_reusing_an_existing_registry\">Reusing an existing registry</a></li>\n<li><a href=\"#_jvm_or_other_instrumentations\">JVM or other instrumentations</a></li>\n<li><a href=\"#_labels_and_matchers\">Labels and matchers</a></li>\n<li><a href=\"#_snapshots\">Snapshots</a></li>\n</ul>\n</li>\n<li><a href=\"#_vert_x_core_tools_metrics\">Vert.x core tools metrics</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_net_client\">Net Client</a></li>\n<li><a href=\"#_http_client\">HTTP Client</a></li>\n<li><a href=\"#_net_server\">Net Server</a></li>\n<li><a href=\"#_http_server\">HTTP Server</a></li>\n<li><a href=\"#_datagram_socket\">Datagram socket</a></li>\n<li><a href=\"#_event_bus\">Event Bus</a></li>\n</ul>\n</li>\n<li><a href=\"#_vert_x_pool_metrics\">Vert.x pool metrics</a></li>\n<li><a href=\"#_verticle_metrics\">Verticle metrics</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Micrometer Metrics</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This project is an implementation of the Vert.x Metrics Service Provider Interface (SPI).\nIt uses <a href=\"http://micrometer.io/\">Micrometer</a> for managing metrics and reporting to several backends.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_features\"><a class=\"anchor\" href=\"#_features\"></a>Features</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Vert.x core tools monitoring: TCP/HTTP client and servers, <code><a href=\"../../apidocs/io/vertx/core/datagram/DatagramSocket.html\">DatagramSocket</a></code>\n, <code><a href=\"../../apidocs/io/vertx/core/eventbus/EventBus.html\">EventBus</a></code> and pools</p>\n</li>\n<li>\n<p>User defined metrics through Micrometer</p>\n</li>\n<li>\n<p>Reporting to any backend supported by Micrometer</p>\n</li>\n<li>\n<p>Built-in options for <a href=\"https://www.influxdata.com/\">InfluxDB</a>, <a href=\"https://prometheus.io/\">Prometheus</a> and JMX reporting.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_influxdb\"><a class=\"anchor\" href=\"#_influxdb\"></a>InfluxDB</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_prerequisites\"><a class=\"anchor\" href=\"#_prerequisites\"></a>Prerequisites</h3>\n<div class=\"paragraph\">\n<p>Follow the <a href=\"https://docs.influxdata.com/influxdb/latest/introduction/getting_started/\">instructions to get InfluxDb up and running</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting started</h3>\n<div class=\"paragraph\">\n<p>The modules <em>vertx-micrometer-metrics</em> and <em>micrometer-registry-influx</em> must be present in the classpath.</p>\n</div>\n<div class=\"paragraph\">\n<p>Maven users should add this to their project POM file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-micrometer-metrics<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-influx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${micrometer.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And Gradle users, to their build file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-micrometer-metrics:3.9.6'</span>\ncompile <span class=\"hljs-string\">'io.micrometer:micrometer-registry-influx:${micrometer.version}'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuration_examples\"><a class=\"anchor\" href=\"#_configuration_examples\"></a>Configuration examples</h3>\n<div class=\"paragraph\">\n<p>Vert.x does not enable SPI implementations by default. You must enable metric collection in the Vert.x options.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setInfluxDbOptions(<span class=\"hljs-keyword\">new</span> VertxInfluxDbOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_a_specific_uri_and_database_name\"><a class=\"anchor\" href=\"#_using_a_specific_uri_and_database_name\"></a>Using a specific URI and database name</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setInfluxDbOptions(<span class=\"hljs-keyword\">new</span> VertxInfluxDbOptions().setEnabled(<span class=\"hljs-keyword\">true</span>)\n      .setUri(<span class=\"hljs-string\">\"http://influxdb.example.com:8888\"</span>)\n      .setDb(<span class=\"hljs-string\">\"sales-department\"</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_with_authentication\"><a class=\"anchor\" href=\"#_with_authentication\"></a>With authentication</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setInfluxDbOptions(<span class=\"hljs-keyword\">new</span> VertxInfluxDbOptions().setEnabled(<span class=\"hljs-keyword\">true</span>)\n      .setUserName(<span class=\"hljs-string\">\"username\"</span>)\n      .setPassword(<span class=\"hljs-string\">\"password\"</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_prometheus\"><a class=\"anchor\" href=\"#_prometheus\"></a>Prometheus</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_prerequisites_2\"><a class=\"anchor\" href=\"#_prerequisites_2\"></a>Prerequisites</h3>\n<div class=\"paragraph\">\n<p>Follow the <a href=\"https://prometheus.io/docs/prometheus/latest/getting_started/\">instructions to get Prometheus up and running</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_getting_started_2\"><a class=\"anchor\" href=\"#_getting_started_2\"></a>Getting started</h3>\n<div class=\"paragraph\">\n<p>The modules <em>vertx-micrometer-metrics</em> and <em>micrometer-registry-prometheus</em> must be present in the classpath.\nYou may also probably need <em>vertx-web</em>, to expose the metrics.</p>\n</div>\n<div class=\"paragraph\">\n<p>Maven users should add this to their project POM file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-micrometer-metrics<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${micrometer.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And Gradle users, to their build file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-micrometer-metrics:3.9.6'</span>\ncompile <span class=\"hljs-string\">'io.micrometer:micrometer-registry-prometheus:${micrometer.version}'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuration_examples_2\"><a class=\"anchor\" href=\"#_configuration_examples_2\"></a>Configuration examples</h3>\n<div class=\"paragraph\">\n<p>Vert.x does not enable SPI implementations by default. You must enable metric collection in the Vert.x options</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_an_embedded_http_server_with_custom_endpoint\"><a class=\"anchor\" href=\"#_using_an_embedded_http_server_with_custom_endpoint\"></a>Using an embedded HTTP server with custom endpoint</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>)\n      .setStartEmbeddedServer(<span class=\"hljs-keyword\">true</span>)\n      .setEmbeddedServerOptions(<span class=\"hljs-keyword\">new</span> HttpServerOptions().setPort(<span class=\"hljs-number\">8080</span>))\n      .setEmbeddedServerEndpoint(<span class=\"hljs-string\">\"/metrics/vertx\"</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If the embedded server endpoint is not specified, it defaults to <em>/metrics</em>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_binding_metrics_to_an_existing_vert_x_web_router\"><a class=\"anchor\" href=\"#_binding_metrics_to_an_existing_vert_x_web_router\"></a>Binding metrics to an existing Vert.x Web router</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));\n\n<span class=\"hljs-comment\">// Later on, creating a router</span>\nRouter router = Router.router(vertx);\nrouter.route(<span class=\"hljs-string\">\"/metrics\"</span>).handler(PrometheusScrapingHandler.create());\nvertx.createHttpServer().requestHandler(router).listen(<span class=\"hljs-number\">8080</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_jmx\"><a class=\"anchor\" href=\"#_jmx\"></a>JMX</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_getting_started_3\"><a class=\"anchor\" href=\"#_getting_started_3\"></a>Getting started</h3>\n<div class=\"paragraph\">\n<p>The modules <em>vertx-micrometer-metrics</em> and <em>micrometer-registry-jmx</em> must be present in the classpath.</p>\n</div>\n<div class=\"paragraph\">\n<p>Maven users should add this to their project POM file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-micrometer-metrics<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-jmx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${micrometer.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And Gradle users, to their build file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-micrometer-metrics:3.9.6'</span>\ncompile <span class=\"hljs-string\">'io.micrometer:micrometer-registry-jmx:${micrometer.version}'</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuration_examples_3\"><a class=\"anchor\" href=\"#_configuration_examples_3\"></a>Configuration examples</h3>\n<div class=\"paragraph\">\n<p>Vert.x does not enable SPI implementations by default. You must enable metric collection in the Vert.x options</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setJmxMetricsOptions(<span class=\"hljs-keyword\">new</span> VertxJmxMetricsOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_with_step_and_domain\"><a class=\"anchor\" href=\"#_with_step_and_domain\"></a>With step and domain</h4>\n<div class=\"paragraph\">\n<p>In Micrometer, <code>step</code> refers to the reporting period, in seconds. <code>domain</code> is the JMX domain under which\nMBeans are registered.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setJmxMetricsOptions(<span class=\"hljs-keyword\">new</span> VertxJmxMetricsOptions().setEnabled(<span class=\"hljs-keyword\">true</span>)\n      .setStep(<span class=\"hljs-number\">5</span>)\n      .setDomain(<span class=\"hljs-string\">\"my.metrics.domain\"</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_other_backends_or_combinations\"><a class=\"anchor\" href=\"#_other_backends_or_combinations\"></a>Other backends or combinations</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Even if not all backends supported by Micrometer are implemented in Vert.x options, it is still possible\nto create any Micrometer registry and pass it to Vert.x.</p>\n</div>\n<div class=\"paragraph\">\n<p>The list of available backends includes Graphite, Ganglia, Atlas, <a href=\"http://micrometer.io/docs\">etc</a>.\nIt also enables the <a href=\"http://micrometer.io/docs/concepts#_composite_registries\">Micrometer Composite Registry</a>\nin order to report the same metrics to multiple backends.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this example, metrics are reported both for JMX and Graphite:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">CompositeMeterRegistry myRegistry = <span class=\"hljs-keyword\">new</span> CompositeMeterRegistry();\nmyRegistry.add(<span class=\"hljs-keyword\">new</span> JmxMeterRegistry(s -&gt; <span class=\"hljs-keyword\">null</span>, Clock.SYSTEM));\nmyRegistry.add(<span class=\"hljs-keyword\">new</span> GraphiteMeterRegistry(s -&gt; <span class=\"hljs-keyword\">null</span>, Clock.SYSTEM));\n\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions()\n  .setMetricsOptions(<span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setMicrometerRegistry(myRegistry)\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_advanced_usage\"><a class=\"anchor\" href=\"#_advanced_usage\"></a>Advanced usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Please refer to <code><a href=\"../../apidocs/io/vertx/micrometer/MicrometerMetricsOptions.html\">MicrometerMetricsOptions</a></code> for an exhaustive list of options.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_averages_and_quantiles_in_prometheus\"><a class=\"anchor\" href=\"#_averages_and_quantiles_in_prometheus\"></a>Averages and quantiles in Prometheus</h3>\n<div class=\"paragraph\">\n<p>By default, when using the Prometheus registry, histogram-kind metrics will not contain averages or quantile stats.</p>\n</div>\n<div class=\"paragraph\">\n<p>Averages don&#8217;t come out of the box but they are typically <a href=\"https://prometheus.io/docs/practices/histograms/#count-and-sum-of-observations\">computed at query time</a>,\nwith <code>promql</code>. Example, for HTTP client response time average during the last 5 minutes:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code> rate(vertx_http_client_responseTime_seconds_sum[5m])\n/\n rate(vertx_http_client_responseTime_seconds_count[5m])</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To compute quantiles, there are two options available. The first is to activate quantile stats globally\nand make them usable for Prometheus function <code>histogram_quantile</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>)\n      .setPublishQuantiles(<span class=\"hljs-keyword\">true</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And then, for example the <code>promql</code> query for the HTTP client response time, 99th percentile over the last 5 minutes:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code> histogram_quantile(0.99, sum(rate(vertx_http_client_responseTime_seconds_bucket[5m])) by (le))</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The advantage of this option is that it can be leveraged in <code>promql</code>, aggregable across dimensions.\nThe downside is that it creates a lot of timeseries for stats under the hood.</p>\n</div>\n<div class=\"paragraph\">\n<p>The second option is to create limited stats, non-aggregable across dimensions.\nIt requires to access directly the Micrometer / Prometheus registry:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">PrometheusMeterRegistry registry = (PrometheusMeterRegistry) BackendRegistries.getDefaultNow();\nregistry.config().meterFilter(\n    <span class=\"hljs-keyword\">new</span> MeterFilter() {\n      <span class=\"hljs-meta\">@Override</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DistributionStatisticConfig <span class=\"hljs-title\">configure</span><span class=\"hljs-params\">(Meter.Id id, DistributionStatisticConfig config)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> DistributionStatisticConfig.builder()\n            .percentiles(<span class=\"hljs-number\">0.95</span>, <span class=\"hljs-number\">0.99</span>)\n            .build()\n            .merge(config);\n      }\n    });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>See also, more on histograms and percentiles:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>from <a href=\"https://micrometer.io/docs/concepts#_histograms_and_percentiles\">Micrometer doc</a></p>\n</li>\n<li>\n<p>from <a href=\"https://prometheus.io/docs/prometheus/latest/querying/functions/#histogram_quantile\">Prometheus doc</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Furthermore, you can check some <a href=\"https://github.com/vert-x3/vertx-examples/tree/master/micrometer-metrics-examples\">full working examples</a>.\nThey come along with few instructions to setup with Prometheus and view dashboards in Grafana.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_disable_some_metric_domains\"><a class=\"anchor\" href=\"#_disable_some_metric_domains\"></a>Disable some metric domains</h3>\n<div class=\"paragraph\">\n<p>Restricting the Vert.x modules being monitored can be done using\n<code><a href=\"../../apidocs/io/vertx/micrometer/MicrometerMetricsOptions.html#disabledMetricsCategories\">disabledMetricsCategories</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>For a full list of domains, see <code><a href=\"../../apidocs/io/vertx/micrometer/MetricsDomain.html\">MetricsDomain</a></code></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_user_defined_metrics\"><a class=\"anchor\" href=\"#_user_defined_metrics\"></a>User-defined metrics</h3>\n<div class=\"paragraph\">\n<p>The Micrometer registries are accessible, in order to create new metrics or fetch the existing ones.\nBy default, an unique registry is used and will be shared across the Vert.x instances of the JVM:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MeterRegistry registry = BackendRegistries.getDefaultNow();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It is also possible to have separate registries per Vertx instance, by giving a registry name in metrics options.\nThen it can be retrieved specifically:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setInfluxDbOptions(<span class=\"hljs-keyword\">new</span> VertxInfluxDbOptions().setEnabled(<span class=\"hljs-keyword\">true</span>)) <span class=\"hljs-comment\">// or VertxPrometheusOptions</span>\n    .setRegistryName(<span class=\"hljs-string\">\"my registry\"</span>)\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));\n\n<span class=\"hljs-comment\">// Later on:</span>\nMeterRegistry registry = BackendRegistries.getNow(<span class=\"hljs-string\">\"my registry\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As an example, here is a custom timer that will track the execution time of a piece of code that is regularly called:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MeterRegistry registry = BackendRegistries.getDefaultNow();\nTimer timer = Timer\n  .builder(<span class=\"hljs-string\">\"my.timer\"</span>)\n  .description(<span class=\"hljs-string\">\"a description of what this timer does\"</span>)\n  .register(registry);\n\nvertx.setPeriodic(<span class=\"hljs-number\">1000</span>, l -&gt; {\n  timer.record(() -&gt; {\n    <span class=\"hljs-comment\">// Running here some operation to monitor</span>\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For more examples, documentation about the Micrometer registry and how to create metrics, check\n<a href=\"http://micrometer.io/docs/concepts#_registry\">Micrometer doc</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_reusing_an_existing_registry\"><a class=\"anchor\" href=\"#_reusing_an_existing_registry\"></a>Reusing an existing registry</h3>\n<div class=\"paragraph\">\n<p>It is possible to reuse an existing Micrometer registry (or <code>CollectorRegistry</code> from the Prometheus Java client),\nand inject it into the Vert.x metrics options:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">PrometheusMeterRegistry registry = <span class=\"hljs-keyword\">new</span> PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n\n<span class=\"hljs-comment\">// You could also reuse an existing registry from the Prometheus Java client:</span>\nCollectorRegistry prometheusClientRegistry = <span class=\"hljs-keyword\">new</span> CollectorRegistry();\nregistry = <span class=\"hljs-keyword\">new</span> PrometheusMeterRegistry(PrometheusConfig.DEFAULT, prometheusClientRegistry, Clock.SYSTEM);\n\n<span class=\"hljs-comment\">// It's reused in MicrometerMetricsOptions.</span>\n<span class=\"hljs-comment\">// Prometheus options configured here, such as \"setPublishQuantiles(true)\", will affect the whole registry.</span>\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>)\n      .setPublishQuantiles(<span class=\"hljs-keyword\">true</span>))\n    .setMicrometerRegistry(registry)\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_jvm_or_other_instrumentations\"><a class=\"anchor\" href=\"#_jvm_or_other_instrumentations\"></a>JVM or other instrumentations</h3>\n<div class=\"paragraph\">\n<p>Since plain access to Micrometer registries is provided, it is possible to leverage the Micrometer API.\nFor instance, to instrument the JVM:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MeterRegistry registry = BackendRegistries.getDefaultNow();\n\n<span class=\"hljs-keyword\">new</span> ClassLoaderMetrics().bindTo(registry);\n<span class=\"hljs-keyword\">new</span> JvmMemoryMetrics().bindTo(registry);\n<span class=\"hljs-keyword\">new</span> JvmGcMetrics().bindTo(registry);\n<span class=\"hljs-keyword\">new</span> ProcessorMetrics().bindTo(registry);\n<span class=\"hljs-keyword\">new</span> JvmThreadMetrics().bindTo(registry);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><em>From <a href=\"http://micrometer.io/docs/ref/jvm\">Micrometer documentation</a>.</em></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_labels_and_matchers\"><a class=\"anchor\" href=\"#_labels_and_matchers\"></a>Labels and matchers</h3>\n<div class=\"paragraph\">\n<p>Vert.x Micrometer Metrics defines a set of labels (aka tags or fields) that are used to provide dimensionality\nto a metric. For instance, metrics related to event bus messages have an <em>address</em> label, which allows then to query\ntimeseries for a specific event bus address, or compare timeseries per address, or perform any kind of aggregation\nthat the query API allows.</p>\n</div>\n<div class=\"paragraph\">\n<p>While setting up metrics options, you can specify which labels you want to enable or not:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n    .setLabels(EnumSet.of(Label.REMOTE, Label.LOCAL, Label.HTTP_CODE, Label.HTTP_PATH))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The full list of labels is detailed here: <code><a href=\"../../apidocs/io/vertx/micrometer/Label.html\">Label</a></code>.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nEnabling labels may result in a high cardinality in values, which can cause troubles on the metrics backend and affect performances.\nSo it must be used with care.\nIn general, it is fine to enable labels when the set of possible values is bounded.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>For that reason, labels enabled by default are restricted to the ones with known bounded values.</p>\n</div>\n<div class=\"paragraph\">\n<p>It is possible to interact with labels further than just enabling/disabling. There are two ways for that:</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_matchers\"><a class=\"anchor\" href=\"#_using_matchers\"></a>Using Matchers</h4>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/micrometer/Match.html\">Match</a></code>  objects can be used to filter or rename some label value\nby matching it with either an exact string or a regular expression (the former being more efficient).</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example to restrict HTTP server metrics to those with label <em>local=localhost:8080</em> only:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(\n  <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n    .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n    .addLabelMatch(<span class=\"hljs-keyword\">new</span> Match()\n      <span class=\"hljs-comment\">// Restrict HTTP server metrics to those with label \"local=localhost:8080\" only</span>\n      .setDomain(MetricsDomain.HTTP_SERVER)\n      .setLabel(<span class=\"hljs-string\">\"local\"</span>)\n      .setValue(<span class=\"hljs-string\">\"localhost:8080\"</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>)));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When an <em>alias</em> is specified in the Match, it will be used to rename value instead of filtering.</p>\n</div>\n<div class=\"paragraph\">\n<p>Matchers are especially useful to control labelling through configuration as they are set via\n<code><a href=\"../../apidocs/io/vertx/micrometer/MicrometerMetricsOptions.html\">MicrometerMetricsOptions</a></code>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_micrometers_meterfilter\"><a class=\"anchor\" href=\"#_using_micrometers_meterfilter\"></a>Using Micrometer&#8217;s MeterFilter</h4>\n<div class=\"paragraph\">\n<p>Micrometer&#8217;s <a href=\"http://micrometer.io/docs/concepts#_meter_filters\">MeterFilter API</a> can be accessed directly in order to define rules on labels.\nCompared to Matchers, it offers more features in manipulating the labels, but cannot be defined from configuration.\nSo both have their advantages.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example to replace the actual <code>path</code> label of HTTP requests with a generic form using regex:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MeterRegistry registry = BackendRegistries.getDefaultNow();\nPattern pattern = Pattern.compile(<span class=\"hljs-string\">\"/foo/bar/.*\"</span>);\n\nregistry.config().meterFilter(\n  MeterFilter.replaceTagValues(Label.HTTP_PATH.toString(), actualPath -&gt; {\n    Matcher m = pattern.matcher(actualPath);\n    <span class=\"hljs-keyword\">if</span> (m.matches()) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"/foo/bar/:id\"</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> actualPath;\n  }, <span class=\"hljs-string\">\"\"</span>));</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nMatchers use MeterFilters under the hood.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_snapshots\"><a class=\"anchor\" href=\"#_snapshots\"></a>Snapshots</h3>\n<div class=\"paragraph\">\n<p>A <code><a href=\"../../apidocs/io/vertx/micrometer/MetricsService.html\">MetricsService</a></code> can be created out of a <code><a href=\"../../apidocs/io/vertx/core/metrics/Measured.html\">Measured</a></code> object\nin order to take a snapshot of its related metrics and measurements.\nThe snapshot is returned as a <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>A well known <em>Measured</em> object is simply <code><a href=\"../../apidocs/io/vertx/core/Vertx.html\">Vertx</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MetricsService metricsService = MetricsService.create(vertx);\nJsonObject metrics = metricsService.getMetricsSnapshot();\nSystem.out.println(metrics);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Other components, such as an <code><a href=\"../../apidocs/io/vertx/core/eventbus/EventBus.html\">EventBus</a></code> or a <code><a href=\"../../apidocs/io/vertx/core/http/HttpServer.html\">HttpServer</a></code> are\nmeasurable:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HttpServer server = vertx.createHttpServer();\nMetricsService metricsService = MetricsService.create(server);\nJsonObject metrics = metricsService.getMetricsSnapshot();\nSystem.out.println(metrics);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Finally it is possible to filter the returned metrics from their base names:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MetricsService metricsService = MetricsService.create(vertx);\n<span class=\"hljs-comment\">// Client + server</span>\nJsonObject metrics = metricsService.getMetricsSnapshot(<span class=\"hljs-string\">\"vertx.http\"</span>);\nSystem.out.println(metrics);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_vert_x_core_tools_metrics\"><a class=\"anchor\" href=\"#_vert_x_core_tools_metrics\"></a>Vert.x core tools metrics</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This section lists all the metrics generated by monitoring the Vert.x core tools.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nThe metric backends may have different conventions or rules for naming metrics.\nThe names described below are given with underscore separators, but the actual names may vary\ndepending on the backend used.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_net_client\"><a class=\"anchor\" href=\"#_net_client\"></a>Net Client</h3>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 35%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 35%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Metric name</th>\n<th class=\"tableblock halign-left valign-top\">Labels</th>\n<th class=\"tableblock halign-left valign-top\">Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_net_client_connections</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of connections to the remote host currently opened.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_net_client_bytesReceived</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of bytes received from the remote host.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_net_client_bytesSent</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of bytes sent to the remote host.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_net_client_errors</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>class</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of errors.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_client\"><a class=\"anchor\" href=\"#_http_client\"></a>HTTP Client</h3>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 35%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 35%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Metric name</th>\n<th class=\"tableblock halign-left valign-top\">Labels</th>\n<th class=\"tableblock halign-left valign-top\">Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_connections</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of connections to the remote host currently opened.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_bytesReceived</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of bytes received from the remote host.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_bytesSent</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of bytes sent to the remote host.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_errors</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>class</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of errors.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_requests</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>path</code>, <code>method</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of requests waiting for a response.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_requestCount</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>path</code>, <code>method</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of requests sent.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_responseTime</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>path</code>, <code>method</code>, <code>code</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Timer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Response time.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_responseCount</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>path</code>, <code>method</code>, <code>code</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of received responses.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_wsConnections</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of websockets currently opened.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_net_server\"><a class=\"anchor\" href=\"#_net_server\"></a>Net Server</h3>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 35%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 35%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Metric name</th>\n<th class=\"tableblock halign-left valign-top\">Labels</th>\n<th class=\"tableblock halign-left valign-top\">Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_net_server_connections</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of opened connections to the Net Server.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_net_server_bytesReceived</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of bytes received by the Net Server.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_net_server_bytesSent</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of bytes sent by the Net Server.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_net_server_errors</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>class</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of errors.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_server\"><a class=\"anchor\" href=\"#_http_server\"></a>HTTP Server</h3>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 35%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 35%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Metric name</th>\n<th class=\"tableblock halign-left valign-top\">Labels</th>\n<th class=\"tableblock halign-left valign-top\">Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_server_connections</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of opened connections to the HTTP Server.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_server_bytesReceived</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of bytes received by the HTTP Server.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_server_bytesSent</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of bytes sent by the HTTP Server.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_server_errors</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>class</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of errors.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_server_requests</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>path</code>, <code>method</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of requests being processed.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_server_requestCount</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>path</code>, <code>method</code>, <code>code</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of processed requests.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_server_requestResetCount</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>path</code>, <code>method</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of requests reset.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_server_processingTime</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code>, <code>path</code>, <code>method</code>, <code>code</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Timer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Request processing time.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_http_client_wsConnections</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code>, <code>remote</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of websockets currently opened.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_datagram_socket\"><a class=\"anchor\" href=\"#_datagram_socket\"></a>Datagram socket</h3>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 35%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 35%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Metric name</th>\n<th class=\"tableblock halign-left valign-top\">Labels</th>\n<th class=\"tableblock halign-left valign-top\">Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_datagram_bytesReceived</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>local</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Total number of bytes received on the <code>&lt;host&gt;:&lt;port&gt;</code> listening address.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_datagram_bytesSent</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">(none)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Total number of bytes sent to the remote host.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_datagram_errors</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>class</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Total number of errors.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_event_bus\"><a class=\"anchor\" href=\"#_event_bus\"></a>Event Bus</h3>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 35%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 35%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Metric name</th>\n<th class=\"tableblock halign-left valign-top\">Labels</th>\n<th class=\"tableblock halign-left valign-top\">Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_handlers</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of event bus handlers in use.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_errors</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code>,<code>class</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of errors.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_bytesWritten</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Total number of bytes sent while sending messages to event bus cluster peers.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_bytesRead</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Summary</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Total number of bytes received while reading messages from event bus cluster peers.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_pending</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code>,<code>side</code> (local/remote)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of messages not processed yet. One message published will count for <code>N</code> pending if <code>N</code> handlers\nare registered to the corresponding address.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_published</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code>,<code>side</code> (local/remote)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of messages published (publish / subscribe).</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_discarded</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code>,<code>side</code> (local/remote)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of discarded messages (e.g. still pending messages while handler is unregistered, or overflowing messages).</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_sent</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code>,<code>side</code> (local/remote)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of messages sent (point-to-point).</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_received</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code>,<code>side</code> (local/remote)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of messages received.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_delivered</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code>,<code>side</code> (local/remote)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of messages delivered to handlers.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_replyFailures</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code>,<code>failure</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of message reply failures.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_eventbus_processingTime</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>address</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Timer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Processing time for handlers listening to the <code>address</code>.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_vert_x_pool_metrics\"><a class=\"anchor\" href=\"#_vert_x_pool_metrics\"></a>Vert.x pool metrics</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This section lists all the metrics generated by monitoring Vert.x pools.</p>\n</div>\n<div class=\"paragraph\">\n<p>There are two types currently supported:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>worker</em> (see <code><a href=\"../../apidocs/io/vertx/core/WorkerExecutor.html\">WorkerExecutor</a></code>)</p>\n</li>\n<li>\n<p><em>datasource</em> (created with Vert.x JDBC client)</p>\n</li>\n</ul>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nVert.x creates two worker pools upfront, <em>worker-thread</em> and <em>internal-blocking</em>.\n</td>\n</tr>\n</table>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 35%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 35%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Metric name</th>\n<th class=\"tableblock halign-left valign-top\">Labels</th>\n<th class=\"tableblock halign-left valign-top\">Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_pool_queue_delay</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>pool_type</code>,<code>pool_name</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Timer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Time waiting for a resource (queue time).</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_pool_queue_size</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>pool_type</code>,<code>pool_name</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of elements waiting for a resource.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_pool_usage</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>pool_type</code>,<code>pool_name</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Timer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Time using a resource (i.e. processing time for worker pools).</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_pool_inUse</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>pool_type</code>,<code>pool_name</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of resources used.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_pool_completed</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>pool_type</code>,<code>pool_name</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Counter</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of elements done with the resource (i.e. total number of tasks executed for worker pools).</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_pool_ratio</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>pool_type</code>,<code>pool_name</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Pool usage ratio, only present if maximum pool size could be determined.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_verticle_metrics\"><a class=\"anchor\" href=\"#_verticle_metrics\"></a>Verticle metrics</h2>\n<div class=\"sectionbody\">\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 35%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 35%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Metric name</th>\n<th class=\"tableblock halign-left valign-top\">Labels</th>\n<th class=\"tableblock halign-left valign-top\">Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>vertx_verticle_deployed</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>name</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Gauge</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Number of verticle instances deployed.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>","version":"3.9.6"},"__N_SSG":true}