{"pageProps":{"slug":"3.8.4/vertx-auth-mongo/scala","title":"Mongo Auth Provider implementation","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_mongo_auth_provider_implementation\">Mongo Auth Provider implementation</a></li>\n<li><a href=\"#_vertx_auth_jdbc_and_gdpr\">Vertx Auth JDBC and GDPR</a></li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_authorisation_permission_role_model\">Authorisation - Permission-Role Model</a></li>\n</ul>\n</div>","contents":"\n<div class=\"sect1\">\n<h2 id=\"_mongo_auth_provider_implementation\"><a class=\"anchor\" href=\"#_mongo_auth_provider_implementation\"></a>Mongo Auth Provider implementation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We provide an implementation of <code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/AuthProvider.html\">AuthProvider</a></code> which uses the Vert.x <code><a href=\"../../scaladocs/io/vertx/scala/ext/mongo/MongoClient.html\">MongoClient</a></code>\nto perform authentication and authorisation against a MongoDb.</p>\n</div>\n<div class=\"paragraph\">\n<p>To use this project, add the following\ndependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-mongo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${maven.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-auth-mongo:${maven.version}'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To create an instance you first need an instance of <code><a href=\"../../scaladocs/io/vertx/scala/ext/mongo/MongoClient.html\">MongoClient</a></code>. To learn how to create one\nof those please consult the documentation for the MongoClient.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you&#8217;ve got one of those you can create a <code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html\">MongoAuth</a></code> instance as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> client = <span class=\"hljs-type\">MongoClient</span>.createShared(vertx, mongoClientConfig)\n<span class=\"hljs-keyword\">var</span> authProperties = <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>()\n<span class=\"hljs-keyword\">var</span> authProvider = <span class=\"hljs-type\">MongoAuth</span>.create(client, authProperties)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you&#8217;ve got your instance you can authenticate and authorise with it just like any <code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/AuthProvider.html\">AuthProvider</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The out of the box config assumes the usage of the collection with name \"user\", the username stored and read by field \"username\"\nsome others.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to avoid duplicates of user names your \"user\" collection should have a unique index on \"username\". In order\nto do this you should run the following snippet on your mongo server:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>db.user.createIndex( { username: 1 }, { unique: true } )</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The reason you should add the index is that due to the nature of mongo doing a query first to verify if a username is\nalready taken and then insert a document cannot be run as an atomic action. Using the index the code will try to\ninsert the row and fail if duplicate.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also change all the defaults for the mongo collection and column names using any of the methods:</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setCollectionName()\">setCollectionName</a></code>\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setUsernameField()\">setUsernameField</a></code>\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setPasswordField()\">setPasswordField</a></code>\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setPermissionField()\">setPermissionField</a></code>\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setRoleField()\">setRoleField</a></code>\nif you want to adapt that to your needs.</p>\n</div>\n<div class=\"paragraph\">\n<p>The default implementation assumes that the password is stored in the database as a SHA-512 hash after being\nconcatenated with a salt. It also assumes the salt is stored in the table too. The field, where the salt is\nstored can be set by <code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setSaltField()\">setSaltField</a></code>, the default is \"salt\".\nYou are able to change this behaviour by using <code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/HashStrategy.html#setSaltStyle()\">setSaltStyle</a></code>.\nThe HashStrategy you can retrieve by  <code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#getHashStrategy()\">getHashStrategy</a></code>.\nBy using this, you are able to set:\n<code><a href=\"todo\">NO_SALT</a></code> by which passwords are not crypted and stored\nin cleartext. ( see the warning below! )\n<code><a href=\"todo\">COLUMN</a></code>, which will create a salt per user and store this\ninside the defined column of the user. ( see the warning below! )\n<code><a href=\"todo\">EXTERNAL</a></code>, which will store only the crypted password in the\ndatabase and will use a salt from external, which you will have to set by <code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/HashStrategy.html#setExternalSalt()\">setExternalSalt</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to override this behaviour you can do so by providing an alternative hash strategy and setting it with\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setHashStrategy()\">setHashStrategy</a></code></p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nIt is strongly advised to use the <code><a href=\"todo\">EXTERNAL</a></code> option.\nThe NO_SALT option is existing for development phase only and even the COLUMN option is not recommended, cause\nsalt and password are stored inside the same place!\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nAs of 2018 OWASP recommends the usage of stronger encryption algorithms to hash user passwords for\nthis case you can change from the default (preserved for backwards-compatibility) to PBKDF2. For new projects\nthis should be the standard.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> client = <span class=\"hljs-type\">MongoClient</span>.createShared(vertx, mongoClientConfig)\n<span class=\"hljs-keyword\">var</span> authProperties = <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>()\n<span class=\"hljs-keyword\">var</span> authProvider = <span class=\"hljs-type\">MongoAuth</span>.create(client, authProperties)\nauthProvider.setHashAlgorithm(<span class=\"hljs-type\">HashAlgorithm</span>.<span class=\"hljs-type\">PBKDF2</span>)</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_vertx_auth_jdbc_and_gdpr\"><a class=\"anchor\" href=\"#_vertx_auth_jdbc_and_gdpr\"></a>Vertx Auth JDBC and GDPR</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>GDPR is a regulation from the common European Union law. It overrides/supercedes national data protection laws and\nextents the previously existing directives. This section of the manual is by no means a thorough walkthrough of the\nregulation, it is just a small summary how this component adheres to the requirements. Companies not adhering to the\nequirements can be fined on 4% of the turnover or 20 million euro. Therefore we want to make sure that as a user of\nVert.x Auth JDBC you&#8217;re are on the good track to comply.</p>\n</div>\n<div class=\"paragraph\">\n<p>The law defines certain terminology:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Data Subject - Person whose personal data is processed (e.g.: User)</p>\n</li>\n<li>\n<p>Personal Data - Any data about an identifiable or identified person</p>\n</li>\n<li>\n<p>Data Processing - Any operation (manual or automated) on personal data</p>\n</li>\n<li>\n<p>Controller - The entity (company) that requests and uses the data</p>\n</li>\n<li>\n<p>Processors - Any entity that processes data on behalf of a controller (e.g.: cloud service provider)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>GDPR defines the following functionality:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>\"Forget me\" - Right to erasure</p>\n</li>\n<li>\n<p>Mark profile as restricted - Right to restriction of processing</p>\n</li>\n<li>\n<p>Export data - Right to portability</p>\n</li>\n<li>\n<p>Allow profile editing - Right to rectification</p>\n</li>\n<li>\n<p>See all my data - Right to access</p>\n</li>\n<li>\n<p>Consent checkboxes</p>\n</li>\n<li>\n<p>Age checks</p>\n</li>\n<li>\n<p>Data destruction - Data minimization principle</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This module complies to the GDPR law by not storing any identifiable information about a data subject. The only\nreference is the username which is not linked to any personal data.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to add personal data to your application you should create your own data schema and use the username column\nas a reference to your data. As a tip you should have a boolean flag to mark the personal data as restricted to\ncomply to the right to restriction of processing which means that if you need to handle the data, e.g.: send a bulk\nemail from a mailing list you are not allowed to do so if the flag is true.</p>\n</div>\n<div class=\"paragraph\">\n<p>The right to erasure does not mean that you must wipe all records from your application, e.g.: in a bank this right\ncannot be used to erase a running loan or debt. You are allowed to keep your application data but must erase the\npersonal data. In case of Vert.x Auth JDBC you should delete your table but can still use a reference to the\nusername as long as is not possible to link the username to the personal data.</p>\n</div>\n<div class=\"paragraph\">\n<p>Important note is that this must survive backups! As a tip backup the data, and data erasure on different archives so\nthey can be replayed individually.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When authenticating using this implementation, it assumes <code>username</code> and <code>password</code> fields are present in the\nauthentication info:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> authInfo = <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"username\"</span>, <span class=\"hljs-string\">\"tim\"</span>).put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"sausages\"</span>)\nauthProvider.authenticateFuture(authInfo).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">var</span> user = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Instead of the <code>username</code> and <code>password</code> field names used in the previous snippet, you should use:\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setUsernameCredentialField()\">setUsernameCredentialField</a></code> and\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/mongo/MongoAuth.html#setPasswordCredentialField()\">setPasswordCredentialField</a></code></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authorisation_permission_role_model\"><a class=\"anchor\" href=\"#_authorisation_permission_role_model\"></a>Authorisation - Permission-Role Model</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Although Vert.x auth itself does not mandate any specific model of permissions (they are just opaque strings), this\nimplementation assumes a familiar user/role/permission model, where a user can have zero or more roles and a role\ncan have zero or more permissions.</p>\n</div>\n<div class=\"paragraph\">\n<p>If validating if a user has a particular permission simply pass the permission into.\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/User.html#isAuthorised(java.lang.String)\">isAuthorised</a></code> as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">user.isAuthorizedFuture(<span class=\"hljs-string\">\"commit_code\"</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">var</span> hasPermission = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If validating that a user has a particular <em>role</em> then you should prefix the argument with the role prefix.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">user.isAuthorizedFuture(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">${MongoAuth.ROLE_PREFIX}</span>manager\"</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">var</span> hasRole = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}