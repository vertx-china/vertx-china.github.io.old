{"pageProps":{"slug":"vertx-core/groovy","title":"Vert.x for Groovy","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_verticles\">Verticles</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_writing_verticles\">编写 Verticles</a></li>\n<li><a href=\"#_accessing_the_vertx_instance_from_a_verticle\">从verticle中访问vertx实例</a></li>\n<li><a href=\"#_asynchronous_verticle_start_and_stop\">Verticle的异步启动与关闭</a></li>\n<li><a href=\"#_passing_configuration_to_a_verticle\">往verticle中传递配置信息</a></li>\n<li><a href=\"#_accessing_environment_variables_in_a_verticle\">在Verticle中访问环境变量</a></li>\n</ul>\n</li>\n<li><a href=\"#_json\">JSON</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_object_conversion\">数据对象变换</a></li>\n<li><a href=\"#_json_objects\">JSON对象</a></li>\n<li><a href=\"#_json_arrays\">JSON数组</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x for Groovy</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>如果您正在使用Maven或者Gradle，可添加以下的依赖项到您的项目中，\n以访问Vert.x Core API并启用对Groovy的支持:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在 <code>pom.xml</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-lang-groovy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在 <code>build.gradle</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">\"io.vertx:vertx-core:4.0.2\"</span>\ncompile <span class=\"hljs-string\">\"io.vertx:vertx-lang-groovy:4.0.2\"</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_verticles\"><a class=\"anchor\" href=\"#_verticles\"></a>Verticles</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_writing_verticles\"><a class=\"anchor\" href=\"#_writing_verticles\"></a>编写 Verticles</h3>\n<div class=\"paragraph\">\n<p>在Groovy中有两种方式可以用于创建Verticles：</p>\n</div>\n<div class=\"paragraph\">\n<p>使用一个Groovy脚本，\n脚本包含一个实现了 <code><a href=\"../../apidocs/io/vertx/core/Verticle.html\">Verticle</a></code> 接口或者继承  <code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html\">AbstractVerticle</a></code> 的类</p>\n</div>\n<div class=\"paragraph\">\n<p>例如下面的代码片段，是一个有效的Groovy verticle：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">println <span class=\"hljs-string\">\"Hello from vertx\"</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>在部署时，默认的，Vert.x将会执行该脚本。此外， 您的脚本中也可以提供 <code>startVertx</code>\n和 <code>stopVertx</code> 方法。相应地，这些方法将会在verticle启动或者关闭时被调用：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">void</span> vertxStart() {\n  println <span class=\"hljs-string\">\"starting\"</span>\n}\n\n<span class=\"hljs-keyword\">void</span> vertxStop() {\n  println <span class=\"hljs-string\">\"stopping\"</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>上述这些方法是同步的，在这些方法执行后，该verticle将可被视为已经启动或者已经关闭。</p>\n</div>\n<div class=\"paragraph\">\n<p>或者，您也可以继承 <code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html\">AbstractVerticle</a></code>\n类并实现它的 <code>start</code> 和 <code>stop</code> 方法：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorldHttpVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> {</span>\n\n  <span class=\"hljs-keyword\">void</span> start() {\n   println(<span class=\"hljs-string\">\"Starting\"</span>)\n  }\n\n  <span class=\"hljs-keyword\">void</span> stop() {\n    println(<span class=\"hljs-string\">\"Stopping\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当Vert.x部署verticle时，将会调用其 <code>start</code> 方法。此方法执行完毕后，\n该verticle将可被视为已经启动。</p>\n</div>\n<div class=\"paragraph\">\n<p>此外您也可以重写verticle的 <code>stop</code> 方法，在verticle被卸载时该方法将会被Vert.x所调用，\n并且在该方法执行完毕后， verticle可被视为已经关闭。</p>\n</div>\n<div class=\"paragraph\">\n<p>跟前面一样，这些方法也是同步的，在这些方法执行后，该verticle将可被视为已经启动或者已经关闭。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_accessing_the_vertx_instance_from_a_verticle\"><a class=\"anchor\" href=\"#_accessing_the_vertx_instance_from_a_verticle\"></a>从verticle中访问vertx实例</h3>\n<div class=\"paragraph\">\n<p>不管您选择哪种方法去实现verticle，您都可以通过 <code>vertx</code> 变量 / 字段来访问\nvert.x的实例。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在Groovy脚本中访问vert.x实例</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">vertx.deployVerticle(<span class=\"hljs-string\">\"another_verticle.groovy\"</span>)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">在Groovy类中访问vert.x实例</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorldHttpVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> {</span>\n\n  <span class=\"hljs-keyword\">void</span> start() {\n    vertx.deployVerticle(<span class=\"hljs-string\">\"another_verticle.groovy\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_asynchronous_verticle_start_and_stop\"><a class=\"anchor\" href=\"#_asynchronous_verticle_start_and_stop\"></a>Verticle的异步启动与关闭</h3>\n<div class=\"paragraph\">\n<p>有时您可能想在verticle启动时执行某些耗时操作，但又不想等这些操作完成后才完成verticle的部署。\n例如，您可能想在start方法里部署其他的verticle。</p>\n</div>\n<div class=\"paragraph\">\n<p>根据黄金定律，在start方法中，您不应该阻塞以等待其他verticle部署完成。</p>\n</div>\n<div class=\"paragraph\">\n<p>所以应该如何实现这个需求？</p>\n</div>\n<div class=\"paragraph\">\n<p>需要做的只是去实现 <strong>异步</strong> 的start方法，这个异步start方法接收一个 <code><a href=\"../../apidocs/io/vertx/core/Promise.html\">Promise</a></code> 作为参数。\n当该方法返回时 <strong>不</strong> 代表verticle已经部署完成。</p>\n</div>\n<div class=\"paragraph\">\n<p>经过一段时间，当您完成所有需要做的事（如：启动其他verticle），您可以在调用Promise的complete（或者fail）来表示您的事已经完成。\n类似地，也有一个异步版本的stop方法。</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以使用异步的stop去执行一些如清理verticle等耗时的操作。</p>\n</div>\n<div class=\"paragraph\">\n<p>当您用脚本实现verticle，异步start和stop需要这样实现:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.Promise\n\n<span class=\"hljs-keyword\">void</span> vertxStart(Promise&lt;Void&gt; promise) {\n  println <span class=\"hljs-string\">\"starting\"</span>\n  vertx.deployVerticle(<span class=\"hljs-string\">\"v.rb\"</span>, { res -&gt;\n    <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n      promise.complete()\n    } <span class=\"hljs-keyword\">else</span> {\n      promise.fail(res.cause())\n    }\n  })\n}\n\n<span class=\"hljs-keyword\">void</span> vertxStop(Promise&lt;Void&gt; future) {\n  println <span class=\"hljs-string\">\"stopping\"</span>\n  promise.complete()\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当您使用类去继承 <code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html\">AbstractVerticle</a></code> ， 您需要重写\n<code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html#start-io.vertx.core.Promise-\">start</a></code> 和\n<code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html#stop-io.vertx.core.Promise-\">stop</a></code> 方法：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.Future\n<span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorldHttpVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> {</span>\n  <span class=\"hljs-keyword\">void</span> start(Promise&lt;Void&gt; future) {\n    println <span class=\"hljs-string\">\"starting\"</span>\n    vertx.deployVerticle(<span class=\"hljs-string\">\"v.rb\"</span>,\n    { res -&gt;\n      <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n        future.complete()\n      } <span class=\"hljs-keyword\">else</span> {\n        future.fail(res.cause())\n      }\n    })\n   }\n\n  <span class=\"hljs-keyword\">void</span> stop(Promise&lt;Void&gt; future) {\n   println(<span class=\"hljs-string\">\"stopping\"</span>)\n   future.complete()\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n在verticle的stop方法中，您并不需要手动卸载子verticle。\nVert.x将会在父verticle被卸载时自动卸载它的所有子verticle。\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_passing_configuration_to_a_verticle\"><a class=\"anchor\" href=\"#_passing_configuration_to_a_verticle\"></a>往verticle中传递配置信息</h3>\n<div class=\"paragraph\">\n<p>在部署时，配置信息可以以Map的形式传入verticle：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Groovy\" data-lang=\"Groovy\"><span class=\"hljs-keyword\">def</span> config = [\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"tim\"</span>,\n<span class=\"hljs-symbol\">  directory:</span><span class=\"hljs-string\">\"/blah\"</span>\n]\n<span class=\"hljs-keyword\">def</span> options = [ <span class=\"hljs-string\">\"config\"</span> : config ];\nvertx.deployVerticle(<span class=\"hljs-string\">\"com.mycompany.MyOrderProcessorVerticle\"</span>, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这个配置信息可以在 <code><a href=\"../../apidocs/io/vertx/core/Context.html\">Context</a></code> 中访问，它会以Map的格式返回，\n所以您可以这样访问数据：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Groovy\" data-lang=\"Groovy\">println vertx.getOrCreateContext().config()[<span class=\"hljs-string\">\"name\"</span>]</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n这个配置信息可以为 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> 对象。\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_accessing_environment_variables_in_a_verticle\"><a class=\"anchor\" href=\"#_accessing_environment_variables_in_a_verticle\"></a>在Verticle中访问环境变量</h3>\n<div class=\"paragraph\">\n<p>环境变量和系统属性可以通过Java API访问：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Groovy\" data-lang=\"Groovy\">println System.getProperty(<span class=\"hljs-string\">\"foo\"</span>)\nprintln System.getenv(<span class=\"hljs-string\">\"HOME\"</span>)</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_json\"><a class=\"anchor\" href=\"#_json\"></a>JSON</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>为了处理JSON对象，Vert.x提出了自己的 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code>\n和 <code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html\">JsonArray</a></code> 实现。\n这是因为Java与其他语言不同，并没有为 <a href=\"http://json.org/\">JSON</a>提供一等的支持。</p>\n</div>\n<div class=\"paragraph\">\n<p>当使用Groovy开发vert.x应用时，您可以使用上述两个类，\n或者使用 (<a href=\"http://www.groovy-lang.org/json.html)\">JSON support from Groovy</a>。\n本章节将会介绍如何使用这两个Vert.x的类。</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n大多数接收JSON作为参数的vert.x方法的Java版本，是以Map的形式接收输入的。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_object_conversion\"><a class=\"anchor\" href=\"#_data_object_conversion\"></a>数据对象变换</h3>\n<div class=\"paragraph\">\n<p>在Vert.x API中使用被 <code>@DataObject</code> 注解的类，得益于Groovy的 <code>as</code> 操作符，\n可以被转换为Map或者从Map转换为类。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-Groovy\" data-lang=\"Groovy\"><span class=\"hljs-keyword\">import</span> io.vertx.core.http.HttpServerOptions\n<span class=\"hljs-keyword\">import</span> io.vertx.core.net.PemKeyCertOptions\n\n<span class=\"hljs-comment\">// Instead of this</span>\n<span class=\"hljs-keyword\">def</span> server = vertx.createHttpServer(<span class=\"hljs-keyword\">new</span> HttpServerOptions()\n   .setUseAlpn(<span class=\"hljs-literal\">true</span>)\n   .setSsl(<span class=\"hljs-literal\">true</span>)\n   .setKeyStoreOptions(<span class=\"hljs-keyword\">new</span> JksOptions().setPath(<span class=\"hljs-string\">\"/path/to/my/keystore\"</span>)))\n\n<span class=\"hljs-comment\">// You can convert a map literal to HttpServerOptions</span>\nserver = vertx.createHttpServer([\n   <span class=\"hljs-string\">\"userAlpn\"</span>:        <span class=\"hljs-literal\">true</span>,\n   <span class=\"hljs-string\">\"ssl\"</span>:             <span class=\"hljs-literal\">true</span>,\n   <span class=\"hljs-string\">\"keyStoreOptions\"</span>: [<span class=\"hljs-string\">\"path\"</span>:<span class=\"hljs-string\">\"/path/to/my/keystore\"</span>]\n   ] <span class=\"hljs-keyword\">as</span> HttpServerOptions)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_json_objects\"><a class=\"anchor\" href=\"#_json_objects\"></a>JSON对象</h3>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> 类代表JSON对象。</p>\n</div>\n<div class=\"paragraph\">\n<p>一个JSON对象只是一个键为字符串，\n值为JSON支持的任意类型（字符串，数字，布尔值）的map。</p>\n</div>\n<div class=\"paragraph\">\n<p>JSON对象也支持 <code>null</code> 值。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_creating_json_objects\"><a class=\"anchor\" href=\"#_creating_json_objects\"></a>创建JSON对象</h4>\n<div class=\"paragraph\">\n<p>可以使用默认的构造函数创建空JSON对象。</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以从字符串或者JSON格式的g-string创建JSON对象：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> object = <span class=\"hljs-keyword\">new</span> JsonObject(<span class=\"hljs-string\">\"{\\\"foo\\\":\\\"bar\\\"}\"</span>)\n<span class=\"hljs-keyword\">def</span> object2 = <span class=\"hljs-keyword\">new</span> JsonObject(<span class=\"hljs-string\">\"\"\"\n{\n  \"foo\": \"bar\"\n}\n\"\"\"</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>在Groovy中，也可以很方便地从map创建JSON对象：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> map = [ <span class=\"hljs-string\">\"foo\"</span> : <span class=\"hljs-string\">\"bar\"</span> ]\n<span class=\"hljs-keyword\">def</span> json = <span class=\"hljs-keyword\">new</span> JsonObject(map)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>嵌套的map会被转换为嵌套的JSON对象。</p>\n</div>\n<div class=\"paragraph\">\n<p>也可以使用Groovy的转换实现：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> map = [ <span class=\"hljs-string\">\"foo\"</span> : <span class=\"hljs-string\">\"bar\"</span> ]\n<span class=\"hljs-keyword\">def</span> json = map <span class=\"hljs-keyword\">as</span> JsonObject</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_putting_entries_into_a_json_object\"><a class=\"anchor\" href=\"#_putting_entries_into_a_json_object\"></a>往JSON对象插入条目</h4>\n<div class=\"paragraph\">\n<p>使用 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#put-java.lang.String-java.lang.Object-\">put</a></code> 方法往JSON对象中插入数据。</p>\n</div>\n<div class=\"paragraph\">\n<p>该方法调用可以用流式API链接在一起：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> object = <span class=\"hljs-keyword\">new</span> JsonObject()\nobject.put(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"bar\"</span>).put(<span class=\"hljs-string\">\"num\"</span>, <span class=\"hljs-number\">123</span>).put(<span class=\"hljs-string\">\"mybool\"</span>, <span class=\"hljs-literal\">true</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>也可以使用Groovy的下标操作符：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> object = <span class=\"hljs-keyword\">new</span> JsonObject()\nobject[<span class=\"hljs-string\">\"foo\"</span>] = <span class=\"hljs-string\">\"bar\"</span>\nobject[<span class=\"hljs-string\">\"num\"</span>] = <span class=\"hljs-number\">123</span>\nobject[<span class=\"hljs-string\">\"mybool\"</span>] = <span class=\"hljs-literal\">true</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_getting_values_from_a_json_object\"><a class=\"anchor\" href=\"#_getting_values_from_a_json_object\"></a>从JSON对象中读取值</h4>\n<div class=\"paragraph\">\n<p>您可以用 <code>getXXX</code> 的方法从JSON对象中读取值，例如：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">def val1 = jsonObject.getString(<span class=\"hljs-string\">\"some-key\"</span>)\ndef val2 = jsonObject.getInteger(<span class=\"hljs-string\">\"some-other-key\"</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当然Groovy的下标操作符也可使用：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> val1 = jsonObject[<span class=\"hljs-string\">\"some-key\"</span>]\n<span class=\"hljs-keyword\">def</span> val2 = jsonObject[<span class=\"hljs-string\">\"some-other-key\"</span>]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_encoding_the_json_object_to_a_string\"><a class=\"anchor\" href=\"#_encoding_the_json_object_to_a_string\"></a>将JSON对象编码为字符串</h4>\n<div class=\"paragraph\">\n<p>您可以使用 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#encode--\">encode</a></code>\n方法来将对象转换为字符串。也可以使用 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#encodePrettily--\">encodePrettily</a></code>\n让输出更加美观（推断多行和缩进）。</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_json_arrays\"><a class=\"anchor\" href=\"#_json_arrays\"></a>JSON数组</h3>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html\">JsonArray</a></code> 类代表JSON数组。</p>\n</div>\n<div class=\"paragraph\">\n<p>一个JSON数组是一个值的序列（字符串，数字，布尔值）。</p>\n</div>\n<div class=\"paragraph\">\n<p>JSON数组也可以包含 <code>null</code> 值。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_creating_json_arrays\"><a class=\"anchor\" href=\"#_creating_json_arrays\"></a>创建JSON数组</h4>\n<div class=\"paragraph\">\n<p>空的JSON数组可以使用默认的构造函数创建。</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以从JSON格式的字符串或者一个列表创建JSON数组：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> object = <span class=\"hljs-keyword\">new</span> JsonArray(<span class=\"hljs-string\">\"[\\\"foo\\\", \\\"bar\\\"]\"</span>)\n<span class=\"hljs-keyword\">def</span> object2 = <span class=\"hljs-keyword\">new</span> JsonObject(<span class=\"hljs-string\">\"\"\"\n[\n  \"foo\", \"bar\"\n]\n\"\"\"</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>在Groovy中，可以很方便地从列表创建一个JSON数组：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> list = [ <span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"bar\"</span> ]\n<span class=\"hljs-keyword\">def</span> json = <span class=\"hljs-keyword\">new</span> JsonArray(list)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>嵌套的map将会被转换为嵌套的JSON对象。</p>\n</div>\n<div class=\"paragraph\">\n<p>也可以通过Groovy的转换实现：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> list = [ <span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"bar\"</span> ]\n<span class=\"hljs-keyword\">def</span> json = map <span class=\"hljs-keyword\">as</span> JsonArray</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_adding_entries_into_a_json_array\"><a class=\"anchor\" href=\"#_adding_entries_into_a_json_array\"></a>添加条目到JSON数组中</h4>\n<div class=\"paragraph\">\n<p>您可以通过 <code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html#add-java.lang.Object-\">add</a></code> 方法添加新的条目到JSON数组中。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> array = <span class=\"hljs-keyword\">new</span> JsonArray()\narray.add(<span class=\"hljs-string\">\"foo\"</span>).add(<span class=\"hljs-number\">123</span>).add(<span class=\"hljs-literal\">false</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>也可以通过“&lt;&lt;”操作符实现：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> array = <span class=\"hljs-keyword\">new</span> JsonArray()\narray &lt;&lt; <span class=\"hljs-string\">\"foo\"</span>\narray &lt;&lt; <span class=\"hljs-number\">123</span>\narray &lt;&lt; <span class=\"hljs-literal\">false</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_getting_values_from_a_json_array\"><a class=\"anchor\" href=\"#_getting_values_from_a_json_array\"></a>从JSON数组中读取值</h4>\n<div class=\"paragraph\">\n<p>您可以通过 <code>getXXX</code> 方法来读取JSON数组中的值，例如：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> val = array.getString(<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-keyword\">def</span> intVal = array.getInteger(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">def</span> boolVal = array.getBoolean(<span class=\"hljs-number\">2</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Groovy的下标操作符也可以实现：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> val = array[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-keyword\">def</span> intVal = array[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-keyword\">def</span> boolVal = array[<span class=\"hljs-number\">2</span>]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_encoding_the_json_array_to_a_string\"><a class=\"anchor\" href=\"#_encoding_the_json_array_to_a_string\"></a>将JSON数组编码为字符串</h4>\n<div class=\"paragraph\">\n<p>您可以使用 <code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html#encode--\">encode</a></code> 方法把数组转换为字符串的形式。\n同样，也可以使用 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#encodePrettily--\">encodePrettily</a></code>\n方法美化输出（推断多行和缩进）。</p>\n</div>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}