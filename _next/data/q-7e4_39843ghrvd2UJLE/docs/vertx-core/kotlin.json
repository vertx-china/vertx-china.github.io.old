{"pageProps":{"slug":"vertx-core/kotlin","title":"Vert.x for Kotlin","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_verticles\">Verticles</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_编写_verticles\">编写 Verticles</a></li>\n</ul>\n</li>\n<li><a href=\"#data_objects_builders\">Data 对象构造器</a></li>\n<li><a href=\"#_json\">JSON</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#builders\">构造器</a></li>\n<li><a href=\"#postscript_operator_overloading\">索引访问操作符重载</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x for Kotlin</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>如您使用 Maven 或者 Gradle，可以通过添加以下依赖来使用\nVert.x 核心 API 以启用 Kotlin支持：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在 <code>pom.xml</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-lang-kotlin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在 <code>build.gradle</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">\"io.vertx:vertx-core:4.0.2\"</span>\ncompile <span class=\"hljs-string\">\"io.vertx:vertx-lang-kotlin:4.0.2\"</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_verticles\"><a class=\"anchor\" href=\"#_verticles\"></a>Verticles</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_编写_verticles\"><a class=\"anchor\" href=\"#_编写_verticles\"></a>编写 Verticles</h3>\n<div class=\"paragraph\">\n<p>使用 Kotlin 编写一个 Verticle 的方式与 Java 相同，即继承 <code><a href=\"../../apidocs/io/vertx/core/AbstractVerticle.html\">AbstractVerticle</a></code>\n类即可。</p>\n</div>\n<div class=\"paragraph\">\n<p>示例如下：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyVerticle</span> : <span class=\"hljs-type\">AbstractVerticle</span></span>() {\n\n <span class=\"hljs-comment\">// 当 verticle 被部署时会被调用</span>\n <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span> {\n }\n\n <span class=\"hljs-comment\">// 可选的 - 当 verticle 被接触部署时会被调用</span>\n <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">()</span></span> {\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>请参阅 Java 文档</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"data_objects_builders\"><a class=\"anchor\" href=\"#data_objects_builders\"></a>Data 对象构造器</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Data 对象在 Vert.x 技术栈起着重要作用（Data 对象可以与 JSON 互相转换）</p>\n</div>\n<div class=\"paragraph\">\n<p>举个例子，Vert.x 模块常常使用 Data 对象作为服务配置：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-keyword\">val</span> classic: HttpServerOptions = HttpServerOptions()\n .setIdleTimeout(<span class=\"hljs-number\">5</span>)\n .setIdleTimeoutUnit(TimeUnit.MINUTES)\n .setLogActivity(<span class=\"hljs-literal\">true</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>有一种更优雅的构造 Data 对象的方式（即使上述方法也是可以的）\n在 Kotlin 中，所有 Data 对象都有一个后缀为 <code>Of</code> 的构造器 (builder)：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-keyword\">val</span> options = httpServerOptionsOf(idleTimeout = <span class=\"hljs-number\">5</span>, idleTimeoutUnit = TimeUnit.MINUTES, logActivity = <span class=\"hljs-literal\">true</span>)</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_json\"><a class=\"anchor\" href=\"#_json\"></a>JSON</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>不同于其他语言， Java 没有为 <a href=\"http://json.org/\">JSON</a> 提供一等公民的支持，\n所以我们提供了两个类，使 Vert.x 应用中使用 JSON 更加容易</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> 类用来表示 JSON 对象，\n<code><a href=\"../../apidocs/io/vertx/core/json/JsonArray.html\">JsonArray</a></code>\n类用来表示数组，可以参考 Java 文档获得更多信息。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"builders\"><a class=\"anchor\" href=\"#builders\"></a>构造器</h3>\n<div class=\"paragraph\">\n<p>构造器可用于更顺畅地构造 JSON ：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-comment\">// 该 json 构造器声明了一个 JSON 结构</span>\n<span class=\"hljs-keyword\">val</span> result = json {\n\n <span class=\"hljs-comment\">// 在该块中可以使用 `obj` 函数</span>\n\n <span class=\"hljs-comment\">// 使用变长 Pair 参数</span>\n obj(\n   <span class=\"hljs-string\">\"key_1\"</span> to <span class=\"hljs-number\">1</span>,\n   <span class=\"hljs-string\">\"key_2\"</span> to <span class=\"hljs-number\">2</span>,\n   <span class=\"hljs-string\">\"key_3\"</span> to <span class=\"hljs-number\">3</span>\n )\n\n <span class=\"hljs-comment\">// 或者可迭代的 Pair 集合</span>\n obj((<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">3</span>).map { <span class=\"hljs-string\">\"key_<span class=\"hljs-variable\">$it</span>\"</span> to it })\n\n <span class=\"hljs-comment\">// 还可以是 Map&lt;String, Any?&gt;</span>\n obj(someMap)\n\n <span class=\"hljs-comment\">// 在对象接收者附加函数</span>\n obj {\n   <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">3</span>) {\n     put(<span class=\"hljs-string\">\"key_<span class=\"hljs-variable\">$i</span>\"</span>, i)\n   }\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>构造 JSON 数组也是同样的</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-comment\">// 这个 json 构造器用于声明 JSON 结构</span>\n<span class=\"hljs-keyword\">val</span> result = json {\n\n <span class=\"hljs-comment\">// 在这个块中可以使用 array 函数</span>\n\n <span class=\"hljs-comment\">// 直接用变长的值数组作为参数</span>\n array(<span class=\"hljs-string\">\"1\"</span>, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>)\n\n <span class=\"hljs-comment\">// 一个可迭代的值集合</span>\n array((<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">3</span>).map { <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$it</span>\"</span> })\n\n <span class=\"hljs-comment\">// 在对象接收者上附加函数</span>\n array {\n   <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">3</span>) {\n     add(<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$i</span>\"</span>)\n   }\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当然混合对象和数组也是可行的</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-comment\">// 这个 json 构造器用于声明 JSON 结构</span>\n<span class=\"hljs-keyword\">val</span> result = json {\n\n <span class=\"hljs-string\">\"firstName\"</span> to <span class=\"hljs-string\">\"Dale\"</span>,\n <span class=\"hljs-string\">\"lastName\"</span> to <span class=\"hljs-string\">\"Cooper\"</span>,\n <span class=\"hljs-string\">\"age\"</span> to <span class=\"hljs-number\">64</span>,\n <span class=\"hljs-string\">\"names\"</span> to array(<span class=\"hljs-string\">\"Dale\"</span>, <span class=\"hljs-string\">\"Bartholomew\"</span>)\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"postscript_operator_overloading\"><a class=\"anchor\" href=\"#postscript_operator_overloading\"></a>索引访问操作符重载</h3>\n<div class=\"paragraph\">\n<p>Kotlin 的索引访问操作符在 JSON 对象和数组上都被重载了</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">print(someObject[<span class=\"hljs-string\">\"firstName\"</span>]);\nprint(someArray[<span class=\"hljs-number\">4</span>]);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}