{"pageProps":{"slug":"vertx-http-service-factory/java","title":"Vert.x Http Service Factory","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_deploying_a_java_service_packaged_as_a_fatjar\">Deploying a Java service packaged as a fatjar</a></li>\n<li><a href=\"#_http_client_configuration\">Http client configuration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_client_authentication\">Client authentication</a></li>\n<li><a href=\"#_proxy_server_configuration\">Proxy server configuration</a></li>\n</ul>\n</li>\n<li><a href=\"#_public_key_servers\">Public key servers</a></li>\n<li><a href=\"#_validation_policy\">Validation policy</a></li>\n<li><a href=\"#_cache_directory\">Cache directory</a></li>\n<li><a href=\"#_examples\">Examples</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_bintray\">Bintray</a></li>\n<li><a href=\"#_service_zip\">Service zip</a></li>\n<li><a href=\"#_bintray_hosting\">Bintray hosting</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x Http Service Factory</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The http service factory is a Vert.x service factory for deploying services from an http server. It it an alternative\nto the Maven Service Factory for using services hosted on a plain http server, e.g a JavaScript service zipped\nand hosted somewhere. Unlike the Maven Service Factory, the Http Service Factory does not provide any kind of\nclasspath dependency resolution. To use this feature be sure that <code>io.vertx:vertx-http-service-factory:4.0.2</code> is in your classpath.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx run https://myserver.net/myverticle.zip::my-service</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Although it looks like an http URL, it is a verticle identifier with a factory bound to the <em>https</em> prefix (<em>http</em>\nalso supported).</p>\n</div>\n<div class=\"paragraph\">\n<p>The service identifier is made up of the suffix to form an <em>http</em> URL or the archive that contains the service,\nfollowed by a double colon <code>::</code> and a service name.</p>\n</div>\n<div class=\"paragraph\">\n<p>The service name is used to find the service descriptor file inside the artifact which is named by the service name with\na <code>.json</code> extension. This is explained in the <a href=\"http://vertx.io/docs/vertx-service-factory/java\">Service Verticle Factory</a>\ndocumentation.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, to deploy a service that exists in an hosted at <code><a href=\"https://myserver.net/myverticle.zip\" class=\"bare\">https://myserver.net/myverticle.zip</a></code> called <code>my-service</code>\nyou would use the string <code><a href=\"https://myserver.net/myverticle.zip::my-service\" class=\"bare\">https://myserver.net/myverticle.zip::my-service</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Given this string, the verticle factory will use the Vert.x http client try and download the resource\n<code><a href=\"https://myserver.net/myverticle.zip\" class=\"bare\">https://myserver.net/myverticle.zip</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>It then constructs a classpath including this archive and creates a classloader with that classpath in order\nto load the service using the standard <a href=\"http://vertx.io/docs/vertx-service-factory/java\">Service Verticle Factory</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Service Verticle Factory will look for a descriptor file called `my-service.json on the constructed classpath to\nactually load the service.</p>\n</div>\n<div class=\"paragraph\">\n<p>Given a service identifier the service can be deployed programmatically e.g.:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx.deployVerticle(\"https://myserver.net/myverticle.zip::my-service\", ...)</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or can be deployed on the command line with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx run https://myserver.net/myverticle.zip::my-service</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The service name can be omitted when the service jar <code>META-INF/MANIFEST</code> contains a `Main-Verticle`entry that\ndeclares the verticle to run:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx.deployVerticle(\"https://myserver.net/myverticle.zip\", ...)</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And the manifest contains:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>Main-Verticle: service:my.service</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Of course it can be deployed on the command line with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx run https://myserver.net/myverticle.zip</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_deploying_a_java_service_packaged_as_a_fatjar\"><a class=\"anchor\" href=\"#_deploying_a_java_service_packaged_as_a_fatjar\"></a>Deploying a Java service packaged as a fatjar</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The deployer factory can also deploy a Java service packaged as a fatjar, i.e a jar that contains a Java service and all the classes needed\nto run, for example:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the jar manifest contains the <code>Main-Verticle:myservice.json</code></p>\n</li>\n<li>\n<p><code>myservice.json</code> declares the service via <code>main:my.Verticle</code></p>\n</li>\n<li>\n<p>the class <code>my.Verticle</code></p>\n</li>\n<li>\n<p>all the classes needed by the verticle to run, for example Google Guava jar, etc&#8230;&#8203;</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_http_client_configuration\"><a class=\"anchor\" href=\"#_http_client_configuration\"></a>Http client configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Files are downloaded using Vert.x http client, by default the https client is configured with the <code>ssl=true</code>\nand <code>trustAll=true</code>. The default client options can be overriden to use specific configurations with the\n<em>vertx.httpServiceFactory.httpClientOptions</em> system property and the <em>vertx.httpServiceFactory.httpsClientOptions</em>\nsystem property, these properties are valid for any http resource.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_client_authentication\"><a class=\"anchor\" href=\"#_client_authentication\"></a>Client authentication</h3>\n<div class=\"paragraph\">\n<p>The client supports basic authentication via the <em>vertx.httpServiceFactory.authUsername</em> and\n<em>vertx.httpServiceFactory.authPassword</em> system properties.</p>\n</div>\n<div class=\"paragraph\">\n<p>Authentication is done only for services (i.e basic authentication will not be done for key servers) and only using\nan https connection.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_proxy_server_configuration\"><a class=\"anchor\" href=\"#_proxy_server_configuration\"></a>Proxy server configuration</h3>\n<div class=\"paragraph\">\n<p>The http client can be configured to support a proxy server with the <em>vertx.httpServiceFactory.proxyHost</em> and\n<em>vertx.httpServiceFactory.proxyPort</em> system properties.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you need more proxy configuration such as support for SOCKS or proxy authentication, you can use specify them\nin the <em>vertx.httpServiceFactory.httpClientOptions</em> instead.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx run https://myserver.net/myverticle.zip \\\n  -Dvertx.httpServiceFactory.httpClientOptions=\"{\\\"proxyOptions\\\":{ \\\n     \\\"host\\\":\\\"proxy-host\\\", \\\n     \\\"port\\\":1234 \\\n     \\\"type\\\":\\\"SOCKS4\\\"\n  } }\"</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Please see read the <code><a href=\"../../apidocs/io/vertx/core/http/HttpClientOptions.html\">HttpClientOptions</a></code> configuration for all the details;</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_public_key_servers\"><a class=\"anchor\" href=\"#_public_key_servers\"></a>Public key servers</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Signed artifacts signatures are verifed using a public key, public key are retrieved from a public key server.</p>\n</div>\n<div class=\"paragraph\">\n<p>The public key server uri can be configured with the <em>vertx.httpServiceFactory.keyserverURITemplate</em> system property.\nThe URI template is used to create the public key URI this way:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>String.format(keyserverURITemplate, signature.getKeyID())</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When the property is not set, the default public key server is the <em>SKS OpenPGP Public Key Server</em> server used and\nthe uri template used is : <code><a href=\"http://pool.sks-keyservers.net:11371/pks/lookup?op=get&amp;options=mr&amp;search=0x%016X\" class=\"bare\">http://pool.sks-keyservers.net:11371/pks/lookup?op=get&amp;options=mr&amp;search=0x%016X</a></code>\nthis server will server public key resources with the <em>application/pgp-keys</em> media type.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Json <a href=\"https://keybase.io/docs/api/1.0/call/key/fetch\">format</a> sent by Keybase.io is also support. Keybase.io\ncan be used as a public key server with <code><a href=\"https://keybase.io/_/api/1.0/key/fetch.json?pgp_key_ids=%016X\" class=\"bare\">https://keybase.io/_/api/1.0/key/fetch.json?pgp_key_ids=%016X</a></code> URI template.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_validation_policy\"><a class=\"anchor\" href=\"#_validation_policy\"></a>Validation policy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The validation policy governs how downloaded services are validated, the <em>vertx.httpServiceFactory.validationPolicy</em>\nsystem property configures the behavior of the verticle factory when it attemps to deploy a downloaded service file:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>none</em> : the service file is just deployed as is</p>\n</li>\n<li>\n<p><em>verify</em> : the service file is verified when there is a corresponding <em>.asc</em> signature file, otherwise it is\nnot verified. If the signature cannot be verified, the deployment fails.</p>\n</li>\n<li>\n<p><em>mandatory</em>: the service file must have a corresponding <em>.asc</em> signature file and the signature must be verified.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The default validation policy is_verify_*.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cache_directory\"><a class=\"anchor\" href=\"#_cache_directory\"></a>Cache directory</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The cache directory stores the files used by the http service factory after download:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>deployed services</p>\n</li>\n<li>\n<p>service signatures</p>\n</li>\n<li>\n<p>public keys</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The cached files are named after the percent encoded download URL:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>-rw-r--r--  1 julien  staff   270 May  3 21:44 http%3A%2F%2Flocalhost%3A8080%2Fthe_verticle.zip\n-rw-r--r--  1 julien  staff   473 May  3 21:44 http%3A%2F%2Flocalhost%3A8080%2Fthe_verticle.zip.asc\n-rw-r--r--  1 julien  staff  1768 May  3 21:44 http%3A%2F%2Flocalhost%3A8081%2Fpks%2Flookup%3Fop%3Dget%26options%3Dmr%26search%3D0x9F9358A769793D09</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The default cache directory <em>.vertx</em> can be set to a specific location with the <em>vertx.httpServiceFactory.cacheDir</em>\nsystem property.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_examples\"><a class=\"anchor\" href=\"#_examples\"></a>Examples</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_bintray\"><a class=\"anchor\" href=\"#_bintray\"></a>Bintray</h3>\n<div class=\"paragraph\">\n<p>Bintray is a distribution platform that can be used for hosting files.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_zip\"><a class=\"anchor\" href=\"#_service_zip\"></a>Service zip</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>&gt; echo 'console.log(\"hello world\")' &gt; helloworld.js\n&gt; echo '{\"main\":\"helloworld.js\"}' &gt; helloworld.json\n&gt; zip helloworld.zip helloworld.json helloworld.js</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_bintray_hosting\"><a class=\"anchor\" href=\"#_bintray_hosting\"></a>Bintray hosting</h3>\n<div class=\"paragraph\">\n<p>Assuming you have a Bintray account:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>create a Bintray repository with the <em>generic</em> type, for instance <em>testgenrepo</em></p>\n</li>\n<li>\n<p>in this repository create a package, for instance <em>testpkg</em></p>\n</li>\n<li>\n<p>optionally edit the package and check the <em>GPG sign uploaded files using Bintray&#8217;s public /private key pair.</em></p>\n</li>\n<li>\n<p>in this package create a version, for instance <em>1.0</em></p>\n</li>\n<li>\n<p>now upload the <em>helloworld.zip</em> file</p>\n</li>\n<li>\n<p>publish the files</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The file are now hosted with an URL like : <em><a href=\"https://bintray.com/artifact/download/vietj/testgenrepo/helloworld.zip\" class=\"bare\">https://bintray.com/artifact/download/vietj/testgenrepo/helloworld.zip</a></em></p>\n</div>\n<div class=\"paragraph\">\n<p>If you have configured the GPG signature, you will have also the signature file <em><a href=\"https://bintray.com/artifact/download/vietj/testgenrepo/helloworld.zip.asc\" class=\"bare\">https://bintray.com/artifact/download/vietj/testgenrepo/helloworld.zip.asc</a></em>.\nIt will be by default downloaded and validated with <a href=\"http://pool.sks-keyservers.net:11371/pks/lookup?op=vindex&amp;fingerprint=on&amp;search=0x379CE192D401AB61\">Bintray&#8217;s public key</a></p>\n</div>\n<div class=\"sidebarblock\">\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>Of course you can use your own keys for signing the files.</p>\n</div>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We can run this service with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx run https://bintray.com/artifact/download/vietj/testgenrepo/helloworld.zip::helloworld\n% Hello World\nSucceeded in deploying verticle</pre>\n</div>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}