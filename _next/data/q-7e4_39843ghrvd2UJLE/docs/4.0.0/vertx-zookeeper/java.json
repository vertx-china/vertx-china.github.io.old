{"pageProps":{"slug":"4.0.0/vertx-zookeeper/java","title":"Zookeeper 群集管理器","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_how_to_work\">工作原理</a></li>\n<li><a href=\"#_using_this_cluster_manager\">使用 Zookeeper cluster manager</a></li>\n<li><a href=\"#_configuring_this_cluster_manager\">配置 Zookeeper cluster manager</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_开启日志\">开启日志</a></li>\n</ul>\n</li>\n<li><a href=\"#_about_zookeeper_version\">Zookeeper 版本</a></li>\n</ul>\n</div>","contents":"<h1>Zookeeper 群集管理器</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code>ZookeeperClusterManager</code> 是基于 <a href=\"http://zookeeper.apache.org/\">Zookeeper</a> 来实现的Vert.x集群管理器。</p>\n</div>\n<div class=\"paragraph\">\n<p>它完全实现了vert.x集群的接口。因此，你可以根据你的需要使用它来代替vertx-hazelcast。\n此实现需要引入以下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在 <code>pom.xml</code> 文件中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-zookeeper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在 <code>build.gradle</code> 文件中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-zookeeper:4.0.0'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x 集群管理器包含以下几个功能：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>发现并管理集群中的节点</p>\n</li>\n<li>\n<p>管理集群端的主题订阅清单（这样就可以轻松得知集群中的那些节点订阅了那些 EventBus 地址）</p>\n</li>\n<li>\n<p>分布式 Map 支持</p>\n</li>\n<li>\n<p>分布式锁</p>\n</li>\n<li>\n<p>分布式计数器</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x 集群器并不处理节点之间的通信，在 Vert.x 中节点中的通信是直接由 TCP 链接处理的。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_how_to_work\"><a class=\"anchor\" href=\"#_how_to_work\"></a>工作原理</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code>ZookeeperClusterManager</code> 使用 <a href=\"http://curator.apache.org/\">Apache Curator</a> 框架而不是原生Zookeeper 客户端，因此\n需要添加 Curator 依赖的库到项目中，比如 <code>guava</code> 、 <code>slf4j</code> 、 <code>zookeeper</code> 等其他第三方 jar 包。</p>\n</div>\n<div class=\"paragraph\">\n<p>由于 Zookeeper 采用字典树来存储数据，便可以将 <code>root</code> 路径作为命名空间，在默认的 <code>zookeeper.json</code> 中定义默认的根路径是 <code>io.vertx</code> ，\n同时还有 5 个 子路径用来存储用于管理 vert.x 集群的相关信息。所有的路径中，只有跟路径可以自定义配置。</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>/io.vertx/cluster/nodes/</code> </dt>\n<dd>\n<p>对应 Vert.x 节点信息</p>\n</dd>\n<dt class=\"hdlist1\"><code>/io.vertx/asyncMap/$name/</code> </dt>\n<dd>\n<p>存储通过接口 <code>io.vertx.core.shareddata.AsyncMap</code> 创建的 <code>AsyncMap</code> 记录</p>\n</dd>\n<dt class=\"hdlist1\"><code>/io.vertx/asyncMultiMap/$name/</code> </dt>\n<dd>\n<p>存储通过接口 <code>io.vertx.core.spi.cluster.AsyncMultiMap</code> 创建的 <code>AsyncMultiMap</code> 记录</p>\n</dd>\n<dt class=\"hdlist1\"><code>/io.vertx/locks/</code> </dt>\n<dd>\n<p>存储分布式锁</p>\n</dd>\n<dt class=\"hdlist1\"><code>/io.vertx/counters/</code> </dt>\n<dd>\n<p>存储分布式计数器</p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_this_cluster_manager\"><a class=\"anchor\" href=\"#_using_this_cluster_manager\"></a>使用 Zookeeper cluster manager</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>如果您从命令行使用Vert.x，则应将此集群管理器对应的jar（将其命名为 <code>vertx-zookeeper-4.0.0.jar</code>\n复制到Vert.x安装目录下的 <code>lib</code> 目录中。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果要在Maven或Gradle项目中使用此群集管理器管理Vert.x 的群集，则只需将\n<code>io.vertx:vertx-zookeeper:4.0.0</code> 添加到项目依赖中。</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x 能够从 classpath 路径的 jar 自动检测并使用出 <code>ClusterManager</code> 的实现。\n不过需要确保在 classpath 没有其他的 <code>ClusterManager</code> 实现。 否则Vert.x会\n选择错误的 ClusterManager</p>\n</div>\n<div class=\"paragraph\">\n<p>如果你要嵌入指定的集群管理器，你也可以通过编程方式来指定。\n在创建Vert.x实例时，通过下面代码来配置集群管理器</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ClusterManager mgr = <span class=\"hljs-keyword\">new</span> ZookeeperClusterManager();\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_this_cluster_manager\"><a class=\"anchor\" href=\"#_configuring_this_cluster_manager\"></a>配置 Zookeeper cluster manager</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>通常情况下，<code>ZookeeperClusterManager</code> 使用 jar 包中内嵌的\n<a href=\"https://github.com/vert-x3/vertx-zookeeper/blob/master/src/main/resources/default-zookeeper.json\"><code>default-zookeeper.json</code></a>\n设置相应的配置。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果要覆盖此配置，可以在 <code>classpath</code> 中添加一个 <code>zookeeper.json</code> 文件。\n如果想在 fat jar 中内嵌 <code>zookeeper.json</code> ，此文件必须在 fat jar 的根目录中。\n如果此文件是一个外部文件，则必须将其添加至 <code>classpath</code> 中。\n举个例子，如果你使用的是Vert.x的 <em>Laundher</em> 类，则可以按以下方式实现：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code># zookeeper.json 在当前路径中\njava -jar ... -cp . -cluster\nvertx run MyVerticle -cp . -cluster\n\n# zookeeper.json 在 conf 目录中\njava -jar ... -cp conf -cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>还有一种方式来覆盖默认的配置文件，那就是利用系统配置 <code>vertx.zookeeper.config</code> 来\n实现：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code># 指定一个外部文件为自定义配置文件\njava -Dvertx.zookeeper.config=./config/my-zookeeper-conf.json -jar ... -cluster\n\n# 从 classpath 中加载一个文件为自定义配置文件\njava -Dvertx.zookeeper.config=classpath:my/package/config/my-cluster-config.json -jar ... -cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果系统变量 <code>vertx.zookeeper.config</code> 值不为空时，将覆盖 <code>classpath</code> 中所有的 <code>zookeeper.json</code> 文件， 但是如果\n加载\n<code>vertx.zookeeper.config</code> 失败时，系统将选取 <code>classpath</code> 任意一个 <code>zookeeper.json</code> ，甚至直接使用默认配置。</p>\n</div>\n<div class=\"paragraph\">\n<p>在配置文件 <code>default-zookeeper.json</code> 中已经通过注释的形式，详细说明每个配置项的作用。</p>\n</div>\n<div class=\"paragraph\">\n<p>同其他集群管理器，亦可通过编程的形式来进行配置，举例：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject zkConfig = <span class=\"hljs-keyword\">new</span> JsonObject();\nzkConfig.put(<span class=\"hljs-string\">\"zookeeperHosts\"</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>);\nzkConfig.put(<span class=\"hljs-string\">\"rootPath\"</span>, <span class=\"hljs-string\">\"io.vertx\"</span>);\nzkConfig.put(<span class=\"hljs-string\">\"retry\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"initialSleepTime\"</span>, <span class=\"hljs-number\">3000</span>)\n    .put(<span class=\"hljs-string\">\"maxTimes\"</span>, <span class=\"hljs-number\">3</span>));\n\n\nClusterManager mgr = <span class=\"hljs-keyword\">new</span> ZookeeperClusterManager(zkConfig);\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\n\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\n通过系统变量 <code>vertx.zookeeper.hosts</code> 也可以达到配置 zookeeper <code>hosts</code> 的目的。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_开启日志\"><a class=\"anchor\" href=\"#_开启日志\"></a>开启日志</h3>\n<div class=\"paragraph\">\n<p>在排除故障时，开启 Zookeeper 日志，将会给予很大的帮助，\n通过日志查看集群管理器是否正常工作。你可以（使用默认的JUL日志记录时）通过\n在 <code>classpath</code> 中添加 <code>vertx-default-jul-logging.properties</code> 文件来配置日志，这是一个标准 java.util.loging（JUL） 配置文件。\n具体配置如下：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>org.apache.zookeeper.level=INFO</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>同时</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>java.util.logging.ConsoleHandler.level=INFO\njava.util.logging.FileHandler.level=INFO</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_about_zookeeper_version\"><a class=\"anchor\" href=\"#_about_zookeeper_version\"></a>Zookeeper 版本</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x 使用 4.3.0 版本的 Curator,其使用 3.4.8 版本的 Zookeeper，因此不支持 3.5.x 中的最新特性。</p>\n</div>\n</div>\n</div>","version":"4.0.0"},"__N_SSG":true}