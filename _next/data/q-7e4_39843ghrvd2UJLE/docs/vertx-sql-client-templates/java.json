{"pageProps":{"slug":"vertx-sql-client-templates/java","title":"SQL 客户端模版","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">用法</a></li>\n<li><a href=\"#_getting_started\">开始</a></li>\n<li><a href=\"#_template_syntax\">模板语法</a></li>\n<li><a href=\"#_row_mapping\">行映射</a></li>\n<li><a href=\"#_anemic_json_row_mapping\">JSON行映射</a></li>\n<li><a href=\"#_parameters_mapping\">参数映射</a></li>\n<li><a href=\"#_anemic_json_parameters_mapping\">JSON 参数映射</a></li>\n<li><a href=\"#_mapping_with_jackson_databind\">用Jackson的数据绑定功能做映射</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_java_datetime_api_mapping\">Java Date/Time API 映射</a></li>\n</ul>\n</li>\n<li><a href=\"#_mapping_with_vert_x_data_objects\">用Vert.x数据对象做映射</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_code_generation\">代码生成</a></li>\n<li><a href=\"#_row_mapping_2\">行映射</a></li>\n<li><a href=\"#_parameters_mapping_2\">参数映射</a></li>\n<li><a href=\"#_java_enum_types_mapping\">Java 枚举类型映射</a></li>\n<li><a href=\"#_naming_format\">命名格式</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>SQL 客户端模版</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>SQL 客户端模版是一个用来方便执行SQL查询的库。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>用法</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>要使用 SQL 客户端模版，需添加如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven（在您的 <code>pom.xml</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-sql-client-templates<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle（在您的 <code>build.gradle</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n implementation <span class=\"hljs-string\">'io.vertx:vertx-sql-client-templates:4.0.2'</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>开始</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>以下是 SQL 模版最简易的使用方式。</p>\n</div>\n<div class=\"paragraph\">\n<p>一个 SQL 模版接收 <em>已命名的</em> 参数，因此，默认情况下，它会接收一个map作为参数载体，而非接收元组（tuple）作为参数。</p>\n</div>\n<div class=\"paragraph\">\n<p>一个SQL 模版默认情况下生成一个类似 <code>PreparedQuery</code> 的 <code>RowSet&lt;Row&gt;</code> 。\n实际上这个模版是 <code>PreparedQuery</code> 的轻量级封装。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Map&lt;String, Object&gt; parameters = Collections.singletonMap(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-number\">1</span>);\n\nSqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">\"SELECT * FROM users WHERE id=#{id}\"</span>)\n  .execute(parameters)\n  .onSuccess(users -&gt; {\n    users.forEach(row -&gt; {\n      System.out.println(row.getString(<span class=\"hljs-string\">\"first_name\"</span>) + <span class=\"hljs-string\">\" \"</span> + row.getString(<span class=\"hljs-string\">\"last_name\"</span>));\n    });\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当您需要执行一个插入或更新操作，而您并不关心执行结果，您可以用 <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/SqlTemplate.html#forUpdate-io.vertx.sqlclient.SqlClient-java.lang.String-\">SqlTemplate.forUpdate</a></code> ：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Map&lt;String, Object&gt; parameters = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\nparameters.put(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-number\">1</span>);\nparameters.put(<span class=\"hljs-string\">\"firstName\"</span>, <span class=\"hljs-string\">\"Dale\"</span>);\nparameters.put(<span class=\"hljs-string\">\"lastName\"</span>, <span class=\"hljs-string\">\"Cooper\"</span>);\n\nSqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">\"INSERT INTO users VALUES (#{id},#{firstName},#{lastName})\"</span>)\n  .execute(parameters)\n  .onSuccess(v -&gt; {\n    System.out.println(<span class=\"hljs-string\">\"Successful update\"</span>);\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_template_syntax\"><a class=\"anchor\" href=\"#_template_syntax\"></a>模板语法</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>模板语法使用 <code>#{XXX}</code> 的语法，其中 <code>{XXX}</code> 是一个有效的 <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.8\">java identifier</a> 字符串\n（不受关键字约束）</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以用反斜杠（<code>\\</code>）来转义 <code><mark></code> 字符，例如 <code>\\</mark>{foo}</code> 会被解析成 <code>#{foo}</code> 字符串，而不是名为 <code>foo</code> 的参数。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_row_mapping\"><a class=\"anchor\" href=\"#_row_mapping\"></a>行映射</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>默认情况下模版以 <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> 作为结果值类型。</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以提供一个自定义的 <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/RowMapper.html\">RowMapper</a></code> 来实现底层的映射操作：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">RowMapper&lt;User&gt; ROW_USER_MAPPER = row -&gt; {\n  User user = <span class=\"hljs-keyword\">new</span> User();\n  user.id = row.getInteger(<span class=\"hljs-string\">\"id\"</span>);\n  user.firstName = row.getString(<span class=\"hljs-string\">\"firstName\"</span>);\n  user.lastName = row.getString(<span class=\"hljs-string\">\"lastName\"</span>);\n  <span class=\"hljs-keyword\">return</span> user;\n};</code></pre>\n</div>\n</div>\n<div id=\"row_mapping_with_custom_mapper\" class=\"paragraph\">\n<p>实现底层映射操作：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">\"SELECT * FROM users WHERE id=#{id}\"</span>)\n  .mapTo(ROW_USER_MAPPER)\n  .execute(Collections.singletonMap(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-number\">1</span>))\n  .onSuccess(users -&gt; {\n    users.forEach(user -&gt; {\n      System.out.println(user.firstName + <span class=\"hljs-string\">\" \"</span> + user.lastName);\n    });\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_anemic_json_row_mapping\"><a class=\"anchor\" href=\"#_anemic_json_row_mapping\"></a>JSON行映射</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>（译者注：原文为 anemic json row mapping，即anemic mapping，指单纯的属性映射，无行为）</p>\n</div>\n<div class=\"paragraph\">\n<p>JSON 行映射是一个简单的模板映射，它用 <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html#toJson--\">toJson</a></code> 将数据行映射成JSON对象。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">\"SELECT * FROM users WHERE id=#{id}\"</span>)\n  .mapTo(Row::toJson)\n  .execute(Collections.singletonMap(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-number\">1</span>))\n  .onSuccess(users -&gt; {\n    users.forEach(user -&gt; {\n      System.out.println(user.encode());\n    });\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_parameters_mapping\"><a class=\"anchor\" href=\"#_parameters_mapping\"></a>参数映射</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>模板默认接收一个 <code>Map&lt;String, Object&gt;</code> 作为输入参数。</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以提供一个自定义的映射（Mapper）：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">TupleMapper&lt;User&gt; PARAMETERS_USER_MAPPER = TupleMapper.mapper(user -&gt; {\n  Map&lt;String, Object&gt; parameters = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n  parameters.put(<span class=\"hljs-string\">\"id\"</span>, user.id);\n  parameters.put(<span class=\"hljs-string\">\"firstName\"</span>, user.firstName);\n  parameters.put(<span class=\"hljs-string\">\"lastName\"</span>, user.lastName);\n  <span class=\"hljs-keyword\">return</span> parameters;\n});</code></pre>\n</div>\n</div>\n<div id=\"params_mapping_with_custom_mapper\" class=\"paragraph\">\n<p>实现参数映射：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">User user = <span class=\"hljs-keyword\">new</span> User();\nuser.id = <span class=\"hljs-number\">1</span>;\nuser.firstName = <span class=\"hljs-string\">\"Dale\"</span>;\nuser.firstName = <span class=\"hljs-string\">\"Cooper\"</span>;\n\nSqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">\"INSERT INTO users VALUES (#{id},#{firstName},#{lastName})\"</span>)\n  .mapFrom(PARAMETERS_USER_MAPPER)\n  .execute(user)\n  .onSuccess(res -&gt; {\n    System.out.println(<span class=\"hljs-string\">\"User inserted\"</span>);\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您也可以轻松搞定批处理：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">\"INSERT INTO users VALUES (#{id},#{firstName},#{lastName})\"</span>)\n  .mapFrom(PARAMETERS_USER_MAPPER)\n  .executeBatch(users)\n  .onSuccess(res -&gt; {\n    System.out.println(<span class=\"hljs-string\">\"Users inserted\"</span>);\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_anemic_json_parameters_mapping\"><a class=\"anchor\" href=\"#_anemic_json_parameters_mapping\"></a>JSON 参数映射</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>（译者注：原文为 anemic json parameters mapping，即anemic mapping，指单纯的属性映射，无行为）</p>\n</div>\n<div class=\"paragraph\">\n<p>JSON 参数映射是一个在模板参数和JSON对象之间的简单映射：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject user = <span class=\"hljs-keyword\">new</span> JsonObject();\nuser.put(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-number\">1</span>);\nuser.put(<span class=\"hljs-string\">\"firstName\"</span>, <span class=\"hljs-string\">\"Dale\"</span>);\nuser.put(<span class=\"hljs-string\">\"lastName\"</span>, <span class=\"hljs-string\">\"Cooper\"</span>);\n\nSqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">\"INSERT INTO users VALUES (#{id},#{firstName},#{lastName})\"</span>)\n  .mapFrom(TupleMapper.jsonObject())\n  .execute(user)\n  .onSuccess(res -&gt; {\n    System.out.println(<span class=\"hljs-string\">\"User inserted\"</span>);\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mapping_with_jackson_databind\"><a class=\"anchor\" href=\"#_mapping_with_jackson_databind\"></a>用Jackson的数据绑定功能做映射</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以用Jackson的数据绑定功能来实现映射。</p>\n</div>\n<div class=\"paragraph\">\n<p>您需要添加 jackson-databind 依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-databind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${jackson.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'com.fasterxml.jackson.core:jackson-databind:${jackson.version}'</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>行映射是通过用键值对（key/value pair）来创建 <code>JsonObject</code> 实现的，然后\n调用 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#mapTo-java.lang.Class-\">mapTo</a></code> 来将它映射为任何Java类。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">\"SELECT * FROM users WHERE id=#{id}\"</span>)\n  .mapTo(User<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n  .<span class=\"hljs-title\">execute</span>(<span class=\"hljs-title\">Collections</span>.<span class=\"hljs-title\">singletonMap</span>(\"<span class=\"hljs-title\">id</span>\", 1))\n  .<span class=\"hljs-title\">onSuccess</span>(<span class=\"hljs-title\">users</span> -&gt; </span>{\n    users.forEach(user -&gt; {\n      System.out.println(user.firstName + <span class=\"hljs-string\">\" \"</span> + user.lastName);\n    });\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>相似的，参数映射是用 <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html#mapFrom-java.lang.Object-\">JsonObject.mapFrom</a></code> 将对象映射为 <code>JsonObject</code> 而实现的，\n而后用 key/value pairs 来生成模板参数。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">User u = <span class=\"hljs-keyword\">new</span> User();\nu.id = <span class=\"hljs-number\">1</span>;\n\nSqlTemplate\n  .forUpdate(client, <span class=\"hljs-string\">\"INSERT INTO users VALUES (#{id},#{firstName},#{lastName})\"</span>)\n  .mapFrom(User<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n  .<span class=\"hljs-title\">execute</span>(<span class=\"hljs-title\">u</span>)\n  .<span class=\"hljs-title\">onSuccess</span>(<span class=\"hljs-title\">res</span> -&gt; </span>{\n    System.out.println(<span class=\"hljs-string\">\"User inserted\"</span>);\n  });</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_java_datetime_api_mapping\"><a class=\"anchor\" href=\"#_java_datetime_api_mapping\"></a>Java Date/Time API 映射</h3>\n<div class=\"paragraph\">\n<p>您可以用 <em>jackson-modules-java8</em> 的Jackson扩展包来实现对 <code>java.time</code> 的映射。</p>\n</div>\n<div class=\"paragraph\">\n<p>您需要加入 Jackson JSR 310 datatype 依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${jackson.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson.version}'</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>然后您需要将时间模块注册到 Jackson的 <code>ObjectMapper</code> ：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ObjectMapper mapper = io.vertx.core.json.jackson.DatabindCodec.mapper();\n\nmapper.registerModule(<span class=\"hljs-keyword\">new</span> JavaTimeModule());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您可以用 <code>java.time</code> 包中的类型，例如 <code>LocalDateTime</code> ：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LocalDateTimePojo</span> </span>{\n\n <span class=\"hljs-keyword\">public</span> LocalDateTime localDateTime;\n\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mapping_with_vert_x_data_objects\"><a class=\"anchor\" href=\"#_mapping_with_vert_x_data_objects\"></a>用Vert.x数据对象做映射</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>SQL 客户端模版组件可为 Vert.x 数据对象生成映射方法。</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x 数据对象是指被 <code>@DataObject</code> 注解修饰的普通 Java Bean。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_code_generation\"><a class=\"anchor\" href=\"#_code_generation\"></a>代码生成</h3>\n<div class=\"paragraph\">\n<p>任何被 <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/RowMapped.html\">@RowMapped</a></code> 或 <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/ParametersMapped.html\">@ParametersMapped</a></code> 注解修饰的数据对象将触发相关映射类的生成。</p>\n</div>\n<div class=\"paragraph\">\n<p><em>codegen</em> 注解执行器在编译期间生成这些类。\n这是Java编译器的特性，所以 <em>不需要额外步骤</em> ，仅需要在构建时保证配置的正确性：</p>\n</div>\n<div class=\"paragraph\">\n<p>构建时添加 <code>io.vertx:vertx-codegen:processor</code> 和 <code>io.vertx:vertx-sql-client-templates</code>\n依赖：</p>\n</div>\n<div class=\"paragraph\">\n<p>以下是Maven配置示例</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-codegen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">classifier</span>&gt;</span>processor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">classifier</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-sql-client-templates<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Gradle中依然可以使用此特性：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>annotationProcessor \"io.vertx:vertx-codegen:4.0.2:processor\"\ncompile \"io.vertx:vertx-sql-client-templates:4.0.2\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>IDE都会对 annotation processors 提供支持</p>\n</div>\n<div class=\"paragraph\">\n<p>codegen <code>processor</code> classifier 在jar中添加服务代理注解执行器的自动配置，\n这是通过 <code>META-INF/services</code> 机制实现的。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果需要，也可以用普通jar包，但是您需要额外声明注解执行器。\nMaven 示例：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">annotationProcessors</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">annotationProcessor</span>&gt;</span>io.vertx.codegen.CodeGenProcessor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">annotationProcessor</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">annotationProcessors</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_row_mapping_2\"><a class=\"anchor\" href=\"#_row_mapping_2\"></a>行映射</h3>\n<div class=\"paragraph\">\n<p>您可以通过在数据对象上声明 <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/RowMapped.html\">@RowMapped</a></code> 注解的方式生成一个行映射器。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@RowMapped</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>默认情况下，每一列的名称与数据对象属性的名称相对应，例如 <code>userName</code> 属性会\n绑定 <code>userName</code> 列。</p>\n</div>\n<div class=\"paragraph\">\n<p>通过 <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/Column.html\">@Column</a></code> 注解，您可以用自定义名称。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@RowMapped</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"first_name\"</span>)\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"last_name\"</span>)\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您可以用注解修饰属性、getter、setter方法。</p>\n</div>\n<div class=\"paragraph\">\n<p>生成的映射器可以如 <a href=\"#row_mapping_with_custom_mapper\">行映射章节</a> 所示来做行映射。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">\"SELECT * FROM users WHERE id=#{id}\"</span>)\n  .mapTo(UserDataObjectRowMapper.INSTANCE)\n  .execute(Collections.singletonMap(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-number\">1</span>))\n  .onSuccess(users -&gt; {\n    users.forEach(user -&gt; {\n      System.out.println(user.getFirstName() + <span class=\"hljs-string\">\" \"</span> + user.getLastName());\n    });\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_parameters_mapping_2\"><a class=\"anchor\" href=\"#_parameters_mapping_2\"></a>参数映射</h3>\n<div class=\"paragraph\">\n<p>您可以通过在数据对象上加 <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/ParametersMapped.html\">@ParametersMapped</a></code> 注解的方式生成参数映射器</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@ParametersMapped</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>默认情况下，每个参数的名称和数据对象的属性名称相对应，例如\n<code>userName</code> 属性绑定到 <code>userName</code> 参数。</p>\n</div>\n<div class=\"paragraph\">\n<p>通过 <code><a href=\"../../apidocs/io/vertx/sqlclient/templates/annotations/TemplateParameter.html\">@TemplateParameter</a></code> 注解，您可以使用自定义参数名称。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@ParametersMapped</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n  <span class=\"hljs-meta\">@TemplateParameter</span>(name = <span class=\"hljs-string\">\"first_name\"</span>)\n  <span class=\"hljs-keyword\">private</span> String firstName;\n  <span class=\"hljs-meta\">@TemplateParameter</span>(name = <span class=\"hljs-string\">\"last_name\"</span>)\n  <span class=\"hljs-keyword\">private</span> String lastName;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFirstName</span><span class=\"hljs-params\">(String firstName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.firstName = firstName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> lastName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLastName</span><span class=\"hljs-params\">(String lastName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.lastName = lastName;\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您可以用注解修饰属性、getter、setter方法。</p>\n</div>\n<div class=\"paragraph\">\n<p>生成的映射器可以用来做参数映射，正如 <a href=\"#params_mapping_with_custom_mapper\">参数映射章节</a> 所示</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">UserDataObject user = <span class=\"hljs-keyword\">new</span> UserDataObject().setId(<span class=\"hljs-number\">1</span>);\n\nSqlTemplate\n  .forQuery(client, <span class=\"hljs-string\">\"SELECT * FROM users WHERE id=#{id}\"</span>)\n  .mapFrom(UserDataObjectParamMapper.INSTANCE)\n  .execute(user)\n  .onSuccess(users -&gt; {\n    users.forEach(row -&gt; {\n      System.out.println(row.getString(<span class=\"hljs-string\">\"firstName\"</span>) + <span class=\"hljs-string\">\" \"</span> + row.getString(<span class=\"hljs-string\">\"lastName\"</span>));\n    });\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_java_enum_types_mapping\"><a class=\"anchor\" href=\"#_java_enum_types_mapping\"></a>Java 枚举类型映射</h3>\n<div class=\"paragraph\">\n<p>如果客户端（例如 Reactive PostgreSQL client）提供了支持，那么您可以映射Java枚举类型。</p>\n</div>\n<div class=\"paragraph\">\n<p>Java枚举类经常被映射为 string/number/自定义数据库枚举类型。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_naming_format\"><a class=\"anchor\" href=\"#_naming_format\"></a>命名格式</h3>\n<div class=\"paragraph\">\n<p>默认的模版下，参数和数据库列之间的映射不忽略大小写。您可以在 <code>Column</code>\n和 <code>TemplateParameter</code> 注解中用您喜欢的格式来重写默认名称。</p>\n</div>\n<div class=\"paragraph\">\n<p>您也可以在 <code>RowMapped</code> 和 <code>ParametersMapped</code> 注解中配置一个特定的大小写格式：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@DataObject</span>\n<span class=\"hljs-meta\">@RowMapped</span>(formatter = SnakeCase<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n@<span class=\"hljs-title\">ParametersMapped</span>(<span class=\"hljs-title\">formatter</span> </span>= QualifiedCase<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n<span class=\"hljs-title\">class</span> <span class=\"hljs-title\">UserDataObject</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x提供了下列大小写模式：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/CamelCase.html\">CamelCase</a></code> : <code>FirstName</code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/LowerCamelCase.html\">LowerCamelCase</a></code> : <code>firstName</code> - 类似驼峰命名法但是小写字母开头，这是默认方式。</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/SnakeCase.html\">SnakeCase</a></code> : <code>first_name</code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/KebabCase.html\">KebabCase</a></code> : <code>first-name</code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/codegen/format/QualifiedCase.html\">QualifiedCase</a></code> : <code>first.name</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}