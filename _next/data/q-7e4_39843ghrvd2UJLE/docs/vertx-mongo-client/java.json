{"pageProps":{"slug":"vertx-mongo-client/java","title":"Vert.x MongoDB Client","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_mongodb_client\">Using Vert.x MongoDB Client</a></li>\n<li><a href=\"#_creating_a_client\">Creating a client</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_using_the_default_shared_pool\">Using the default shared pool</a></li>\n<li><a href=\"#_specifying_a_pool_source_name\">Specifying a pool source name</a></li>\n<li><a href=\"#_creating_a_client_with_a_non_shared_data_pool\">Creating a client with a non shared data pool</a></li>\n</ul>\n</li>\n<li><a href=\"#_using_the_api\">Using the API</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_saving_documents\">Saving documents</a></li>\n<li><a href=\"#_inserting_documents\">Inserting documents</a></li>\n<li><a href=\"#_updating_documents\">Updating documents</a></li>\n<li><a href=\"#_replacing_documents\">Replacing documents</a></li>\n<li><a href=\"#_bulk_operations\">Bulk operations</a></li>\n<li><a href=\"#_finding_documents\">Finding documents</a></li>\n<li><a href=\"#_finding_documents_in_batches\">Finding documents in batches</a></li>\n<li><a href=\"#_finding_a_single_document\">Finding a single document</a></li>\n<li><a href=\"#_removing_documents\">Removing documents</a></li>\n<li><a href=\"#_removing_a_single_document\">Removing a single document</a></li>\n<li><a href=\"#_counting_documents\">Counting documents</a></li>\n<li><a href=\"#_managing_mongodb_collections\">Managing MongoDB collections</a></li>\n<li><a href=\"#_running_other_mongodb_commands\">Running other MongoDB commands</a></li>\n<li><a href=\"#_mongodb_extended_json_support\">MongoDB Extended JSON support</a></li>\n<li><a href=\"#_getting_distinct_values\">Getting distinct values</a></li>\n</ul>\n</li>\n<li><a href=\"#_storingretrieving_files_and_binary_data\">Storing/Retrieving files and binary data</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_get_the_mongogridfsclient_to_interact_with_gridfs\">Get the MongoGridFsClient to interact with GridFS.</a></li>\n<li><a href=\"#_drop_an_entire_file_bucket_from_gridfs\">Drop an entire file bucket from GridFS.</a></li>\n<li><a href=\"#_find_all_file_ids_in_a_gridfs_bucket\">Find all file IDs in a GridFS bucket.</a></li>\n<li><a href=\"#_find_file_ids_in_a_gridfs_bucket_matching_a_query\">Find file IDs in a GridFS bucket matching a query.</a></li>\n<li><a href=\"#_delete_a_file_in_gridfs_based_on_its_id\">Delete a file in GridFS based on its ID.</a></li>\n<li><a href=\"#_upload_a_file_in_gridfs\">Upload a file in GridFS</a></li>\n<li><a href=\"#_upload_a_file_in_gridfs_with_options\">Upload a file in GridFS with options.</a></li>\n<li><a href=\"#_download_a_file_previously_stored_in_gridfs\">Download a file previously stored in GridFS</a></li>\n<li><a href=\"#_download_a_file_previously_stored_in_gridfs_given_its_id\">Download a file previously stored in GridFS given its ID</a></li>\n<li><a href=\"#_download_a_file_from_gridfs_to_a_new_name\">Download a file from GridFS to a new name</a></li>\n<li><a href=\"#_upload_a_stream_to_gridfs\">Upload a Stream to GridFS</a></li>\n<li><a href=\"#_upload_a_stream_to_gridfs_with_options\">Upload a Stream to GridFS with Options</a></li>\n<li><a href=\"#_download_a_stream_from_gridfs_using_file_name\">Download a Stream from GridFS using File Name</a></li>\n<li><a href=\"#_download_a_stream_with_options_from_gridfs_using_file_name\">Download a Stream with Options from GridFS using File Name</a></li>\n<li><a href=\"#_download_a_stream_from_gridfs_using_id\">Download a Stream from GridFS using ID</a></li>\n</ul>\n</li>\n<li><a href=\"#_configuring_the_client\">Configuring the client</a></li>\n<li><a href=\"#_rxjava_2_api\">RxJava 2 API</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_creating_an_rxified_client\">Creating an Rxified client</a></li>\n<li><a href=\"#_finding_documents_in_batches_2\">Finding documents in batches</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x MongoDB Client</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A Vert.x client allowing applications to interact with a MongoDB instance, whether that&#8217;s\nsaving, retrieving, searching, or deleting documents. Mongo is a great match for persisting data in a Vert.x application\nas it natively handles JSON (BSON) documents.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Features</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Completely non-blocking</p>\n</li>\n<li>\n<p>Custom codec to support fast serialization to/from Vert.x JSON</p>\n</li>\n<li>\n<p>Supports a majority of the configuration options from the MongoDB Java Driver</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This client is based on the\n<a href=\"https://mongodb.github.io/mongo-java-driver/4.1/driver-reactive/getting-started/quick-start/\">MongoDB ReactiveStreams Driver</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_mongodb_client\"><a class=\"anchor\" href=\"#_using_vert_x_mongodb_client\"></a>Using Vert.x MongoDB Client</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use this project, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-mongo-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-mongo-client:4.0.2'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_client\"><a class=\"anchor\" href=\"#_creating_a_client\"></a>Creating a client</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can create a client in several ways:</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_the_default_shared_pool\"><a class=\"anchor\" href=\"#_using_the_default_shared_pool\"></a>Using the default shared pool</h3>\n<div class=\"paragraph\">\n<p>In most cases you will want to share a pool between different client instances.</p>\n</div>\n<div class=\"paragraph\">\n<p>E.g. you scale your application by deploying multiple instances of your verticle and you want each verticle instance\nto share the same pool so you don&#8217;t end up with multiple pools</p>\n</div>\n<div class=\"paragraph\">\n<p>The simplest way to do this is as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MongoClient client = MongoClient.createShared(vertx, config);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The first call to <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#createShared-io.vertx.core.Vertx-io.vertx.core.json.JsonObject-\">MongoClient.createShared</a></code>\nwill actually create the pool, and the specified config will be used.</p>\n</div>\n<div class=\"paragraph\">\n<p>Subsequent calls will return a new client instance that uses the same pool, so the configuration won&#8217;t be used.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_specifying_a_pool_source_name\"><a class=\"anchor\" href=\"#_specifying_a_pool_source_name\"></a>Specifying a pool source name</h3>\n<div class=\"paragraph\">\n<p>You can create a client specifying a pool source name as follows</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MongoClient client = MongoClient.createShared(vertx, config, <span class=\"hljs-string\">\"MyPoolName\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If different clients are created using the same Vert.x instance and specifying the same pool name, they will\nshare the same pool.</p>\n</div>\n<div class=\"paragraph\">\n<p>The first call to <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#createShared-io.vertx.core.Vertx-io.vertx.core.json.JsonObject-\">MongoClient.createShared</a></code>\nwill actually create the pool, and the specified config will be used.</p>\n</div>\n<div class=\"paragraph\">\n<p>Subsequent calls will return a new client instance that uses the same pool, so the configuration won&#8217;t be used.</p>\n</div>\n<div class=\"paragraph\">\n<p>Use this way of creating if you wish different groups of clients to have different pools, e.g. they&#8217;re\ninteracting with different databases.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_creating_a_client_with_a_non_shared_data_pool\"><a class=\"anchor\" href=\"#_creating_a_client_with_a_non_shared_data_pool\"></a>Creating a client with a non shared data pool</h3>\n<div class=\"paragraph\">\n<p>In most cases you will want to share a pool between different client instances.\nHowever, it&#8217;s possible you want to create a client instance that doesn&#8217;t share its pool with any other client.</p>\n</div>\n<div class=\"paragraph\">\n<p>In that case you can use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#create-io.vertx.core.Vertx-io.vertx.core.json.JsonObject-\">MongoClient.create</a></code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MongoClient client = MongoClient.create(vertx, config);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This is equivalent to calling <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#createShared-io.vertx.core.Vertx-io.vertx.core.json.JsonObject-java.lang.String-\">MongoClient.createShared</a></code>\nwith a unique pool name each time.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_api\"><a class=\"anchor\" href=\"#_using_the_api\"></a>Using the API</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The client API is represented by <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html\">MongoClient</a></code>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_saving_documents\"><a class=\"anchor\" href=\"#_saving_documents\"></a>Saving documents</h3>\n<div class=\"paragraph\">\n<p>To save a document you use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#save-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">save</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the document has no <code>\\_id</code> field, it is inserted, otherwise, it is <em>upserted</em>.\nUpserted means it is inserted if it doesn&#8217;t already exist, otherwise it is updated.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the document is inserted and has no id, then the id field generated will be returned to the result handler.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of saving a document and getting the id back</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>);\nmongoClient.save(<span class=\"hljs-string\">\"books\"</span>, document, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String id = res.result();\n    System.out.println(<span class=\"hljs-string\">\"Saved book with id \"</span> + id);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And here&#8217;s an example of saving a document which already has an id.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>)\n  .put(<span class=\"hljs-string\">\"_id\"</span>, <span class=\"hljs-string\">\"123244\"</span>);\nmongoClient.save(<span class=\"hljs-string\">\"books\"</span>, document, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// ...</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_inserting_documents\"><a class=\"anchor\" href=\"#_inserting_documents\"></a>Inserting documents</h3>\n<div class=\"paragraph\">\n<p>To insert a document you use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#insert-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">insert</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the document is inserted and has no id, then the id field generated will be returned to the result handler.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>);\nmongoClient.insert(<span class=\"hljs-string\">\"books\"</span>, document, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String id = res.result();\n    System.out.println(<span class=\"hljs-string\">\"Inserted book with id \"</span> + id);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If a document is inserted with an id, and a document with that id already exists, the insert will fail:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>)\n  .put(<span class=\"hljs-string\">\"_id\"</span>, <span class=\"hljs-string\">\"123244\"</span>);\nmongoClient.insert(<span class=\"hljs-string\">\"books\"</span>, document, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">//...</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Will fail if the book with that id already exists.</span>\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_updating_documents\"><a class=\"anchor\" href=\"#_updating_documents\"></a>Updating documents</h3>\n<div class=\"paragraph\">\n<p>To update a documents you use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#updateCollection-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">updateCollection</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This updates one or multiple documents in a collection.\nThe json object that is passed in the <code>updateCollection</code> parameter must contain\n<a href=\"http://docs.mongodb.org/manual/reference/operator/update-field/\">Update Operators</a>\nand determines how the object is updated.</p>\n</div>\n<div class=\"paragraph\">\n<p>The json object specified in the query parameter determines which documents in the collection will be updated.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of updating a document in the books collection:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>);\n<span class=\"hljs-comment\">// Set the author field</span>\nJsonObject update = <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$set\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>));\nmongoClient.updateCollection(<span class=\"hljs-string\">\"books\"</span>, query, update, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Book updated !\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To specify if the update should upsert or update multiple documents, use\n<code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#updateCollectionWithOptions-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.json.JsonObject-io.vertx.ext.mongo.UpdateOptions-io.vertx.core.Handler-\">updateCollectionWithOptions</a></code>\nand pass in an instance of <code><a href=\"../../apidocs/io/vertx/ext/mongo/UpdateOptions.html\">UpdateOptions</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>multi</code></dt>\n<dd>\n<p>set to true to update multiple documents</p>\n</dd>\n<dt class=\"hdlist1\"><code>upsert</code></dt>\n<dd>\n<p>set to true to insert the document if the query doesn&#8217;t match</p>\n</dd>\n<dt class=\"hdlist1\"><code>writeConcern</code></dt>\n<dd>\n<p>the write concern for this operation</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>);\n<span class=\"hljs-comment\">// Set the author field</span>\nJsonObject update = <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$set\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>));\nUpdateOptions options = <span class=\"hljs-keyword\">new</span> UpdateOptions().setMulti(<span class=\"hljs-keyword\">true</span>);\nmongoClient.updateCollectionWithOptions(<span class=\"hljs-string\">\"books\"</span>, query, update, options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Book updated !\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_replacing_documents\"><a class=\"anchor\" href=\"#_replacing_documents\"></a>Replacing documents</h3>\n<div class=\"paragraph\">\n<p>To replace documents you use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#replaceDocuments-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">replaceDocuments</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is similar to the update operation, however it does not take any operator.\nInstead it replaces the entire document with the one provided.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of replacing a document in the books collection</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>);\nJsonObject replace = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Lord of the Rings\"</span>)\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>);\nmongoClient.replaceDocuments(<span class=\"hljs-string\">\"books\"</span>, query, replace, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Book replaced !\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_bulk_operations\"><a class=\"anchor\" href=\"#_bulk_operations\"></a>Bulk operations</h3>\n<div class=\"paragraph\">\n<p>To execute multiple insert, update, replace, or delete operations at once, use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#bulkWrite-java.lang.String-java.util.List-io.vertx.core.Handler-\">bulkWrite</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can pass a list of <code><a href=\"../../apidocs/io/vertx/ext/mongo/BulkOperation.html\">BulkOperations</a></code>, with each working similar to the matching single operation.\nYou can pass as many operations, even of the same type, as you wish.</p>\n</div>\n<div class=\"paragraph\">\n<p>To specify if the bulk operation should be executed in order, and with what write option, use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#bulkWriteWithOptions-java.lang.String-java.util.List-io.vertx.ext.mongo.BulkWriteOptions-io.vertx.core.Handler-\">bulkWriteWithOptions</a></code>\nand pass an instance of <code><a href=\"../../apidocs/io/vertx/ext/mongo/BulkWriteOptions.html\">BulkWriteOptions</a></code>.\nFor more explanation what ordered means, see\n<a href=\"https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite/#execution-of-operations\">Execution of Operations</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_finding_documents\"><a class=\"anchor\" href=\"#_finding_documents\"></a>Finding documents</h3>\n<div class=\"paragraph\">\n<p>To find documents you use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#find-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">find</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>query</code> parameter is used to match the documents in the collection.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s a simple example with an empty query that will match all books:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject();\nmongoClient.find(<span class=\"hljs-string\">\"books\"</span>, query, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-keyword\">for</span> (JsonObject json : res.result()) {\n      System.out.println(json.encodePrettily());\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s another example that will match all books by Tolkien:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>);\nmongoClient.find(<span class=\"hljs-string\">\"books\"</span>, query, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-keyword\">for</span> (JsonObject json : res.result()) {\n      System.out.println(json.encodePrettily());\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The matching documents are returned as a list of json objects in the result handler.</p>\n</div>\n<div class=\"paragraph\">\n<p>To specify things like what fields to return, how many results to return, etc use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#findWithOptions-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.ext.mongo.FindOptions-io.vertx.core.Handler-\">findWithOptions</a></code>\nand pass in the an instance of <code><a href=\"../../apidocs/io/vertx/ext/mongo/FindOptions.html\">FindOptions</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>fields</code></dt>\n<dd>\n<p>The fields to return in the results. Defaults to <code>null</code>, meaning all fields will be returned</p>\n</dd>\n<dt class=\"hdlist1\"><code>sort</code></dt>\n<dd>\n<p>The fields to sort by. Defaults to <code>null</code>.</p>\n</dd>\n<dt class=\"hdlist1\"><code>limit</code></dt>\n<dd>\n<p>The limit of the number of results to return. Default to <code>-1</code>, meaning all results will be returned.</p>\n</dd>\n<dt class=\"hdlist1\"><code>skip</code></dt>\n<dd>\n<p>The number of documents to skip before returning the results. Defaults to <code>0</code>.</p>\n</dd>\n</dl>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_finding_documents_in_batches\"><a class=\"anchor\" href=\"#_finding_documents_in_batches\"></a>Finding documents in batches</h3>\n<div class=\"paragraph\">\n<p>When dealing with large data sets, it is not advised to use the\n<code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#find-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">find</a></code> and\n<code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#findWithOptions-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.ext.mongo.FindOptions-io.vertx.core.Handler-\">findWithOptions</a></code> methods.\nIn order to avoid inflating the whole response into memory, use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#findBatch-java.lang.String-io.vertx.core.json.JsonObject-\">findBatch</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>);\nmongoClient.findBatch(<span class=\"hljs-string\">\"book\"</span>, query)\n  .exceptionHandler(throwable -&gt; throwable.printStackTrace())\n  .endHandler(v -&gt; System.out.println(<span class=\"hljs-string\">\"End of research\"</span>))\n  .handler(doc -&gt; System.out.println(<span class=\"hljs-string\">\"Found doc: \"</span> + doc.encodePrettily()));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The matching documents are emitted one by one by the <code><a href=\"../../apidocs/io/vertx/core/streams/ReadStream.html\">ReadStream</a></code> handler.</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/mongo/FindOptions.html\">FindOptions</a></code> has an extra parameter <code>batchSize</code> which you can use to set the number of documents to load at once:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>);\nFindOptions options = <span class=\"hljs-keyword\">new</span> FindOptions().setBatchSize(<span class=\"hljs-number\">100</span>);\nmongoClient.findBatchWithOptions(<span class=\"hljs-string\">\"book\"</span>, query, options)\n  .exceptionHandler(throwable -&gt; throwable.printStackTrace())\n  .endHandler(v -&gt; System.out.println(<span class=\"hljs-string\">\"End of research\"</span>))\n  .handler(doc -&gt; System.out.println(<span class=\"hljs-string\">\"Found doc: \"</span> + doc.encodePrettily()));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>By default, <code>batchSize</code> is set to 20.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_finding_a_single_document\"><a class=\"anchor\" href=\"#_finding_a_single_document\"></a>Finding a single document</h3>\n<div class=\"paragraph\">\n<p>To find a single document you use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#findOne-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">findOne</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This works just like <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#find-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">find</a></code> but it returns just the first matching document.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_removing_documents\"><a class=\"anchor\" href=\"#_removing_documents\"></a>Removing documents</h3>\n<div class=\"paragraph\">\n<p>To remove documents use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#removeDocuments-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">removeDocuments</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>query</code> parameter is used to match the documents in the collection to determine which ones to remove.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of removing all Tolkien books:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>);\nmongoClient.removeDocuments(<span class=\"hljs-string\">\"books\"</span>, query, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Never much liked Tolkien stuff!\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_removing_a_single_document\"><a class=\"anchor\" href=\"#_removing_a_single_document\"></a>Removing a single document</h3>\n<div class=\"paragraph\">\n<p>To remove a single document you use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#removeDocument-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">removeDocument</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This works just like <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#removeDocuments-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">removeDocuments</a></code> but it removes just the first matching document.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_counting_documents\"><a class=\"anchor\" href=\"#_counting_documents\"></a>Counting documents</h3>\n<div class=\"paragraph\">\n<p>To count documents use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#count-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">count</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example that counts the number of Tolkien books. The number is passed to the result handler.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>);\nmongoClient.count(<span class=\"hljs-string\">\"books\"</span>, query, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-keyword\">long</span> num = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_managing_mongodb_collections\"><a class=\"anchor\" href=\"#_managing_mongodb_collections\"></a>Managing MongoDB collections</h3>\n<div class=\"paragraph\">\n<p>All MongoDB documents are stored in collections.</p>\n</div>\n<div class=\"paragraph\">\n<p>To get a list of all collections you can use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#getCollections-io.vertx.core.Handler-\">getCollections</a></code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mongoClient.getCollections(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    List&lt;String&gt; collections = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To create a new collection you can use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#createCollection-java.lang.String-io.vertx.core.Handler-\">createCollection</a></code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mongoClient.createCollection(<span class=\"hljs-string\">\"mynewcollectionr\"</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// Created ok!</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To drop a collection you can use <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#dropCollection-java.lang.String-io.vertx.core.Handler-\">dropCollection</a></code></p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nDropping a collection will delete all documents within it!\n</td>\n</tr>\n</table>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mongoClient.dropCollection(<span class=\"hljs-string\">\"mynewcollectionr\"</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// Dropped ok!</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_running_other_mongodb_commands\"><a class=\"anchor\" href=\"#_running_other_mongodb_commands\"></a>Running other MongoDB commands</h3>\n<div class=\"paragraph\">\n<p>You can run arbitrary MongoDB commands with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#runCommand-java.lang.String-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">runCommand</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Commands can be used to run more advanced MongoDB features, such as using MapReduce.\nFor more information see the mongo docs for supported <a href=\"http://docs.mongodb.org/manual/reference/command\">Commands</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of running an aggregate command. Note that the command name must be specified as a parameter\nand also be contained in the JSON that represents the command. This is because JSON is not ordered but BSON is\nordered and MongoDB expects the first BSON entry to be the name of the command. In order for us to know which\nof the entries in the JSON is the command name it must be specified as a parameter.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject command = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"aggregate\"</span>, <span class=\"hljs-string\">\"collection_name\"</span>)\n  .put(<span class=\"hljs-string\">\"pipeline\"</span>, <span class=\"hljs-keyword\">new</span> JsonArray());\nmongoClient.runCommand(<span class=\"hljs-string\">\"aggregate\"</span>, command, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    JsonArray resArr = res.result().getJsonArray(<span class=\"hljs-string\">\"result\"</span>);\n    <span class=\"hljs-comment\">// etc</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_mongodb_extended_json_support\"><a class=\"anchor\" href=\"#_mongodb_extended_json_support\"></a>MongoDB Extended JSON support</h3>\n<div class=\"paragraph\">\n<p>For now, only <code>date</code>, <code>oid</code> and <code>binary</code> types are supported\n(see <a href=\"http://docs.mongodb.org/manual/reference/mongodb-extended-json\">MongoDB Extended JSON</a>).</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of inserting a document with a <code>date</code> field:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>)\n  <span class=\"hljs-comment\">//ISO-8601 date</span>\n  .put(<span class=\"hljs-string\">\"publicationDate\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$date\"</span>, <span class=\"hljs-string\">\"1937-09-21T00:00:00+00:00\"</span>));\nmongoService.save(<span class=\"hljs-string\">\"publishedBooks\"</span>, document).compose(id -&gt; {\n  <span class=\"hljs-keyword\">return</span> mongoService.findOne(<span class=\"hljs-string\">\"publishedBooks\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"_id\"</span>, id), <span class=\"hljs-keyword\">null</span>);\n}).onComplete(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"To retrieve ISO-8601 date : \"</span>\n      + res.result().getJsonObject(<span class=\"hljs-string\">\"publicationDate\"</span>).getString(<span class=\"hljs-string\">\"$date\"</span>));\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example (in Java) of inserting a document with a binary field and reading it back</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">byte</span>[] binaryObject = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[<span class=\"hljs-number\">40</span>];\nJsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"Alan Turing\"</span>)\n  .put(<span class=\"hljs-string\">\"binaryStuff\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$binary\"</span>, binaryObject));\nmongoService.save(<span class=\"hljs-string\">\"smartPeople\"</span>, document).compose(id -&gt; {\n  <span class=\"hljs-keyword\">return</span> mongoService.findOne(<span class=\"hljs-string\">\"smartPeople\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"_id\"</span>, id), <span class=\"hljs-keyword\">null</span>);\n}).onComplete(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-keyword\">byte</span>[] reconstitutedBinaryObject = res.result().getJsonObject(<span class=\"hljs-string\">\"binaryStuff\"</span>).getBinary(<span class=\"hljs-string\">\"$binary\"</span>);\n    <span class=\"hljs-comment\">//This could now be de-serialized into an object in real life</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of inserting a base 64 encoded string, typing it as binary a binary field, and reading it back</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String base64EncodedString = <span class=\"hljs-string\">\"a2FpbHVhIGlzIHRoZSAjMSBiZWFjaCBpbiB0aGUgd29ybGQ=\"</span>;\nJsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"Alan Turing\"</span>)\n  .put(<span class=\"hljs-string\">\"binaryStuff\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$binary\"</span>, base64EncodedString));\nmongoService.save(<span class=\"hljs-string\">\"smartPeople\"</span>, document).compose(id -&gt; {\n  <span class=\"hljs-keyword\">return</span> mongoService.findOne(<span class=\"hljs-string\">\"smartPeople\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"_id\"</span>, id), <span class=\"hljs-keyword\">null</span>);\n}).onComplete(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String reconstitutedBase64EncodedString = res.result().getJsonObject(<span class=\"hljs-string\">\"binaryStuff\"</span>).getString(<span class=\"hljs-string\">\"$binary\"</span>);\n    <span class=\"hljs-comment\">//This could now converted back to bytes from the base 64 string</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of inserting an object ID and reading it back</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String individualId = <span class=\"hljs-keyword\">new</span> ObjectId().toHexString();\nJsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"Stephen Hawking\"</span>)\n  .put(<span class=\"hljs-string\">\"individualId\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$oid\"</span>, individualId));\nmongoService.save(<span class=\"hljs-string\">\"smartPeople\"</span>, document).compose(id -&gt; {\n  JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"_id\"</span>, id);\n  <span class=\"hljs-keyword\">return</span> mongoService.findOne(<span class=\"hljs-string\">\"smartPeople\"</span>, query, <span class=\"hljs-keyword\">null</span>);\n}).onComplete(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String reconstitutedIndividualId = res.result().getJsonObject(<span class=\"hljs-string\">\"individualId\"</span>).getString(<span class=\"hljs-string\">\"$oid\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_getting_distinct_values\"><a class=\"anchor\" href=\"#_getting_distinct_values\"></a>Getting distinct values</h3>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of getting distinct value</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>);\nmongoClient.save(<span class=\"hljs-string\">\"books\"</span>, document).compose(v -&gt; {\n  <span class=\"hljs-keyword\">return</span> mongoClient.distinct(<span class=\"hljs-string\">\"books\"</span>, <span class=\"hljs-string\">\"title\"</span>, String<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">getName</span>())</span>;\n}).onComplete(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Title is : \"</span> + res.result().getJsonArray(<span class=\"hljs-number\">0</span>));\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of getting distinct value in batch mode</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>);\nmongoClient.save(<span class=\"hljs-string\">\"books\"</span>, document, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    mongoClient.distinctBatch(<span class=\"hljs-string\">\"books\"</span>, <span class=\"hljs-string\">\"title\"</span>, String<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">getName</span>())\n      .<span class=\"hljs-title\">handler</span>(<span class=\"hljs-title\">book</span> -&gt; <span class=\"hljs-title\">System</span>.<span class=\"hljs-title\">out</span>.<span class=\"hljs-title\">println</span>(\"<span class=\"hljs-title\">Title</span> <span class=\"hljs-title\">is</span> : \" + <span class=\"hljs-title\">book</span>.<span class=\"hljs-title\">getString</span>(\"<span class=\"hljs-title\">title</span>\")))</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Here&#8217;s an example of getting distinct value with query</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>)\n  .put(<span class=\"hljs-string\">\"publicationDate\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$date\"</span>, <span class=\"hljs-string\">\"1937-09-21T00:00:00+00:00\"</span>));\nJsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"publicationDate\"</span>,\n    <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$gte\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$date\"</span>, <span class=\"hljs-string\">\"1937-09-21T00:00:00+00:00\"</span>)));\nmongoClient.save(<span class=\"hljs-string\">\"books\"</span>, document).compose(v -&gt; {\n  <span class=\"hljs-keyword\">return</span> mongoClient.distinctWithQuery(<span class=\"hljs-string\">\"books\"</span>, <span class=\"hljs-string\">\"title\"</span>, String<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">getName</span>(), <span class=\"hljs-title\">query</span>)</span>;\n}).onComplete(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Title is : \"</span> + res.result().getJsonArray(<span class=\"hljs-number\">0</span>));\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of getting distinct value in batch mode with query</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject document = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"The Hobbit\"</span>)\n  .put(<span class=\"hljs-string\">\"publicationDate\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$date\"</span>, <span class=\"hljs-string\">\"1937-09-21T00:00:00+00:00\"</span>));\nJsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"publicationDate\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">\"$gte\"</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"$date\"</span>, <span class=\"hljs-string\">\"1937-09-21T00:00:00+00:00\"</span>)));\nmongoClient.save(<span class=\"hljs-string\">\"books\"</span>, document, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    mongoClient.distinctBatchWithQuery(<span class=\"hljs-string\">\"books\"</span>, <span class=\"hljs-string\">\"title\"</span>, String<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">getName</span>(), <span class=\"hljs-title\">query</span>)\n      .<span class=\"hljs-title\">handler</span>(<span class=\"hljs-title\">book</span> -&gt; <span class=\"hljs-title\">System</span>.<span class=\"hljs-title\">out</span>.<span class=\"hljs-title\">println</span>(\"<span class=\"hljs-title\">Title</span> <span class=\"hljs-title\">is</span> : \" + <span class=\"hljs-title\">book</span>.<span class=\"hljs-title\">getString</span>(\"<span class=\"hljs-title\">title</span>\")))</span>;\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_storingretrieving_files_and_binary_data\"><a class=\"anchor\" href=\"#_storingretrieving_files_and_binary_data\"></a>Storing/Retrieving files and binary data</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The client can store and retrieve files and binary data using MongoDB GridFS. The\n<code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html\">MongoGridFsClient</a></code> can be used to upload or download files\nand streams to GridFS.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_get_the_mongogridfsclient_to_interact_with_gridfs\"><a class=\"anchor\" href=\"#_get_the_mongogridfsclient_to_interact_with_gridfs\"></a>Get the MongoGridFsClient to interact with GridFS.</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html\">MongoGridFsClient</a></code> is created by calling\n<code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#createGridFsBucketService-java.lang.String-io.vertx.core.Handler-\">createGridFsBucketService</a></code> and providing a bucket name. In GridFS, the bucket name\nends up being a collection that contains references to all of the objects that are stored.\nYou can segregate objects into distinct buckets by providing a unique name.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>bucketName</code> : The name of the bucket to create</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of getting a <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html\">MongoGridFsClient</a></code> with the a custom bucket\nname</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mongoClient.createGridFsBucketService(<span class=\"hljs-string\">\"bakeke\"</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">//Interact with the GridFS client...</span>\n    MongoGridFsClient client = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>GridFS uses a default bucket named \"fs\". If you prefer to get the default bucket instead of naming your own,\ncall <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html#createDefaultGridFsBucketService-io.vertx.core.Handler-\">createDefaultGridFsBucketService</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of getting a <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html\">MongoGridFsClient</a></code> with the default bucket name.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mongoClient.createDefaultGridFsBucketService( res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">//Interact with the GridFS client...</span>\n    MongoGridFsClient client = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_drop_an_entire_file_bucket_from_gridfs\"><a class=\"anchor\" href=\"#_drop_an_entire_file_bucket_from_gridfs\"></a>Drop an entire file bucket from GridFS.</h3>\n<div class=\"paragraph\">\n<p>An entire file bucket along with all of its contents can be dropped with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#drop-io.vertx.core.Handler-\">drop</a></code>. It will\ndrop the bucket that was specified when the MongoGridFsClient was created.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of dropping a file bucket.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">gridFsClient.drop(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">//The file bucket is dropped and all files in it, erased</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_find_all_file_ids_in_a_gridfs_bucket\"><a class=\"anchor\" href=\"#_find_all_file_ids_in_a_gridfs_bucket\"></a>Find all file IDs in a GridFS bucket.</h3>\n<div class=\"paragraph\">\n<p>A list of all of the file IDs in a bucket can be found with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#findAllIds-io.vertx.core.Handler-\">findAllIds</a></code>.\nThe files can be downloaded by ID using <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#downloadFileByID-java.lang.String-java.lang.String-io.vertx.core.Handler-\">downloadFileByID</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of retrieving the list of file IDs.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">gridFsClient.findAllIds(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    List&lt;String&gt; ids = res.result(); <span class=\"hljs-comment\">//List of file IDs</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_find_file_ids_in_a_gridfs_bucket_matching_a_query\"><a class=\"anchor\" href=\"#_find_file_ids_in_a_gridfs_bucket_matching_a_query\"></a>Find file IDs in a GridFS bucket matching a query.</h3>\n<div class=\"paragraph\">\n<p>A query can be specified to match files in the GridFS bucket. <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#findIds-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">findIds</a></code>\nwill return a list of file IDs that match the query.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>query</code> : The is a json object that can match any of the file&#8217;s metadata using standard MongoDB query operators. An empty\njson object will match all documents. You can query on attributes of the GridFS files collection as described\nin the GridFS manual. <a href=\"https://docs.mongodb.com/manual/core/gridfs/#the-files-collection\" class=\"bare\">https://docs.mongodb.com/manual/core/gridfs/#the-files-collection</a></p>\n</div>\n<div class=\"paragraph\">\n<p>The files can be downloaded by ID using <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#downloadFileByID-java.lang.String-java.lang.String-io.vertx.core.Handler-\">downloadFileByID</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of retrieving the list of file IDs based on a metadata query.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"metadata.nick_name\"</span>, <span class=\"hljs-string\">\"Puhi the eel\"</span>);\ngridFsClient.findIds(query, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    List&lt;String&gt; ids = res.result(); <span class=\"hljs-comment\">//List of file IDs</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_delete_a_file_in_gridfs_based_on_its_id\"><a class=\"anchor\" href=\"#_delete_a_file_in_gridfs_based_on_its_id\"></a>Delete a file in GridFS based on its ID.</h3>\n<div class=\"paragraph\">\n<p>A file previously stored in GridFS can be deleted with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#delete-java.lang.String-io.vertx.core.Handler-\">delete</a></code> by providing\nthe ID of the file. The file IDs can be retrieved with a query using <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#findIds-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">findIds</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:\n<code>id</code> : The ID generated by GridFS when the file was stored</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of deleting a file by ID.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String id = <span class=\"hljs-string\">\"56660b074cedfd000570839c\"</span>; <span class=\"hljs-comment\">//The GridFS ID of the file</span>\ngridFsClient.delete(id, (AsyncResult&lt;Void&gt; res) -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">//File deleted</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">//Something went wrong</span>\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_upload_a_file_in_gridfs\"><a class=\"anchor\" href=\"#_upload_a_file_in_gridfs\"></a>Upload a file in GridFS</h3>\n<div class=\"paragraph\">\n<p>A file can be stored by name with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#uploadFile-java.lang.String-io.vertx.core.Handler-\">uploadFile</a></code>. When it\nsucceeds, the ID generated by GridFS will be returned. This ID can be used to retrieve the file later.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>fileName</code> : this is name used to save the file in GridFS</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">gridFsClient.uploadFile(<span class=\"hljs-string\">\"file.name\"</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String id = res.result();\n    <span class=\"hljs-comment\">//The ID of the stored object in Grid FS</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_upload_a_file_in_gridfs_with_options\"><a class=\"anchor\" href=\"#_upload_a_file_in_gridfs_with_options\"></a>Upload a file in GridFS with options.</h3>\n<div class=\"paragraph\">\n<p>A file can be stored with additional options with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#uploadFileWithOptions-java.lang.String-io.vertx.ext.mongo.GridFsUploadOptions-io.vertx.core.Handler-\">uploadFileWithOptions</a></code>\npassing in an instance of <code><a href=\"../../apidocs/io/vertx/ext/mongo/GridFsUploadOptions.html\">GridFsUploadOptions</a></code>. When it\nsucceeds, the ID generated by GridFS will be returned.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>metadata</code> : this is a json object that includes any metadata that may be useful in a later search\n<code>chunkSizeBytes</code> : GridFS will break up the file into chunks of this size</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of a file uploadByFileName that specifies the chunk size and metadata.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject metadata = <span class=\"hljs-keyword\">new</span> JsonObject();\nmetadata.put(<span class=\"hljs-string\">\"nick_name\"</span>, <span class=\"hljs-string\">\"Puhi the Eel\"</span>);\n\nGridFsUploadOptions options = <span class=\"hljs-keyword\">new</span> GridFsUploadOptions();\noptions.setChunkSizeBytes(<span class=\"hljs-number\">1024</span>);\noptions.setMetadata(metadata);\n\ngridFsClient.uploadFileWithOptions(<span class=\"hljs-string\">\"file.name\"</span>, options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String id = res.result();\n    <span class=\"hljs-comment\">//The ID of the stored object in Grid FS</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_download_a_file_previously_stored_in_gridfs\"><a class=\"anchor\" href=\"#_download_a_file_previously_stored_in_gridfs\"></a>Download a file previously stored in GridFS</h3>\n<div class=\"paragraph\">\n<p>A file can be downloaded by its original name with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#downloadFile-java.lang.String-io.vertx.core.Handler-\">downloadFile</a></code>.\nWhen the download is complete, the result handler will return the length of the download as a Long.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>fileName</code></dt>\n<dd>\n<p>the name of the file that was previously stored</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of downloading a file using the name that it was stored with in GridFS.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">gridFsClient.downloadFile(<span class=\"hljs-string\">\"file.name\"</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Long fileLength = res.result();\n    <span class=\"hljs-comment\">//The length of the file stored in fileName</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_download_a_file_previously_stored_in_gridfs_given_its_id\"><a class=\"anchor\" href=\"#_download_a_file_previously_stored_in_gridfs_given_its_id\"></a>Download a file previously stored in GridFS given its ID</h3>\n<div class=\"paragraph\">\n<p>A file can be downloaded to a given file name by its ID with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#downloadFileByID-java.lang.String-java.lang.String-io.vertx.core.Handler-\">downloadFileByID</a></code>.\nWhen the download succeeds, the result handler will return the length of the download as a Long.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>id</code> : The ID generated by GridFS when the file was stored</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of downloading a file using the ID that it was given when stored in GridFS.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String id = <span class=\"hljs-string\">\"56660b074cedfd000570839c\"</span>;\nString filename = <span class=\"hljs-string\">\"puhi.fil\"</span>;\ngridFsClient.downloadFileByID(id, filename, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Long fileLength = res.result();\n    <span class=\"hljs-comment\">//The length of the file stored in fileName</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_download_a_file_from_gridfs_to_a_new_name\"><a class=\"anchor\" href=\"#_download_a_file_from_gridfs_to_a_new_name\"></a>Download a file from GridFS to a new name</h3>\n<div class=\"paragraph\">\n<p>A file can be resolved using its original name and then downloaded to a new name\nwith <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#downloadFileAs-java.lang.String-java.lang.String-io.vertx.core.Handler-\">downloadFileAs</a></code>.\nWhen the download succeeds, the result handler will return the length of the download as a Long.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>fileName</code> : the name of the file that was previously stored\n<code>newFileName</code> : the new name for which the file will be stored</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">gridFsClient.downloadFileAs(<span class=\"hljs-string\">\"file.name\"</span>, <span class=\"hljs-string\">\"new_file.name\"</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Long fileLength = res.result();\n    <span class=\"hljs-comment\">//The length of the file stored in fileName</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_upload_a_stream_to_gridfs\"><a class=\"anchor\" href=\"#_upload_a_stream_to_gridfs\"></a>Upload a Stream to GridFS</h3>\n<div class=\"paragraph\">\n<p>Streams can be uploaded to GridFS using <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#uploadByFileName-io.vertx.core.streams.ReadStream-java.lang.String-io.vertx.core.Handler-\">uploadByFileName</a></code>.\nOnce the stream is uploaded, the result handler will be called with the ID generated by GridFS.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>stream</code> : the <code><a href=\"../../apidocs/io/vertx/core/streams/ReadStream.html\">ReadStream</a></code> to upload\n<code>fileName</code> : the name for which the stream will be stored</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of uploading a file stream to GridFS:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">gridFsStreamClient.uploadByFileName(asyncFile, <span class=\"hljs-string\">\"kanaloa\"</span>, stringAsyncResult -&gt; {\n  String id = stringAsyncResult.result();\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_upload_a_stream_to_gridfs_with_options\"><a class=\"anchor\" href=\"#_upload_a_stream_to_gridfs_with_options\"></a>Upload a Stream to GridFS with Options</h3>\n<div class=\"paragraph\">\n<p>Streams can be uploaded to GridFS using <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#uploadByFileNameWithOptions-io.vertx.core.streams.ReadStream-java.lang.String-io.vertx.ext.mongo.GridFsUploadOptions-io.vertx.core.Handler-\">uploadByFileNameWithOptions</a></code>\npassing in an instance of <code><a href=\"../../apidocs/io/vertx/ext/mongo/GridFsUploadOptions.html\">GridFsUploadOptions</a></code>.\nOnce the stream is uploaded, the result handler will be called with the ID generated by GridFS.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>stream</code> : the <code><a href=\"../../apidocs/io/vertx/core/streams/ReadStream.html\">ReadStream</a></code> to upload\n<code>fileName</code> : the name for which the stream will be stored\n`options' : the UploadOptions</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/mongo/GridFsUploadOptions.html\">GridFsUploadOptions</a></code> has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>metadata</code> : this is a json object that includes any metadata that may be useful in a later search\n<code>chunkSizeBytes</code> : GridFS will break up the file into chunks of this size</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of uploading a file stream with options to GridFS:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">GridFsUploadOptions options = <span class=\"hljs-keyword\">new</span> GridFsUploadOptions();\noptions.setChunkSizeBytes(<span class=\"hljs-number\">2048</span>);\noptions.setMetadata(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"catagory\"</span>, <span class=\"hljs-string\">\"Polynesian gods\"</span>));\ngridFsStreamClient.uploadByFileNameWithOptions(asyncFile, <span class=\"hljs-string\">\"kanaloa\"</span>, options, stringAsyncResult -&gt; {\n  String id = stringAsyncResult.result();\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_download_a_stream_from_gridfs_using_file_name\"><a class=\"anchor\" href=\"#_download_a_stream_from_gridfs_using_file_name\"></a>Download a Stream from GridFS using File Name</h3>\n<div class=\"paragraph\">\n<p>Streams can be downloaded from GridFS using a file name with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#downloadByFileName-io.vertx.core.streams.WriteStream-java.lang.String-io.vertx.core.Handler-\">downloadByFileName</a></code>.\nOnce the stream is downloaded a result handler will be called with the length of the stream as a Long.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>stream</code> : the <code><a href=\"../../apidocs/io/vertx/core/streams/WriteStream.html\">WriteStream</a></code> to download to\n<code>fileName</code> : the name of the file that will be downloaded to the stream.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of downloading a file to a stream:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">gridFsStreamClient.downloadByFileName(asyncFile, <span class=\"hljs-string\">\"kamapuaa.fil\"</span>, longAsyncResult -&gt; {\n  Long length = longAsyncResult.result();\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_download_a_stream_with_options_from_gridfs_using_file_name\"><a class=\"anchor\" href=\"#_download_a_stream_with_options_from_gridfs_using_file_name\"></a>Download a Stream with Options from GridFS using File Name</h3>\n<div class=\"paragraph\">\n<p>Streams can be downloaded from GridFS using a file name and download options with\n<code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#downloadByFileNameWithOptions-io.vertx.core.streams.WriteStream-java.lang.String-io.vertx.ext.mongo.GridFsDownloadOptions-io.vertx.core.Handler-\">downloadByFileNameWithOptions</a></code> passing in an instance of <code><a href=\"../../apidocs/io/vertx/ext/mongo/GridFsDownloadOptions.html\">GridFsDownloadOptions</a></code>.\nOnce the stream is downloaded a result handler will be called with the length of the stream as a Long.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>stream</code> : the <code><a href=\"../../apidocs/io/vertx/core/streams/WriteStream.html\">WriteStream</a></code> to download to\n<code>fileName</code> : the name of the file that will be downloaded to the stream\n<code>options</code> : an instance of <code><a href=\"../../apidocs/io/vertx/ext/mongo/GridFsDownloadOptions.html\">GridFsDownloadOptions</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>DownloadOptions has the following field:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>revision</code> : the revision of the file to download</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of downloading a file to a stream with options:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">GridFsDownloadOptions options = <span class=\"hljs-keyword\">new</span> GridFsDownloadOptions();\noptions.setRevision(<span class=\"hljs-number\">0</span>);\ngridFsStreamClient.downloadByFileNameWithOptions(asyncFile, <span class=\"hljs-string\">\"kamapuaa.fil\"</span>, options, longAsyncResult -&gt; {\n  Long length = longAsyncResult.result();\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_download_a_stream_from_gridfs_using_id\"><a class=\"anchor\" href=\"#_download_a_stream_from_gridfs_using_id\"></a>Download a Stream from GridFS using ID</h3>\n<div class=\"paragraph\">\n<p>Streams can be downloaded using the ID generated by GridFS with <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoGridFsClient.html#downloadById-io.vertx.core.streams.WriteStream-java.lang.String-io.vertx.core.Handler-\">downloadById</a></code>.\nOnce the stream is downloaded a result handler will be called with the length of the stream as a Long.</p>\n</div>\n<div class=\"paragraph\">\n<p>This has the following fields:</p>\n</div>\n<div class=\"paragraph\">\n<p><code>stream</code> : the <code><a href=\"../../apidocs/io/vertx/core/streams/WriteStream.html\">WriteStream</a></code> to download to\n<code>id</code> : the string represendation of the ID generated by GridFS</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example of downloading a file to a stream using the object&#8217;s ID:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String id = <span class=\"hljs-string\">\"58f61bf84cedfd000661af06\"</span>;\ngridFsStreamClient.downloadById(asyncFile, id, longAsyncResult -&gt; {\n  Long length = longAsyncResult.result();\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_the_client\"><a class=\"anchor\" href=\"#_configuring_the_client\"></a>Configuring the client</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The client is configured with a json object.</p>\n</div>\n<div class=\"paragraph\">\n<p>The following configuration is supported by the mongo client:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>db_name</code></dt>\n<dd>\n<p>Name of the database in the MongoDB instance to use. Defaults to <code>default_db</code></p>\n</dd>\n<dt class=\"hdlist1\"><code>useObjectId</code></dt>\n<dd>\n<p>Toggle this option to support persisting and retrieving ObjectId&#8217;s as strings. If <code>true</code>, hex-strings will\nbe saved as native Mongodb ObjectId types in the document collection. This will allow the sorting of documents based on creation\ntime. You can also derive the creation time from the hex-string using ObjectId::getDate(). Set to <code>false</code> for other types of your choosing.\nIf set to false, or left to default, hex strings will be generated as the document _id if the _id is omitted from the document.\nDefaults to <code>false</code>.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>The mongo client tries to support most options that are allowed by the driver. There are two ways to configure mongo\nfor use by the driver, either by a connection string or by separate configuration options.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nIf the connection string is used the mongo client will ignore any driver configuration options.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>connection_string</code></dt>\n<dd>\n<p>The connection string the driver uses to create the client. E.g. <code>mongodb://localhost:27017</code>.\nFor more information on the format of the connection string please consult the driver documentation.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p><strong>Specific driver configuration options</strong></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">{\n <span class=\"hljs-comment\">// Single Cluster Settings</span>\n <span class=\"hljs-string\">\"host\"</span> : <span class=\"hljs-string\">\"127.0.0.1\"</span>, <span class=\"hljs-comment\">// string</span>\n <span class=\"hljs-string\">\"port\"</span> : <span class=\"hljs-number\">27017</span>,      <span class=\"hljs-comment\">// int</span>\n\n <span class=\"hljs-comment\">// Multiple Cluster Settings</span>\n <span class=\"hljs-string\">\"hosts\"</span> : [\n   {\n     <span class=\"hljs-string\">\"host\"</span> : <span class=\"hljs-string\">\"cluster1\"</span>, <span class=\"hljs-comment\">// string</span>\n     <span class=\"hljs-string\">\"port\"</span> : <span class=\"hljs-number\">27000</span>       <span class=\"hljs-comment\">// int</span>\n   },\n   {\n     <span class=\"hljs-string\">\"host\"</span> : <span class=\"hljs-string\">\"cluster2\"</span>, <span class=\"hljs-comment\">// string</span>\n     <span class=\"hljs-string\">\"port\"</span> : <span class=\"hljs-number\">28000</span>       <span class=\"hljs-comment\">// int</span>\n   },\n   ...\n ],\n <span class=\"hljs-string\">\"replicaSet\"</span> :  <span class=\"hljs-string\">\"foo\"</span>,    <span class=\"hljs-comment\">// string</span>\n <span class=\"hljs-string\">\"serverSelectionTimeoutMS\"</span> : <span class=\"hljs-number\">30000</span>, <span class=\"hljs-comment\">// long</span>\n\n <span class=\"hljs-comment\">// Connection Pool Settings</span>\n <span class=\"hljs-string\">\"maxPoolSize\"</span> : <span class=\"hljs-number\">50</span>,                <span class=\"hljs-comment\">// int</span>\n <span class=\"hljs-string\">\"minPoolSize\"</span> : <span class=\"hljs-number\">25</span>,                <span class=\"hljs-comment\">// int</span>\n <span class=\"hljs-string\">\"maxIdleTimeMS\"</span> : <span class=\"hljs-number\">300000</span>,          <span class=\"hljs-comment\">// long</span>\n <span class=\"hljs-string\">\"maxLifeTimeMS\"</span> : <span class=\"hljs-number\">3600000</span>,         <span class=\"hljs-comment\">// long</span>\n <span class=\"hljs-string\">\"waitQueueTimeoutMS\"</span> : <span class=\"hljs-number\">10000</span>,      <span class=\"hljs-comment\">// long</span>\n <span class=\"hljs-string\">\"maintenanceFrequencyMS\"</span> : <span class=\"hljs-number\">2000</span>,   <span class=\"hljs-comment\">// long</span>\n <span class=\"hljs-string\">\"maintenanceInitialDelayMS\"</span> : <span class=\"hljs-number\">500</span>, <span class=\"hljs-comment\">// long</span>\n\n <span class=\"hljs-comment\">// Credentials / Auth</span>\n <span class=\"hljs-string\">\"username\"</span>   : <span class=\"hljs-string\">\"john\"</span>,     <span class=\"hljs-comment\">// string</span>\n <span class=\"hljs-string\">\"password\"</span>   : <span class=\"hljs-string\">\"passw0rd\"</span>, <span class=\"hljs-comment\">// string</span>\n <span class=\"hljs-string\">\"authSource\"</span> : <span class=\"hljs-string\">\"some.db\"</span>   <span class=\"hljs-comment\">// string</span>\n <span class=\"hljs-comment\">// Auth mechanism</span>\n <span class=\"hljs-string\">\"authMechanism\"</span>     : <span class=\"hljs-string\">\"GSSAPI\"</span>,        <span class=\"hljs-comment\">// string</span>\n <span class=\"hljs-string\">\"gssapiServiceName\"</span> : <span class=\"hljs-string\">\"myservicename\"</span>, <span class=\"hljs-comment\">// string</span>\n\n <span class=\"hljs-comment\">// Socket Settings</span>\n <span class=\"hljs-string\">\"connectTimeoutMS\"</span> : <span class=\"hljs-number\">300000</span>, <span class=\"hljs-comment\">// int</span>\n <span class=\"hljs-string\">\"socketTimeoutMS\"</span>  : <span class=\"hljs-number\">100000</span>, <span class=\"hljs-comment\">// int</span>\n <span class=\"hljs-string\">\"sendBufferSize\"</span>    : <span class=\"hljs-number\">8192</span>,  <span class=\"hljs-comment\">// int</span>\n <span class=\"hljs-string\">\"receiveBufferSize\"</span> : <span class=\"hljs-number\">8192</span>,  <span class=\"hljs-comment\">// int</span>\n\n <span class=\"hljs-comment\">// Server Settings</span>\n <span class=\"hljs-string\">\"heartbeatFrequencyMS\"</span>    : <span class=\"hljs-number\">1000</span>, <span class=\"hljs-comment\">// long</span>\n <span class=\"hljs-string\">\"minHeartbeatFrequencyMS\"</span> :  <span class=\"hljs-number\">500</span>, <span class=\"hljs-comment\">// long</span>\n\n <span class=\"hljs-comment\">// SSL Settings</span>\n <span class=\"hljs-string\">\"ssl\"</span> : <span class=\"hljs-literal\">false</span>,                       <span class=\"hljs-comment\">// boolean</span>\n <span class=\"hljs-string\">\"sslInvalidHostNameAllowed\"</span> : <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// boolean</span>\n <span class=\"hljs-string\">\"trustAll\"</span> : <span class=\"hljs-literal\">false</span>,                  <span class=\"hljs-comment\">// boolean</span>\n <span class=\"hljs-string\">\"keyPath\"</span> : <span class=\"hljs-string\">\"key.pem\"</span>,               <span class=\"hljs-comment\">// string</span>\n <span class=\"hljs-string\">\"certPath\"</span> : <span class=\"hljs-string\">\"cert.pem\"</span>,             <span class=\"hljs-comment\">// string</span>\n <span class=\"hljs-string\">\"caPath\"</span> : <span class=\"hljs-string\">\"ca.pem\"</span>                  <span class=\"hljs-comment\">// string</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><strong>Driver option descriptions</strong></p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>host</code></dt>\n<dd>\n<p>The host the MongoDB instance is running. Defaults to <code>127.0.0.1</code>. This is ignored if <code>hosts</code> is specified</p>\n</dd>\n<dt class=\"hdlist1\"><code>port</code></dt>\n<dd>\n<p>The port the MongoDB instance is listening on. Defaults to <code>27017</code>. This is ignored if <code>hosts</code> is specified</p>\n</dd>\n<dt class=\"hdlist1\"><code>hosts</code></dt>\n<dd>\n<p>An array representing the hosts and ports to support a MongoDB cluster (sharding / replication)</p>\n</dd>\n<dt class=\"hdlist1\"><code>host</code></dt>\n<dd>\n<p>A host in the cluster</p>\n</dd>\n<dt class=\"hdlist1\"><code>port</code></dt>\n<dd>\n<p>The port a host in the cluster is listening on</p>\n</dd>\n<dt class=\"hdlist1\"><code>replicaSet</code></dt>\n<dd>\n<p>The name of the replica set, if the MongoDB instance is a member of a replica set</p>\n</dd>\n<dt class=\"hdlist1\"><code>serverSelectionTimeoutMS</code></dt>\n<dd>\n<p>The time in milliseconds that the mongo driver will wait to select a server for an operation before raising an error.</p>\n</dd>\n<dt class=\"hdlist1\"><code>maxPoolSize</code></dt>\n<dd>\n<p>The maximum number of connections in the connection pool. The default value is <code>100</code></p>\n</dd>\n<dt class=\"hdlist1\"><code>minPoolSize</code></dt>\n<dd>\n<p>The minimum number of connections in the connection pool. The default value is <code>0</code></p>\n</dd>\n<dt class=\"hdlist1\"><code>maxIdleTimeMS</code></dt>\n<dd>\n<p>The maximum idle time of a pooled connection. The default value is <code>0</code> which means there is no limit</p>\n</dd>\n<dt class=\"hdlist1\"><code>maxLifeTimeMS</code></dt>\n<dd>\n<p>The maximum time a pooled connection can live for. The default value is <code>0</code> which means there is no limit</p>\n</dd>\n<dt class=\"hdlist1\"><code>waitQueueTimeoutMS</code></dt>\n<dd>\n<p>The maximum time that a thread may wait for a connection to become available. Default value is <code>120000</code> (2 minutes)</p>\n</dd>\n<dt class=\"hdlist1\"><code>maintenanceFrequencyMS</code></dt>\n<dd>\n<p>The time period between runs of the maintenance job. Default is <code>0</code>.</p>\n</dd>\n<dt class=\"hdlist1\"><code>maintenanceInitialDelayMS</code></dt>\n<dd>\n<p>The period of time to wait before running the first maintenance job on the connection pool. Default is <code>0</code>.</p>\n</dd>\n<dt class=\"hdlist1\"><code>username</code></dt>\n<dd>\n<p>The username to authenticate. Default is <code>null</code> (meaning no authentication required)</p>\n</dd>\n<dt class=\"hdlist1\"><code>password</code></dt>\n<dd>\n<p>The password to use to authenticate.</p>\n</dd>\n<dt class=\"hdlist1\"><code>authSource</code></dt>\n<dd>\n<p>The database name associated with the user&#8217;s credentials. Default value is the <code>db_name</code> value.</p>\n</dd>\n<dt class=\"hdlist1\"><code>authMechanism</code></dt>\n<dd>\n<p>The authentication mechanism to use. See [Authentication](<a href=\"http://docs.mongodb.org/manual/core/authentication/\" class=\"bare\">http://docs.mongodb.org/manual/core/authentication/</a>) for more details.</p>\n</dd>\n<dt class=\"hdlist1\"><code>gssapiServiceName</code></dt>\n<dd>\n<p>The Kerberos service name if <code>GSSAPI</code> is specified as the <code>authMechanism</code>.</p>\n</dd>\n<dt class=\"hdlist1\"><code>connectTimeoutMS</code></dt>\n<dd>\n<p>The time in milliseconds to attempt a connection before timing out. Default is <code>10000</code> (10 seconds)</p>\n</dd>\n<dt class=\"hdlist1\"><code>socketTimeoutMS</code></dt>\n<dd>\n<p>The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default is <code>0</code> meaning there is no timeout</p>\n</dd>\n<dt class=\"hdlist1\"><code>sendBufferSize</code></dt>\n<dd>\n<p>Sets the send buffer size (SO_SNDBUF) for the socket. Default is <code>0</code>, meaning it will use the OS default for this option.</p>\n</dd>\n<dt class=\"hdlist1\"><code>receiveBufferSize</code></dt>\n<dd>\n<p>Sets the receive buffer size (SO_RCVBUF) for the socket. Default is <code>0</code>, meaning it will use the OS default for this option.</p>\n</dd>\n<dt class=\"hdlist1\"><code>heartbeatFrequencyMS</code></dt>\n<dd>\n<p>The frequency that the cluster monitor attempts to reach each server. Default is <code>5000</code> (5 seconds)</p>\n</dd>\n<dt class=\"hdlist1\"><code>minHeartbeatFrequencyMS</code></dt>\n<dd>\n<p>The minimum heartbeat frequency. The default value is <code>1000</code> (1 second)</p>\n</dd>\n<dt class=\"hdlist1\"><code>ssl</code></dt>\n<dd>\n<p>Enable ssl between the vertx-mongo-client and mongo</p>\n</dd>\n<dt class=\"hdlist1\"><code>sslInvalidHostNameAllowed</code></dt>\n<dd>\n<p>Accept hostnames not included in the servers certificate</p>\n</dd>\n<dt class=\"hdlist1\"><code>trustAll</code></dt>\n<dd>\n<p>When using ssl, trust <em>ALL</em> certificates. <strong>WARNING</strong> - Trusting <em>ALL</em> certificates will open you up to potential security issues such as MITM attacks.</p>\n</dd>\n<dt class=\"hdlist1\"><code>keyPath</code></dt>\n<dd>\n<p>Set a path to a file that contains the client key that will be used to authenticate against the server when making SSL connections to mongo.</p>\n</dd>\n<dt class=\"hdlist1\"><code>certPath</code></dt>\n<dd>\n<p>Set a path to a file that contains the certificate that will be used to authenticate against the server when making SSL connections to mongo.</p>\n</dd>\n<dt class=\"hdlist1\"><code>caPath</code></dt>\n<dd>\n<p>Set a path to a file that contains a certificate that will be used as a source of trust when making SSL connections to mongo.</p>\n</dd>\n</dl>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nMost of the default values listed above use the default values of the MongoDB Java Driver.\nPlease consult the driver documentation for up to date information.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_rxjava_2_api\"><a class=\"anchor\" href=\"#_rxjava_2_api\"></a>RxJava 2 API</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Mongo client provides an Rxified version of the original API.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_creating_an_rxified_client\"><a class=\"anchor\" href=\"#_creating_an_rxified_client\"></a>Creating an Rxified client</h3>\n<div class=\"paragraph\">\n<p>To create an Rxified Mongo client, make sure to import the <code><a href=\"../../apidocs/io/vertx/reactivex/ext/mongo/MongoClient.html\">MongoClient</a></code> class.\nThen use one of the <code>create</code> methods to get an instance:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MongoClient client = MongoClient.createShared(vertx, config);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_finding_documents_in_batches_2\"><a class=\"anchor\" href=\"#_finding_documents_in_batches_2\"></a>Finding documents in batches</h3>\n<div class=\"paragraph\">\n<p>A <code><a href=\"../../apidocs/io/vertx/reactivex/core/streams/ReadStream.html\">ReadStream</a></code> can be converted to a <code><a href=\"../../apidocs/io/reactivex/Flowable.html\">Flowable</a></code>, which is handy when you have to deal with large data sets:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject query = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"J. R. R. Tolkien\"</span>);\n\nReadStream&lt;JsonObject&gt; books = mongoClient.findBatch(<span class=\"hljs-string\">\"book\"</span>, query);\n\n<span class=\"hljs-comment\">// Convert the stream to a Flowable</span>\nFlowable&lt;JsonObject&gt; flowable = books.toFlowable();\n\nflowable.subscribe(doc -&gt; {\n  System.out.println(<span class=\"hljs-string\">\"Found doc: \"</span> + doc.encodePrettily());\n}, throwable -&gt; {\n  throwable.printStackTrace();\n}, () -&gt; {\n  System.out.println(<span class=\"hljs-string\">\"End of research\"</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}