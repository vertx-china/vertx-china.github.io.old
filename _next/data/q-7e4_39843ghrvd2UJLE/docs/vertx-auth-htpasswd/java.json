{"pageProps":{"slug":"vertx-auth-htpasswd/java","title":".htpasswd Auth Provider","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_provider_internal_behavior\">Provider internal behavior</a></li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_authorization\">Authorization</a></li>\n</ul>\n</div>","contents":"<h1>.htpasswd Auth Provider</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We provide an implementation of <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code> which uses the Apache htpasswd file format\nto perform authentication. The provider will not watch for updates to the file after loading. If you need dynamic\nuser management it would be more convenient to use dynamic providers such as jdbc or mongo providers.</p>\n</div>\n<div class=\"paragraph\">\n<p>To use this project, add the following\ndependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-htpasswd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-auth-htpasswd:4.0.2'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To create an instance you first need an htpasswd file. This file is created using the apache htpasswd tool.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you&#8217;ve got one of these you can create a <code><a href=\"../../apidocs/io/vertx/ext/auth/htpasswd/HtpasswdAuth.html\">HtpasswdAuth</a></code> instance as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HtpasswdAuth authProvider = HtpasswdAuth\n  .create(vertx, <span class=\"hljs-keyword\">new</span> HtpasswdAuthOptions());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you&#8217;ve got your instance you can authenticate with it just like any <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The out of the box config assumes the usage of the file htpasswd in the root of the project.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_provider_internal_behavior\"><a class=\"anchor\" href=\"#_provider_internal_behavior\"></a>Provider internal behavior</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The provider will load the specified htpasswd file at start time and will not watch for modifications. If you\nrequire dynamic reloads, you will need to restart the provider.</p>\n</div>\n<div class=\"paragraph\">\n<p>The implementation does not have any other state than the htpasswd file itself.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When authenticating using this implementation, it assumes that the username and password are parsed as a JSON\nobject which we refer from now on as authentication info:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject authInfo = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"username\"</span>, <span class=\"hljs-string\">\"someUser\"</span>)\n  .put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"somePassword\"</span>);\n\nauthProvider.authenticate(authInfo)\n  .onSuccess(user -&gt; {\n    <span class=\"hljs-comment\">// OK</span>\n  })\n  .onFailure(err -&gt; {\n    <span class=\"hljs-comment\">// Failed!</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authorization\"><a class=\"anchor\" href=\"#_authorization\"></a>Authorization</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Apache htpasswd file is a pure authentication mechanism and not authorization. This means that permission checks will always be <code>false</code>.</p>\n</div>\n</div>\n</div>"},"__N_SSG":true}