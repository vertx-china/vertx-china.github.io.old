{"pageProps":{"slug":"4.0.0/vertx-reactive-streams/java","title":"集成Vert.x Reactive Streams","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_reactive_streams\">使用Vert.x Reactive Streams</a></li>\n<li><a href=\"#_reactive_read_stream\">Reactive Read Stream</a></li>\n<li><a href=\"#_reactive_write_stream\">Reactive Write Stream</a></li>\n</ul>\n</div>","contents":"<h1>集成Vert.x Reactive Streams</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"http://www.reactive-streams.org/\">Reactive Streams</a> 提供了一组标准接口，\n适用于JVM上的非阻塞的带有背压的异步流处理。</p>\n</div>\n<div class=\"paragraph\">\n<p>这个库提供了基于Vert.x的reactive streams实现。</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x提供了自己的机制来处理数据流，实现了一个流可以使用背压从另一个流中抽取数据。\n相关的接口包括 <code>io.vertx.core.streams.ReadStream</code>, <code>io.vertx.core.streams.WriteStream</code> 和 <code>io.vertx.core.streams.Pump</code> 。\n请参阅Vert.x core手册，以获取有关Vert.x stream的更多信息。</p>\n</div>\n<div class=\"paragraph\">\n<p>这个库提供了 read stream 和 write stream 的实现，\n同时也是作为 reactive streams publishers 和 subscribers 存在。\n这允许我们将任何 reactive streams publisher 或 subscriber 实例像 Vert.x read 或 write stream 一样处理。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_reactive_streams\"><a class=\"anchor\" href=\"#_using_vert_x_reactive_streams\"></a>使用Vert.x Reactive Streams</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>想使用Vert.x Reactive Streams，需要在你的构建脚本中加入以下依赖。</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在 <code>pom.xml</code> 中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-reactive-streams<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在 <code>build.gradle</code> 中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile io.<span class=\"hljs-string\">vertx:</span>vertx-reactive-<span class=\"hljs-string\">streams:</span><span class=\"hljs-number\">4.0</span><span class=\"hljs-number\">.0</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_reactive_read_stream\"><a class=\"anchor\" href=\"#_reactive_read_stream\"></a>Reactive Read Stream</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>我们提供了Vert.x <code>ReadStream</code> 接口的实现，在 <code><a href=\"../../apidocs/io/vertx/ext/reactivestreams/ReactiveReadStream.html\">ReactiveReadStream</a></code>\n同时也实现了 reactive streams <code>Subscriber</code> 。</p>\n</div>\n<div class=\"paragraph\">\n<p>你可以将ReactiveReadStream实例传递给任何一个实现了reactive streams <code>Publisher</code> 接口的实例（比如Akka中的Publisher），\n接着你就可以从上游读取数据，就像Vert.x中其他的 <code>ReadStream</code>。\n（比如，使用 <code>Pump</code> 接口将其中的数据抽取到一个 <code>WriteStream</code> ）。</p>\n</div>\n<div class=\"paragraph\">\n<p>这里有一个例子，给定一个实现了reactive streams的publisher（比如akka），\n将它的数据抽取出来，作为http服务端响应的消息正文。\n它将自己处理背压。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ReactiveReadStream&lt;Buffer&gt; rrs = ReactiveReadStream.readStream();\n\n<span class=\"hljs-comment\">// Subscribe the read stream to the publisher</span>\notherPublisher.subscribe(rrs);\n\n<span class=\"hljs-comment\">// Pump from the read stream to the http response</span>\nPump pump = Pump.pump(rrs, response);\n\npump.start();</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_reactive_write_stream\"><a class=\"anchor\" href=\"#_reactive_write_stream\"></a>Reactive Write Stream</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>我们同样也提供了Vert.x <code>WriteStream</code> 接口的实现，\n<code><a href=\"../../apidocs/io/vertx/ext/reactivestreams/ReactiveWriteStream.html\">ReactiveWriteStream</a></code> 。\n它同样也实现了reactive streams <code>Publisher</code> 接口。\n给定一个reactive streams <code>Subscriber</code> 接口的实例，你可以将数据写入其中，就像其他Vert.x <code>WriteStream</code> 的实现一样。\n（比如使用 <code>Pump</code> 从 <code>ReadStream</code> 中抽取数据）。</p>\n</div>\n<div class=\"paragraph\">\n<p>可以像任何Vert.x read stream一样，\n使用 <code>pause</code>, <code>resume</code>, and <code>writeQueueFull</code> 来处理背压。\n这会在内部自动转换为传播背压的reactive streams方法。\n（需要更多的元素）。</p>\n</div>\n<div class=\"paragraph\">\n<p>这里有一个例子，从其他reactive streams实现库订阅流，并抽取http响应的消息正文数据至subscriber。\n这里会自动处理背压。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ReactiveWriteStream&lt;Buffer&gt; rws = ReactiveWriteStream.writeStream(vertx);\n\n<span class=\"hljs-comment\">// Subscribe the other subscriber to the write stream</span>\nrws.subscribe(otherSubscriber);\n\n<span class=\"hljs-comment\">// Pump the http request to the write stream</span>\nPump pump = Pump.pump(request, rws);\n\npump.start();</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.0.0"},"__N_SSG":true}