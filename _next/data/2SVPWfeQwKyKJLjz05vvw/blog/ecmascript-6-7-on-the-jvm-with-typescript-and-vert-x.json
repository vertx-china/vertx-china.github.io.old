{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"ECMAScript 6/7 on the JVM with TypeScript and Vert.x","category":"guides","authors":[{"name":"Michel Kr√§mer","github_id":"michel-kraemer"}],"summary":"I figured it would be a good idea to give you a couple of examples how teaming\n  Vert.x and TypeScript helps you use ECMAScript 6 and 7 features on the JVM today."},"date":"2016-01-03","slug":"ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x","readingTime":{"text":"4 min read","minutes":3.75,"time":225000,"words":750},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Fol\\xADlow\\xADing the lat\\xADest re\\xADleases of \", mdx(Link, {\n    href: \"/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x 3.2\")), \" and\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/michel-kraemer/vertx-lang-typescript\"\n  }), \"vertx-\\u200Blang-typescript 1.1.0\"), \"\\nI fig\\xADured it would be a good idea to give you a cou\\xADple of ex\\xADam\\xADples how team\\xADing\\nVert.x and Type\\xADScript helps you use EC\\xADMAScript 6 and 7 fea\\xADtures on the JVM today.\"), mdx(\"p\", null, \"The vertx-\\u200Blang-typescript li\\xADbrary adds \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.typescriptlang.org/\"\n  }), \"Type\\xADScript\"), \" sup\\xADport to Vert.x 3.\\nType\\xADScript is a typed su\\xADper\\xADset of JavaScript that com\\xADpiles to plain JavaScript. It sup\\xADports the\\nEC\\xADMAScript 6 (EC\\xADMAScript 2015, ES6) stan\\xADdard and also a few parts of EC\\xADMAScript 7 (ES7) al\\xADready.\"), mdx(\"p\", null, \"The li\\xADbrary au\\xADto\\xADmat\\xADi\\xADcally com\\xADpiles Vert.x ver\\xADti\\xADcles writ\\xADten in\\nType\\xADScript to JavaScript and ex\\xADe\\xADcutes them on the JVM. vertx-\\u200Blang-typescript also pro\\xADvides\\ntype de\\xADf\\xADi\\xADn\\xADi\\xADtions for the Vert.x JavaScript API. Use them in your favourite\\nType\\xADScript ed\\xADi\\xADtor/IDE to get auto-\\u200Bcompletion, API doc\\xADu\\xADmen\\xADta\\xADtion and mean\\xADing\\xADful error\\nmes\\xADsages. See the fol\\xADlow\\xADing screen\\xADcast:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/michel-kraemer/vertx-lang-typescript/aaa67228c998bf9dc64b5f45fb407ef56169efec/screencast.gif\",\n    \"alt\": null\n  }))), mdx(\"h2\", {\n    \"id\": \"ecmascript-67-and-vertx\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#ecmascript-67-and-vertx\"\n  })), \"ECMAScript 6/7 and Vert.x\"), mdx(\"p\", null, \"Below you find an ex\\xADam\\xADple ver\\xADti\\xADcle writ\\xADten in Type\\xADScript. Well, I left all\\nthe TypeScript-\\u200Bspecific parts out. In fact the ver\\xADti\\xADcle is valid EC\\xADMAScript 6\\n(ex\\xADcept for the last snip\\xADpet \", \"[9]\", \" which is EC\\xADMAScript 7).\"), mdx(\"p\", null, \"First, fol\\xADlow the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/michel-kraemer/vertx-lang-typescript/blob/master/README.md\"\n  }), \"vertx-\\u200Blang-typescript README\"), \"\\nto in\\xADstall the li\\xADbrary and to en\\xADable Type\\xADScript in Vert.x. Then ex\\xADtract the\\ntype de\\xADf\\xADi\\xADn\\xADi\\xADtions (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-lang-typescript-1.1.0-typings.zip\"), \") into a new di\\xADrec\\xADtory.\\nCre\\xADate a new file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"es7verticle.ts\"), \" in this di\\xADrec\\xADtory and copy the code\\nbelow into it. Fi\\xADnally, open your com\\xADmand prompt and ex\\xADe\\xADcute\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"vertx run es7verticle.ts\\n\")), mdx(\"p\", null, \"This will run a small HTTP server that lis\\xADtens to re\\xADquests on port 8080. If you\\nopen your browser and go to http://lo\\xADcal\\xADhost:8080 you will see the fol\\xADlow\\xADing:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/ecmascript-6-7-on-the-jvm-with-typscript-and-vertx/output.png\",\n    \"alt\": \"Output of the verticle written in TypeScript\"\n  }))), mdx(\"p\", null, \"So far so good. Now let\\u2019s have a look at the code. I num\\xADbered the in\\xADdi\\xADvid\\xADual\\nEC\\xADMAScript fea\\xADtures used. Here\\u2019s a com\\xADplete list:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use an \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"arrow func\\xADtion\"), \" to cre\\xADate a re\\xADquest han\\xADdler (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Block-\\u200Bscoped vari\\xADables\"), \" do not pol\\xADlute your global name\\xADspace (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Spec\\xADify a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"de\\xADfault value\"), \" for a func\\xADtion pa\\xADra\\xADme\\xADter (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"rest pa\\xADra\\xADme\\xADters\"), \" to col\\xADlect mul\\xADti\\xADple pa\\xADra\\xADme\\xADters in an array (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Spread\"), \" the con\\xADtents of an array to func\\xADtion pa\\xADra\\xADme\\xADters (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It\\xADer\\xADate over array con\\xADtents using the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"for\\u2026of loop\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"tem\\xADplate strings\"), \" en\\xADable \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"string in\\xADter\\xADpo\\xADla\\xADtion\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"multi-\\u200Bline strings\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"classes\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"in\\xADher\\xADi\\xADtance\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use the new \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"ex\\xADpo\\xADnen\\xADti\\xADa\\xADtion op\\xADer\\xADa\\xADtor\"), \" as a short\\xADcut for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Math.pow()\"), \" (ES7)\")), mdx(Gist, {\n    url: \"https://gist.github.com/michel-kraemer/892866038dabcb8376e6\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"The ex\\xADam\\xADple demon\\xADstrates very well how you can use EC\\xADMAScript 6 (and parts of\\n7) on the JVM today. In fact, there are a lot more\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://es6-features.org/\"\n  }), \"cool ES6 fea\\xADtures\"), \" not in\\xADcluded in the ex\\xADam\\xADple such\\nas con\\xADstants (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \"), the prop\\xADerty short\\xADhand or method prop\\xADer\\xADties.\"), mdx(\"p\", null, \"Type\\xADScript is so much more than just ES6. It ac\\xADtu\\xADally has a\\nvery good sta\\xADtic type sys\\xADtem that al\\xADlows you to make compile-\\u200Btime type checks.\\nThis is makes it much eas\\xADier to write large Vert.x ap\\xADpli\\xADca\\xADtions with many\\nver\\xADti\\xADcles. Per\\xADson\\xADally I re\\xADally like the sup\\xADport that I get from my IDE when\\npro\\xADgram\\xADming Type\\xADScript. Since vertx-\\u200Blang-typescript comes with type de\\xADf\\xADi\\xADn\\xADi\\xADtions\\nfor the Vert.x JavaScript API I get auto-\\u200Bcompletion and ac\\xADcess to the doc\\xADu\\xADmen\\xADta\\xADtion\\nright in the ed\\xADi\\xADtor. I mostly use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.sublimetext.com/\"\n  }), \"Sub\\xADlime\"), \" by the\\nway, but I have tested it suc\\xADcess\\xADfully with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/\"\n  }), \"Vi\\xADsual Stu\\xADdio Code\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.eclipse.org/\"\n  }), \"Eclipse\"), \"\\nand \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://atom.io/\"\n  }), \"Atom\"), \".\"), mdx(\"p\", null, \"Un\\xADfor\\xADtu\\xADnately, the only ES7 fea\\xADture that you can use at the mo\\xADment with\\nvertx-\\u200Blang-typescript is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ex\\xADpo\\xADnen\\xADti\\xADa\\xADtion op\\xADer\\xADa\\xADtor\"), \". Type\\xADScript 1.7 also\\nsup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dec\\xADo\\xADra\\xADtors\"), \" but this fea\\xADture is dis\\xADabled at the mo\\xADment in\\nvertx-\\u200Blang-typescript be\\xADcause it is ex\\xADper\\xADi\\xADmen\\xADtal and sub\\xADject to change. I\\u2019ll\\nkeep you up to date when new fea\\xADtures are in\\xADtro\\xADduced.\"), mdx(\"h2\", {\n    \"id\": \"alternatives\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#alternatives\"\n  })), \"Alternatives\"), mdx(\"p\", null, \"We\\u2019ve re\\xADcently \", mdx(Link, {\n    href: \"/blog/vert-x-es6-back-to-the-future/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"pub\\xADlished a post\")), \"\\non how to use EC\\xADMAScript 6 with Vert.x here on this blog. We used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://babeljs.io/\"\n  }), \"Babel\"), \", a\\ncom\\xADpiler that trans\\xADlates ES6 to ES5.\"), mdx(\"p\", null, \"Al\\xADthough this ap\\xADproach works well it is a bit harder to set up and use than the\\none pre\\xADsented here. First, you need to wrap your Vert.x ap\\xADpli\\xADca\\xADtion in a NPM pack\\xADage.\\nSec\\xADond, in order to run your ap\\xADpli\\xADca\\xADtion, you need to ex\\xADe\\xADcute two com\\xADmands.\\nYou have to com\\xADpile it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run build\"), \" and then then call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm start\"), \".\\nWith vertx-\\u200Blang-typescript you only need one com\\xADmand. vertx-\\u200Blang-typescript\\nalso al\\xADlows you to embed the Type\\xADScript ver\\xADti\\xADcle in a larger Vert.x ap\\xADpli\\xADca\\xADtion\\nand also mix mul\\xADti\\xADple lan\\xADguages in one project. This is not pos\\xADsi\\xADble if you wrap\\nevery\\xADthing in a NPM pack\\xADage.\"), mdx(\"p\", null, \"Fi\\xADnally, the ap\\xADproach based on Babel only sup\\xADports EC\\xADMAScript 6 (2015), al\\xADthough\\nmore fea\\xADtures from ES7 will surely be in\\xADtro\\xADduced in Babel in the fu\\xADture.\\nType\\xADScript on the other hand gives you much more fea\\xADtures such as sta\\xADtic\\ntyp\\xADing that you will cer\\xADtainly find use\\xADful for any larger project.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Fol¬≠low¬≠ing the lat¬≠est re¬≠leases of <a href=\"/\">Vert.x 3.2</a> and\n<a href=\"https://github.com/michel-kraemer/vertx-lang-typescript\">vertx-‚Äãlang-typescript 1.1.0</a>\nI fig¬≠ured it would be a good idea to give you a cou¬≠ple of ex¬≠am¬≠ples how team¬≠ing\nVert.x and Type¬≠Script helps you use EC¬≠MAScript 6 and 7 fea¬≠tures on the JVM today.</p><p>The vertx-‚Äãlang-typescript li¬≠brary adds <a href=\"http://www.typescriptlang.org/\">Type¬≠Script</a> sup¬≠port to Vert.x 3.\nType¬≠Script is a typed su¬≠per¬≠set of JavaScript that com¬≠piles to plain JavaScript. It sup¬≠ports the\nEC¬≠MAScript 6 (EC¬≠MAScript 2015, ES6) stan¬≠dard and also a few parts of EC¬≠MAScript 7 (ES7) al¬≠ready.</p><p>The li¬≠brary au¬≠to¬≠mat¬≠i¬≠cally com¬≠piles Vert.x ver¬≠ti¬≠cles writ¬≠ten in\nType¬≠Script to JavaScript and ex¬≠e¬≠cutes them on the JVM. vertx-‚Äãlang-typescript also pro¬≠vides\ntype de¬≠f¬≠i¬≠n¬≠i¬≠tions for the Vert.x JavaScript API. Use them in your favourite\nType¬≠Script ed¬≠i¬≠tor/IDE to get auto-‚Äãcompletion, API doc¬≠u¬≠men¬≠ta¬≠tion and mean¬≠ing¬≠ful error\nmes¬≠sages. See the fol¬≠low¬≠ing screen¬≠cast:</p><p><img src=\"https://raw.githubusercontent.com/michel-kraemer/vertx-lang-typescript/aaa67228c998bf9dc64b5f45fb407ef56169efec/screencast.gif\"/></p><h2 id=\"ecmascript-67-and-vertx\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#ecmascript-67-and-vertx\"></a>ECMAScript 6/7 and Vert.x</h2><p>Below you find an ex¬≠am¬≠ple ver¬≠ti¬≠cle writ¬≠ten in Type¬≠Script. Well, I left all\nthe TypeScript-‚Äãspecific parts out. In fact the ver¬≠ti¬≠cle is valid EC¬≠MAScript 6\n(ex¬≠cept for the last snip¬≠pet <!-- -->[9]<!-- --> which is EC¬≠MAScript 7).</p><p>First, fol¬≠low the <a href=\"https://github.com/michel-kraemer/vertx-lang-typescript/blob/master/README.md\">vertx-‚Äãlang-typescript README</a>\nto in¬≠stall the li¬≠brary and to en¬≠able Type¬≠Script in Vert.x. Then ex¬≠tract the\ntype de¬≠f¬≠i¬≠n¬≠i¬≠tions (<code>vertx-lang-typescript-1.1.0-typings.zip</code>) into a new di¬≠rec¬≠tory.\nCre¬≠ate a new file named <code>es7verticle.ts</code> in this di¬≠rec¬≠tory and copy the code\nbelow into it. Fi¬≠nally, open your com¬≠mand prompt and ex¬≠e¬≠cute</p><pre><code class=\"hljs language-bash\">vertx run es7verticle.ts\n</code></pre><p>This will run a small HTTP server that lis¬≠tens to re¬≠quests on port 8080. If you\nopen your browser and go to http://lo¬≠cal¬≠host:8080 you will see the fol¬≠low¬≠ing:</p><p><img src=\"/images/blog/ecmascript-6-7-on-the-jvm-with-typscript-and-vertx/output.png\" alt=\"Output of the verticle written in TypeScript\"/></p><p>So far so good. Now let‚Äôs have a look at the code. I num¬≠bered the in¬≠di¬≠vid¬≠ual\nEC¬≠MAScript fea¬≠tures used. Here‚Äôs a com¬≠plete list:</p><ol><li>Use an <em>arrow func¬≠tion</em> to cre¬≠ate a re¬≠quest han¬≠dler (ES6)</li><li><em>Block-‚Äãscoped vari¬≠ables</em> do not pol¬≠lute your global name¬≠space (ES6)</li><li>Spec¬≠ify a <em>de¬≠fault value</em> for a func¬≠tion pa¬≠ra¬≠me¬≠ter (ES6)</li><li>Use <em>rest pa¬≠ra¬≠me¬≠ters</em> to col¬≠lect mul¬≠ti¬≠ple pa¬≠ra¬≠me¬≠ters in an array (ES6)</li><li><em>Spread</em> the con¬≠tents of an array to func¬≠tion pa¬≠ra¬≠me¬≠ters (ES6)</li><li>It¬≠er¬≠ate over array con¬≠tents using the <em>for‚Ä¶of loop</em> (ES6)</li><li><em>tem¬≠plate strings</em> en¬≠able <em>string in¬≠ter¬≠po¬≠la¬≠tion</em> and <em>multi-‚Äãline strings</em> (ES6)</li><li>Use <em>classes</em> and <em>in¬≠her¬≠i¬≠tance</em> (ES6)</li><li>Use the new <em>ex¬≠po¬≠nen¬≠ti¬≠a¬≠tion op¬≠er¬≠a¬≠tor</em> as a short¬≠cut for <code>Math.pow()</code> (ES7)</li></ol><div>...waiting for Gist...</div><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>The ex¬≠am¬≠ple demon¬≠strates very well how you can use EC¬≠MAScript 6 (and parts of\n7) on the JVM today. In fact, there are a lot more\n<a href=\"http://es6-features.org/\">cool ES6 fea¬≠tures</a> not in¬≠cluded in the ex¬≠am¬≠ple such\nas con¬≠stants (<code>const</code>), the prop¬≠erty short¬≠hand or method prop¬≠er¬≠ties.</p><p>Type¬≠Script is so much more than just ES6. It ac¬≠tu¬≠ally has a\nvery good sta¬≠tic type sys¬≠tem that al¬≠lows you to make compile-‚Äãtime type checks.\nThis is makes it much eas¬≠ier to write large Vert.x ap¬≠pli¬≠ca¬≠tions with many\nver¬≠ti¬≠cles. Per¬≠son¬≠ally I re¬≠ally like the sup¬≠port that I get from my IDE when\npro¬≠gram¬≠ming Type¬≠Script. Since vertx-‚Äãlang-typescript comes with type de¬≠f¬≠i¬≠n¬≠i¬≠tions\nfor the Vert.x JavaScript API I get auto-‚Äãcompletion and ac¬≠cess to the doc¬≠u¬≠men¬≠ta¬≠tion\nright in the ed¬≠i¬≠tor. I mostly use <a href=\"http://www.sublimetext.com/\">Sub¬≠lime</a> by the\nway, but I have tested it suc¬≠cess¬≠fully with\n<a href=\"https://code.visualstudio.com/\">Vi¬≠sual Stu¬≠dio Code</a>, <a href=\"http://www.eclipse.org/\">Eclipse</a>\nand <a href=\"https://atom.io/\">Atom</a>.</p><p>Un¬≠for¬≠tu¬≠nately, the only ES7 fea¬≠ture that you can use at the mo¬≠ment with\nvertx-‚Äãlang-typescript is the <em>ex¬≠po¬≠nen¬≠ti¬≠a¬≠tion op¬≠er¬≠a¬≠tor</em>. Type¬≠Script 1.7 also\nsup¬≠ports <em>dec¬≠o¬≠ra¬≠tors</em> but this fea¬≠ture is dis¬≠abled at the mo¬≠ment in\nvertx-‚Äãlang-typescript be¬≠cause it is ex¬≠per¬≠i¬≠men¬≠tal and sub¬≠ject to change. I‚Äôll\nkeep you up to date when new fea¬≠tures are in¬≠tro¬≠duced.</p><h2 id=\"alternatives\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#alternatives\"></a>Alternatives</h2><p>We‚Äôve re¬≠cently <a href=\"/blog/vert-x-es6-back-to-the-future/\">pub¬≠lished a post</a>\non how to use EC¬≠MAScript 6 with Vert.x here on this blog. We used <a href=\"https://babeljs.io/\">Babel</a>, a\ncom¬≠piler that trans¬≠lates ES6 to ES5.</p><p>Al¬≠though this ap¬≠proach works well it is a bit harder to set up and use than the\none pre¬≠sented here. First, you need to wrap your Vert.x ap¬≠pli¬≠ca¬≠tion in a NPM pack¬≠age.\nSec¬≠ond, in order to run your ap¬≠pli¬≠ca¬≠tion, you need to ex¬≠e¬≠cute two com¬≠mands.\nYou have to com¬≠pile it with <code>npm run build</code> and then then call <code>npm start</code>.\nWith vertx-‚Äãlang-typescript you only need one com¬≠mand. vertx-‚Äãlang-typescript\nalso al¬≠lows you to embed the Type¬≠Script ver¬≠ti¬≠cle in a larger Vert.x ap¬≠pli¬≠ca¬≠tion\nand also mix mul¬≠ti¬≠ple lan¬≠guages in one project. This is not pos¬≠si¬≠ble if you wrap\nevery¬≠thing in a NPM pack¬≠age.</p><p>Fi¬≠nally, the ap¬≠proach based on Babel only sup¬≠ports EC¬≠MAScript 6 (2015), al¬≠though\nmore fea¬≠tures from ES7 will surely be in¬≠tro¬≠duced in Babel in the fu¬≠ture.\nType¬≠Script on the other hand gives you much more fea¬≠tures such as sta¬≠tic\ntyp¬≠ing that you will cer¬≠tainly find use¬≠ful for any larger project.</p>","scope":{}}},"prevPost":{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},"nextPost":{"meta":{"title":"Automatic redeployment in Eclipse IDE","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x 3.1 has (re-)introduced the redeploy feature. This blog post explains how to use this feature in the Eclipse IDE. However, you can easily adapt the content to your IDE."},"date":"2015-12-20","slug":"automatic-redeployment-in-eclipse-ide"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let‚Äôs refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn‚Äôt test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Scala is here","category":"guides","authors":[{"name":"Jochen Mader","github_id":"codepitbull"}],"summary":"The rise of Scala as one of the most important languages on the JVM caught many (me included) by surprise. This hybrid of functional and imperative paradigms struck a chord with many developers."},"date":"2017-03-20","slug":"scala-is-here"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is ‚Äúwhere do I start ?‚Äù"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"}]},"__N_SSG":true}