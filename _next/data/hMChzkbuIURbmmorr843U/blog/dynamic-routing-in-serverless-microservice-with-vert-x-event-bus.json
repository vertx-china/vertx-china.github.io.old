{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Dynamic Routing in Serverless Microservice with Vert.x Event Bus","category":"guides","authors":[{"name":"Rowell Belen","github_id":"bytekast"}],"summary":"The Serverless Framework has become the de facto toolkit for building and deploying serverless functions or applications."},"date":"2017-04-14","slug":"dynamic-routing-in-serverless-microservice-with-vert-x-event-bus","readingTime":{"text":"3 min read","minutes":2.6,"time":156000,"words":520},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.rowellbelen.com/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus/\"\n  }), \"blog post\"))), mdx(\"h2\", {\n    \"id\": \"serverless-framework\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#serverless-framework\"\n  })), \"Serverless framework\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverless.com\"\n  }), \"Server\\xADless Frame\\xADwork\"), \" has be\\xADcome the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"De Facto\"), \" toolkit for build\\xADing and de\\xADploy\\xADing Server\\xADless func\\xADtions or ap\\xADpli\\xADca\\xADtions. Its com\\xADmu\\xADnity has done a great job ad\\xADvanc\\xADing the tools around Server\\xADless ar\\xADchi\\xADtec\\xADture.\"), mdx(\"p\", null, \"How\\xADever, in the Server\\xADless com\\xADmu\\xADnity there is de\\xADbate among de\\xADvel\\xADop\\xADers on whether a sin\\xADgle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AWS Lambda\"), \" func\\xADtion should only be re\\xADspon\\xADsi\\xADble for a sin\\xADgle API end\\xADpoint. My an\\xADswer, based on my real-\\u200Bworld pro\\xADduc\\xADtion ex\\xADpe\\xADri\\xADence, is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NO\"), \". \"), mdx(\"p\", null, \"Imag\\xADine if you are build\\xADing a set of APIs with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"10\"), \" end\\xADpoints and you need to de\\xADploy the APIs to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DEV\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"STAGE\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PROD\"), \" en\\xADvi\\xADron\\xADments. Now you are look\\xADing at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"30\"), \" dif\\xADfer\\xADent func\\xADtions to ver\\xADsion, de\\xADploy and man\\xADage - not to men\\xADtion the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Copy & Paste\"), \" code and con\\xADfig\\xADu\\xADra\\xADtion that will re\\xADsult from this type of set-\\u200Bup. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NO THANKS!!!\"), \" \"), mdx(\"p\", null, \"I be\\xADlieve a more prag\\xADmatic ap\\xADproach is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1 Lambda Func\\xADtion\"), \" == \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1 Mi\\xADcroser\\xADvice\"), \".\"), mdx(\"p\", null, \"For ex\\xADam\\xADple, if you were build\\xADing a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Mi\\xADcroser\\xADvice\"), \" with basic \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CRUD\"), \" func\\xADtion\\xADal\\xADity, you should im\\xADple\\xADment \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CREATE\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"READ\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UPDATE\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DELETE\"), \" in a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sin\\xADgle\"), \" Lambda func\\xADtion. In the code, you should re\\xADsolve the de\\xADsired ac\\xADtion by in\\xADspect\\xADing the re\\xADquest or the con\\xADtext.\"), mdx(\"h2\", {\n    \"id\": \"vertx-to-the-rescue\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-to-the-rescue\"\n  })), \"Vert.x to the rescue\"), mdx(\"p\", null, \"There are many ben\\xADe\\xADfits to using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vert.x\"), \" in any ap\\xADpli\\xADca\\xADtion. With \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vert.x\"), \", you get a rock-\\u200Bsolid and light\\xADweight toolkit for build\\xADing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"re\\xADac\\xADtive\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"highly per\\xADfor\\xADmant\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"event-\\u200Bdriven\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"non-\\u200Bblocking\"), \" ap\\xADpli\\xADca\\xADtions. The toolkit even pro\\xADvides asyn\\xADchro\\xADnous \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"APIs\"), \" for ac\\xADcess\\xADing tra\\xADdi\\xADtional block\\xADing dri\\xADvers such as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(Link, {\n    href: \"/docs/vertx-jdbc-client/groovy/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"\"\n  }), \"JDBC\"))), \".\"), mdx(\"p\", null, \"How\\xADever, for this ex\\xADam\\xADple, we will mainly focus on the \", mdx(Link, {\n    href: \"/docs/vertx-core/groovy/#event_bus\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Event Bus\")), \". The event bus al\\xADlows dif\\xADfer\\xADent parts of your ap\\xADpli\\xADca\\xADtion to com\\xADmu\\xADni\\xADcate with each other via event mes\\xADsages. It sup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pub\\xADlish/sub\\xADscribe\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"point to point\"), \", and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"request-\\u200Bresponse mes\\xADsag\\xADing\"), \".\"), mdx(\"p\", null, \"For the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Mi\\xADcroser\\xADvice\"), \" ex\\xADam\\xADple above, we could treat the com\\xADbi\\xADna\\xADtion of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTP METHOD\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RESOURCE PATH\"), \" as a unique event chan\\xADnel, and reg\\xADis\\xADter the sub\\xADscribers/han\\xADdlers to re\\xADspond ap\\xADpro\\xADpri\\xADately.\"), mdx(\"p\", null, \"Let\\u2019s dive right in.\"), mdx(\"h2\", {\n    \"id\": \"goal\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#goal\"\n  })), \"Goal\"), mdx(\"p\", null, \"Cre\\xADate a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADac\\xADtive\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"message-\\u200Bdriven\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"asyn\\xADchro\\xADnous\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Mi\\xADcroser\\xADvice\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DELETE\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PUT\"), \" CRUD op\\xADer\\xADa\\xADtions in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sin\\xADgle\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"aws.amazon.com/lambda\"\n  }), \"AWS Lambda Func\\xADtion\")), \" using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverless.com\"\n  }), \"Server\\xADless Frame\\xADwork\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Serverless stack definition\"), \":\"), mdx(Gist, {\n    url: \"https://gist.github.com/bytekast/48daa2ca479156c98d2735cca181ef30\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"solution\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#solution\"\n  })), \"Solution\"), mdx(\"p\", null, \"Use \", mdx(Link, {\n    href: \"/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x\")), \"\\u2019s \", mdx(Link, {\n    href: \"/docs/vertx-core/groovy/#event_bus\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Event Bus\")), \" to han\\xADdle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dy\\xADnamic rout\\xADing\"), \" to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"event han\\xADdlers\"), \" based on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HTTP method\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADsource path\"), \" from the API input.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lambda Handler\"), \":\"), mdx(Gist, {\n    url: \"https://gist.github.com/bytekast/d5a544f8cdcd327a12010100b2ba2d66\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"code-review\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#code-review\"\n  })), \"Code review\"), mdx(\"p\", null, \"Lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"14-19\"), \" ini\\xADtial\\xADizes the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vert.x\"), \" in\\xADstance. AWS Lambda will hold on to this in\\xADstance for the life of the con\\xADtainer/\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JVM\"), \". It is reused in sub\\xADse\\xADquent re\\xADquests.\"), mdx(\"p\", null, \"Line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"17\"), \" reg\\xADis\\xADters the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Ser\\xADvice\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"han\\xADdlers\")), mdx(\"p\", null, \"Line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"22\"), \" de\\xADfines the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main han\\xADdler\"), \" method that is called when the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lambda func\\xADtion\"), \" is in\\xADvoked.\"), mdx(\"p\", null, \"Line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"27\"), \" sends the Lambda func\\xADtion input to the (dy\\xADnamic) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ad\\xADdress\"), \" where han\\xADdlers are wait\\xADing to re\\xADspond. \"), mdx(\"p\", null, \"Lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"44-66\"), \" de\\xADfines the spe\\xADcific \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"han\\xADdlers\"), \" and binds them to the ap\\xADpro\\xADpri\\xADate \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"chan\\xADnels\"), \" (http method + re\\xADsource path)\"), mdx(\"h2\", {\n    \"id\": \"summary\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#summary\"\n  })), \"Summary\"), mdx(\"p\", null, \"As you can see, \", mdx(Link, {\n    href: \"/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x\")), \"\\u2019s \", mdx(Link, {\n    href: \"/docs/vertx-core/groovy/#event_bus\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Event Bus\")), \" makes it very easy to dy\\xADnam\\xADi\\xADcally sup\\xADport mul\\xADti\\xADple routes in a sin\\xADgle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Server\\xADless\"), \" func\\xADtion. This re\\xADduces the num\\xADber of func\\xADtions you have to man\\xADage, de\\xADploy and main\\xADtain in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AWS\"), \". In ad\\xADdi\\xADtion, you gain ac\\xADcess to asyn\\xADchro\\xADnous, non-\\u200Bblocking APIs that come stan\\xADdard with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vert.x\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Server\\xADless + Vert.x = BLISS\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"https://www.rowellbelen.com/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus/\">blog post</a></p></div><h2 id=\"serverless-framework\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#serverless-framework\"></a>Serverless framework</h2><p>The <a href=\"https://serverless.com\">Server­less Frame­work</a> has be­come the <em>De Facto</em> toolkit for build­ing and de­ploy­ing Server­less func­tions or ap­pli­ca­tions. Its com­mu­nity has done a great job ad­vanc­ing the tools around Server­less ar­chi­tec­ture.</p><p>How­ever, in the Server­less com­mu­nity there is de­bate among de­vel­op­ers on whether a sin­gle <strong>AWS Lambda</strong> func­tion should only be re­spon­si­ble for a sin­gle API end­point. My an­swer, based on my real-​world pro­duc­tion ex­pe­ri­ence, is <strong>NO</strong>. </p><p>Imag­ine if you are build­ing a set of APIs with <strong>10</strong> end­points and you need to de­ploy the APIs to <strong>DEV</strong>, <strong>STAGE</strong> and <strong>PROD</strong> en­vi­ron­ments. Now you are look­ing at <strong>30</strong> dif­fer­ent func­tions to ver­sion, de­ploy and man­age - not to men­tion the <em>Copy &amp; Paste</em> code and con­fig­u­ra­tion that will re­sult from this type of set-​up. <strong>NO THANKS!!!</strong> </p><p>I be­lieve a more prag­matic ap­proach is <strong>1 Lambda Func­tion</strong> == <strong>1 Mi­croser­vice</strong>.</p><p>For ex­am­ple, if you were build­ing a <strong>User Mi­croser­vice</strong> with basic <strong>CRUD</strong> func­tion­al­ity, you should im­ple­ment <code>CREATE</code>, <code>READ</code>, <code>UPDATE</code> and <code>DELETE</code> in a <strong>sin­gle</strong> Lambda func­tion. In the code, you should re­solve the de­sired ac­tion by in­spect­ing the re­quest or the con­text.</p><h2 id=\"vertx-to-the-rescue\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-to-the-rescue\"></a>Vert.x to the rescue</h2><p>There are many ben­e­fits to using <strong>Vert.x</strong> in any ap­pli­ca­tion. With <strong>Vert.x</strong>, you get a rock-​solid and light­weight toolkit for build­ing <strong>re­ac­tive</strong>, <strong>highly per­for­mant</strong>, <strong>event-​driven</strong> and <strong>non-​blocking</strong> ap­pli­ca­tions. The toolkit even pro­vides asyn­chro­nous <em>APIs</em> for ac­cess­ing tra­di­tional block­ing dri­vers such as <strong><a href=\"/docs/vertx-jdbc-client/groovy/\">JDBC</a></strong>.</p><p>How­ever, for this ex­am­ple, we will mainly focus on the <a href=\"/docs/vertx-core/groovy/#event_bus\">Event Bus</a>. The event bus al­lows dif­fer­ent parts of your ap­pli­ca­tion to com­mu­ni­cate with each other via event mes­sages. It sup­ports <em>pub­lish/sub­scribe</em>, <em>point to point</em>, and <em>request-​response mes­sag­ing</em>.</p><p>For the <strong>User Mi­croser­vice</strong> ex­am­ple above, we could treat the com­bi­na­tion of the <code>HTTP METHOD</code> and <code>RESOURCE PATH</code> as a unique event chan­nel, and reg­is­ter the sub­scribers/han­dlers to re­spond ap­pro­pri­ately.</p><p>Let’s dive right in.</p><h2 id=\"goal\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#goal\"></a>Goal</h2><p>Cre­ate a <em>re­ac­tive</em>, <em>message-​driven</em>, <em>asyn­chro­nous</em> <strong>User Mi­croser­vice</strong> with <code>GET</code>, <code>POST</code>, <code>DELETE</code>, <code>PUT</code> CRUD op­er­a­tions in a <em>sin­gle</em> <strong><a href=\"aws.amazon.com/lambda\">AWS Lambda Func­tion</a></strong> using the <a href=\"https://serverless.com\">Server­less Frame­work</a></p><p><code>Serverless stack definition</code>:</p><div>...waiting for Gist...</div><h2 id=\"solution\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#solution\"></a>Solution</h2><p>Use <a href=\"/\">Vert.x</a>’s <a href=\"/docs/vertx-core/groovy/#event_bus\">Event Bus</a> to han­dle <strong>dy­namic rout­ing</strong> to <strong>event han­dlers</strong> based on <em>HTTP method</em> and <em>re­source path</em> from the API input.</p><p><code>Lambda Handler</code>:</p><div>...waiting for Gist...</div><h2 id=\"code-review\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#code-review\"></a>Code review</h2><p>Lines <code>14-19</code> ini­tial­izes the <strong>Vert.x</strong> in­stance. AWS Lambda will hold on to this in­stance for the life of the con­tainer/<strong>JVM</strong>. It is reused in sub­se­quent re­quests.</p><p>Line <code>17</code> reg­is­ters the <strong>User Ser­vice</strong> <em>han­dlers</em></p><p>Line <code>22</code> de­fines the <strong>main han­dler</strong> method that is called when the <strong>Lambda func­tion</strong> is in­voked.</p><p>Line <code>27</code> sends the Lambda func­tion input to the (dy­namic) <strong>ad­dress</strong> where han­dlers are wait­ing to re­spond. </p><p>Lines <code>44-66</code> de­fines the spe­cific <em>han­dlers</em> and binds them to the ap­pro­pri­ate <em>chan­nels</em> (http method + re­source path)</p><h2 id=\"summary\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#summary\"></a>Summary</h2><p>As you can see, <a href=\"/\">Vert.x</a>’s <a href=\"/docs/vertx-core/groovy/#event_bus\">Event Bus</a> makes it very easy to dy­nam­i­cally sup­port mul­ti­ple routes in a sin­gle <strong>Server­less</strong> func­tion. This re­duces the num­ber of func­tions you have to man­age, de­ploy and main­tain in <strong>AWS</strong>. In ad­di­tion, you gain ac­cess to asyn­chro­nous, non-​blocking APIs that come stan­dard with <strong>Vert.x</strong>.</p><blockquote><p>Server­less + Vert.x = BLISS</p></blockquote>","scope":{}}},"prevPost":{"meta":{"title":"Building a real-time web app with Angular/Ngrx and Vert.x","category":"guides","authors":[{"name":"Benoit Hediard","github_id":"benorama"}],"summary":"There are multiple tech stacks to build a real-time web app. What are the best choices to build Angular client apps, connected to a JVM-based backend?"},"date":"2017-04-26","slug":"building-a-real-time-web-app-with-angular-ngrx-and-vert-x"},"nextPost":{"meta":{"title":"Scala is here","category":"guides","authors":[{"name":"Jochen Mader","github_id":"codepitbull"}],"summary":"The rise of Scala as one of the most important languages on the JVM caught many (me included) by surprise. This hybrid of functional and imperative paradigms struck a chord with many developers."},"date":"2017-03-20","slug":"scala-is-here"},"relatedPosts":[{"meta":{"title":"Eclipse Vert.x based Framework URL Shortener Backend","category":"guides","authors":[{"name":"Lazar Bulić","github_id":"pendula95"}],"summary":"We combine Vert.x with the serverless framework to write a microservice that runs on AWS Lambda."},"date":"2017-12-21","slug":"eclipse-vert-x-based-framework-url-shortener-backend"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"}]},"__N_SSG":true}