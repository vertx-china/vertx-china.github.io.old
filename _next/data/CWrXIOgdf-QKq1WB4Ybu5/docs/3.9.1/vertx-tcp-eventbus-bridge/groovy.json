{"pageProps":{"slug":"3.9.1/vertx-tcp-eventbus-bridge/groovy","title":"Vert.x-tcp-eventbus-bridge","fallbackGitHubStars":null,"toc":"","contents":"<h1>Vert.x-tcp-eventbus-bridge</h1>\n<div class=\"paragraph\">\n<p>Vert.x-tcp-eventbus-bridge is a TCP bridge to Vert.x EventBus. To use this project, add the following\ndependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"paragraph\">\n<p>Maven (in your <code>pom.xml</code>):</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-lang-groovy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-lang-groovy:3.9.1'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The TCP EventBus bridge is built on top of TCP, meaning that any application that can\ncreate TCP sockets can interact with a remote Vert.x instance via its event bus.</p>\n</div>\n<div class=\"paragraph\">\n<p>The main use case for the TCP bridge <em>versus</em> the SockJS bridge is for applications that are more\nresource-constrained and that need to be lightweight since the whole HTTP WebSockets is replaced with plain TCP sockets.</p>\n</div>\n<div class=\"paragraph\">\n<p>It remains of course useful even for applications that don&#8217;t have tight resource constraints:\nthe protocol is simple enough to efficiently provide an integration interface with non-JVM\napplications.</p>\n</div>\n<div class=\"paragraph\">\n<p>The protocol has been kept as simple as possible and communications use Frames both ways.\nThe structure of a Frame looks like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>&lt;Length: uInt32&gt;&lt;{\n  type: String,\n  address: String,\n  (replyAddress: String)?,\n  headers: JsonObject,\n  body: JsonObject\n}: JsonObject&gt;</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The message consists of a JSON document that may or may not have been minified.\nThe message must be prefixed by a <em>big endian</em> 32 bits positive integer (4 bytes) that indicates\nthe full length of the JSON document, in bytes.</p>\n</div>\n<div class=\"paragraph\">\n<p>The message <code>type</code> can be the following for messages sent by the TCP client:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>send</code> to send a message to an <code>address</code>,</p>\n</li>\n<li>\n<p><code>publish</code> to publish a message to an <code>address</code>,</p>\n</li>\n<li>\n<p><code>register</code> to subscribe to the messages sent or published to an <code>address</code>,</p>\n</li>\n<li>\n<p><code>unregister</code> to unsubscribe to the messages sent or published to an <code>address</code>,</p>\n</li>\n<li>\n<p><code>ping</code> to send a <code>ping</code> request to the bridge.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Note that the <code>replyAddress</code> field is optional and may only be used for a <code>send</code> message.\nA message with that field is expected to <em>eventually</em> receive a message back from the server\nwhose <code>address</code> field will be that of the original <code>replyAddress</code> value.</p>\n</div>\n<div class=\"paragraph\">\n<p>The server posts messages back to the client, and they can be of the following <code>type</code>:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>message</code> for messages sent or published to an <code>address</code>, or</p>\n</li>\n<li>\n<p><code>err</code> to indicate an error (the <code>body</code> shall contain details), or</p>\n</li>\n<li>\n<p><code>pong</code> to respond the <code>ping</code> request sent from client.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>An example NodeJS client is available in the source of the project.\nThis client uses the same API as the SockJS\ncounter part so it should make it easier to switch between the TCP and SockJS implementations.</p>\n</div>\n<div class=\"paragraph\">\n<p>An example on how to get started with this bridge could be:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> bridge = TcpEventBusBridge.create(vertx, [\n<span class=\"hljs-symbol\">  inboundPermitteds:</span>[\n    [\n<span class=\"hljs-symbol\">      address:</span><span class=\"hljs-string\">\"in\"</span>\n    ]\n  ],\n<span class=\"hljs-symbol\">  outboundPermitteds:</span>[\n    [\n<span class=\"hljs-symbol\">      address:</span><span class=\"hljs-string\">\"out\"</span>\n    ]\n  ]\n])\n\nbridge.listen(<span class=\"hljs-number\">7000</span>, { res -&gt;\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// succeed...</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// fail...</span>\n  }\n})</code></pre>\n</div>\n</div>","version":"3.9.1"},"__N_SSG":true}