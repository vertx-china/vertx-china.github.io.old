{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests","readingTime":{"text":"15 min read","minutes":14.215,"time":852900,"words":2843},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      em: \"em\",\n      a: \"a\",\n      h2: \"h2\",\n      ol: \"ol\",\n      li: \"li\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      strong: \"strong\"\n    }, props.components), {Link, Alert} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Let’s re­fresh our mind about what we de­vel­oped so far in the \", _jsx(_components.em, {\n          children: \"in­tro­duc­tion to vert.x\"\n        }), \" se­ries. In \", _jsx(Link, {\n          href: \"/blog/my-first-vert-x-3-application/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"the first post\"\n          })\n        }), \", we de­vel­oped a very sim­ple Vert.x 3 ap­pli­ca­tion, and saw how this ap­pli­ca­tion can be tested, pack­aged and ex­e­cuted. In \", _jsx(Link, {\n          href: \"/blog/vert-x-application-configuration/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"the sec­ond post\"\n          })\n        }), \", we saw how this ap­pli­ca­tion be­came con­fig­urable and how we can use a ran­dom port in test, and use an­other con­fig­urable port in pro­duc­tion. Fi­nally, the \", _jsx(Link, {\n          href: \"/blog/some-rest-with-vert-x/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"pre­vi­ous post\"\n          })\n        }), \" has shown how to use vertx-​web and how to im­ple­ment a small REST API. How­ever, we for­got an im­por­tant task. We didn’t test the API. In this post we will in­crease the con­fi­dence we have on this ap­pli­ca­tion by im­ple­ment­ing unit and in­te­gra­tion tests.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The code of this post is avail­able in the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/tree/post-4\",\n          children: \"post-4 branch\"\n        }), \" of the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app\",\n          children: \"project\"\n        }), \". The start­ing post, how­ever is the code avail­able in the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/tree/post-3\",\n          children: \"post-3 branch\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"tests-tests-tests\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#tests-tests-tests\"\n        }), \"Tests, Tests, Tests…\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This post is mainly about tests. We dis­tin­guish two types of tests: unit tests and in­te­gra­tion tests. Both are equally im­por­tant, but have dif­fer­ent focus. Unit tests en­sure that one \", _jsx(_components.em, {\n          children: \"com­po­nent\"\n        }), \" of your ap­pli­ca­tion, gen­er­ally a class in the Java world, be­haves as ex­pected. The ap­pli­ca­tion is not tested as a whole, but pieces by pieces. In­te­gra­tion tests are more \", _jsx(_components.em, {\n          children: \"black box\"\n        }), \" in the sense that the ap­pli­ca­tion is started and tested gen­er­ally ex­ter­nally.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this post we are going to start with some more unit tests as a warm up ses­sion and then focus on in­te­gra­tion tests. If you al­ready im­ple­mented in­te­gra­tion tests, you may be a bit scared, and it makes sense. But don’t worry, with Vert.x there are no hid­den sur­prises.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"warmup-some-more-unit-tests\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#warmup-some-more-unit-tests\"\n        }), \"Warmup: Some more unit tests\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s start slowly. Re­mem­ber in the first post we have im­ple­mented a unit test with \", _jsx(Link, {\n          href: \"/docs/vertx-unit/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"vertx-​unit\"\n          })\n        }), \". The test we did is dead sim­ple:\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"we started the ap­pli­ca­tion be­fore the test\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"we checks that it replies “Hello”\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Just to re­fresh your mind, let’s have a look at the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/blob/post-4/src/test/java/io/vertx/blog/first/MyFirstVerticleTest.java\",\n          children: \"code\"\n        })]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Before\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"setUp\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"throws\"\n          }), \" IOException {\\n  vertx = Vertx.vertx();\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ServerSocket\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"socket\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"ServerSocket\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \");\\n  port = socket.getLocalPort();\\n  socket.close();\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"DeploymentOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"DeploymentOptions\"\n          }), \"()\\n      .setConfig(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", port)\\n      );\\n  vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"setUp\"\n        }), \" method is in­voked be­fore each test (as in­structed by the \", _jsx(_components.code, {\n          children: \"@Before\"\n        }), \" an­no­ta­tion). It, first, cre­ates a new in­stance of Vert.x. Then, it gets a free port and then de­ploys our ver­ti­cle with the right con­fig­u­ra­tion. Thanks to the \", _jsx(_components.code, {\n          children: \"context.asyncAssertSuccess()\"\n        }), \" it waits until the suc­cess­ful de­ploy­ment of the ver­ti­cle.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"tearDown\"\n        }), \" is straight­for­ward and just closes the Vert.x in­stance. It au­to­mat­i­cally un-​deploys the ver­ti­cles:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@After\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"tearDown\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n  vertx.close(context.asyncAssertSuccess());\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Fi­nally, our sin­gle test is:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"testMyApplication\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" context.async();\\n  vertx.createHttpClient().getNow(port, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \", response -> {\\n    response.handler(body -> {\\n      context.assertTrue(body.toString().contains(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello\\\"\"\n          }), \"));\\n      async.complete();\\n    });\\n  });\\n }\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It is only check­ing that the ap­pli­ca­tion replies “Hello” when we emit a HTTP re­quest on \", _jsx(_components.code, {\n          children: \"/\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s now try to im­ple­ment some unit tests checkin that our web ap­pli­ca­tion and the REST API be­have as ex­pected. Let’s start by check­ing that the \", _jsx(_components.code, {\n          children: \"index.html\"\n        }), \" page is cor­rectly served. This test is very sim­i­lar to the pre­vi­ous one:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"checkThatTheIndexPageIsServed\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" context.async();\\n  vertx.createHttpClient().getNow(port, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/assets/index.html\\\"\"\n          }), \", response -> {\\n    context.assertEquals(response.statusCode(), \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \");\\n    context.assertEquals(response.headers().get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \"), \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \");\\n    response.bodyHandler(body -> {\\n      context.assertTrue(body.toString().contains(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<title>My Whisky Collection</title>\\\"\"\n          }), \"));\\n      async.complete();\\n    });\\n  });\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We re­trieve the \", _jsx(_components.code, {\n          children: \"index.html\"\n        }), \" page and check:\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"it’s there (sta­tus code 200)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"it’s a HTML page (con­tent type set to “text/html”)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"it has the right title (“My Whisky Col­lec­tion”)\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        children: _jsxs(_components.p, {\n          children: [\"As you can see, we can test the sta­tus code and the head­ers di­rectly on the HTTP re­sponse, but en­sure that the body is right, we need to re­trieve it. This is done with a body han­dler that re­ceives the com­plete body as pa­ra­me­ter. Once the last check is made, we re­lease the \", _jsx(_components.code, {\n            children: \"async\"\n          }), \" by call­ing \", _jsx(_components.code, {\n            children: \"complete\"\n          }), \".\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ok, great, but this ac­tu­ally does not test our REST API. Let’s en­sure that we can add a bot­tle to the col­lec­tion. Un­like the pre­vi­ous tests, this one is using \", _jsx(_components.code, {\n          children: \"post\"\n        }), \" to \", _jsx(_components.em, {\n          children: \"post\"\n        }), \" data to the server:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"checkThatWeCanAdd\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" context.async();\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"json\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Json.encodePrettily(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Whisky\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Jameson\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Ireland\\\"\"\n          }), \"));\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"length\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Integer.toString(json.length());\\n  vertx.createHttpClient().post(port, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies\\\"\"\n          }), \")\\n      .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json\\\"\"\n          }), \")\\n      .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-length\\\"\"\n          }), \", length)\\n      .handler(response -> {\\n        context.assertEquals(response.statusCode(), \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"201\"\n          }), \");\\n        context.assertTrue(response.headers().get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \").contains(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json\\\"\"\n          }), \"));\\n        response.bodyHandler(body -> {\\n          \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Json.decodeValue(body.toString(), Whisky.class);\\n          context.assertEquals(whisky.getName(), \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Jameson\\\"\"\n          }), \");\\n          context.assertEquals(whisky.getOrigin(), \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Ireland\\\"\"\n          }), \");\\n          context.assertNotNull(whisky.getId());\\n          async.complete();\\n        });\\n      })\\n      .write(json)\\n      .end();\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"First we cre­ate the con­tent we want to add. The server con­sumes JSON data, so we need a JSON string. You can ei­ther write your JSON doc­u­ment man­u­ally, or use the Vert.x method (\", _jsx(_components.code, {\n          children: \"Json.encodePrettily\"\n        }), \") as done here. Once we have the con­tent, we cre­ate a \", _jsx(_components.code, {\n          children: \"post\"\n        }), \" re­quest. We need to con­fig­ure some head­ers to be cor­rectly read by the server. First, we say that we are send­ing JSON data and we also set the con­tent length. We also at­tach a re­sponse han­dler very close to the checks made in the pre­vi­ous test. No­tice that we can re­build our ob­ject from the JSON doc­u­ment send by the server using the \", _jsx(_components.code, {\n          children: \"JSON.decodeValue\"\n        }), \" method. It’s very con­ve­nient as it avoids lots of boil­er­plate code.  At this point the re­quest is not emit­ted, we need to write the data and call the \", _jsx(_components.code, {\n          children: \"end()\"\n        }), \" method. This is made using \", _jsx(_components.code, {\n          children: \".write(json).end();\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The order of the meth­ods is im­por­tant. You can­not \", _jsx(_components.em, {\n          children: \"write\"\n        }), \" data if you don’t have a re­sponse han­dler con­fig­ured. Fi­nally don’t for­get to call \", _jsx(_components.code, {\n          children: \"end\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, let’s try this. You can run the test using:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"mvn clean \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"test\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We could con­tinue writ­ing more unit test like that, but it could be­come quite com­plex. Let’s see how we could con­tinue our tests using in­te­gra­tion tests.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"it-hurts\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#it-hurts\"\n        }), \"IT hurts\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Well, I think we need to make that clear, in­te­gra­tion test­ing hurts. If you have ex­pe­ri­ence in this area, can you re­mem­ber how long did it take to setup every­thing cor­rectly? I get new white hairs by just think­ing about it. Why are in­te­gra­tion tests more com­pli­cated? It’s ba­si­cally be­cause of the setup:\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"We must start the ap­pli­ca­tion in a \", _jsx(_components.em, {\n            children: \"close to pro­duc­tion\"\n          }), \" way\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"We must then run the tests (and con­fig­ure them to hit the right ap­pli­ca­tion in­stance)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"We must stop the ap­pli­ca­tion\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"That does not sound un­con­quer­able like that, but if you need Linux, MacOS X and Win­dows sup­port, it quickly get messy. There are plenty of great frame­works eas­ing this such as \", _jsx(_components.a, {\n          href: \"http://arquillian.org\",\n          children: \"Ar­quil­lian\"\n        }), \", but let’s do it with­out any frame­work to un­der­stand how it works.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"we-need-a-battle-plan\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#we-need-a-battle-plan\"\n        }), \"We need a battle plan\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Be­fore rush­ing into the com­plex con­fig­u­ra­tion, let’s think a minute about the tasks:\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Step 1 - Re­serve a free port\"\n        }), \"\\nWe need to get a free port on which the ap­pli­ca­tion can \", _jsx(_components.em, {\n          children: \"lis­ten\"\n        }), \", and we need to in­ject this port in our in­te­gra­tion tests.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Step 2 - Gen­er­ate the ap­pli­ca­tion con­fig­u­ra­tion\"\n        }), \"\\nOnce we have the free port, we need to write a JSON file con­fig­ur­ing the ap­pli­ca­tion HTTP Port to this port.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Step 3 - Start the ap­pli­ca­tion\"\n        }), \"\\nSounds easy right? Well it’s not that sim­ple as we need to launch our ap­pli­ca­tion in a back­ground process.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Step 4 - Ex­e­cute the in­te­gra­tion tests\"\n        }), \"\\nFi­nally, the cen­tral part, run the tests. But be­fore that we should im­ple­ment some in­te­gra­tion tests. Let’s come to that later.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"Step 5 - Stop the ap­pli­ca­tion\"\n        }), \"\\nOnce the tests have been ex­e­cuted, re­gard­less if there are fail­ures or er­rors in the tests, we need to stop the ap­pli­ca­tion.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"There are mul­ti­ple way to im­ple­ment this plan. We are going to use a \", _jsx(_components.em, {\n          children: \"generic\"\n        }), \" way. It’s not nec­es­sar­ily the bet­ter, but can be ap­plied al­most every­where. The ap­proach is tight to Apache Maven. If you want to pro­pose an al­ter­na­tive using Gra­dle or a dif­fer­ent tool, I will be happy to add your way to the post.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"implement-the-plan\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#implement-the-plan\"\n        }), \"Implement the plan\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As said above, this sec­tion is Maven-​centric, and most of the code goes in the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/blob/post-4/pom.xml\",\n          children: \"pom.xml\"\n        }), \" file. If you never used the dif­fer­ent Maven life­cy­cle phases, I rec­om­mend you to look at the \", _jsx(_components.a, {\n          href: \"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\",\n          children: \"in­tro­duc­tion to the Maven life­cy­cle\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We need to add and con­fig­ure a cou­ple of plu­g­ins. Open the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file and in the \", _jsx(_components.code, {\n          children: \"<plugins>\"\n        }), \" sec­tion add:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"org.codehaus.mojo\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"build-helper-maven-plugin\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"1.9.1\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"reserve-network-port\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"reserve-network-port\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"process-sources\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"portNames\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"portName\"\n            }), \">\"]\n          }), \"http.port\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"portName\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"portNames\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We use the \", _jsx(_components.code, {\n          children: \"build-helper-maven-plugin\"\n        }), \" (a plug­in to know if you are often using Maven) to pick up a free port. Once found, the plug­in as­signs the \", _jsx(_components.code, {\n          children: \"http.port\"\n        }), \" vari­able to the picked port. We ex­e­cute this plug­in early in the build (dur­ing the \", _jsx(_components.code, {\n          children: \"process-sources\"\n        }), \" phase), so we can use the \", _jsx(_components.code, {\n          children: \"http.port\"\n        }), \" vari­able in the other plug­in. This was for the first step.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Two ac­tions are re­quired for the sec­ond step. First, in the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file, just below the \", _jsx(_components.code, {\n          children: \"<build>\"\n        }), \" open­ing tag, add:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"testResources\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"testResource\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"directory\"\n            }), \">\"]\n          }), \"src/test/resources\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"directory\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"filtering\"\n            }), \">\"]\n          }), \"true\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"filtering\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"testResource\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"testResources\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This in­structs Maven to \", _jsx(_components.em, {\n          children: \"fil­ter\"\n        }), \" re­sources from the \", _jsx(_components.code, {\n          children: \"src/test/resources\"\n        }), \" di­rec­tory. \", _jsx(_components.em, {\n          children: \"Fil­ter\"\n        }), \" means re­plac­ing place­hold­ers by ac­tual val­ues. That’s ex­actly what we need as we now have the \", _jsx(_components.code, {\n          children: \"http.port\"\n        }), \" vari­able. So cre­ate the \", _jsx(_components.code, {\n          children: \"src/test/resources/my-it-config.json\"\n        }), \" file with the fol­low­ing con­tent:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [\"{\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \": ${http.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"port\"\n          }), \"}\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This con­fig­u­ra­tion file is sim­i­lar to the one we did in pre­vi­ous posts. The only dif­fer­ence is the \", _jsx(_components.code, {\n          children: \"${http.port}\"\n        }), \" which is the (de­fault) Maven syn­tax for fil­ter­ing. So, when Maven is going to process or file it will re­place \", _jsx(_components.code, {\n          children: \"${http.port}\"\n        }), \" by the se­lected port. That’s all for the sec­ond step.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The step 3 and 5 are a bit more tricky. We should start and stop the ap­pli­ca­tion. We are going to use the \", _jsx(_components.code, {\n          children: \"maven-antrun-plugin\"\n        }), \" to achieve this. In the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file, below the \", _jsx(_components.code, {\n          children: \"build-helper-maven-plugin\"\n        }), \", add:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- We use the maven-antrun-plugin to start the application before the integration tests\\nand stop them afterward -->\"\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"maven-antrun-plugin\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"1.8\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"start-vertx-app\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"pre-integration-test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"run\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"target\"\n            }), \">\"]\n          }), \"\\n          \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!--\\n          Launch the application as in 'production' using the fatjar.\\n          We pass the generated configuration, configuring the http port to the picked one\\n          -->\"\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"exec\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"executable\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"${java.home}/bin/java\\\"\"\n            }), \"\\n                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"dir\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"${project.build.directory}\\\"\"\n            }), \"\\n                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"spawn\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"true\\\"\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"-jar\\\"\"\n            }), \"/>\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"${project.artifactId}-${project.version}-fat.jar\\\"\"\n            }), \"/>\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"-conf\\\"\"\n            }), \"/>\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"${project.build.directory}/test-classes/my-it-config.json\\\"\"\n            }), \"/>\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"exec\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"target\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"stop-vertx-app\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"post-integration-test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"run\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!--\\n          Kill the started process.\\n          Finding the right process is a bit tricky. Windows command in in the windows profile (below)\\n          -->\"\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"target\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"exec\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"executable\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"bash\\\"\"\n            }), \"\\n                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"dir\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"${project.build.directory}\\\"\"\n            }), \"\\n                \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"spawn\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"false\\\"\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"-c\\\"\"\n            }), \"/>\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"ps ax | grep -Ei '[\\\\-]DtestPort=${http.port}\\\\s+\\\\-jar\\\\s+${project.artifactId}' | awk 'NR==1{print $1}' | xargs kill -SIGTERM\\\"\"\n            }), \"/>\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"exec\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"target\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"That’s a huge piece of XML, isn’t it ? We con­fig­ure two ex­e­cu­tions of the plug­in. The first one, hap­pen­ing in the \", _jsx(_components.code, {\n          children: \"pre-integration-test\"\n        }), \" phase, ex­e­cutes a set of bash com­mand to start the ap­pli­ca­tion. It ba­si­cally ex­e­cutes:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"java -jar my-first-app-1.0-SNAPSHOT-fat.jar -conf .../my-it-config.json\\n\"\n        })\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"Is the fatjar created?\",\n        children: _jsxs(_components.p, {\n          children: [\"The fat jar em­bed­ding our ap­pli­ca­tion is cre­ated in the \", _jsx(_components.code, {\n            children: \"package\"\n          }), \" phase, pre­ced­ing the \", _jsx(_components.code, {\n            children: \"pre-integration-test\"\n          }), \", so yes, the fat jar is cre­ated.\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As men­tioned above, we launch the ap­pli­ca­tion as we would in a pro­duc­tion en­vi­ron­ment.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Once, the in­te­gra­tion tests are ex­e­cuted (step 4 we didn’t look at it yet), we need to stop the ap­pli­ca­tion (so in the the \", _jsx(_components.code, {\n          children: \"post-integration-test\"\n        }), \" phase).  To close the ap­pli­ca­tion, we are going to in­voke some shell magic com­mand to find our process in with the \", _jsx(_components.code, {\n          children: \"ps\"\n        }), \" com­mand and send the \", _jsx(_components.code, {\n          children: \"SIGTERM\"\n        }), \" sig­nal. It is equiv­a­lent to:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"ps\\n.... -> find your process \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"id\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"kill\"\n          }), \" your_process_id -SIGTERM\\n\"]\n        })\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"And Windows?\",\n        children: _jsx(_components.p, {\n          children: \"I men­tioned it above, we want Win­dows to be sup­ported and these com­mands are not going to work on Win­dows. Don’t worry, Win­dows con­fig­u­ra­tion is below …\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We should now do the fourth step we (silently) skipped. To ex­e­cute our in­te­gra­tion tests, we use the \", _jsx(_components.code, {\n          children: \"maven-failsafe-plugin\"\n        }), \". Add the fol­low­ing plug­in con­fig­u­ra­tion to your \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"org.apache.maven.plugins\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"maven-failsafe-plugin\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"2.18.1\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"integration-test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"verify\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"systemProperties\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"http.port\"\n            }), \">\"]\n          }), \"${http.port}\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"http.port\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"systemProperties\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you can see, we pass the \", _jsx(_components.code, {\n          children: \"http.port\"\n        }), \" prop­erty as a sys­tem vari­able, so our tests are able to con­nect on the right port.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"That’s all! Wow… Let’s try this (for win­dows users, you will need to be pa­tient or to jump to the last sec­tion).\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean verify\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We should not use \", _jsx(_components.code, {\n          children: \"mvn integration-test\"\n        }), \" be­cause the ap­pli­ca­tion would still be run­ning. The \", _jsx(_components.code, {\n          children: \"verify\"\n        }), \" phase is after the \", _jsx(_components.code, {\n          children: \"post-integration-test\"\n        }), \" phase and will analyse the integration-​tests re­sults. Build fail­ures be­cause of in­te­gra­tion tests failed as­ser­tions are re­ported in this phase.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"hey-we-dont-have-integration-tests-\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#hey-we-dont-have-integration-tests-\"\n        }), \"Hey, we don’t have integration tests !\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And that’s right, we set up every­thing, but we don’t have a sin­gle in­te­gra­tion test. To ease the im­ple­men­ta­tion, let’s use two li­braries: \", _jsx(_components.a, {\n          href: \"http://joel-costigliola.github.io/assertj/\",\n          children: \"As­sertJ\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://github.com/jayway/rest-assured\",\n          children: \"Rest-​Assured\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As­sertJ pro­poses a set of as­ser­tions that you can chain and use flu­ently. Rest As­sured is a frame­work to test REST API.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file, add the two fol­low­ing de­pen­den­cies just be­fore \", _jsx(_components.code, {\n          children: \"</dependencies>\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"com.jayway.restassured\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"rest-assured\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"2.4.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"org.assertj\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"assertj-core\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"2.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then, cre­ate the \", _jsx(_components.code, {\n          children: \"src/test/java/io/vertx/blog/first/MyRestIT.java\"\n        }), \" file. Un­like unit test, in­te­gra­tion test ends with \", _jsx(_components.code, {\n          children: \"IT\"\n        }), \". It’s a con­ven­tion from the Fail­safe plug­in to dis­tin­guish unit (start­ing or end­ing with \", _jsx(_components.em, {\n          children: \"Test\"\n        }), \") from in­te­gra­tion tests (start­ing or end­ing with \", _jsx(_components.em, {\n          children: \"IT\"\n        }), \"). In the cre­ated file add:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" io.vertx.blog.first;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" com.jayway.restassured.RestAssured;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.junit.AfterClass;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.junit.BeforeClass;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MyRestIT\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@BeforeClass\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"configureRestAssured\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    RestAssured.baseURI = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http://localhost\\\"\"\n          }), \";\\n    RestAssured.port = Integer.getInteger(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@AfterClass\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"unconfigureRestAssured\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    RestAssured.reset();\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The meth­ods an­no­tated with \", _jsx(_components.code, {\n          children: \"@BeforeClass\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"@AfterClass\"\n        }), \" are in­voked once be­fore / after all tests of the class. Here, we just re­trieve the http port (passed as a sys­tem prop­erty) and we con­fig­ure REST As­sured.\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"Am I ready to serve?\",\n        children: _jsxs(_components.p, {\n          children: [\"You may need to wait in the \", _jsx(_components.code, {\n            children: \"configureRestAssured\"\n          }), \" method that the HTTP server has been started. We rec­om­mend the \", _jsx(_components.a, {\n            href: \"https://github.com/jayway/awaitility\",\n            children: \"await­il­ity\"\n          }), \" test frame­work to check that the re­quest can be served. It would fail the test if the server does not start.\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"It’s now time to im­ple­ment a real test. Let’s check we can re­trieve an in­di­vid­ual prod­uct:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"checkThatWeCanRetrieveIndividualProduct\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Get the list of bottles, ensure it's a success and extract the first id.\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"id\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies\\\"\"\n          }), \").then()\\n      .assertThat()\\n      .statusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \")\\n      .extract()\\n      .jsonPath().getInt(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"find { it.name=='Bowmore 15 Years Laimrig' }.id\\\"\"\n          }), \");\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Now get the individual resource and check the content\"\n          }), \"\\n  get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies/\\\"\"\n          }), \" + id).then()\\n      .assertThat()\\n      .statusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \")\\n      .body(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \", equalTo(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Bowmore 15 Years Laimrig\\\"\"\n          }), \"))\\n      .body(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"origin\\\"\"\n          }), \", equalTo(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Scotland, Islay\\\"\"\n          }), \"))\\n      .body(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"id\\\"\"\n          }), \", equalTo(id));\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Here you can ap­pre­ci­ate the power and ex­pres­sive­ness of Rest As­sured. We re­trieve the list of prod­uct, en­sure the re­sponse is cor­rect, and ex­tract the \", _jsx(_components.em, {\n          children: \"id\"\n        }), \" of a spe­cific bot­tle using a JSON (Groovy) Path ex­pres­sion.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then, we try to re­trieve the meta­data of this in­di­vid­ual prod­uct, and check the re­sult.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s now im­ple­ment a more so­phis­ti­cated sce­nario. Let’s add and delete a prod­uct:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"checkWeCanAddAndDeleteAProduct\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create a new bottle and retrieve the result (as a Whisky instance).\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" given()\\n      .body(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Jameson\\\\\\\", \\\\\\\"origin\\\\\\\":\\\\\\\"Ireland\\\\\\\"}\\\"\"\n          }), \").request().post(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies\\\"\"\n          }), \").thenReturn().as(Whisky.class);\\n  assertThat(whisky.getName()).isEqualToIgnoringCase(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Jameson\\\"\"\n          }), \");\\n  assertThat(whisky.getOrigin()).isEqualToIgnoringCase(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Ireland\\\"\"\n          }), \");\\n  assertThat(whisky.getId()).isNotZero();\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Check that it has created an individual resource, and check the content.\"\n          }), \"\\n  get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies/\\\"\"\n          }), \" + whisky.getId()).then()\\n      .assertThat()\\n      .statusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \")\\n      .body(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \", equalTo(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Jameson\\\"\"\n          }), \"))\\n      .body(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"origin\\\"\"\n          }), \", equalTo(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Ireland\\\"\"\n          }), \"))\\n      .body(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"id\\\"\"\n          }), \", equalTo(whisky.getId()));\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Delete the bottle\"\n          }), \"\\n  delete(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies/\\\"\"\n          }), \" + whisky.getId()).then().assertThat().statusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"204\"\n          }), \");\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Check that the resource is not available anymore\"\n          }), \"\\n  get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies/\\\"\"\n          }), \" + whisky.getId()).then()\\n      .assertThat()\\n      .statusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"404\"\n          }), \");\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, now we have in­te­gra­tion tests let’s try:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean verify\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Sim­ple no? Well, sim­ple once the setup is done right… You can con­tinue im­ple­ment­ing other in­te­gra­tion tests to be sure that every­thing be­have as you ex­pect.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"dear-windows-users\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#dear-windows-users\"\n        }), \"Dear Windows users…\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This sec­tion is the bonus part for Win­dows user, or peo­ple want­ing to run their in­te­gra­tion tests on Win­dows ma­chine too. The com­mand we ex­e­cute to stop the ap­pli­ca­tion is not going to work on Win­dows. Luck­ily, it’s pos­si­ble to ex­tend the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" with a pro­file ex­e­cuted on Win­dows.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In your \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \", just after \", _jsx(_components.code, {\n          children: \"</build>\"\n        }), \", add:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"profiles\"\n            }), \">\"]\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"<!-- A profile for windows as the stop command is different -->\"\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"profile\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"windows\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"activation\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"os\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"family\"\n            }), \">\"]\n          }), \"windows\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"family\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"os\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"activation\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"build\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugins\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"maven-antrun-plugin\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"1.8\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"stop-vertx-app\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"id\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"post-integration-test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"run\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"target\"\n            }), \">\"]\n          }), \"\\n                  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"exec\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"executable\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"wmic\\\"\"\n            }), \"\\n                      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"dir\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"${project.build.directory}\\\"\"\n            }), \"\\n                      \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"spawn\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"false\\\"\"\n            }), \">\"]\n          }), \"\\n                    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"process\\\"\"\n            }), \"/>\"]\n          }), \"\\n                    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"where\\\"\"\n            }), \"/>\"]\n          }), \"\\n                    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"CommandLine like '%${project.artifactId}%' and not name='wmic.exe'\\\"\"\n            }), \"/>\"]\n          }), \"\\n                    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"arg\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"value\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"delete\\\"\"\n            }), \"/>\"]\n          }), \"\\n                  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"exec\"\n            }), \">\"]\n          }), \"\\n                \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"target\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugins\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"build\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"profile\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"profiles\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This pro­file re­places the ac­tions de­scribed above to stop the ap­pli­ca­tion with a ver­sion work­ing on win­dows. The pro­file is au­to­mat­i­cally en­abled on Win­dows. As on oth­ers op­er­at­ing sys­tems, ex­e­cute with:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean verify\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"conclusion\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#conclusion\"\n        }), \"Conclusion\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Wow, what a trip ! We are done… In this post we have seen how we can gain con­fi­dence in Vert.x ap­pli­ca­tions by im­ple­ment­ing both unit and in­te­gra­tion tests. Unit tests, thanks to vert.x unit, are able to check the asyn­chro­nous as­pect of Vert.x ap­pli­ca­tion, but could be com­plex for large sce­nar­ios. Thanks to Rest As­sured and As­sertJ, in­te­gra­tion tests are dead sim­ple to write… but the setup is not straight­for­ward. This post have shown how it can be con­fig­ured eas­ily. Ob­vi­ously, you could also use As­sertJ and Rest As­sured in your unit tests.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the \", _jsx(Link, {\n          href: \"/blog/using-the-asynchronous-sql-client/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"next post\"\n          })\n        }), \", we re­place the \", _jsx(_components.em, {\n          children: \"in mem­ory\"\n        }), \" back­end with a data­base, and use asyn­chro­nous in­te­gra­tion with this data­base.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Stay Tuned & Happy Cod­ing !\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x 3 real time web apps","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"One of the interesting features of Vert.x is the SockJS event bus bridge. It allows external applications to communicate with Vert.x event bus using Websockets."},"date":"2015-08-31","slug":"vert-x3-real-time-web-apps"},"nextPost":{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}