{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Vert.x Application Configuration","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"In our previous post, we developed a very simple Vert.x 3 application, and saw how this application can be tested, packaged and executed. That was nice, wasn’t it?"},"date":"2015-07-20","slug":"vert-x-application-configuration","readingTime":{"text":"5 min read","minutes":4.165,"time":249900,"words":833},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      em: \"em\",\n      h2: \"h2\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      strong: \"strong\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"In \", _jsx(Link, {\n          href: \"/blog/my-first-vert-x-3-application/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"our pre­vi­ous post\"\n          })\n        }), \", we de­vel­oped a very sim­ple Vert.x 3 ap­pli­ca­tion, and saw how this ap­pli­ca­tion can be tested, pack­aged and ex­e­cuted. That was nice, wasn’t it? Well, ok, that was only the be­gin­ning. In this post, we are going to en­hance our ap­pli­ca­tion to sup­port \", _jsx(_components.em, {\n          children: \"ex­ter­nal\"\n        }), \" con­fig­u­ra­tion.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So just to re­mind you, we have an ap­pli­ca­tion start­ing a HTTP server on the port 8080 and re­ply­ing a po­lite “Hello” mes­sage to all HTTP re­quests. The pre­vi­ous code is avail­able \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/tree/post-1\",\n          children: \"here\"\n        }), \". The code de­vel­oped in this post is in the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/tree/post-2\",\n          children: \"post-2 branch\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"so-why-do-we-need-configuration\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#so-why-do-we-need-configuration\"\n        }), \"So, why do we need configuration?\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"That’s a good ques­tion. The ap­pli­ca­tion works right now, but well, let’s say you want to de­ploy it on a ma­chine where the port 8080 is al­ready taken. We would need to change the port in the ap­pli­ca­tion code and in the test, just for this ma­chine. That would be sad. For­tu­nately, Vert.x ap­pli­ca­tions are con­fig­urable.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Vert.x con­fig­u­ra­tions are using the JSON for­mat, so don’t ex­pect any­thing com­pli­cated. They can be passed to ver­ti­cle ei­ther from the com­mand line, or using an API. Let’s have a look.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"no-8080-anymore\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#no-8080-anymore\"\n        }), \"No ‘8080’ anymore\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The first step is to mod­ify the \", _jsx(_components.code, {\n          children: \"io.vertx.blog.first.MyFirstVerticle\"\n        }), \" class to not bind to the port 8080, but to read it from the con­fig­u­ra­tion:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Future<Void> fut)\"\n          }), \" {\\n  vertx\\n      .createHttpServer()\\n      .requestHandler(r -> {\\n        r.response().end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Hello from my first \\\"\"\n          }), \" +\\n            \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Vert.x 3 application</h1>\\\"\"\n          }), \");\\n      })\\n      .listen(\\n          \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Retrieve the port from the configuration,\"\n          }), \"\\n          \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// default to 8080.\"\n          }), \"\\n          config().getInteger(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \"),\\n          result -> {\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (result.succeeded()) {\\n              fut.complete();\\n            } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n              fut.fail(result.cause());\\n            }\\n          }\\n      );\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So, the only dif­fer­ence with the pre­vi­ous ver­sion is \", _jsx(_components.code, {\n          children: \"config().getInteger(\\\"http.port\\\", 8080)\"\n        }), \". Here, our code is now re­quest­ing the con­fig­u­ra­tion and check whether the \", _jsx(_components.em, {\n          children: \"http.port\"\n        }), \" prop­erty is set. If not, the port 8080 is used as fall-​back. The re­trieved con­fig­u­ra­tion is a \", _jsx(_components.code, {\n          children: \"JsonObject\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As we are using the port 8080 by de­fault, you can still pack­age our ap­pli­ca­tion and run it as be­fore:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Sim­ple right ?\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"api-based-configuration---random-port-for-the-tests\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#api-based-configuration---random-port-for-the-tests\"\n        }), \"API-based configuration - Random port for the tests\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now that the ap­pli­ca­tion is con­fig­urable, let’s try to pro­vide a con­fig­u­ra­tion. In our test, we are going to con­fig­ure our ap­pli­ca­tion to use the port 8081. So, pre­vi­ously we were de­ploy­ing our ver­ti­cle with:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-java\",\n          children: \"vertx.deployVerticle(MyFirstVerticle.class.getName(), context.asyncAssertSuccess());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s now pass some \", _jsx(_components.em, {\n          children: \"de­ploy­ment op­tions\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"port = \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8081\"\n          }), \";\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"DeploymentOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"DeploymentOptions\"\n          }), \"()\\n    .setConfig(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", port));\\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"DeploymentOptions\"\n        }), \" ob­ject lets us cus­tomize var­i­ous pa­ra­me­ters. In par­tic­u­lar, it lets us in­ject the \", _jsx(_components.code, {\n          children: \"JsonObject\"\n        }), \" re­trieved by the ver­ti­cle when using the \", _jsx(_components.code, {\n          children: \"config()\"\n        }), \" method.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ob­vi­ously, the test con­nect­ing to the server needs to be slightly mod­i­fied to use the right port (\", _jsx(_components.code, {\n          children: \"port\"\n        }), \" is a field):\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"vertx.createHttpClient().getNow(port, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \", response -> {\\n  response.handler(body -> {\\n    context.assertTrue(body.toString().contains(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello\\\"\"\n          }), \"));\\n    async.complete();\\n  });\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Ok, well, this does not re­ally fix our issue. What hap­pens when the port 8081 is used too. Let’s now pick a ran­dom port:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ServerSocket\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"socket\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"ServerSocket\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \");\\nport = socket.getLocalPort();\\nsocket.close();\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"DeploymentOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"DeploymentOptions\"\n          }), \"()\\n    .setConfig(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", port));\\n\\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So, the idea is very sim­ple. We open a \", _jsx(_components.em, {\n          children: \"server socket\"\n        }), \" that would pick a ran­dom port (that’s why we put 0 as pa­ra­me­ter). We re­trieve the used port and close the socket. Be aware that this method is \", _jsx(_components.strong, {\n          children: \"not\"\n        }), \" per­fect and may fail if the picked port be­comes used be­tween the \", _jsx(_components.code, {\n          children: \"close\"\n        }), \" method and the start of our HTTP server. How­ever, it would work fine in the very high ma­jor­ity of the case.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"With this in place, our test is now using a ran­dom port. Ex­e­cute them with:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"mvn clean \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"test\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"external-configuration---lets-run-on-another-port\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#external-configuration---lets-run-on-another-port\"\n        }), \"External configuration - Let’s run on another port\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ok, well ran­dom port is not what we want in \", _jsx(_components.em, {\n          children: \"pro­duc­tion\"\n        }), \". Could you imag­ine the face of your pro­duc­tion team if you tell them that your ap­pli­ca­tion is pick­ing a ran­dom port. It can ac­tu­ally be funny, but we should never mess with the pro­duc­tion team.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So for the ac­tual ex­e­cu­tion of your ap­pli­ca­tion, let’s pass the con­fig­u­ra­tion in an ex­ter­nal file. The con­fig­u­ra­tion is stored in a \", _jsx(_components.em, {\n          children: \"json\"\n        }), \" file.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Cre­ate the \", _jsx(_components.code, {\n          children: \"src/main/conf/my-application-conf.json\"\n        }), \" with the fol­low­ing con­tent:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [\"{\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \" : \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8082\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"And now, to use this con­fig­u­ra­tion just launch your ap­pli­ca­tion with:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Open a browser on \", _jsx(_components.a, {\n          href: \"http://localhost:8082\",\n          children: \"http://lo­cal­host:8082\"\n        }), \", here it is !\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"How does that work ? Re­mem­ber, our \", _jsx(_components.em, {\n          children: \"fat jar\"\n        }), \" is using the \", _jsx(_components.code, {\n          children: \"Starter\"\n        }), \" class (pro­vided by Vert.x) to launch our ap­pli­ca­tion. This class is read­ing the \", _jsx(_components.code, {\n          children: \"-conf\"\n        }), \" pa­ra­me­ter and cre­ate the cor­re­spond­ing de­ploy­ment op­tions when de­ploy­ing our ver­ti­cle.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"conclusion\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#conclusion\"\n        }), \"Conclusion\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"After hav­ing de­vel­oped your first Vert.x ap­pli­ca­tion, we have seen how this ap­pli­ca­tion is con­fig­urable, and this with­out adding any com­plex­ity to our ap­pli­ca­tion. \", _jsx(Link, {\n          href: \"/blog/some-rest-with-vert-x/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"In the next post\"\n          })\n        }), \", we are going to see how we can use vertx-​web to de­velop a small ap­pli­ca­tion serv­ing sta­tic pages and a REST API. A bit more fancy, but still very sim­ple.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Happy Cod­ing and & Stay Tuned!\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},"nextPost":{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}