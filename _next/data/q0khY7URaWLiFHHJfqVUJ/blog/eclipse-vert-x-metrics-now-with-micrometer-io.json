{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Eclipse Vert.x metrics now with Micrometer.io","category":"guides","authors":[{"name":"Joel Takvorian","github_id":"jotak"}],"summary":"The new vertx-micrometer-metrics module provides support for collecting metrics with Micrometer.io and storing them in backends such as Graphite or InfluxDB."},"date":"2018-04-09","slug":"eclipse-vert-x-metrics-now-with-micrometer-io","readingTime":{"text":"8 min read","minutes":7.365,"time":441900,"words":1473},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      em: \"em\",\n      h2: \"h2\",\n      h3: \"h3\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      ul: \"ul\",\n      li: \"li\",\n      strong: \"strong\",\n      h5: \"h5\",\n      img: \"img\"\n    }, props.components), {Link, Alert} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Vert.x has al­ready been pro­vid­ing met­rics for some time, through the \", _jsx(Link, {\n          href: \"/docs/vertx-dropwizard-metrics/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"vertx-​dropwizard-metrics\"\n          })\n        }), \" and \", _jsx(Link, {\n          href: \"/docs/vertx-hawkular-metrics/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"vertx-​hawkular-metrics\"\n          })\n        }), \" mod­ules. Both of them im­ple­ment a ser­vice provider in­ter­face (SPI) to col­lect the Vert.x met­rics and make them avail­able to their re­spec­tive back­ends.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A new mod­ule, \", _jsx(Link, {\n          href: \"/docs/vertx-micrometer-metrics/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"vertx-​micrometer-metrics\"\n          })\n        }), \", is now added to the fam­ily. It im­ple­ments the same SPI, which means that it is able to pro­vide the same met­rics.\\n\", _jsx(_components.a, {\n          href: \"http://micrometer.io/\",\n          children: _jsx(_components.em, {\n            children: \"Mi­crom­e­ter.io\"\n          })\n        }), \" is a pretty new met­rics li­brary, quite com­pa­ra­ble to \", _jsx(_components.em, {\n          children: \"drop­wiz­ard met­rics\"\n        }), \" in that it col­lects met­rics in a local, in-​memory reg­istry and is able to store them in var­i­ous back­ends such as \", _jsx(_components.em, {\n          children: \"Graphite\"\n        }), \" or \", _jsx(_components.em, {\n          children: \"In­fluxDB\"\n        }), \". It has sev­eral ad­van­tages as we will see below.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"tell-me-more-about-micrometer\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#tell-me-more-about-micrometer\"\n        }), \"Tell me more about Micrometer\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"http://micrometer.io/\",\n          children: _jsx(_components.em, {\n            children: \"Mi­crom­e­ter.io\"\n          })\n        }), \" de­scribes it­self as a a vendor-​neutral ap­pli­ca­tion met­rics fa­cade.\\nIt pro­vides a well de­signed API, in Java, to de­fine \", _jsx(_components.em, {\n          children: \"gauges\"\n        }), \", \", _jsx(_components.em, {\n          children: \"coun­ters\"\n        }), \", \", _jsx(_components.em, {\n          children: \"timers\"\n        }), \" and \", _jsx(_components.em, {\n          children: \"dis­tri­b­u­tion sum­maries\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Among the avail­able back­ends, Mi­crom­e­ter na­tively sup­ports \", _jsx(_components.em, {\n          children: \"Graphite\"\n        }), \", \", _jsx(_components.em, {\n          children: \"In­fluxDB\"\n        }), \", \", _jsx(_components.em, {\n          children: \"JMX\"\n        }), \", \", _jsx(_components.em, {\n          children: \"Prometheus\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"http://micrometer.io/docs\",\n          children: \"sev­eral oth­ers\"\n        }), \". Prometheus is very pop­u­lar in the Ku­ber­netes and mi­croser­vices ecosys­tems, so its sup­port by Mi­crom­e­ter was a strong mo­ti­va­tion for im­ple­ment­ing it in Vert.x.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"For the the mo­ment, our im­ple­men­ta­tion in Vert.x sup­ports \", _jsx(_components.em, {\n          children: \"Prometheus\"\n        }), \", \", _jsx(_components.em, {\n          children: \"In­fluxDB\"\n        }), \" and \", _jsx(_components.em, {\n          children: \"JMX\"\n        }), \". More should quickly come in the near fu­ture.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"dimensionality\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#dimensionality\"\n        }), \"Dimensionality\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"An­other in­ter­est­ing as­pect in Mi­crom­e­ter is that it han­dles met­rics \", _jsx(_components.em, {\n          children: \"di­men­sion­al­ity\"\n        }), \": met­rics can be as­so­ci­ated with a set of key/value pairs (some­times ref­ered as \", _jsx(_components.em, {\n          children: \"tags\"\n        }), \", some­times as \", _jsx(_components.em, {\n          children: \"la­bels\"\n        }), \"). Every value brings a new di­men­sion to the met­ric, so that in Prometheus or any other back­end that sup­ports di­men­sion­al­ity, we can query for dat­a­points of one or sev­eral di­men­sions, or query for dat­a­points ag­gre­gated over sev­eral di­men­sions.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsxs(_components.em, {\n          children: [\"Ex­am­ple: our met­ric \", _jsx(_components.code, {\n            children: \"vertx_http_server_connections\"\n          }), \" ac­cepts la­bels \", _jsx(_components.code, {\n            children: \"local\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"remote\"\n          }), \", that are used to store ad­dresses on HTTP con­nec­tions\"]\n        })\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        children: _jsxs(_components.p, {\n          children: [\"Prometheus is used in the fol­low­ing ex­am­ples, but equiv­a­lent queries can be per­formed with \", _jsx(_components.em, {\n            children: \"In­fluxDB\"\n          }), \".\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In Prometheus, the query \", _jsx(_components.code, {\n          children: \"vertx_http_server_connections\"\n        }), \" will re­turn as many time­series as there are com­bi­na­tions of \", _jsx(_components.code, {\n          children: \"local\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"remote\"\n        }), \" val­ues. Ex­am­ple:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"vertx_http_server_connections{\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"local\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"0.0.0.0:8080\\\"\"\n          }), \",remote=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"1.1.1.1\\\"\"\n          }), \"}\\nvertx_http_server_connections{\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"local\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"0.0.0.0:8080\\\"\"\n          }), \",remote=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"2.2.2.2\\\"\"\n          }), \"}\\nvertx_http_server_connections{\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"local\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"0.0.0.0:8080\\\"\"\n          }), \",remote=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"3.3.3.3\\\"\"\n          }), \"}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To query on a sin­gle di­men­sion, we must pro­vide the la­bels:\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"vertx_http_server_connections{local=\\\"0.0.0.0:8080\\\",remote=\\\"1.1.1.1\\\"}\"\n        }), \". It will re­turn a sin­gle time­series.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To get an ag­gre­gate, Prometheus (PromQL) pro­vides sev­eral \", _jsx(_components.a, {\n          href: \"https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators\",\n          children: \"ag­gre­ga­tion op­er­a­tors\"\n        }), \":\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"sum(vertx_http_server_connections)\"\n        }), \" will re­turn the sum across all di­men­sions.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"so-what-are-the-vertx-metrics\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#so-what-are-the-vertx-metrics\"\n        }), \"So what are the Vert.x metrics?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Peo­ple al­ready fa­mil­iar with the ex­ist­ing met­rics mod­ules (\", _jsx(_components.em, {\n          children: \"drop­wiz­ard\"\n        }), \" or \", _jsx(_components.em, {\n          children: \"hawku­lar\"\n        }), \") will not be too dis­ori­ented. They are roughly the same. The main dif­fer­ence is where pre­vi­ously, some met­ric names could have a vari­able part within - such as \", _jsx(_components.code, {\n          children: \"vertx.eventbus.handlers.myaddress\"\n        }), \" - here we take ad­van­tage of di­men­sion­al­ity and we will have \", _jsx(_components.code, {\n          children: \"vertx_eventbus_handlers{address=\\\"myaddress\\\"}\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Some other met­rics are no longer use­ful, for in­stance the drop­wiz­ard’s \", _jsx(_components.code, {\n          children: \"vertx.eventbus.messages.pending\"\n        }), \", \", _jsx(_components.code, {\n          children: \"vertx.eventbus.messages.pending-local\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"vertx.eventbus.messages.pending-remote\"\n        }), \" are now just \", _jsx(_components.code, {\n          children: \"vertx_eventbus_pending{side=local}\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"vertx_eventbus_pending{side=remote}\"\n        }), \" in mi­crom­e­ter. The sum of them can eas­ily be com­puted at query time.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The met­rics pro­vided by Vert.x are dis­patched into eight big fam­i­lies:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"Net client\"\n          }), \": dis­tri­b­u­tion sum­maries of bytes sent and re­ceived, num­ber of con­nec­tions, etc.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"Net server\"\n          }), \": dis­tri­b­u­tion sum­maries of bytes sent and re­ceived, num­ber of con­nec­tions, etc.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"HTTP client\"\n          }), \": counter of re­quests, re­sponse times, etc.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"HTTP server\"\n          }), \": counter of re­quests, pro­cess­ing times, etc.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"Event bus\"\n          }), \": counter of han­dlers, mes­sages sent and re­ceived, etc.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"Pool\"\n          }), \": for worker pools and some data­source pools, queue size and wait­ing time, pro­cess­ing time, etc.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"Ver­ti­cles\"\n          }), \": num­ber of ver­ti­cles de­ployed.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The full list of col­lected met­rics is \", _jsx(Link, {\n          href: \"/docs/vertx-micrometer-metrics/java/#_vert_x_core_tools_metrics\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"avail­able here\"\n          })\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"getting-started\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#getting-started\"\n        }), \"Getting started\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This sec­tion will guide you through a quick setup to run a Vert.x ap­pli­ca­tion with Mi­crom­e­ter. The code ex­am­ples used here are taken from the \", _jsx(_components.code, {\n          children: \"micrometer-metrics-example\"\n        }), \" in \", _jsx(_components.code, {\n          children: \"vertx-examples\"\n        }), \" repos­i­tory, in Java, using \", _jsx(_components.em, {\n          children: \"maven\"\n        }), \". But the same could be done with other Vert.x sup­ported lan­guages, as well as \", _jsx(_components.em, {\n          children: \"gra­dle\"\n        }), \" in­stead of \", _jsx(_components.em, {\n          children: \"maven\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"maven-configuration\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#maven-configuration\"\n        }), \"Maven configuration\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The con­fig­u­ra­tion and the maven im­ports will vary ac­cord­ing to the back­end stor­age that will be used. For maven, the com­mon part is al­ways:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-micrometer-metrics\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.5.1\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Then, to re­port to In­fluxDB:\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.micrometer\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"micrometer-registry-influx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"1.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Or Prometheus:\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.micrometer\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"micrometer-registry-prometheus\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"1.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-web\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.5.1\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Re­mark that, since Prometheus pulls met­rics from their source, they must be ex­posed on an HTTP end­point. That’s why \", _jsx(_components.code, {\n          children: \"vertx-web\"\n        }), \" is im­ported here. It is not \", _jsx(_components.em, {\n          children: \"ab­solutely\"\n        }), \" nec­es­sary (it’s pos­si­ble to get the met­rics reg­istry con­tent and ex­pose it in any other way) but it’s prob­a­bly the eas­i­est way to do.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Or JMX:\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.micrometer\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"micrometer-registry-jmx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"1.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        children: _jsxs(_components.p, {\n          children: [\"At the mo­ment, it is not pos­si­ble to re­port met­rics to sev­eral back­ends at the same time. \", _jsx(_components.a, {\n            href: \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\",\n            children: \"It might be soon im­ple­mented\"\n          }), \".\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"setting-up-vertx-options\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#setting-up-vertx-options\"\n        }), \"Setting up Vert.x options\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.code, {\n          children: \"MicrometerMetricsOptions\"\n        }), \" ob­ject must be cre­ated and passed to \", _jsx(_components.code, {\n          children: \"VertxOptions\"\n        }), \", with one back­end con­fig­ured (though hav­ing no back­end is pos­si­ble: you would get met­rics sent to a de­fault Mi­crom­e­ter reg­istry, but with­out any per­sis­tent stor­age).\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"In­fluxDB ex­am­ple:\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Default InfluxDB options will push metrics to localhost:8086, db \\\"default\\\"\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"MicrometerMetricsOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MicrometerMetricsOptions\"\n          }), \"()\\n  .setInfluxDbOptions(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxInfluxDbOptions\"\n          }), \"().setEnabled(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"))\\n  .setEnabled(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Vertx.vertx(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxOptions\"\n          }), \"().setMetricsOptions(options));\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Then deploy verticles with this vertx instance\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Prometheus ex­am­ple:\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Deploy with embedded server: prometheus metrics will be automatically exposed,\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// independently from any other HTTP server defined\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"MicrometerMetricsOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MicrometerMetricsOptions\"\n          }), \"()\\n  .setPrometheusOptions(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxPrometheusOptions\"\n          }), \"()\\n    .setStartEmbeddedServer(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \")\\n    .setEmbeddedServerOptions(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"HttpServerOptions\"\n          }), \"().setPort(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8081\"\n          }), \"))\\n    .setEnabled(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"))\\n  .setEnabled(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Vertx.vertx(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxOptions\"\n          }), \"().setMetricsOptions(options));\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Then deploy verticles with this vertx instance\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Or Prometheus with the \", _jsx(_components.code, {\n            children: \"/metrics\"\n          }), \" end­point bound to an ex­ist­ing HTTP server:\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Deploy without embedded server: we need to \\\"manually\\\" expose the prometheus metrics\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"MicrometerMetricsOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MicrometerMetricsOptions\"\n          }), \"()\\n  .setPrometheusOptions(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxPrometheusOptions\"\n          }), \"().setEnabled(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"))\\n  .setEnabled(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Vertx.vertx(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxOptions\"\n          }), \"().setMetricsOptions(options));\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"PrometheusMeterRegistry\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"registry\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" (PrometheusMeterRegistry) BackendRegistries.getDefaultNow();\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Setup a route for metrics\"\n          }), \"\\nrouter.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/metrics\\\"\"\n          }), \").handler(ctx -> {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"response\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" registry.scrape();\\n  ctx.response().end(response);\\n});\\nvertx.createHttpServer().requestHandler(router::accept).listen(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"JMX ex­am­ple:\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Default JMX options will publish MBeans under domain \\\"metrics\\\"\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"MicrometerMetricsOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MicrometerMetricsOptions\"\n          }), \"()\\n  .setJmxMetricsOptions(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxJmxMetricsOptions\"\n          }), \"().setEnabled(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"))\\n  .setEnabled(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Vertx.vertx(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxOptions\"\n          }), \"().setMetricsOptions(options));\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Then deploy verticles with this vertx instance\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"setup-the-backend-server\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#setup-the-backend-server\"\n        }), \"Setup the backend server\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://www.influxdata.com/\",\n            children: \"In­fluxDB\"\n          }), \", by de­fault, is ex­pected to run on \", _jsx(_components.code, {\n            children: \"localhost:8086\"\n          }), \" with­out au­then­ti­ca­tion, data­base “de­fault”. It is con­fig­urable in \", _jsx(_components.code, {\n            children: \"VertxInfluxDbOptions\"\n          }), \".\\nIf you don’t have a run­ning in­stance of In­fluxDB, the short­est way to start is cer­tainly with docker, just run:\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"docker run -p 8086:8086 influxdb\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://prometheus.io/docs/prometheus/latest/getting_started/\",\n            children: \"Prometheus\"\n          }), \" needs some con­fig­u­ra­tion since it pulls met­rics from the sources. Once it is in­stalled, con­fig­ure the scrape end­points in \", _jsx(_components.code, {\n            children: \"prometheus.yml\"\n          }), \":\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-yaml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-bullet\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"job_name:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'vertx-8081'\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"static_configs:\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-bullet\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"targets:\"\n          }), \" [\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'localhost:8081'\"\n          }), \"]\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"or, when using \", _jsx(_components.code, {\n          children: \"/metrics\"\n        }), \" end­point bound to an ex­ist­ing HTTP server:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-yaml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-bullet\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"job_name:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'vertx-8080'\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"static_configs:\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-bullet\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"targets:\"\n          }), \" [\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'localhost:8080'\"\n          }), \"]\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"For JMX there is noth­ing spe­cial to con­fig­ure.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"collecting-vertx-metrics\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#collecting-vertx-metrics\"\n        }), \"Collecting Vert.x metrics\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"From now on, all Vert.x met­rics will be col­lected and sent to the con­fig­ured back­end. In our Vert.x ex­am­ple, we setup an HTTP server met­rics:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\nrouter.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \").handler(ctx -> {\\n  ctx.response().end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello Micrometer from HTTP!\\\"\"\n          }), \");\\n});\\nvertx.createHttpServer().requestHandler(router::accept).listen(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"And some event bus ping-​pong:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Producer side\"\n          }), \"\\nvertx.setPeriodic(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1000\"\n          }), \", x -> {\\n  vertx.eventBus().send(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"greeting\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello Micrometer from event bus!\\\"\"\n          }), \");\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Consumer side\"\n          }), \"\\nvertx.eventBus().<String>consumer(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"greeting\\\"\"\n          }), \", message -> {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"greeting\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" message.body();\\n  System.out.println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Received: \\\"\"\n          }), \" + greeting);\\n  message.reply(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello back!\\\"\"\n          }), \");\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To trig­ger some ac­tiv­ity on the HTTP server, we can write a small bash script:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"while\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"do\"\n          }), \" curl http://localhost:8080/\\n    \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"sleep\"\n          }), \" .8\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"done\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"viewing-the-results\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#viewing-the-results\"\n        }), \"Viewing the results\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://grafana.com/\",\n          children: \"Grafana\"\n        }), \" can be used to dis­play the In­fluxDB and Prometheus met­rics. The \", _jsx(_components.code, {\n          children: \"vertx-examples\"\n        }), \" repos­i­tory con­tains two dash­boards for that: \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-InfluxDB.json\",\n          children: \"for In­fluxDB\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-Prometheus.json\",\n          children: \"for Prometheus\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h5, {\n        id: \"http-server-metrics\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#http-server-metrics\"\n        }), \"HTTP server metrics\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/http-server-metrics.png\",\n          alt: \"HTTP server metrics\"\n        })\n      }), \"\\n\", _jsxs(_components.h5, {\n        id: \"event-bus-metrics\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#event-bus-metrics\"\n        }), \"Event bus metrics\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/eventbus-metrics.png\",\n          alt: \"Event bus metrics\"\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"going-further\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#going-further\"\n        }), \"Going further\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We’ve seen the basic setup. There is a good bunch of op­tions avail­able, de­tailed \", _jsx(Link, {\n          href: \"/docs/vertx-micrometer-metrics/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"in the doc­u­men­ta­tion\"\n          })\n        }), \": how to dis­able some met­rics do­mains, how to fil­ter or re­arrange la­bels, how to ex­port met­rics snap­shots to Json ob­jects, how to add JVM or proces­sor in­stru­men­ta­tion, etc.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Be­fore we fin­ish, there is one im­por­tant point that we can cover here: defin­ing cus­tom met­rics.\\nBe­cause the mod­ule gives you ac­cess to its Mi­crom­e­ter reg­istry, you can add your cus­tom met­rics there.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Get­ting the de­fault reg­istry is straight­for­ward:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"MeterRegistry\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"registry\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" BackendRegistries.getDefaultNow();\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then you have plain ac­cess to the \", _jsx(_components.a, {\n          href: \"https://micrometer.io/docs/concepts\",\n          children: \"Mi­crom­e­ter API\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For in­stance, here is how you can track the ex­e­cu­tion time of a piece of code that is reg­u­larly called:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"MeterRegistry\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"registry\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" BackendRegistries.getDefaultNow();\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Timer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"timer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Timer\\n  .builder(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"my.timer\\\"\"\n          }), \")\\n  .description(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Time tracker for my extremely sophisticated algorithm\\\"\"\n          }), \")\\n  .register(registry);\\n\\nvertx.setPeriodic(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1000\"\n          }), \", l -> {\\n  timer.record(() -> myExtremelySophisticatedAlgorithm());\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Since it is using the same reg­istry, there is no extra back­end con­fig­u­ra­tion to do.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"whats-next\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#whats-next\"\n        }), \"What’s next?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"vertx-micrometer-metrics\"\n        }), \" mod­ule will con­tinue to be im­proved, with al­ready two planned en­hance­ments:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/15\",\n            children: \"Adding more back­ends\"\n          }), \", like Graphite.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\",\n            children: \"Allow to con­fig­ure sev­eral back­ends\"\n          }), \", and not only one at the same time.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Would you miss any fea­ture, please \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-micrometer-metrics/issues\",\n          children: \"ask on GitHub\"\n        }), \". Con­tri­bu­tions and bug fixes are also wel­come!\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now is time to enter the Met­rics.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"New community channels","category":"news","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"In order to better support the community, we (the core team and module maintainers) now also provide help on Stack Overflow and Gitter."},"date":"2018-04-13","slug":"new-community-channels"},"nextPost":{"meta":{"title":"Google Summer of Code 2018","category":"news","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"It's this time of year again! Google Summer of Code 2018 submission period has just started!"},"date":"2018-03-13","slug":"google-summer-of-code-2018"},"relatedPosts":[{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Eclipse Vert.x meets GraphQL","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"In this blog post, we will look at an example application written in Vert.x that uses the new GraphQL API of Gentics Mesh."},"date":"2017-11-14","slug":"eclipse-vert-x-meets-graphql"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}