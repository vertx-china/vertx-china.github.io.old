{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Introducing Vert.x MQTT client","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this article, we will see how to set up the new Vert.x MQTT client. An example project is available on GitHub."},"date":"2017-08-21","slug":"introducing-vert-x-mqtt-client","readingTime":{"text":"2 min read","minutes":1.72,"time":103200,"words":344},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      strong: \"strong\",\n      img: \"img\"\n    }, props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"In this ar­ti­cle, we will see how to set up the new Vert.x MQTT client. Ac­tu­ally, I have a \", _jsx(_components.a, {\n          href: \"https://github.com/Sammers21/vertx-mqtt-client-example\",\n          children: \"real ex­am­ple\"\n        }), \" so you can try it quickly.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you are using Maven or Gra­dle, add the fol­low­ing de­pen­dency to the de­pen­den­cies sec­tion of your project de­scrip­tor to ac­cess the Vert.x MQTT client:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Maven (in your pom.xml):\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-mqtt\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.5.0.Beta1\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Gra­dle (in your build.gra­dle file):\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-groovy\",\n          children: [\"dependencies {\\n  compile \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'io.vertx:vertx-mqtt:3.5.0.Beta1'\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now that you’ve set up your project, you can cre­ate a sim­ple ap­pli­ca­tion which will re­ceive all mes­sages from all bro­ker chan­nels:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.AbstractVerticle;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.mqtt.MqttClient;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.mqtt.MqttClientOptions;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.io.UnsupportedEncodingException;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MainVerticle\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"AbstractVerticle\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n     \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"MqttClientOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MqttClientOptions\"\n          }), \"();\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// specify broker host\"\n          }), \"\\n      options.setHost(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"iot.eclipse.org\\\"\"\n          }), \");\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// specify max size of message in bytes\"\n          }), \"\\n      options.setMaxMessageSize(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"100_000_000\"\n          }), \");\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"MqttClient\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"client\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" MqttClient.create(vertx, options);\\n\\n    client.publishHandler(s -> {\\n      \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"try\"\n          }), \" {\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"message\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"String\"\n          }), \"(s.payload().getBytes(), \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"UTF-8\\\"\"\n          }), \");\\n        System.out.println(String.format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Receive message with content: \\\\\\\"%s\\\\\\\" from topic \\\\\\\"%s\\\\\\\"\\\"\"\n          }), \", message, s.topicName()));\\n      } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"catch\"\n          }), \" (UnsupportedEncodingException e) {\\n        e.printStackTrace();\\n      }\\n    });\\n\\n    client.connect(s -> {\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// subscribe to all subtopics\"\n          }), \"\\n      client.subscribe(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"#\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \");\\n    });\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.strong, {\n          children: \"pub­lish­Han­dler\"\n        }), \" is the han­dler called each time the bro­ker, lo­cated at \", _jsx(_components.code, {\n          children: \"iot.eclipse.org:1883\"\n        }), \", sends a mes­sage to you, from the top­ics you are sub­scrib­ing for.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"But only pro­vid­ing a han­dler is not enough, you should also con­nect to the bro­ker and sub­scribe to some top­ics. For this rea­son, you should use the \", _jsx(_components.strong, {\n          children: \"con­nect\"\n        }), \" method and then call \", _jsx(_components.strong, {\n          children: \"sub­scribe\"\n        }), \" when the con­nec­tion es­tab­lished.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To de­ploy this ver­ti­cle from an ap­pli­ca­tion you should have in your \", _jsx(_components.strong, {\n          children: \"main\"\n        }), \" method some­thing like that:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"vertx\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Vertx.vertx();\\nvertx.deployVerticle(MainVerticle.class.getCanonicalName());\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"When you have com­pleted all steps cor­rectly the re­sult should look like that:\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"http://i.imgur.com/b4yYQJE.gif\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As the al­ter­na­tive and rec­om­mended way to boot­strap Vert.x ap­pli­ca­tions you can use \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-maven-starter\",\n          children: \"vertx-​maven-starter\"\n        }), \" or \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-gradle-starter\",\n          children: \"vertx-​gradle-starter\"\n        }), \". For com­plet­ing this guide I have used the first one. The final source code avail­able \", _jsx(_components.a, {\n          href: \"https://github.com/Sammers21/vertx-mqtt-client-example\",\n          children: \"here\"\n        }), \". If you would like to learn more about Vert.x MQTT client API then check out the \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-mqtt-client/blob/initial-work/src/main/asciidoc/java/index.adoc\",\n          children: \"full doc­u­men­ta­tion\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1/mqtt-examples\",\n          children: \"more ex­am­ples\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Thank you for read­ing!\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Cheers!\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"},"prevPost":{"meta":{"title":"An Eclipse Vert.x Gradle Plugin","category":"news","authors":[{"name":"Julien Ponge","github_id":"jponge"}],"summary":"The new Vert.x Gradle plugin offers an opinionated plugin for building Vert.x applications with Gradle."},"date":"2017-09-28","slug":"an-eclipse-vert-x-gradle-plugin"},"nextPost":{"meta":{"title":"Vert.x 3.5.0.Beta1","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"It's summer time and we have just released Vert.x 3.5.0.Beta1!"},"date":"2017-08-10","slug":"vert-x-3-5-0-beta1"},"relatedPosts":[{"meta":{"title":"TCP Client using Eclipse Vert.x, Kotlin and Gradle build","category":"guides","authors":[{"name":"Usman Saleem","github_id":"usmansaleem"}],"summary":"In this blog post, I demonstrate how to write a very simple TCP client that keeps a connection open to a custom-written server in cloud."},"date":"2017-12-20","slug":"tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Checklist for Migrating from Vert.x 2.1.x to Vert.x 3 - Part One","category":"guides","authors":[{"name":"Mark Spritzler","github_id":"bytor99999"}],"summary":"So while upgrading our application, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major upgrade from the previous version, with so many changes."},"date":"2015-07-06","slug":"checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one"}]},"__N_SSG":true}