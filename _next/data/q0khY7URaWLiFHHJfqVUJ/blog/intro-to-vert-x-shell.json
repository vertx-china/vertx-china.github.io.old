{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Intro to Vert.x Shell","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Vert.x Shell provides an extensible command line for Vert.x, accessible via SSH, Telnet or a nice Web interface. Vert.x Shell comes out of the box with plenty of commands."},"date":"2016-01-25","slug":"intro-to-vert-x-shell","readingTime":{"text":"4 min read","minutes":3.1,"time":186000,"words":620},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      em: \"em\",\n      h2: \"h2\",\n      a: \"a\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Vert.x Shell pro­vides an ex­ten­si­ble com­mand line for Vert.x, ac­ces­si­ble via SSH, Tel­net or a nice Web in­ter­face. Vert.x Shell comes out of the box with plenty of com­mands for Vert.x which makes it very handy for doing sim­ple man­age­ment op­er­a­tions like de­ploy­ing a Ver­ti­cle or get­ting the list of de­ployed Ver­ti­cles. One power fea­ture of Vert.x Shell is its ex­ten­si­bil­ity: one can eas­ily aug­ment Vert.x Shell with its own com­mands. Let’s build an \", _jsx(_components.em, {\n          children: \"http-​client\"\n        }), \" in JavaScript!\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"booting-the-shell\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#booting-the-shell\"\n        }), \"Booting the Shell\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Vert.x Shell can be started in a cou­ple of lines de­pend­ing on the con­nec­tors you con­fig­ure. The doc­u­men­ta­tion pro­vides sev­eral ex­am­ples show­ing the \", _jsx(Link, {\n          href: \"/docs/vertx-shell/js/#_programmatic_service\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Shell Ser­vice con­fig­u­ra­tion\"\n          })\n        }), \". For test­ing our com­mand, we will use the Tel­net pro­to­col be­cause it is easy to con­fig­ure and use, so we just need to copy the cor­re­spond­ing sec­tion in \", _jsx(_components.em, {\n          children: \"vertx-​http-client.js\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"ShellService\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"require\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx-shell-js/shell_service\\\"\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" service = \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"ShellService\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"create\"\n          }), \"(vertx, {\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"telnetOptions\\\"\"\n          }), \" : {\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"host\\\"\"\n          }), \" : \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \",\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"port\\\"\"\n          }), \" : \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"4000\"\n          }), \"\\n  }\\n});\\nservice.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), \"();\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We can run it:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-text\",\n          children: \"Juliens-MacBook-Pro:java julien$ vertx run vertx-http-client.js\\nSucceeded in deploying verticle\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"And con­nect to the shell:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-text\",\n          children: \"Juliens-MacBook-Pro:~ julien$ telnet localhost 4000\\nTrying ::1...\\ntelnet: connect to address ::1: Connection refused\\nTrying 127.0.0.1...\\nConnected to localhost.\\nEscape character is '^]'.\\n__      __ ______  _____  _______  __   __\\n\\\\ \\\\    / /|  ____||  _  \\\\|__   __| \\\\ \\\\ / /\\n \\\\ \\\\  / / | |____ | :_) |   | |     \\\\   /\\n  \\\\ \\\\/ /  |  ____||   __/   | |      > /\\n   \\\\  /   | |____ | |\\\\ \\\\    | |     / //\\\\\\n    \\\\/    |______||_| \\\\_\\\\   |_| o  /_/ \\\\_\\\\\\n\\n\\n%\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can now al­ready use the shell, the \", _jsx(_components.em, {\n          children: \"help\"\n        }), \" com­mand lists the avail­able com­mands.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"creating-a-command\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#creating-a-command\"\n        }), \"Creating a command\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For the sake of sim­plic­ity we will write a sin­gle script that starts the Shell ser­vice and de­ploys our com­mand. In the real world you would prob­a­bly have the com­mand in one file and the de­ploy­ment in an­other.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(Link, {\n          href: \"/docs/vertx-shell/js/#_extending_vert_x_shell\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"doc­u­men­ta­tion\"\n          })\n        }), \" ex­plains how to add a new com­mand to Vert.x shell, we can just copy this sec­tion and ap­pend it to the \", _jsx(_components.em, {\n          children: \"vertx-​http-client.js\"\n        }), \" script:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"CommandBuilder\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"require\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx-shell-js/command_builder\\\"\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"CommandRegistry\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"require\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx-shell-js/command_registry\\\"\"\n          }), \");\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" builder = \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"CommandBuilder\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"command\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http-client\\\"\"\n          }), \");\\nbuilder.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"processHandler\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"process\"\n          }), \") {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Write a message to the console\"\n          }), \"\\n  process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"write\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Implement the client\\\\n\\\"\"\n          }), \");\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// End the process\"\n          }), \"\\n  process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"end\"\n          }), \"();\\n});\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Register the command\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" registry = \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"CommandRegistry\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getShared\"\n          }), \"(vertx);\\nregistry.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"registerCommand\"\n          }), \"(builder.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"build\"\n          }), \"(vertx));\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now you can use the com­mand just to see it in ac­tion:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"% http-client\\nImplement the client\\n%\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"checking-arguments\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#checking-arguments\"\n        }), \"Checking arguments\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.em, {\n          children: \"http-​client\"\n        }), \" re­quires an \", _jsx(_components.code, {\n          children: \"url\"\n        }), \" ar­gu­ment, an ar­gu­ment check is per­formed at the be­gin­ning of the process han­dler:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Check the url argument\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"args\"\n          }), \"().\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"length\"\n          }), \" < \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \") {\\n  process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"write\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Missing URL\\\\n\\\"\"\n          }), \").\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"end\"\n          }), \"();\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n}\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" url = process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"args\"\n          }), \"()[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"];\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"implementing-the-command\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#implementing-the-command\"\n        }), \"Implementing the command\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The final step of this tu­to­r­ial is the ac­tual im­ple­men­ta­tion of the client logic based on Vert.x Http­Client:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create the client request\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" request = client.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getAbs\"\n          }), \"(url, \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"response\"\n          }), \") {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Print the response in the shell console\"\n          }), \"\\n  response.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"handler\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"buffer\"\n          }), \") {\\n    process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"write\"\n          }), \"(buffer.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"toString\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"UTF-8\\\"\"\n          }), \"));\\n  });\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// End the command when the response ends\"\n          }), \"\\n  response.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"endHandler\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-params\"\n          }), \") {\\n    process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"end\"\n          }), \"();\\n  });\\n});\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Set a request handler to end the command with error\"\n          }), \"\\nrequest.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"exceptionHandler\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"err\"\n          }), \") {\\n  process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"write\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Error: \\\"\"\n          }), \" + err.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getMessage\"\n          }), \"());\\n  process.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"end\"\n          }), \"();\\n});\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// End the http request\"\n          }), \"\\nrequest.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"end\"\n          }), \"();\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"And we can test the com­mand in the shell:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"% http-client http://vertx.io\\nhttp-client http://vertx.io\\n<!DOCTYPE html><html lang=en><\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"head\"\n          }), \"><title>Vert.x</title>...\\n...\\n/javascripts/sticky_header.js></script></body></html>%\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"finally\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#finally\"\n        }), \"Finally\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We have seen how easy it is to ex­tend Vert.x with a shell and cre­ate an \", _jsx(_components.em, {\n          children: \"http-​client\"\n        }), \" cus­tom com­mand, you can get the full source code \", _jsx(_components.a, {\n          href: \"https://gist.github.com/vietj/51ff223bfb7cfcbc97ce\",\n          children: \"here\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Our com­mand is very sim­ple, it only im­ple­ments the very min­i­mum, in fu­ture posts we will im­prove the com­mand with sup­port with more HTTP meth­ods, SSL sup­port or header sup­port with the the Vert.x CLI API.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x 3.2.1 is released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"We are pleased to announce the release of Vert.x 3.2.1!"},"date":"2016-02-05","slug":"vert-x-3-2-1-is-released"},"nextPost":{"meta":{"title":"Using Hamcrest Matchers with Vert.x Unit","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x Unit is a very elegant library to test asynchronous applications developed with vert.x. However because of this asynchronous aspect, reporting test failures is not natural for JUnit users."},"date":"2016-01-18","slug":"using-hamcrest-matchers-with-vert-x-unit"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}