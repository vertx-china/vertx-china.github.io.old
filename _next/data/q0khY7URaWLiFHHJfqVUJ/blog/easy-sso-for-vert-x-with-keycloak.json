{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Easy SSO for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn how to implement Single Sign-on with OpenID Connect and how to use Keycloak together with Eclipse Vert.x."},"date":"2020-03-16","slug":"easy-sso-for-vert-x-with-keycloak","readingTime":{"text":"11 min read","minutes":10.11,"time":606600,"words":2022},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      strong: \"strong\",\n      ul: \"ul\",\n      li: \"li\",\n      h2: \"h2\",\n      a: \"a\",\n      h3: \"h3\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      img: \"img\",\n      h4: \"h4\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"TL;DR:\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this blog post you’ll learn:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"How to im­ple­ment Sin­gle Sign-​on with OpenID Con­nect\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"How to use Key­cloak’s OpenID Dis­cov­ery to infer OpenID provider con­fig­u­ra­tion\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"How to ob­tain user in­for­ma­tion\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"How to check for au­tho­riza­tion\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"How to call a Bearer pro­tected ser­vice with an Ac­cess Token\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"How to im­ple­ment a form based lo­gout\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"hello-blog\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#hello-blog\"\n        }), \"Hello Blog\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This is my first post in the Vert.x Blog and I must admit that up until now I have never used Vert.x in a real project.\\n“Why are you here?”, you might ask… Well I cur­rently have two main hob­bies, learn­ing new things and se­cur­ing apps with \", _jsx(_components.a, {\n          href: \"https://www.keycloak.org/\",\n          children: \"Key­cloak\"\n        }), \".\\nSo a few days ago, I stum­bled upon the \", _jsx(_components.a, {\n          href: \"https://www.youtube.com/watch?v=LsaXy7SRXMY&list=PLkeCJDaCC2ZsnySdg04Aq9D9FpAZY6K5D\",\n          children: \"In­tro­duc­tion to Vert.x video se­ries on youtube\"\n        }), \" by \", _jsx(_components.a, {\n          href: \"https://twitter.com/infosec812\",\n          children: \"Deven Phillips\"\n        }), \" and I was im­me­di­ately hooked. Vert.x was a new thing for me, so the next log­i­cal step was to fig­ure out how to se­cure a Vert.x app with Key­cloak.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For this ex­am­ple I build a small web app with Vert.x that shows how to im­ple­ment Sin­gle Sign-​on (SSO) with Key­cloak\\nand OpenID Con­nect, ob­tain in­for­ma­tion about the cur­rent user, check for roles, call bearer pro­tected ser­vices and prop­erly han­dling lo­gout.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"keycloak\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#keycloak\"\n        }), \"Keycloak\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.keycloak.org/\",\n          children: \"Key­cloak\"\n        }), \" is a Open Source Iden­tity and Ac­cess Man­age­ment so­lu­tion which pro­vides sup­port for OpenID Con­nect\\nbased Singe-​Sign on, among many other things. I briefly looked for ways to se­cur­ing a Vert.x app with Key­cloak\\nand quickly found an \", _jsx(Link, {\n          href: \"/blog/vertx-3-and-keycloak-tutorial/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"older Vert.x Key­cloak in­te­gra­tion ex­am­ple\"\n          })\n        }), \" in this very blog.\\nWhilst this is a good start for be­gin­ners, the ex­am­ple con­tains a few is­sues, e.g.:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"It uses hard­coded OpenID provider con­fig­u­ra­tion\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Fea­tures a very sim­plis­tic in­te­gra­tion (for the sake of sim­plic­ity)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"No user in­for­ma­tion used\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"No lo­gout func­tion­al­ity is shown\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"That some­how nerd­sniped me a bit and so it came that, after a long day of con­sult­ing work, I sat down to cre­ate an ex­am­ple for a com­plete Key­cloak in­te­gra­tion based on \", _jsx(Link, {\n          href: \"/docs/vertx-auth-oauth2/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x OpenID Con­nect / OAuth2 Sup­port\"\n          })\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So let’s get started!\"\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"keycloak-setup\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#keycloak-setup\"\n        }), \"Keycloak Setup\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To se­cure a Vert.x app with Key­cloak we of course need a Key­cloak in­stance. Al­though \", _jsx(_components.a, {\n          href: \"https://www.keycloak.org/docs/latest/getting_started/\",\n          children: \"Key­cloak has a great get­ting started guide\"\n        }), \" I wanted to make it a bit eas­ier to put every­thing to­gether, there­fore I pre­pared a local Key­cloak docker con­tainer \", _jsx(_components.a, {\n          href: \"https://github.com/thomasdarimont/vertx-playground/tree/master/keycloak-vertx#start-keycloak-with-the-vertx-realm\",\n          children: \"as de­scribed here\"\n        }), \" that you can start eas­ily, which comes with all the re­quired con­fig­u­ra­tion in place.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The pre­con­fig­ured Key­cloak realm named \", _jsx(_components.code, {\n          children: \"vertx\"\n        }), \" con­tains a \", _jsx(_components.code, {\n          children: \"demo-client\"\n        }), \" for our Vert.x web app and a set\\nof users for test­ing.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"docker run \\\\\\n  -it \\\\\\n  --name vertx-keycloak \\\\\\n  --\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"rm\"\n          }), \" \\\\\\n  -e KEYCLOAK_USER=admin \\\\\\n  -e KEYCLOAK_PASSWORD=admin \\\\\\n  -e KEYCLOAK_IMPORT=/tmp/vertx-realm.json \\\\\\n  -v \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$PWD\"\n          }), \"/vertx-realm.json:/tmp/vertx-realm.json \\\\\\n  -p 8080:8080 \\\\\\n  quay.io/keycloak/keycloak:9.0.0\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"vertx-web-app\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#vertx-web-app\"\n        }), \"Vert.x Web App\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The sim­ple web app con­sists of a sin­gle \", _jsx(_components.code, {\n          children: \"Verticle\"\n        }), \", runs on \", _jsx(_components.code, {\n          children: \"http://localhost:8090\"\n        }), \" and pro­vides a few routes with pro­tected re­sources. \", _jsx(_components.a, {\n          href: \"https://github.com/thomasdarimont/vertx-playground/blob/master/keycloak-vertx/src/main/java/demo/MainVerticle.java\",\n          children: \"You can find the com­plete ex­am­ple here\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The web app con­tains the fol­low­ing routes with han­dlers:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"/\"\n          }), \" - The un­pro­tected index page\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"/protected\"\n          }), \" - The pro­tected page, which shows a greet­ing mes­sage, users need to login to ac­cess pages be­neath this path.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"/protected/user\"\n          }), \" - The pro­tected user page, which shows some in­for­ma­tion about the user.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"/protected/admin\"\n          }), \" - The pro­tected admin page, which shows some in­for­ma­tion about the admin, only users with role \", _jsx(_components.code, {\n            children: \"admin\"\n          }), \" can ac­cess this page.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"/protected/userinfo\"\n          }), \" - The pro­tected user­info page, ob­tains user in­for­ma­tion from the bearer token pro­tected user­info end­point in Key­cloak.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"/logout\"\n          }), \" - The pro­tected lo­gout re­source, which trig­gers the user lo­gout.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"running-the-app\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#running-the-app\"\n        }), \"Running the app\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To run the app, we need to build our app via:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"cd\"\n          }), \" keycloak-vertx\\nmvn clean package\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This cre­ates a runnable jar, which we can run via:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"java -jar target/*.jar\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note, that you need to start Key­cloak, since our app will try to fetch con­fig­u­ra­tion from Key­cloak.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If the ap­pli­ca­tion is run­ning, just browse to: \", _jsx(_components.code, {\n          children: \"http://localhost:8090/\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"An ex­am­ple in­ter­ac­tion with the app can be seen in the fol­low­ing gif:\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/images/blog/vertx-keycloak-integration/2020-03-07-vertx-keycloak-integration.gif\",\n          alt: \"Vert.x Keycloak Integration Demo\"\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"router-sessionstore-and-csrf-protection\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#router-sessionstore-and-csrf-protection\"\n        }), \"Router, SessionStore and CSRF Protection\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We start the con­fig­u­ra­tion of our web app by cre­at­ing a \", _jsx(_components.code, {\n          children: \"Router\"\n        }), \" where we can add cus­tom han­dler func­tions for our routes.\\nTo prop­erly han­dle the au­then­ti­ca­tion state we need to cre­ate a \", _jsx(_components.code, {\n          children: \"SessionStore\"\n        }), \" and at­tach it to the \", _jsx(_components.code, {\n          children: \"Router\"\n        }), \".\\nThe \", _jsx(_components.code, {\n          children: \"SessionStore\"\n        }), \" is used by our OAuth2/OpenID Con­nect in­fra­struc­ture to as­so­ciate au­then­ti­ca­tion in­for­ma­tion with a ses­sion.\\nBy the way, the \", _jsx(_components.code, {\n          children: \"SessionStore\"\n        }), \" can also be clus­tered if you need to dis­trib­ute the server-​side state.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that if you want to keep your server state­less but still want to sup­port clus­ter­ing,\\nthen you could pro­vide your own im­ple­men­ta­tion of a \", _jsx(_components.code, {\n          children: \"SessionStore\"\n        }), \" which stores the ses­sion in­for­ma­tion\\nas an en­crypted cookie on the Client.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Store session information on the server side\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"SessionStore\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"sessionStore\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" LocalSessionStore.create(vertx);\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"SessionHandler\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"sessionHandler\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" SessionHandler.create(sessionStore);\\nrouter.route().handler(sessionHandler);\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In order to pro­tected against CSRF at­tacks it is good prac­tice to pro­tect HTML forms with a CSRF token.\\nWe need this for our lo­gout form that we’ll see later.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To do this we con­fig­ure a \", _jsx(_components.code, {\n          children: \"CSRFHandler\"\n        }), \" and add it to our \", _jsx(_components.code, {\n          children: \"Router\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// CSRF handler setup required for logout form\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"csrfSecret\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"zwiebelfische\\\"\"\n          }), \";\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"CSRFHandler\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"csrfHandler\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" CSRFHandler.create(csrfSecret);\\nrouter.route().handler(ctx -> {\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Ensures that the csrf token request parameter is available for the CsrfHandler\"\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// after the logout form was submitted.\"\n          }), \"\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// See \\\"Handling HTML forms\\\" https://vertx.io/docs/vertx-core/java/#_handling_requests\"\n          }), \"\\n            ctx.request().setExpectMultipart(\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \");\\n            ctx.request().endHandler(v -> csrfHandler.handle(ctx));\\n        }\\n);\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"keycloak-setup-via-openid-connect-discovery\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#keycloak-setup-via-openid-connect-discovery\"\n        }), \"Keycloak Setup via OpenID Connect Discovery\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Our app is reg­is­tered as a con­fi­den­tial OpenID Con­nect client with Au­tho­riza­tion Code Flow in Key­cloak,\\nthus we need to con­fig­ure \", _jsx(_components.code, {\n          children: \"client_id\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"client_secret\"\n        }), \". Con­fi­den­tial clients are typ­i­cally used\\nfor server-​side web ap­pli­ca­tions, where one can se­curely store the \", _jsx(_components.code, {\n          children: \"client_secret\"\n        }), \". You can find out more\\nabout\", _jsx(_components.a, {\n          href: \"https://www.keycloak.org/docs/latest/server_admin/index.html#_access-type\",\n          children: \"The dif­fer­ent Client Ac­cess Types\"\n        }), \" in the Key­cloak doc­u­men­ta­tion.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Since we don’t want to con­fig­ure things like OAuth2 / OpenID Con­nect End­points our­selves, we use Key­cloak’s OpenID Con­nect dis­cov­ery end­point to infer the nec­es­sary Oauth2 / OpenID Con­nect end­point URLs.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"hostname\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" System.getProperty(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.host\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"port\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Integer.getInteger(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8090\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"baseUrl\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" String.format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http://%s:%d\\\"\"\n          }), \", hostname, port);\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"oauthCallbackPath\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/callback\\\"\"\n          }), \";\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"OAuth2ClientOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"clientOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"OAuth2ClientOptions\"\n          }), \"()\\n    .setFlow(OAuth2FlowType.AUTH_CODE)\\n    .setSite(System.getProperty(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"oauth2.issuer\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http://localhost:8080/auth/realms/vertx\\\"\"\n          }), \"))\\n    .setClientID(System.getProperty(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"oauth2.client_id\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"demo-client\\\"\"\n          }), \"))\\n    .setClientSecret(System.getProperty(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"oauth2.client_secret\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"1f88bd14-7e7f-45e7-be27-d680da6e48d8\\\"\"\n          }), \"));\\n\\nKeycloakAuth.discover(vertx, clientOptions, asyncResult -> {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"OAuth2Auth\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"oauth2Auth\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" asyncResult.result();\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (oauth2Auth == \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \") {\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"throw\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"RuntimeException\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Could not configure Keycloak integration via OpenID Connect Discovery Endpoint. Is Keycloak running?\\\"\"\n          }), \");\\n    }\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"AuthHandler\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"oauth2\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" OAuth2AuthHandler.create(oauth2Auth, baseUrl + oauthCallbackPath)\\n        .setupCallback(router.get(oauthCallbackPath))\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Additional scopes: openid for OpenID Connect\"\n          }), \"\\n        .addAuthority(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"openid\\\"\"\n          }), \");\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// session handler needs access to the authenticated user, otherwise we get an infinite redirect loop\"\n          }), \"\\n    sessionHandler.setAuthProvider(oauth2Auth);\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// protect resources beneath /protected/* with oauth2 handler\"\n          }), \"\\n    router.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/protected/*\\\"\"\n          }), \").handler(oauth2);\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// configure route handlers\"\n          }), \"\\n    configureRoutes(router, webClient, oauth2Auth);\\n});\\n\\ngetVertx().createHttpServer().requestHandler(router).listen(port);\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"route-handlers\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#route-handlers\"\n        }), \"Route handlers\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We con­fig­ure our route han­dlers via \", _jsx(_components.code, {\n          children: \"configureRoutes\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"configureRoutes\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Router router, WebClient webClient, OAuth2Auth oauth2Auth)\"\n          }), \" {\\n\\n    router.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \").handler(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"::handleIndex);\\n\\n    router.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/protected\\\"\"\n          }), \").handler(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"::handleGreet);\\n    router.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/protected/user\\\"\"\n          }), \").handler(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"::handleUserPage);\\n    router.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/protected/admin\\\"\"\n          }), \").handler(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"::handleAdminPage);\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// extract discovered userinfo endpoint url\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"userInfoUrl\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \"  ((OAuth2AuthProviderImpl)oauth2Auth).getConfig().getUserInfoPath();\\n    router.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/protected/userinfo\\\"\"\n          }), \").handler(createUserInfoHandler(webClient, userInfoUrl));\\n\\n    router.post(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/logout\\\"\"\n          }), \").handler(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"::handleLogout);\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The index han­dler ex­poses an un­pro­tected re­source:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"handleIndex\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n    respondWithOk(ctx, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Welcome to Vert.x Keycloak Example</h1><br><a href=\\\\\\\"/protected\\\\\\\">Protected</a>\\\"\"\n          }), \");\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"extract-user-information-from-the-openid-connect-id-token\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#extract-user-information-from-the-openid-connect-id-token\"\n        }), \"Extract User Information from the OpenID Connect ID Token\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Our app ex­poses a sim­ple greet­ing page which shows some in­for­ma­tion about the user and pro­vides links to other pages.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The user greet­ing han­dler is pro­tected by the Key­cloak OAuth2 / OpenID Con­nect in­te­gra­tion. To show in­for­ma­tion about\\nthe cur­rent user, we first need to call the \", _jsx(_components.code, {\n          children: \"ctx.user()\"\n        }), \" method to get an user ob­ject we can work with.\\nTo ac­cess the OAuth2 token in­for­ma­tion, we need to cast it to \", _jsx(_components.code, {\n          children: \"OAuth2TokenImpl\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We can ex­tract the user in­for­ma­tion like the user­name from the \", _jsx(_components.code, {\n          children: \"IDToken\"\n        }), \" ex­posed by the user ob­ject via \", _jsx(_components.code, {\n          children: \"user.idToken().getString(\\\"preferred_username\\\")\"\n        }), \".\\nNote, there are many more claims like (name, email, give­nanme, fam­i­ly­name etc.) avail­able. The \", _jsx(_components.a, {\n          href: \"https://openid.net/specs/openid-connect-core-1_0.html#Claims\",\n          children: \"OpenID Con­nect Core Spec­i­fi­ca­tion\"\n        }), \" con­tains a list of avail­able claims.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We also gen­er­ate a list with links to the other pages which are sup­ported:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"handleGreet\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"OAuth2TokenImpl\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"oAuth2Token\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" (OAuth2TokenImpl) ctx.user();\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"username\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" oAuth2Token.idToken().getString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"preferred_username\\\"\"\n          }), \");\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"greeting\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" String.format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Hi %s @%s</h1><ul>\\\"\"\n          }), \" +\\n            \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<li><a href=\\\\\\\"/protected/user\\\\\\\">User Area</a></li>\\\"\"\n          }), \" +\\n            \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<li><a href=\\\\\\\"/protected/admin\\\\\\\">Admin Area</a></li>\\\"\"\n          }), \" +\\n            \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<li><a href=\\\\\\\"/protected/userinfo\\\\\\\">User Info (Remote Call)</a></li>\\\"\"\n          }), \" +\\n            \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"</ul>\\\"\"\n          }), \", username, Instant.now());\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"logoutForm\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" createLogoutForm(ctx);\\n\\n    respondWithOk(ctx, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \", greeting + logoutForm);\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The user page han­dler shows in­for­ma­tion about the cur­rent user:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"handleUserPage\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"OAuth2TokenImpl\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"user\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" (OAuth2TokenImpl) ctx.user();\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"username\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" user.idToken().getString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"preferred_username\\\"\"\n          }), \");\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"displayName\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" oAuth2Token.idToken().getString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \");\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"content\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" String.format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>User Page: %s (%s) @%s</h1><a href=\\\\\\\"/protected\\\\\\\">Protected Area</a>\\\"\"\n          }), \",\\n                                   username, displayName, Instant.now());\\n    respondWithOk(ctx, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \", content);\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"authorization-checking-for-required-roles\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#authorization-checking-for-required-roles\"\n        }), \"Authorization: Checking for Required Roles\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Our app ex­poses a sim­ple admin page which shows some in­for­ma­tion for ad­mins, which should only be vis­i­ble for ad­mins. Thus we re­quire that users must have the \", _jsx(_components.code, {\n          children: \"admin\"\n        }), \" realm role in Key­cloak to be able to ac­cess the admin page.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This is done via a call to \", _jsx(_components.code, {\n          children: \"user.isAuthorized(\\\"realm:admin\\\", cb)\"\n        }), \". The han­dler func­tion \", _jsx(_components.code, {\n          children: \"cb\"\n        }), \" ex­poses\\nthe re­sult of the au­tho­riza­tion check via the \", _jsx(_components.code, {\n          children: \"AsyncResult<Boolean> res\"\n        }), \". If the cur­rent user has the\\n\", _jsx(_components.code, {\n          children: \"admin\"\n        }), \" role then the re­sult is \", _jsx(_components.code, {\n          children: \"true\"\n        }), \" oth­er­wise \", _jsx(_components.code, {\n          children: \"false\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"handleAdminPage\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"OAuth2TokenImpl\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"user\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" (OAuth2TokenImpl) ctx.user();\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// check for realm-role \\\"admin\\\"\"\n          }), \"\\n    user.isAuthorized(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"realm:admin\\\"\"\n          }), \", res -> {\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (!res.succeeded() || !res.result()) {\\n            respondWith(ctx, \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"403\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Forbidden</h1>\\\"\"\n          }), \");\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n        }\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"username\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" user.idToken().getString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"preferred_username\\\"\"\n          }), \");\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"content\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" String.format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Admin Page: %s @%s</h1><a href=\\\\\\\"/protected\\\\\\\">Protected Area</a>\\\"\"\n          }), \",\\n                                        username, Instant.now());\\n        respondWithOk(ctx, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \", content);\\n    });\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h4, {\n        id: \"call-services-protected-with-bearer-token\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#call-services-protected-with-bearer-token\"\n        }), \"Call Services protected with Bearer Token\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Often we need to call other ser­vices from our web app that are pro­tected via Bearer Au­then­ti­ca­tion. This means\\nthat we need a valid \", _jsx(_components.code, {\n          children: \"access token\"\n        }), \" to ac­cess a re­source pro­vided on an­other server.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To demon­strate this we use Key­cloak’s \", _jsx(_components.code, {\n          children: \"/userinfo\"\n        }), \" end­point as a straw man to demon­strate back­end calls with a bearer token.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We can ob­tain the cur­rent valid \", _jsx(_components.code, {\n          children: \"access token\"\n        }), \" via \", _jsx(_components.code, {\n          children: \"user.opaqueAccessToken()\"\n        }), \".\\nSince we use a \", _jsx(_components.code, {\n          children: \"WebClient\"\n        }), \" to call the pro­tected end­point, we need to pass the \", _jsx(_components.code, {\n          children: \"access token\"\n        }), \"\\nvia the \", _jsx(_components.code, {\n          children: \"Authorization\"\n        }), \" header by call­ing \", _jsx(_components.code, {\n          children: \"bearerTokenAuthentication(user.opaqueAccessToken())\"\n        }), \"\\nin the cur­rent \", _jsx(_components.code, {\n          children: \"HttpRequest\"\n        }), \" ob­ject:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Handler<RoutingContext> \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createUserInfoHandler\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(WebClient webClient, String userInfoUrl)\"\n          }), \" {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" (RoutingContext ctx) -> {\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"OAuth2TokenImpl\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"user\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" (OAuth2TokenImpl) ctx.user();\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"URI\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"userInfoEndpointUri\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" URI.create(userInfoUrl);\\n        webClient\\n            .get(userInfoEndpointUri.getPort(), userInfoEndpointUri.getHost(), userInfoEndpointUri.getPath())\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// use the access token for calls to other services protected via JWT Bearer authentication\"\n          }), \"\\n            .bearerTokenAuthentication(user.opaqueAccessToken())\\n            .as(BodyCodec.jsonObject())\\n            .send(ar -> {\\n\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (!ar.succeeded()) {\\n                    respondWith(ctx, \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"500\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"{}\\\"\"\n          }), \");\\n                    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n                }\\n\\n                \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"JsonObject\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"body\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ar.result().body();\\n                respondWithOk(ctx, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json\\\"\"\n          }), \", body.encode());\\n            });\\n    };\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"handle-logout\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#handle-logout\"\n        }), \"Handle logout\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now that we got a work­ing SSO login with au­tho­riza­tion, it would be great if we would allow users to lo­gout again.\\nTo do this we can lever­age the built-​in OpenID Con­nect lo­gout func­tion­al­ity which can be called via \", _jsx(_components.code, {\n          children: \"oAuth2Token.logout(cb)\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The han­dler func­tion \", _jsx(_components.code, {\n          children: \"cb\"\n        }), \" ex­poses the re­sult of the lo­gout ac­tion via the \", _jsx(_components.code, {\n          children: \"AsyncResult<Void> res\"\n        }), \".\\nIf the lo­gout was suc­cess­full we destory our ses­sion via \", _jsx(_components.code, {\n          children: \"ctx.session().destroy()\"\n        }), \" and redi­rect the user to the index page.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The lo­gout form is gen­er­ated via the \", _jsx(_components.code, {\n          children: \"createLogoutForm\"\n        }), \" method.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As men­tioned ear­lier, we need to pro­tect our lo­gout form with a CSRF token to pre­vent \", _jsx(_components.a, {\n          href: \"https://owasp.org/www-community/attacks/csrf\",\n          children: \"CSRF at­tacks\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: If we had end­points that would ac­cept data sent to the server, then we’d need to guard those end­points with an CSRF token as well.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We need to ob­tain the gen­er­ated \", _jsx(_components.code, {\n          children: \"CSRFToken\"\n        }), \" and ren­der it into a hid­den form input field that’s trans­fered via HTTP POST when the lo­gout form is sub­mit­ted:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"handleLogout\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"OAuth2TokenImpl\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"oAuth2Token\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" (OAuth2TokenImpl) ctx.user();\\n    oAuth2Token.logout(res -> {\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (!res.succeeded()) {\\n            \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// the user might not have been logged out, to know why:\"\n          }), \"\\n            respondWith(ctx, \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"500\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \", String.format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Logout failed %s</h1>\\\"\"\n          }), \", res.cause()));\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n        }\\n\\n        ctx.session().destroy();\\n        ctx.response().putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"location\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/?logout=true\\\"\"\n          }), \").setStatusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"302\"\n          }), \").end();\\n    });\\n}\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" String \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createLogoutForm\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"csrfToken\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ctx.get(CSRFHandler.DEFAULT_HEADER_NAME);\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<form action=\\\\\\\"/logout\\\\\\\" method=\\\\\\\"post\\\\\\\">\\\"\"\n          }), \"\\n            + String.format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<input type=\\\\\\\"hidden\\\\\\\" name=\\\\\\\"%s\\\\\\\" value=\\\\\\\"%s\\\\\\\">\\\"\"\n          }), \", CSRFHandler.DEFAULT_HEADER_NAME, csrfToken)\\n            + \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<button>Logout</button></form>\\\"\"\n          }), \";\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Some ad­di­tional plumb­ing:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"respondWithOk\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx, String contentType, String content)\"\n          }), \" {\\n    respondWith(ctx, \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \", contentType, content);\\n}\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"respondWith\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(RoutingContext ctx, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" statusCode, String contentType, String content)\"]\n          }), \" {\\n    ctx.request().response() \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"//\"\n          }), \"\\n            .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", contentType) \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"//\"\n          }), \"\\n            .setStatusCode(statusCode)\\n            .end(content);\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"more-examples\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#more-examples\"\n        }), \"More examples\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This con­cludes the Key­cloak in­te­gra­tion ex­am­ple.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Check out the com­plete ex­am­ple in \", _jsx(_components.a, {\n          href: \"https://github.com/thomasdarimont/vertx-playground/tree/master/keycloak-vertx\",\n          children: \"keycloak-​vertx Ex­am­ples Repo\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Thank you for your time, stay tuned for more up­dates! If you want to learn more about Key­cloak, feel free to reach out to me. You can find me via \", _jsx(_components.a, {\n          href: \"https://twitter.com/thomasdarimont\",\n          children: \"thomas­da­ri­mont on twit­ter\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Happy Hack­ing!\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Eclipse Vert.x 3.9.0 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"New features include fluent queries in SQL clients, a new Redis client, an updated Kafka client, an improved Future API, and many more things."},"date":"2020-04-02","slug":"eclipse-vert-x-3-9-0-released"},"nextPost":{"meta":{"title":"Eclipse Vert.x 3.8.5","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"This version is a minor bug fix release addressing issues found in Vert.x 3.8.4. We would like to thank you all for reporting these issues."},"date":"2020-01-24","slug":"eclipse-vert-x-3-8-5"},"relatedPosts":[{"meta":{"title":"JWT Authorization for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn about JWT foundations, protect routes with JWT Authorization, JWT encoded tokens, and RBAC with Keycloak"},"date":"2020-10-01","slug":"jwt-authorization-for-vert-x-with-keycloak"},{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"}]},"__N_SSG":true}