{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"TCP Client using Eclipse Vert.x, Kotlin and Gradle build","category":"guides","authors":[{"name":"Usman Saleem","github_id":"usmansaleem"}],"summary":"In this blog post, I demonstrate how to write a very simple TCP client that keeps a connection open to a custom-written server in cloud."},"date":"2017-12-20","slug":"tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build","readingTime":{"text":"5 min read","minutes":4.185,"time":251100,"words":837},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h2: \"h2\",\n      a: \"a\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      h3: \"h3\",\n      ul: \"ul\",\n      li: \"li\"\n    }, props.components), {Gist, Alert} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Gist) _missingMdxReference(\"Gist\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"As part of my hobby project to con­trol Rasp­ber­ryPi using Google Home Mini and/or Alexa, I wanted to write a very sim­ple TCP client that keeps a con­nec­tion open to one of my cus­tom writ­ten server in cloud (I will write an­other blog post to cover the server side on a later date). The re­quire­ment of the client is to send a shared se­cret upon con­nect­ing and then keep wait­ing for mes­sage from server. Vert.x, Kotlin and Gra­dle allow rapid de­vel­op­ment of such project. The gen­er­ated jar can be ex­e­cuted on Rasp­berry Pi. These steps out­line the project setup and re­lated source code to show­case a Vert.x and Kotlin project with Gra­dle.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"project-directory-structure\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#project-directory-structure\"\n        }), \"Project Directory Structure\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"From com­mand line (or via Win­dows Ex­plorer, what­ever you pre­fer to use) cre­ate a di­rec­tory for project,for in­stance \", _jsx(_components.code, {\n          children: \"vertx-net-client\"\n        }), \". Since we are using Kotlin, we will place all Kotlin files in \", _jsx(_components.code, {\n          children: \"src/main/kotlin\"\n        }), \" folder. The \", _jsx(_components.code, {\n          children: \"src/main/resources\"\n        }), \" folder will con­tain our log­ging con­fig­u­ra­tion re­lated files.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-css\",\n          children: [\"cd vertx-net-client\\nmkdir -\", _jsx(_components.span, {\n            className: \"hljs-selector-tag\",\n            children: \"p\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-attribute\",\n            children: \"src\"\n          }), \"/\", _jsx(_components.span, {\n            className: \"hljs-selector-tag\",\n            children: \"main\"\n          }), \"/kotlin\\nmkdir -\", _jsx(_components.span, {\n            className: \"hljs-selector-tag\",\n            children: \"p\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-attribute\",\n            children: \"src\"\n          }), \"/\", _jsx(_components.span, {\n            className: \"hljs-selector-tag\",\n            children: \"main\"\n          }), \"/resources\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"project-files\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#project-files\"\n        }), \"Project Files\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We need to add fol­low­ing files in the project\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \".gitignore\"\n          }), \"\\nIf you want to check your project into git, you may con­sider adding fol­low­ing \", _jsx(_components.code, {\n            children: \".gitignore\"\n          }), \" file at root of your project\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(Gist, {\n        url: \"https://gist.github.com/usmansaleem/b5838484a20cb8b08f236f2265ad7a8e\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"logback.xml\"\n          }), \"\\nThis ex­am­ple is using slf4j and log­back for log­ging. If you de­cide to use it in your project, you may also add fol­low­ing log­back.xml file in \", _jsx(_components.code, {\n            children: \"src/main/resources\"\n          }), \". Mod­ify it as per your re­quire­ments. This ex­am­ple will\\nlog on con­sole.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(Gist, {\n        url: \"https://gist.github.com/usmansaleem/750c6d1cad0721b52be2ff00f758fb9f\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"gradle-setup\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#gradle-setup\"\n        }), \"Gradle Setup\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We will use Gra­dle build sys­tem for this project. If you don’t al­ready have Gra­dle avail­able on your sys­tem, down­load and unzip gra­dle in a di­rec­tory of your choice (\", _jsx(_components.code, {\n          children: \"$GRADLE_HOME\"\n        }), \" is used here to rep­re­sent this di­rec­tory). This gra­dle dis­tri­b­u­tion will be used as a start­ing point to cre­ate Gra­dle wrap­per scripts for our project. These scripts will allow our project to down­load and use cor­rect ver­sion of gra­dle dis­tri­b­u­tion au­to­mat­i­cally with­out mess­ing up sys­tem. Re­ally use­ful when build­ing your project on CI tool or on any other de­vel­oper’s ma­chine.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Run fol­low­ing com­mand in project’s di­rec­tory\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$GRADLE_HOME\"\n          }), \"/bin/gradle wrapper\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The above com­mands will gen­er­ate fol­low­ing files and di­rec­to­ries.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"gradle/  gradlew  gradlew.bat\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"gradle-build-file-buildgradle\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#gradle-build-file-buildgradle\"\n        }), \"Gradle build file \", _jsx(_components.code, {\n          children: \"build.gradle\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Cre­ate (and/or copy and mod­ify) fol­low­ing \", _jsx(_components.code, {\n          children: \"build.gradle\"\n        }), \" in your project’s root di­rec­tory. Our ex­am­ple gra­dle build file is using \", _jsx(_components.a, {\n          href: \"https://github.com/jponge/vertx-gradle-plugin/\",\n          children: \"vertx-​gradle-plugin\"\n        }), \".\"]\n      }), \"\\n\", _jsx(Gist, {\n        url: \"https://gist.github.com/usmansaleem/e723f25b827e0a925eaef2957a80132d\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In the project di­rec­tory, run fol­low­ing com­mand to down­load local gra­dle dis­tri­b­u­tion:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"./gradlew\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"(or \", _jsx(_components.code, {\n          children: \".\\\\gradlew.bat\"\n        }), \" if in Win­dows)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"At this stage we should have fol­low­ing file struc­ture. This is also a good time to com­mit changes if you are work­ing with git.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.code, {\n            children: \".gitignore\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.code, {\n            children: \"build.gradle\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.code, {\n            children: \"gradle/wrapper/gradle-wrapper.jar\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.code, {\n            children: \"gradle/wrapper/gradle-wrapper.properties\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.code, {\n            children: \"gradlew\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.code, {\n            children: \"gradlew.bat\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.code, {\n            children: \"src/main/resources/logback.xml\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now that our project struc­ture is ready, time to add the meat of the project. You may use any IDE of your choice. My pref­er­ence is In­tel­liJ IDEA.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Cre­ate a new pack­age under \", _jsx(_components.code, {\n          children: \"src/main/kotlin\"\n        }), \". The pack­age name should be adapted from the fol­low­ing sec­tion of \", _jsx(_components.code, {\n          children: \"build.gradle\"\n        })]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"vertx {\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"mainVerticle\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"info.usmans.blog.vertx.NetClientVerticle\\\"\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"From the above ex­am­ple, the pack­age name is \", _jsx(_components.code, {\n          children: \"info.usmans.blog.vertx\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Add a new Kotlin Class/file in \", _jsx(_components.code, {\n          children: \"src/main/kotlin/info/usmans/blog/vertx\"\n        }), \" as \", _jsx(_components.code, {\n          children: \"NetClientVerticle.kt\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The con­tents of this class is as fol­lows\"\n      }), \"\\n\", _jsx(Gist, {\n        url: \"https://gist.github.com/usmansaleem/2a176a7b752fcb72f7f31964809696fe\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"explaining-the-code\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#explaining-the-code\"\n        }), \"Explaining the Code\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"fun main(args: Array<String>)\"\n        }), \" is not strictly re­quired, it quickly al­lows run­ning the Vert.x ver­ti­cle from within IDE. You will also no­tice a small hack in the method for set­ting sys­tem prop­erty \", _jsx(_components.code, {\n          children: \"vertx.disableDnsResolver\"\n        }), \" which is to avoid a Netty bug that I ob­served when run­ning on Win­dows ma­chine and re­mote server is down. Of course, since we are using vertx-​gradle-plugin, we can also use \", _jsx(_components.code, {\n          children: \"gradle vertxRun\"\n        }), \" to run our ver­ti­cle. In this case the \", _jsx(_components.code, {\n          children: \"main\"\n        }), \" method will not get called.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"override fun start()\"\n        }), \" method calls \", _jsx(_components.code, {\n          children: \"fireReconnectTimer\"\n        }), \" which in turn calls \", _jsx(_components.code, {\n          children: \"reconnect\"\n        }), \" method. \", _jsx(_components.code, {\n          children: \"reconnect\"\n        }), \" method con­tains the con­nec­tion logic to server as well as it calls \", _jsx(_components.code, {\n          children: \"fireReconnectTimer\"\n        }), \" if it is un­able to con­nect to server or dis­con­nects from server. In \", _jsx(_components.code, {\n          children: \"reconnect\"\n        }), \" method the \", _jsx(_components.code, {\n          children: \"socket.handler\"\n        }), \" gets called when server send mes­sage to client.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-kotlin\",\n          children: [\"socket.handler({ \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"data\"\n          }), \" ->\\n                        logger.info(\", _jsxs(_components.span, {\n            className: \"hljs-string\",\n            children: [\"\\\"Data received: \", _jsx(_components.span, {\n              className: \"hljs-subst\",\n              children: \"${data}\"\n            }), \"\\\"\"]\n          }), \")\\n                        \", _jsxs(_components.span, {\n            className: \"hljs-comment\",\n            children: [\"//\", _jsx(_components.span, {\n              className: \"hljs-doctag\",\n              children: \"TODO:\"\n            }), \" Do the work here ...\"]\n          }), \"\\n               })\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"distributing-the-project\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#distributing-the-project\"\n        }), \"Distributing the project\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To cre­ate re­dis­trib­utable jar, use \", _jsx(_components.code, {\n          children: \"./gradlew shadowJar\"\n        }), \" com­mand. Or if using In­tel­liJ: from Gra­dle projects, Tasks, shadow, shad­ow­Jar (right click run). This com­mand will gen­er­ate \", _jsx(_components.code, {\n          children: \"./build/libs/vertx-net-client-fat.jar\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"executing-the-client\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#executing-the-client\"\n        }), \"Executing the client\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The client jar can be ex­e­cuted using fol­low­ing com­mand:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\" java -DserverHost=127.0.0.1 -DserverPort=8888 -DconnectMessage=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"hello\\\"\"\n          }), \" -jar vertx-net-client-full.jar\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you wish to use SLF4J for Vert.x in­ter­nal log­ging, you need to pass sys­tem prop­erty \", _jsx(_components.code, {\n          children: \"vertx.logger-delegate-factory-class-name\"\n        }), \" with value of \", _jsx(_components.code, {\n          children: \"io.vertx.core.logging.SLF4JLogDelegateFactory\"\n        }), \". The final com­mand would look like:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"java -DserverHost=127.0.0.1 -DserverPort=8888 -DconnectMessage=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"hello\\\"\"\n          }), \" -Dvertx.logger-delegate-factory-class-name=\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"io.vertx.core.logging.SLF4JLogDelegateFactory\\\"\"\n          }), \" -jar vertx-net-client-full.jar\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You can con­fig­ure Vert.x log­ging lev­els in log­back.xml file if re­quired.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"conclusion\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#conclusion\"\n        }), \"Conclusion\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This post de­scribes how easy it is to cre­ate a sim­ple TCP client using Vert.x, Kotlin and Gra­dle build sys­tem. Hope­fully the tech­niques shown here will serve as a start­ing point for your next DIY project.\"\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        children: _jsxs(_components.p, {\n          children: [\"This post is adapted and re­pro­duced from \", _jsx(_components.a, {\n            href: \"https://usmans.info/view/blog/tcp_client_using_vertx_kotlin_gradle\",\n            children: \"au­thor’s blog post\"\n          })]\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Eclipse Vert.x 3.5.1 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have just released Vert.x 3.5.1!"},"date":"2018-02-13","slug":"eclipse-vert-x-3-5-1-released"},"nextPost":{"meta":{"title":"Eclipse Vert.x meets GraphQL","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"In this blog post, we will look at an example application written in Vert.x that uses the new GraphQL API of Gentics Mesh."},"date":"2017-11-14","slug":"eclipse-vert-x-meets-graphql"},"relatedPosts":[{"meta":{"title":"Centralized logging for Vert.x applications using the ELK stack","category":"guides","authors":[{"name":"Ricardo Hernandez","github_id":"ricardohmon"}],"summary":"This post entry describes a solution to achieve centralized logging of Vert.x applications using the ELK stack (Logstash, Elasticsearch, and Kibana)."},"date":"2016-09-08","slug":"centralized-logging-for-vert-x-applications-using-the-elk-stack"},{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}