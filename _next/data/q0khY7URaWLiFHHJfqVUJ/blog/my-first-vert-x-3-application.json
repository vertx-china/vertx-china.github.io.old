{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application","readingTime":{"text":"8 min read","minutes":7.09,"time":425400,"words":1418},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      em: \"em\",\n      a: \"a\",\n      h2: \"h2\",\n      ol: \"ol\",\n      li: \"li\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      ul: \"ul\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Let’s say, you heard some­one say­ing that Vert.x is \", _jsx(_components.em, {\n          children: \"awe­some\"\n        }), \". Ok great, but you may want to try it by your­self. Well, the next nat­ural ques­tion is “where do I start?”. This post is a good start­ing point. It shows how is built a very sim­ple vert.x ap­pli­ca­tion (noth­ing fancy), how it is tested and how it is pack­aged and ex­e­cuted. So, every­thing you need to know be­fore build­ing your own ground­break­ing ap­pli­ca­tion.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The code de­vel­oped in this post is avail­able on \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app\",\n          children: \"github\"\n        }), \". This post is part of the \", _jsx(_components.em, {\n          children: \"In­tro­duc­tion to Vert.x se­ries\"\n        }), \". The code of this post in in the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/tree/post-1\",\n          children: \"post-1 branch\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"lets-start\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#lets-start\"\n        }), \"Let’s start!\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"First, let’s cre­ate a project. In this post, we use Apache Maven, but you can use Gra­dle or the build process tool you pre­fer. You could use the Maven jar ar­che­type to cre­ate the struc­ture, but ba­si­cally, you just need a di­rec­tory with:\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"a \", _jsx(_components.code, {\n            children: \"src/main/java\"\n          }), \" di­rec­tory\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"a \", _jsx(_components.code, {\n            children: \"src/test/java\"\n          }), \" di­rec­tory\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"a \", _jsx(_components.code, {\n            children: \"pom.xml\"\n          }), \" file\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, you would get some­thing like:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-text\",\n          children: \".\\n├── pom.xml\\n├── src\\n│   ├── main\\n│   │   └── java\\n│   └── test\\n│       └── java\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s cre­ate the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file with the fol­low­ing con­tent:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"project\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"xmlns\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"http://maven.apache.org/POM/4.0.0\\\"\"\n            }), \"\\n         \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"xmlns:xsi\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"\n            }), \"\\n         \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"xsi:schemaLocation\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"http://maven.apache.org/POM/4.0.0\\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"modelVersion\"\n            }), \">\"]\n          }), \"4.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"modelVersion\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx.blog\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"my-first-app\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"1.0-SNAPSHOT\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependencies\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-core\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependencies\"\n            }), \">\"]\n          }), \"\\n\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"build\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugins\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"maven-compiler-plugin\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.3\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"source\"\n            }), \">\"]\n          }), \"1.8\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"source\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"target\"\n            }), \">\"]\n          }), \"1.8\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"target\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugins\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"build\"\n            }), \">\"]\n          }), \"\\n\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"project\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file is pretty straight­for­ward:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"it de­clares a de­pen­dency on \", _jsx(_components.code, {\n            children: \"vertx-core\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"it con­fig­ures the \", _jsx(_components.em, {\n            children: \"maven-​compiler-plugin\"\n          }), \" to use Java 8.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This sec­ond point is im­por­tant, Vert.x ap­pli­ca­tions re­quire Java 8.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"lets-code\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#lets-code\"\n        }), \"Let’s code!\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ok, now we have made the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file. Let’s do some real cod­ing… Cre­ate the \", _jsx(_components.code, {\n          children: \"src/main/java/io/vertx/blog/first/MyFirstVerticle.java\"\n        }), \" file with the fol­low­ing con­tent:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" io.vertx.blog.first;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.AbstractVerticle;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.Future;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MyFirstVerticle\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"AbstractVerticle\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Future<Void> fut)\"\n          }), \" {\\n    vertx\\n        .createHttpServer()\\n        .requestHandler(r -> {\\n          r.response().end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Hello from my first \\\"\"\n          }), \" +\\n              \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Vert.x 3 application</h1>\\\"\"\n          }), \");\\n        })\\n        .listen(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", result -> {\\n          \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (result.succeeded()) {\\n            fut.complete();\\n          } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n            fut.fail(result.cause());\\n          }\\n        });\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This is ac­tu­ally our not fancy ap­pli­ca­tion. The class ex­tends \", _jsx(_components.code, {\n          children: \"AbstractVerticle\"\n        }), \". In the Vert.x world, a \", _jsx(_components.em, {\n          children: \"ver­ti­cle\"\n        }), \" is a com­po­nent. By ex­tend­ing \", _jsx(_components.code, {\n          children: \"AbstractVerticle\"\n        }), \", our class gets ac­cess to the \", _jsx(_components.code, {\n          children: \"vertx\"\n        }), \" field.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method is called when the ver­ti­cle is de­ployed. We could also im­ple­ment a \", _jsx(_components.code, {\n          children: \"stop\"\n        }), \" method, but in this case Vert.x takes care of the garbage for us. The \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method re­ceives a \", _jsx(_components.code, {\n          children: \"Future\"\n        }), \" ob­ject that will let us in­form Vert.x when our start se­quence is com­pleted or re­port an error. One of the par­tic­u­lar­ity of Vert.x is its asyn­chro­nous / non-​blocking as­pect. When our ver­ti­cle is going to be de­ployed it won’t wait until the start method has been com­pleted. So, the \", _jsx(_components.code, {\n          children: \"Future\"\n        }), \" pa­ra­me­ter is im­por­tant to no­tify of the com­ple­tion.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method cre­ates a HTTP server and at­taches a re­quest han­dler to it. The re­quest han­dler is a lambda, passed in the \", _jsx(_components.code, {\n          children: \"requestHandler\"\n        }), \" method, called every time the server re­ceives a re­quest. Here, we just reply \", _jsx(_components.code, {\n          children: \"Hello ...\"\n        }), \" (noth­ing fancy I told you). Fi­nally, the server is bound to the 8080 port. As this may fails (be­cause the port may al­ready be used), we pass an­other lambda ex­pres­sion check­ing whether or not the con­nec­tion has suc­ceeded. As men­tioned above it calls ei­ther \", _jsx(_components.code, {\n          children: \"fut.complete\"\n        }), \" in case of suc­cess or \", _jsx(_components.code, {\n          children: \"fut.fail\"\n        }), \" to re­port an error.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s try to com­pile the ap­pli­ca­tion using:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean compile\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For­tu­nately, it should suc­ceed.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"That’s all for the ap­pli­ca­tion.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"lets-test\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#lets-test\"\n        }), \"Let’s test\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Well, that’s good to have de­vel­oped an ap­pli­ca­tion, but we can never be too care­ful, so let’s test it. The test uses JUnit and \", _jsx(Link, {\n          href: \"/docs/vertx-unit/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"vertx-​unit\"\n          })\n        }), \" - a frame­work de­liv­ered with vert.x to make the test­ing of vert.x ap­pli­ca­tion more nat­ural.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Open the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file to add the two fol­low­ing de­pen­den­cies:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"junit\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"junit\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"4.12\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-unit\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now cre­ate the \", _jsx(_components.code, {\n          children: \"src/test/java/io/vertx/blog/first/MyFirstVerticleTest.java\"\n        }), \" with the fol­low­ing con­tent:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" io.vertx.blog.first;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.core.Vertx;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.ext.unit.Async;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.ext.unit.TestContext;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.ext.unit.junit.VertxUnitRunner;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.junit.After;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.junit.Before;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.junit.Test;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.junit.runner.RunWith;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@RunWith(VertxUnitRunner.class)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MyFirstVerticleTest\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Vertx vertx;\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Before\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"setUp\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n    vertx = Vertx.vertx();\\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\\n        context.asyncAssertSuccess());\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@After\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"tearDown\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n    vertx.close(context.asyncAssertSuccess());\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"testMyApplication\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" context.async();\\n\\n    vertx.createHttpClient().getNow(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \",\\n     response -> {\\n      response.handler(body -> {\\n        context.assertTrue(body.toString().contains(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello\\\"\"\n          }), \"));\\n        async.complete();\\n      });\\n    });\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This is a JUnit test for our ver­ti­cle. The test uses vertx-​unit, so we use a cus­tom run­ner. vert.x-​unit makes easy to test asyn­chro­nous in­ter­ac­tions, which are the basis of vert.x ap­pli­ca­tions.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the \", _jsx(_components.code, {\n          children: \"setUp\"\n        }), \" method, we cre­ates an in­stance of \", _jsx(_components.code, {\n          children: \"Vertx\"\n        }), \" and de­ploy our ver­ti­cle. You may have no­ticed that un­like the tra­di­tional JUnit \", _jsx(_components.code, {\n          children: \"@Before\"\n        }), \" method, it re­ceives a \", _jsx(_components.code, {\n          children: \"TestContext\"\n        }), \". This ob­ject lets us con­trol the asyn­chro­nous as­pect of our test. For in­stance, when we de­ploy our ver­ti­cle, it starts asyn­chro­nously, as most Vert.x in­ter­ac­tions. We can­not check any­thing until it gets started cor­rectly. So, as sec­ond ar­gu­ment of the \", _jsx(_components.code, {\n          children: \"deployVerticle\"\n        }), \" method, we pass a re­sult han­dler: \", _jsx(_components.code, {\n          children: \"context.asyncAssertSuccess()\"\n        }), \". It fails the test if the ver­ti­cle does not start cor­rectly. In ad­di­tion it waits until the ver­ti­cle has com­pleted its start se­quence. Re­mem­ber, in our ver­ti­cle, we call \", _jsx(_components.code, {\n          children: \"fut.complete()\"\n        }), \". So it waits until this method is called, and in the case of a fail­ures, fails the test.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Well, the \", _jsx(_components.code, {\n          children: \"tearDown\"\n        }), \" method is straight­for­ward, and just ter­mi­nates the \", _jsx(_components.code, {\n          children: \"vertx\"\n        }), \" in­stance we cre­ated.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s now have a look to the test of our ap­pli­ca­tion: the \", _jsx(_components.code, {\n          children: \"testMyApplication\"\n        }), \" method. The test emits a re­quest to our ap­pli­ca­tion and checks the re­sult.  Emit­ting the re­quest and re­ceiv­ing the re­sponse is asyn­chro­nous. So we need a way to con­trol this. As the \", _jsx(_components.code, {\n          children: \"setUp\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"tearDown\"\n        }), \" meth­ods, the test method re­ceives a \", _jsx(_components.code, {\n          children: \"TestContext\"\n        }), \". From this ob­ject we cre­ates an \", _jsx(_components.em, {\n          children: \"async han­dle\"\n        }), \" (\", _jsx(_components.code, {\n          children: \"async\"\n        }), \") that lets us no­tify the test frame­work when the test has com­pleted (using \", _jsx(_components.code, {\n          children: \"async.complete()\"\n        }), \").\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So, once the \", _jsx(_components.em, {\n          children: \"async han­dle\"\n        }), \" is cre­ated, we cre­ate a HTTP client and emits a HTTP re­quest han­dled by our ap­pli­ca­tion with the \", _jsx(_components.code, {\n          children: \"getNow()\"\n        }), \" method (\", _jsx(_components.code, {\n          children: \"getNow\"\n        }), \" is just a short­cut for \", _jsx(_components.code, {\n          children: \"get(...).end()\"\n        }), \"). The re­sponse is han­dled by a lambda. In this lambda we re­trieves the re­sponse body by pass­ing an­other lambda to the \", _jsx(_components.code, {\n          children: \"handler\"\n        }), \" method. The \", _jsx(_components.code, {\n          children: \"body\"\n        }), \" ar­gu­ment is the re­sponse body (as a \", _jsx(_components.code, {\n          children: \"buffer\"\n        }), \" ob­ject). We check that the body con­tains the \", _jsx(_components.code, {\n          children: \"\\\"Hello\\\"\"\n        }), \" String and de­clare the test com­plete.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s take a minute to men­tion the \", _jsx(_components.em, {\n          children: \"as­ser­tions\"\n        }), \". Un­like in tra­di­tional JUnit tests, it uses \", _jsx(_components.code, {\n          children: \"context.assert...\"\n        }), \". In­deed, if the as­ser­tion fails, it will in­ter­rupt the test im­me­di­ately. So it’s pretty im­por­tant to al­ways uses these as­ser­tion meth­ods be­cause of the asyn­chro­nous as­pect of the Vert.x ap­pli­ca­tion and so tests.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Our test can be run from an IDE, or using Maven:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"mvn clean \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"test\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"packaging\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#packaging\"\n        }), \"Packaging\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So, let’s sum up. We have an ap­pli­ca­tion and a test. Well, let’s now pack­age the ap­pli­ca­tion. In this post we pack­age the ap­pli­ca­tion in a \", _jsx(_components.em, {\n          children: \"fat jar\"\n        }), \". A \", _jsx(_components.em, {\n          children: \"fat jar\"\n        }), \" is a stand­alone ex­e­cutable Jar file con­tain­ing all the de­pen­den­cies re­quired to run the ap­pli­ca­tion. This is a very con­ve­nient way to pack­age Vert.x ap­pli­ca­tions as it’s only one file. It also make them easy to ex­e­cute.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To cre­ate a \", _jsx(_components.em, {\n          children: \"fat jar\"\n        }), \", edit the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file and add the fol­low­ing code just be­fore \", _jsx(_components.code, {\n          children: \"</plugins>\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"org.apache.maven.plugins\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"maven-shade-plugin\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"2.3\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"package\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"phase\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"shade\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goal\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"goals\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"transformers\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"transformer\"\n            }), \"\\n            \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"implementation\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\\\"\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"manifestEntries\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Main-Class\"\n            }), \">\"]\n          }), \"io.vertx.core.Starter\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Main-Class\"\n            }), \">\"]\n          }), \"\\n              \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Main-Verticle\"\n            }), \">\"]\n          }), \"io.vertx.blog.first.MyFirstVerticle\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"Main-Verticle\"\n            }), \">\"]\n          }), \"\\n            \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"manifestEntries\"\n            }), \">\"]\n          }), \"\\n          \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"transformer\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"transformers\"\n            }), \">\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactSet\"\n            }), \"/>\"]\n          }), \"\\n        \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"outputFile\"\n            }), \">\"]\n          }), \"${project.build.directory}/${project.artifactId}-${project.version}-fat.jar\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"outputFile\"\n            }), \">\"]\n          }), \"\\n      \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"configuration\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"execution\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"executions\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"plugin\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It uses the \", _jsx(_components.a, {\n          href: \"https://maven.apache.org/plugins/maven-shade-plugin/\",\n          children: \"maven-​shade-plugin\"\n        }), \" to cre­ate the \", _jsx(_components.code, {\n          children: \"fat jar\"\n        }), \". In the \", _jsx(_components.code, {\n          children: \"manifestEntries\"\n        }), \" it in­di­cates the name of our ver­ti­cle. You may won­der from where comes the \", _jsx(_components.code, {\n          children: \"Starter\"\n        }), \" class. It’s ac­tu­ally a class from vert.x, that is going to cre­ate the \", _jsx(_components.code, {\n          children: \"vertx\"\n        }), \" in­stance and de­ploy our ver­ti­cle.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, with this plug­in con­fig­ured, let’s launch:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean package\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This is going to cre­ate \", _jsx(_components.code, {\n          children: \"target/my-first-app-1.0-SNAPSHOT-fat.jar\"\n        }), \" em­bed­ding our ap­pli­ca­tion along with all the de­pen­den­cies (in­clud­ing vert.x it­self).\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"executing-our-application\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#executing-our-application\"\n        }), \"Executing our application\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Well, it’s nice to have a \", _jsx(_components.em, {\n          children: \"fat jar\"\n        }), \", but we want to see our ap­pli­ca­tion run­ning! As said above, thanks to the \", _jsx(_components.em, {\n          children: \"fat jar\"\n        }), \" pack­ag­ing, run­ning Vert.x ap­pli­ca­tion is easy as:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then, open a browser to \", _jsx(_components.a, {\n          href: \"http://localhost:8080\",\n          children: \"http://lo­cal­host:8080\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To stop the ap­pli­ca­tion, hit \", _jsx(_components.code, {\n          children: \"CTRL+C\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"conclusion\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#conclusion\"\n        }), \"Conclusion\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This Vert.x 3 crash class has pre­sented how you can de­velop a sim­ple ap­pli­ca­tion using Vert.x 3, how to test it, pack­age it and run it. So, you now know every­thing you need to build amaz­ing sys­tem on top of Vert.x 3. Next time we will see how to \", _jsx(Link, {\n          href: \"/blog/vert-x-application-configuration/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"con­fig­ure our ap­pli­ca­tion\"\n          })\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Happy cod­ing & Stay tuned !\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x Application Configuration","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"In our previous post, we developed a very simple Vert.x 3 application, and saw how this application can be tested, packaged and executed. That was nice, wasn’t it?"},"date":"2015-07-20","slug":"vert-x-application-configuration"},"nextPost":{"meta":{"title":"Vert.x 3 says “hello” to NPM users","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"In programming literature it has become the standard to create a hello world program as the first example. In this article, I'll demonstrate how NPM users can quickly get started with Vert.x."},"date":"2015-07-13","slug":"vert-x3-says-hello-to-npm-users"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}