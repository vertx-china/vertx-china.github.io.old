{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"The RSS reader tutorial (Step 2)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this second installment of our Vert.x Cassandra Client tutorial, we will add an endpoint that produces an array of RSS channels for a given user ID."},"date":"2018-09-05","slug":"the-rss-reader-tutorial-step-2","readingTime":{"text":"3 min read","minutes":2.375,"time":142500,"words":475},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      h2: \"h2\",\n      ol: \"ol\",\n      li: \"li\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"In \", _jsx(Link, {\n          href: \"/blog/the-rss-reader-tutorial/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"the pre­vi­ous step\"\n          })\n        }), \", we have suc­cess­fully im­ple­mented the first end­point\\nof the RSS reader app.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The RSS reader ex­am­ple as­sumes im­ple­ment­ing 3 end­points. This ar­ti­cle is ded­i­cated to im­ple­ment­ing the \", _jsx(_components.code, {\n          children: \"GET /user/{user_id}/rss_channels\"\n        }), \" end­point.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Be­fore com­plet­ing this step, make sure your are in the \", _jsx(_components.code, {\n          children: \"step_2\"\n        }), \" git branch:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-better-shell\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: \" git checkout step_2\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"implementing-the-second-endpoint\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#implementing-the-second-endpoint\"\n        }), \"Implementing the second endpoint\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The sec­ond end­point pro­duces an array of RSS chan­nels by given \", _jsx(_components.code, {\n          children: \"user_id\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We need to ex­e­cute the two fol­low­ing queries to:\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Fetch RSS links for a given user:\", \"\\n\", _jsx(_components.pre, {\n            children: _jsxs(_components.code, {\n              className: \"hljs language-sql\",\n              children: [_jsx(_components.span, {\n                className: \"hljs-keyword\",\n                children: \"SELECT\"\n              }), \" rss_link \", _jsx(_components.span, {\n                className: \"hljs-keyword\",\n                children: \"FROM\"\n              }), \" rss_by_user \", _jsx(_components.span, {\n                className: \"hljs-keyword\",\n                children: \"WHERE\"\n              }), \" login \", _jsx(_components.span, {\n                className: \"hljs-operator\",\n                children: \"=\"\n              }), \" GIVEN_USER_ID ;\\n\"]\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Fetch RSS chan­nel de­tails for a given link:\", \"\\n\", _jsx(_components.pre, {\n            children: _jsxs(_components.code, {\n              className: \"hljs language-sql\",\n              children: [_jsx(_components.span, {\n                className: \"hljs-keyword\",\n                children: \"SELECT\"\n              }), \" description, title, site_link, rss_link \", _jsx(_components.span, {\n                className: \"hljs-keyword\",\n                children: \"FROM\"\n              }), \" channel_info_by_rss_link \", _jsx(_components.span, {\n                className: \"hljs-keyword\",\n                children: \"WHERE\"\n              }), \" rss_link \", _jsx(_components.span, {\n                className: \"hljs-operator\",\n                children: \"=\"\n              }), \" GIVEN_LINK ;\\n\"]\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"implementation\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#implementation\"\n        }), \"Implementation\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The end­point al­lows the the front-​end app to dis­play the list of RSS feeds a user sub­scribed on. When the end­point is ac­cessed, the \", _jsx(_components.code, {\n          children: \"AppVerticle#getRssChannels\"\n        }), \" method is called. We can im­ple­ment this method in this way:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getRssChannels\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"userId\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ctx.request().getParam(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"user_id\\\"\"\n          }), \");\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (userId == \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \") {\\n        responseWithInvalidRequest(ctx);\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n        Future<List<Row>> future = Future.future();\\n        client.executeWithFullFetch(selectRssLinksByLogin.bind(userId), future);\\n        future.compose(rows -> {\\n            List<String> links = rows.stream()\\n                    .map(row -> row.getString(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"))\\n                    .collect(Collectors.toList());\\n\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" CompositeFuture.all(\\n                    links.stream().map(selectChannelInfo::bind).map(statement -> {\\n                        Future<List<Row>> channelInfoRow = Future.future();\\n                        client.executeWithFullFetch(statement, channelInfoRow);\\n                        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" channelInfoRow;\\n                    }).collect(Collectors.toList())\\n            );\\n        }).setHandler(h -> {\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (h.succeeded()) {\\n                \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"CompositeFuture\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"result\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" h.result();\\n                List<List<Row>> results = result.list();\\n                List<Row> list = results.stream()\\n                        .flatMap(List::stream)\\n                        .collect(Collectors.toList());\\n                \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"JsonObject\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"responseJson\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"();\\n                \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"JsonArray\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"channels\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonArray\"\n          }), \"();\\n\\n                list.forEach(eachRow -> channels.add(\\n                        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"()\\n                                .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"description\\\"\"\n          }), \", eachRow.getString(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"))\\n                                .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"title\\\"\"\n          }), \", eachRow.getString(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"))\\n                                .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"link\\\"\"\n          }), \", eachRow.getString(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2\"\n          }), \"))\\n                                .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"rss_link\\\"\"\n          }), \", eachRow.getString(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"3\"\n          }), \"))\\n                ));\\n\\n                responseJson.put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"channels\\\"\"\n          }), \", channels);\\n                ctx.response().end(responseJson.toString());\\n            } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n                log.error(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"failed to get rss channels\\\"\"\n          }), \", h.cause());\\n                ctx.response().setStatusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"500\"\n          }), \").end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Unable to retrieve the info from C*\\\"\"\n          }), \");\\n            }\\n        });\\n    }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Also, this method uses \", _jsx(_components.code, {\n          children: \"selectChannelInfo\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"selectRssLinksByLogin\"\n        }), \" fields, they should be ini­tial­ized in the \", _jsx(_components.code, {\n          children: \"AppVerticle#prepareNecessaryQueries\"\n        }), \" method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Future<Void> \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"prepareNecessaryQueries\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    Future<PreparedStatement> selectChannelInfoPrepFuture = Future.future();\\n    client.prepare(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"SELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = ? ;\\\"\"\n          }), \", selectChannelInfoPrepFuture);\\n\\n    Future<PreparedStatement> selectRssLinkByLoginPrepFuture = Future.future();\\n    client.prepare(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"SELECT rss_link FROM rss_by_user WHERE login = ? ;\\\"\"\n          }), \", selectRssLinkByLoginPrepFuture);\\n\\n    Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();\\n    client.prepare(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);\\\"\"\n          }), \", insertNewLinkForUserPrepFuture);\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" CompositeFuture.all(\\n            selectChannelInfoPrepFuture.compose(preparedStatement -> {\\n                selectChannelInfo = preparedStatement;\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" Future.succeededFuture();\\n            }),\\n            selectRssLinkByLoginPrepFuture.compose(preparedStatement -> {\\n                selectRssLinksByLogin = preparedStatement;\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" Future.succeededFuture();\\n            }),\\n            insertNewLinkForUserPrepFuture.compose(preparedStatement -> {\\n                insertNewLinkForUser = preparedStatement;\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" Future.succeededFuture();\\n            })\\n    ).mapEmpty();\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"conclusion\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#conclusion\"\n        }), \"Conclusion\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In this part, we have suc­cess­fully im­ple­mented the sec­ond end­point, which al­lows the browser app to ob­tain chan­nels in­for­ma­tion for a spe­cific user. To en­sure that it is work­ing fine, point your browser to \", _jsx(_components.code, {\n          children: \"localhost:8080\"\n        }), \" and click to the re­fresh but­ton. Chan­nel list should ap­pear im­me­di­ately.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you have any prob­lems with com­plet­ing this step you can check­out to \", _jsx(_components.code, {\n          children: \"step_3\"\n        }), \", where you can find all changes made for com­plet­ing this step:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-better-shell\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: \" git checkout step_3\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Thanks for read­ing this. I hope you en­joyed read­ing this ar­ti­cle. See you soon on our \", _jsx(_components.a, {\n          href: \"https://gitter.im/eclipse-vertx/vertx-users\",\n          children: \"Git­ter chan­nel\"\n        }), \"!\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Eclipse Vert.x 3.5.4","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have just released Vert.x 3.5.4, a bug fix release of Vert.x 3.5.x."},"date":"2018-10-03","slug":"eclipse-vert-x-3-5-4"},"nextPost":{"meta":{"title":"The RSS reader tutorial","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this tutorial, you will learn how to use the Eclipse Vert.x Cassandra client in practice. We will develop an RSS reader with three HTTP endpoints."},"date":"2018-08-20","slug":"the-rss-reader-tutorial"},"relatedPosts":[{"meta":{"title":"The RSS reader tutorial","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this tutorial, you will learn how to use the Eclipse Vert.x Cassandra client in practice. We will develop an RSS reader with three HTTP endpoints."},"date":"2018-08-20","slug":"the-rss-reader-tutorial"},{"meta":{"title":"Easy SSO for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn how to implement Single Sign-on with OpenID Connect and how to use Keycloak together with Eclipse Vert.x."},"date":"2020-03-16","slug":"easy-sso-for-vert-x-with-keycloak"},{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"}]},"__N_SSG":true}