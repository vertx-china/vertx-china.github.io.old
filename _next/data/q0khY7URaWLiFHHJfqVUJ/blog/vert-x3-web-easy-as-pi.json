{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Vert.x 3 Web easy as Pi","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"Vert.x Web distinguishes itself from traditional application servers like JavaEE by just being a simple extension toolkit to Vert.x, which makes it quite lightweight and small but nevertheless very powerful."},"date":"2015-07-01","slug":"vert-x3-web-easy-as-pi","readingTime":{"text":"4 min read","minutes":3.12,"time":187200,"words":624},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      em: \"em\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      img: \"img\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(Link, {\n          href: \"/docs/#web\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x Web\"\n          })\n        }), \" dis­tin­guishes it­self from tra­di­tional ap­pli­ca­tion servers like JavaEE by just\\nbeing a sim­ple ex­ten­sion toolkit to \", _jsx(Link, {\n          href: \"/docs/#core\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x\"\n          })\n        }), \", which makes it quite light­weight and small but\\nnev­er­the­less very pow­er­ful.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"One can cre­ate sim­ple ap­pli­ca­tions tar­get­ing \", _jsx(_components.em, {\n          children: \"small\"\n        }), \" de­vices such as Rasp­berry Pi with­out hav­ing to write much code but\\nstill very fast as it is ex­pected from any Vert.x ap­pli­ca­tion.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s for ex­am­ple think of mak­ing a \", _jsx(_components.a, {\n          href: \"https://github.com/pmlopes/vert-x3-experiments/archive/experiments/rpi-cpuload.zip\",\n          children: \"re­al­time cpu load vi­su­al­iza­tion web app\"\n        }), \".\\nFor this ex­am­ple we need a few things:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"a \", _jsx(_components.a, {\n            href: \"http://docs.oracle.com/javase/7/docs/api/java/lang/management/OperatingSystemMXBean.html\",\n            children: \"MXBean\"\n          }), \" to col­lect CPU load\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"a \", _jsx(Link, {\n            href: \"/docs/vertx-core/java/#_writing_http_servers_and_clients\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"HTTP server\"\n            })\n          }), \" (to serve the sta­tic re­sources and host our app)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"a \", _jsx(Link, {\n            href: \"/docs/vertx-web/java/#_sockjs\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"SockJS server\"\n            })\n          }), \" to pro­vide re­al­time up­dates\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"a SockJS to \", _jsx(Link, {\n            href: \"/docs/vertx-web/java/#_sockjs_event_bus_bridge\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"Event­Bus bridge\"\n            })\n          }), \" to pass mes­sages around\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"some \", _jsx(_components.a, {\n            href: \"http://d3js.org/\",\n            children: \"vi­su­al­iza­tion\"\n          }), \" JS li­brary\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"a bit of cod­ing\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To boot­strap this project we start by cre­at­ing the \", _jsx(_components.a, {\n          href: \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/pom.xml\",\n          children: \"pom.xml\"\n        }), \"\\nfile. A good start is al­ways to con­sult the \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-examples\",\n          children: \"ex­am­ples\"\n        }), \",\\nand you should end up with some­thing like:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [\"...\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx.blog\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"rpi\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"1.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependencies\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-core\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-web\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependencies\"\n            }), \">\"]\n          }), \"\\n...\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"At this mo­ment you can start cod­ing the ap­pli­ca­tion using the stan­dard maven source \", _jsx(_components.code, {\n          children: \"src/main/java\"\n        }), \" and re­source\\n\", _jsx(_components.code, {\n          children: \"src/main/resouces\"\n        }), \" lo­ca­tions. And add a the class \", _jsx(_components.a, {\n          href: \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/java/io/vertx/blog/RPiVerticle.java\",\n          children: \"io.vertx.blog.RpiVer­ti­cle\"\n        }), \"\\nto the project:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"RPiVerticle\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"AbstractVerticle\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" OperatingSystemMXBean osMBean;\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"try\"\n          }), \" {\\n      osMBean = ManagementFactory.newPlatformMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\\n          ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME, OperatingSystemMXBean.class);\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"catch\"\n          }), \" (IOException e) {\\n      \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"throw\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"RuntimeException\"\n          }), \"(e);\\n    }\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n\\n    router.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/eventbus/*\\\"\"\n          }), \").handler(SockJSHandler.create(vertx)\\n        .bridge(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"BridgeOptions\"\n          }), \"().addOutboundPermitted(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"PermittedOptions\"\n          }), \"().setAddress(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"load\\\"\"\n          }), \"))));\\n\\n    router.route().handler(StaticHandler.create());\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n\\n    vertx.setPeriodic(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1000\"\n          }), \", t -> vertx.eventBus().publish(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"load\\\"\"\n          }), \",\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"()\\n            .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"creatTime\\\"\"\n          }), \", System.currentTimeMillis())\\n            .put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"cpuTime\\\"\"\n          }), \", osMBean.getSystemLoadAverage())));\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So let’s go through the code, first in the sta­tic con­struc­tor we ini­tial­ize the \", _jsx(_components.code, {\n          children: \"MXBean\"\n        }), \" that will allow us to col­lect\\nthe cur­rent \", _jsx(_components.code, {\n          children: \"System Load Average\"\n        }), \", then on the \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method we cre­ate a \", _jsx(_components.code, {\n          children: \"Vert.x Web Router\"\n        }), \" and de­fine that for all\\nre­quests start­ing with \", _jsx(_components.code, {\n          children: \"/eventbus\"\n        }), \" should be han­dled by the SockJS server, which we then bridge to the Vert.x\\n\", _jsx(_components.code, {\n          children: \"EventBus\"\n        }), \" and allow out­bound mes­sages ad­dressed to the \", _jsx(_components.code, {\n          children: \"load\"\n        }), \" ad­dress.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Since our ap­pli­ca­tion is a web ap­pli­ca­tion we will also server some sta­tic con­tent with the \", _jsx(_components.code, {\n          children: \"StaticHandler\"\n        }), \" and we\\nfi­nally start a \", _jsx(_components.code, {\n          children: \"HTTP server\"\n        }), \" lis­ten­ing on port \", _jsx(_components.code, {\n          children: \"8080\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So now all we are miss­ing is a way to push real time data to the client so we end up cre­at­ing a \", _jsx(_components.code, {\n          children: \"Periodic\"\n        }), \" task that\\nre­peats every 1000 mil­lisec­onds and sends some \", _jsx(_components.code, {\n          children: \"JSON\"\n        }), \" pay­load to the ad­dress \", _jsx(_components.code, {\n          children: \"\\\"load\\\"\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you run this ap­pli­ca­tion right now you won’t see much since there is no fron­tend yet, so let’s build a very basic\\n\", _jsx(_components.a, {\n          href: \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/resources/webroot/index.html\",\n          children: \"index.html\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [\"...\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" eb = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" vertx.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"EventBus\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-variable hljs-language\",\n            children: \"window\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"location\"\n          }), \" + \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"eventbus\\\"\"\n          }), \");\\n\\neb.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"onopen\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-params\"\n          }), \") {\\n  eb.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"registerHandler\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"load\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"msg\"\n          }), \") {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (data.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"length\"\n          }), \" === \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"25\"\n          }), \") {\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// when length of data equal 25 then pop data[0]\"\n          }), \"\\n      data.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"shift\"\n          }), \"();\\n    }\\n    data.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"push\"\n          }), \"({\\n      \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"creatTime\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Date\"\n          }), \"(msg.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"creatTime\"\n          }), \"),\\n      \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"cpuTime\\\"\"\n          }), \": msg.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"cpuTime\"\n          }), \"\\n    });\\n    \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"render\"\n          }), \"();\\n  });\\n};\\n...\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s walk again the code, we start by open­ing a \", _jsx(_components.code, {\n          children: \"EventBus\"\n        }), \" bridge over \", _jsx(_components.code, {\n          children: \"SockJS\"\n        }), \" and reg­is­ter a han­dler \", _jsx(_components.code, {\n          children: \"data\"\n        }), \" to con­sume\\nmes­sages sent to that ad­dress. Once such a mes­sage ar­rives we do some house keep­ing to avoid fill­ing our browser mem­ory\\nand then add the in­com­ing mes­sage to the data queue and triger a ren­der­ing of the data. There is how­ever one in­ter­est­ing\\nissue here, since the mes­sage pay­load is \", _jsx(_components.code, {\n          children: \"JSON\"\n        }), \" there is no na­tive sup­port for \", _jsx(_components.code, {\n          children: \"Date\"\n        }), \" ob­jects so we need to do some\\npars­ing from what ar­rives from the server. In this case the server sends a sim­ple time since epoch num­ber, but one can\\nchoose any for­mat he likes.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"At this mo­ment you can build and pack­age your app like \", _jsx(_components.code, {\n          children: \"mvn clean package\"\n        }), \", then de­ploy it to your rasp­ber­rypi like:\\n\", _jsx(_components.code, {\n          children: \"scp target/rpi-1.0-fat.jar pi@raspberrypi:~/\"\n        }), \" and fi­nally run it: \", _jsx(_components.code, {\n          children: \"java -jar rpi-1.0-fat.jar\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Open a browser to \", _jsx(_components.a, {\n          href: \"http://raspberrypi:8080\",\n          children: \"see\"\n        }), \" the re­al­time graph!\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/images/blog/vertx3-web-easy-as-pi/rpi.png\",\n          alt: \"Screenshot\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x 3 init.d Script","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say you have a Vert.x 3 application you want to install on a Linux server. But you want the old school way (I mean not the Docker way)."},"date":"2015-07-02","slug":"vert-x-3-init-d-script"},"nextPost":{"meta":{"title":"Vert.x 2.1.6 released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"The Vert.x team is pleased to announce the release of Vert.x 2.1.6"},"date":"2015-06-30","slug":"vert-x-2-1-6-released"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"}]},"__N_SSG":true}