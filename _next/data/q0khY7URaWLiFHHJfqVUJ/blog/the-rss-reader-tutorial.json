{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"The RSS reader tutorial","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this tutorial, you will learn how to use the Eclipse Vert.x Cassandra client in practice. We will develop an RSS reader with three HTTP endpoints."},"date":"2018-08-20","slug":"the-rss-reader-tutorial","readingTime":{"text":"7 min read","minutes":6.18,"time":370800,"words":1236},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h2: \"h2\",\n      a: \"a\",\n      ul: \"ul\",\n      li: \"li\",\n      img: \"img\",\n      ol: \"ol\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      em: \"em\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"This tu­to­r­ial is ded­i­cated for users who’d like to know how to use the Eclipse Vert.x Cas­san­dra client in prac­tice.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"before-you-start-this-tutorial\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#before-you-start-this-tutorial\"\n        }), \"Before you start this tutorial\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Be­fore start­ing, you should\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"be fa­mil­iar with \", _jsx(Link, {\n              href: \"/\",\n              passHref: true,\n              children: _jsx(_components.a, {\n                href: \"\",\n                children: \"Eclipse Vert.x\"\n              })\n            }), \". If you are not, here is the \", _jsx(Link, {\n              href: \"/docs/guide-for-java-devs/\",\n              passHref: true,\n              children: _jsx(_components.a, {\n                href: \"\",\n                children: \"guide for Java de­vel­op­ers\"\n              })\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"have some basic un­der­stand­ing of data­bases. Ex­tended knowl­edge of Cas­san­dra is not re­quired.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You also may find it use­ful to read \", _jsx(_components.a, {\n          href: \"https://validator.w3.org/feed/docs/rss2.html\",\n          children: \"the RSS 2.0\"\n        }), \" spec­i­fi­ca­tion, be­cause the re­sulted app is, ba­si­cally, a stor­age of RSS 2.0 feeds.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To give you an idea of what the App is about, here is how it looks like from the fronted side:\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"https://i.imgur.com/2V954zx.png\",\n          alt: \"see how it looks\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In the image, we see that browser space is split into 2 parts:\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Saved feed names\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"List of ar­ti­cles for the se­lected feed\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here you also can enter a link to a new feed, so the App will fetch and parse the feed.\\nAfter that, it will ap­pear in the left col­umn along with other saved feeds.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"requirements\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#requirements\"\n        }), \"Requirements\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For com­plet­ing this tu­to­r­ial you need:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Java 8 or higher\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Git\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"1 hour of your time\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"You fa­vorite code ed­i­tor\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"For run­ning the ex­am­ple you should en­sure that Cas­san­dra ser­vice is run­ning lo­cally on port 9042.\\nAs an op­tion, you can run Cas­san­dra with \", _jsx(_components.a, {\n          href: \"https://github.com/riptano/ccm#installation\",\n          children: \"ccm\"\n        }), \"(Cas­san­dra Clus­ter Man­ager).\\nFol­low \", _jsx(_components.a, {\n          href: \"https://github.com/riptano/ccm#installation\",\n          children: \"this\"\n        }), \" in­struc­tions for in­stalling ccm.\\nAfter in­stalling you will be able to run a sin­gle node clus­ter:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-better-shell\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: \" ccm create rss_reader -v 3.11.2 -n 1 -s\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: \" ccm start\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Be­fore com­plet­ing this step make sure that you have suc­cess­fully cloned the RSS reader repos­i­tory and checked out the \", _jsx(_components.code, {\n          children: \"step_1\"\n        }), \" branch:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-better-shell\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsxs(_components.span, {\n            className: \"bash\",\n            children: [\" git \", _jsx(_components.span, {\n              className: \"hljs-built_in\",\n              children: \"clone\"\n            }), \" https://github.com/Sammers21/rss-reader\"]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsxs(_components.span, {\n            className: \"bash\",\n            children: [\" \", _jsx(_components.span, {\n              className: \"hljs-built_in\",\n              children: \"cd\"\n            }), \" rss-reader\"]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: \" git checkout step_1\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now you can try to tun this ex­am­ple and see if it works:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-better-shell\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: \" ./gradlew vertxRun\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"schema\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#schema\"\n        }), \"Schema\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you are fa­mil­iar with \", _jsx(_components.a, {\n          href: \"http://cassandra.apache.org/\",\n          children: \"Apache Cas­san­dra\"\n        }), \", you\\nshould know that the way your data is stored in Cas­san­dra is de­pen­dent on queries\\nyou are run­ning. It means that you need first to fig­ure out what kind of queries\\nyou will be run­ning, and then you can pro­duce a stor­age scheme.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In our case, we’d like our ap­pli­ca­tion to have 3 end­points:\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"POST /user/{user_id}/rss_link\"\n          }), \" - for adding links to a user’s feed\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"GET /user/{user_id}/rss_channels\"\n          }), \" - for re­triev­ing in­for­ma­tion about RSS chan­nels a user sub­scribed on\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"GET /articles/by_rss_link?link={rss_link}\"\n          }), \" - for re­triev­ing in­for­ma­tion about ar­ti­cles on a spe­cific RSS chan­nel\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For im­ple­ment­ing this end­points, the schema should look as fol­lows:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"CREATE\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"TABLE\"\n          }), \" rss_by_user (login text , rss_link text, \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"PRIMARY\"\n          }), \" KEY (login, rss_link));\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"CREATE\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"TABLE\"\n          }), \" articles_by_rss_link(rss_link text, pubDate \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"timestamp\"\n          }), \", title text, article_link text, description text, \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"PRIMARY\"\n          }), \" KEY ( rss_link , pubDate , article_link));\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"CREATE\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"TABLE\"\n          }), \" channel_info_by_rss_link(rss_link text, last_fetch_time \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"timestamp\"\n          }), \",title text, site_link text, description text, \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"PRIMARY\"\n          }), \" KEY(rss_link));\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"what-to-do-in-this-step\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#what-to-do-in-this-step\"\n        }), \"What to do in this step\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this step, we will im­ple­ment only the first end­point\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"project-overview\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#project-overview\"\n        }), \"Project overview\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"There are two no­table classes in the project: \", _jsx(_components.code, {\n          children: \"AppVerticle\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"FetchVerticle\"\n        }), \". The first one is a \", _jsx(Link, {\n          href: \"/docs/vertx-core/java/#_verticles\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Ver­ti­cle\"\n          })\n        }), \" re­spon­si­ble for HTTP re­quest han­dling and stor­age schema ini­tial­iza­tion. The sec­ond one is a \", _jsx(Link, {\n          href: \"/docs/vertx-core/java/#_verticles\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Ver­ti­cle\"\n          })\n        }), \" as well, but re­spon­si­ble for RSS feeds fetch­ing.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The idea is sim­ple. When the ap­pli­ca­tion is start­ing the \", _jsx(_components.code, {\n          children: \"AppVerticle\"\n        }), \" is de­ployed, then it tries to ini­tial­ize stor­age schema, de­scribed in \", _jsx(_components.code, {\n          children: \"src/main/resources/schema.cql\"\n        }), \" file by read­ing it and ex­e­cut­ing listed queries line by line. After the schema ini­tial­iza­tion the \", _jsx(_components.code, {\n          children: \"AppVerticle\"\n        }), \" de­ploys \", _jsx(_components.code, {\n          children: \"FetchVerticle\"\n        }), \" and starts a HTTP server.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"implementing-the-endpoint\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#implementing-the-endpoint\"\n        }), \"Implementing the endpoint\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now, it is time to im­ple­ment the first end­point. Pay at­ten­tion to \", _jsx(_components.code, {\n          children: \"TODO\"\n        }), \"s, they are for point­ing you out about where changes should be made.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now, let’s have a look at the \", _jsx(_components.code, {\n          children: \"AppVerticle#postRssLink\"\n        }), \" method. This method is called each time the first end­point is called, so we can fig­ure out what is the posted body and id of the user, who per­formed the re­quest, di­rectly there. There are 2 main things we want to do in this method:\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"No­ti­fy­ing via the \", _jsx(Link, {\n            href: \"/docs/vertx-core/java/#event_bus\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"Event Bus\"\n            })\n          }), \" the \", _jsx(_components.code, {\n            children: \"FetchVerticle\"\n          }), \" to fetch given by user link link to an RSS feed.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"In­sert­ing an entry to the \", _jsx(_components.code, {\n            children: \"rss_by_user\"\n          }), \" table.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This is how the \", _jsx(_components.code, {\n          children: \"AppVerticle#postRssLink\"\n        }), \" method should be im­ple­mented:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"postRssLink\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n    ctx.request().bodyHandler(body -> {\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"JsonObject\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"bodyAsJson\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" body.toJsonObject();\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"link\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" bodyAsJson.getString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"link\\\"\"\n          }), \");\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"userId\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ctx.request().getParam(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"user_id\\\"\"\n          }), \");\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (link == \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \" || userId == \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \") {\\n            responseWithInvalidRequest(ctx);\\n        } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n            vertx.eventBus().send(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"fetch.rss.link\\\"\"\n          }), \", link);\\n            Future<ResultSet> future = Future.future();\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"BoundStatement\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"query\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" insertNewLinkForUser.bind(userId, link);\\n            client.execute(query, future);\\n            future.setHandler(result -> {\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (result.succeeded()) {\\n                    ctx.response().end(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"message\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"The feed just added\\\"\"\n          }), \").toString());\\n                } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n                    ctx.response().setStatusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"400\"\n          }), \").end(result.cause().getMessage());\\n                }\\n            });\\n        }\\n    });\\n}\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"responseWithInvalidRequest\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext ctx)\"\n          }), \" {\\n    ctx.response()\\n            .setStatusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"400\"\n          }), \")\\n            .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json; charset=utf-8\\\"\"\n          }), \")\\n            .end(invalidRequest().toString());\\n}\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" JsonObject \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"invalidRequest\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"message\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Invalid request\\\"\"\n          }), \");\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You may no­tice that \", _jsx(_components.code, {\n          children: \"insertNewLinkForUser\"\n        }), \" is a \", _jsx(_components.code, {\n          children: \"PreparedStatement\"\n        }), \", and should be ini­tial­ized be­fore the \", _jsx(_components.code, {\n          children: \"AppVerticle\"\n        }), \" start. Let’s do it in the \", _jsx(_components.code, {\n          children: \"AppVerticle#prepareNecessaryQueries\"\n        }), \" method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Future<Void> \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"prepareNecessaryQueries\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();\\n    client.prepare(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);\\\"\"\n          }), \", insertNewLinkForUserPrepFuture);\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" insertNewLinkForUserPrepFuture.compose(preparedStatement -> {\\n        insertNewLinkForUser = preparedStatement;\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" Future.succeededFuture();\\n    });\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Also, we should not for­get to fetch a RSS by the link sent to \", _jsx(_components.code, {\n          children: \"FetchVerticle\"\n        }), \" via the Event Bus. We can do it in the \", _jsx(_components.code, {\n          children: \"FetchVerticle#startFetchEventBusConsumer\"\n        }), \" method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"vertx.eventBus().localConsumer(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"fetch.rss.link\\\"\"\n          }), \", message -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"rssLink\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" (String) message.body();\\n    log.info(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"fetching \\\"\"\n          }), \" + rssLink);\\n    webClient.getAbs(rssLink).send(response -> {\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (response.succeeded()) {\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"bodyAsString\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" response.result().bodyAsString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"UTF-8\\\"\"\n          }), \");\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"try\"\n          }), \" {\\n                \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RssChannel\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"rssChannel\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"RssChannel\"\n          }), \"(bodyAsString);\\n\\n                \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"BatchStatement\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"batchStatement\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"BatchStatement\"\n          }), \"();\\n                \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"BoundStatement\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"channelInfoInsertQuery\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" insertChannelInfo.bind(\\n                        rssLink, \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Date\"\n          }), \"(System.currentTimeMillis()), rssChannel.description, rssChannel.link, rssChannel.title\\n                );\\n                batchStatement.add(channelInfoInsertQuery);\\n\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \" (Article article : rssChannel.articles) {\\n                    batchStatement.add(insertArticleInfo.bind(rssLink, article.pubDate, article.link, article.description, article.title));\\n                }\\n                Future<ResultSet> insertArticlesFuture = Future.future();\\n                cassandraClient.execute(batchStatement, insertArticlesFuture);\\n\\n                insertArticlesFuture.compose(insertDone -> Future.succeededFuture());\\n            } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"catch\"\n          }), \" (Exception e) {\\n                log.error(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Unable to fetch: \\\"\"\n          }), \" + rssLink, e);\\n            }\\n        } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n            log.error(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Unable to fetch: \\\"\"\n          }), \" + rssLink);\\n        }\\n    });\\n});\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And, fi­nally, this code would not work if \", _jsx(_components.code, {\n          children: \"insertChannelInfo\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"insertArticleInfo\"\n        }), \" state­ments will not be ini­tial­ized at ver­ti­cle start. Let’s to this in the \", _jsx(_components.code, {\n          children: \"FetchVerticle#prepareNecessaryQueries\"\n        }), \" method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Future<Void> \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"prepareNecessaryQueries\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n        Future<PreparedStatement> insertChannelInfoPrepFuture = Future.future();\\n        cassandraClient.prepare(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"INSERT INTO channel_info_by_rss_link ( rss_link , last_fetch_time, description , site_link , title ) VALUES (?, ?, ?, ?, ?);\\\"\"\n          }), \", insertChannelInfoPrepFuture);\\n\\n        Future<PreparedStatement> insertArticleInfoPrepFuture = Future.future();\\n        cassandraClient.prepare(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"INSERT INTO articles_by_rss_link ( rss_link , pubdate , article_link , description , title ) VALUES ( ?, ?, ?, ?, ?);\\\"\"\n          }), \", insertArticleInfoPrepFuture);\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" CompositeFuture.all(\\n                insertChannelInfoPrepFuture.compose(preparedStatement -> {\\n                    insertChannelInfo = preparedStatement;\\n                    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" Future.succeededFuture();\\n                }), insertArticleInfoPrepFuture.compose(preparedStatement -> {\\n                    insertArticleInfo = preparedStatement;\\n                    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" Future.succeededFuture();\\n                })\\n        ).mapEmpty();\\n    }\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"observing\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#observing\"\n        }), \"Observing\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"After all these changes, you should en­sure that the first end­point is work­ing cor­rectly. You need to run the ap­pli­ca­tion, go to lo­cal­host:8080 in­sert a link to a rss feed there(\", _jsx(_components.a, {\n          href: \"http://feeds.bbci.co.uk/news/uk/rss.xml\",\n          children: \"BBC UK feed news\"\n        }), \" for ex­am­ple) and then click the \", _jsx(_components.em, {\n          children: \"ENTER\"\n        }), \" but­ton. Now you can con­nect to your local Cas­san­dra in­stance, for in­stance with \", _jsx(_components.a, {\n          href: \"https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlsh.html\",\n          children: \"cqlsh\"\n        }), \", and find out how RSS feed data had been saved in the rss_reader key­space:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [\"cqlsh\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SELECT\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"FROM\"\n          }), \" rss_reader.rss_by_user limit \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"  ;\\n\\n login \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"|\"\n          }), \" rss_link\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"-------+-----------------------------------------\"\n          }), \"\\n Pavel \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"|\"\n          }), \" http:\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"/\"\n          }), \"feeds.bbci.co.uk\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"/\"\n          }), \"news\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"/\"\n          }), \"uk\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"/\"\n          }), \"rss.xml\\n\\n(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"rows\"\n          }), \")\\ncqlsh\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SELECT\"\n          }), \" description \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"FROM\"\n          }), \" rss_reader.articles_by_rss_link  limit \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \";\\n\\n description\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"-------------------------------------\"\n          }), \"\\n BBC coverage \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"of\"\n          }), \" latest developments\\n\\n(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"rows\"\n          }), \")\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"conclusion\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#conclusion\"\n        }), \"Conclusion\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In this ar­ti­cle we fig­ured out how to im­ple­ment the first end­point of RSS-​reader app. If you have any prob­lems with com­plet­ing this step you can check­out to \", _jsx(_components.code, {\n          children: \"step_2\"\n        }), \", where you can find all changes made for com­plet­ing this step:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-better-shell\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"$\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: \" git checkout step_2\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Thanks for read­ing this. I hope you en­joyed read­ing this ar­ti­cle. See you soon on our \", _jsx(_components.a, {\n          href: \"https://gitter.im/eclipse-vertx/vertx-users\",\n          children: \"Git­ter chan­nel\"\n        }), \"!\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"The RSS reader tutorial (Step 2)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this second installment of our Vert.x Cassandra Client tutorial, we will add an endpoint that produces an array of RSS channels for a given user ID."},"date":"2018-09-05","slug":"the-rss-reader-tutorial-step-2"},"nextPost":{"meta":{"title":"Eclipse Vert.x 3.5.3","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have just released Vert.x 3.5.3, a bug fix release of Vert.x 3.5.x."},"date":"2018-07-13","slug":"eclipse-vert-x-3-5-3"},"relatedPosts":[{"meta":{"title":"The RSS reader tutorial (Step 2)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this second installment of our Vert.x Cassandra Client tutorial, we will add an endpoint that produces an array of RSS channels for a given user ID."},"date":"2018-09-05","slug":"the-rss-reader-tutorial-step-2"},{"meta":{"title":"Easy SSO for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn how to implement Single Sign-on with OpenID Connect and how to use Keycloak together with Eclipse Vert.x."},"date":"2020-03-16","slug":"easy-sso-for-vert-x-with-keycloak"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"}]},"__N_SSG":true}