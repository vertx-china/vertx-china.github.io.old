{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Eclipse Vert.x RabbitMQ client gets a new consumer API!","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this blog post, we present the new consumer API of the RabbitMQ client that will be released with Eclipse Vert.x 3.6.0."},"date":"2018-04-23","slug":"eclipse-vert-x-rabbitmq-client-gets-a-new-consumer-api","readingTime":{"text":"3 min read","minutes":2.245,"time":134700,"words":449},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      ol: \"ol\",\n      li: \"li\",\n      code: \"code\",\n      h2: \"h2\",\n      a: \"a\",\n      pre: \"pre\",\n      span: \"span\",\n      em: \"em\"\n    }, props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"In Eclipse Vert.x 3.6.0, the Rab­bitMQ client will get a new con­sumer API. In this post we are going to show\\nthe im­prove­ments since the pre­vi­ous API and how easy it is to use now.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Be­fore dig­ging into the new API let’s find out what were the lim­i­ta­tions of the ac­tual one:\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"The API uses the event bus in such lim­it­ing the con­trol of the con­sumer over the Rab­bitMQ queue.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The mes­sage API is based on \", _jsx(_components.code, {\n            children: \"JsonObject\"\n          }), \" which does not pro­vide a typed API\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"the-new-api-at-a-glance\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#the-new-api-at-a-glance\"\n        }), \"The new API at a glance\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here is how sim­ple queue con­sump­tion looks like with the new API:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RabbitMQClient\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"client\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" RabbitMQClient.create(vertx, \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"RabbitMQOptions\"\n          }), \"());\\n\\nclient.basicConsumer(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"my.queue\\\"\"\n          }), \", res -> {\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (res.succeeded()) {\\n    System.out.println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"RabbitMQ consumer created !\\\"\"\n          }), \");\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RabbitMQConsumer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"mqConsumer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" res.result();\\n    mqConsumer.handler((RabbitMQMessage message) -> {\\n        System.out.println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Got message: \\\"\"\n          }), \" + message.body().toString());\\n    });\\n  } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Oups something went wrong\"\n          }), \"\\n    res.cause().printStackTrace();\\n  }\\n});\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now to cre­ate a queue you sim­ply call the \", _jsx(_components.code, {\n          children: \"basicConsumer\"\n        }), \" method and you ob­tain asyn­chro­nously\\na \", _jsx(_components.code, {\n          children: \"RabbitMQConsumer\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then you need to pro­vide a han­dler called for each mes­sage con­sumed via \", _jsx(_components.em, {\n          children: \"Rab­bit­MQ­Con­sumer#han­dler\"\n        }), \" which\\nis the id­iomatic way to con­sumer stream in Vert.x\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You may also note that when we a mes­sage ar­rives, it has the type of \", _jsx(_components.code, {\n          children: \"RabbitMQMessage\"\n        }), \", this is a typed\\nmes­sage rep­re­sen­ta­tion.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Since \", _jsx(_components.code, {\n          children: \"RabbitMQConsumer\"\n        }), \" is a stream, you also al­lowed to \", _jsx(_components.code, {\n          children: \"pause\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"resume\"\n        }), \" the stream, sub­scribe to the\\nend event, get no­ti­fied when an ex­cep­tion oc­curs.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In ad­di­tion, you can can­cel the sub­scrip­tion by call­ing \", _jsx(_components.code, {\n          children: \"RabbitMQConsumer#cancel\"\n        }), \" method.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"backpressure\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#backpressure\"\n        }), \"Backpressure\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Some­times you can have more in­com­ing mes­sages than you can han­dle.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The new con­sumer API al­lows you to con­trol this and lets you store ar­rived mes­sages in the in­ter­nal queue\\nbe­fore they are de­liv­ered to the ap­pli­ca­tion. In­deed, you can con­fig­ure the queue size.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here is how you can limit the in­ter­nal queue size:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Limit to max 300 messages\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"QueueOptions\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"options\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"QueueOptions\"\n          }), \"()\\n  .setMaxInternalQueueSize(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"300\"\n          }), \");\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RabbitMQClient\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"client\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" RabbitMQClient.create(vertx, \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"RabbitMQOptions\"\n          }), \"());\\n\\nclient.basicConsumer(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"my.queue\\\"\"\n          }), \", options, res -> {\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (res.succeeded()) {\\n    System.out.println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"RabbitMQ consumer created !\\\"\"\n          }), \");\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RabbitMQConsumer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"mqConsumer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" res.result();\\n    mqConsumer.handler((RabbitMQMessage message) -> {\\n      System.out.println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Got message: \\\"\"\n          }), \" + message.body().toString());\\n    });\\n  } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n    res.cause().printStackTrace();\\n  }\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"When the in­ten­ral queue queue ca­pac­ity is ex­ceeded, the new mes­sage will be sim­ply dropped.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"An al­ter­na­tive op­tion is to drop the old­est mes­sage in the queue.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In order to achieve this, you should spec­ify the be­hav­ior by call­ing \", _jsx(_components.code, {\n          children: \"QueueOptions#setKeepMostRecent\"\n        }), \" method.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"finally\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#finally\"\n        }), \"Finally\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The new Vert.x Rab­bitMQ client con­sumer API is way more id­iomatic and mod­ern way to con­sume mes­sages from a queue.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This API is going to pro­vided in the 3.6.0 re­lease, while the old will be dep­re­cated.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I hope you en­joyed read­ing this ar­ti­cle. See you soon on our \", _jsx(_components.a, {\n          href: \"https://gitter.im/eclipse-vertx/vertx-users\",\n          children: \"Git­ter chan­nel\"\n        }), \"!\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"},"prevPost":{"meta":{"title":"Eclipse Vert.x goes Native","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"This blog post introduces native image generation of Vert.x applications with GraalVM. Generated executables can be run without a JVM."},"date":"2018-06-04","slug":"eclipse-vert-x-goes-native"},"nextPost":{"meta":{"title":"New community channels","category":"news","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"In order to better support the community, we (the core team and module maintainers) now also provide help on Stack Overflow and Gitter."},"date":"2018-04-13","slug":"new-community-channels"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}