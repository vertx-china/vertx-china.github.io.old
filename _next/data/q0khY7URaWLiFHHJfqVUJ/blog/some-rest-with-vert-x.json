{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x","readingTime":{"text":"12 min read","minutes":11.86,"time":711600,"words":2372},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      em: \"em\",\n      a: \"a\",\n      ul: \"ul\",\n      li: \"li\",\n      h2: \"h2\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      h3: \"h3\",\n      img: \"img\"\n    }, props.components), {Link, Alert} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"This post is part of the \", _jsx(_components.em, {\n          children: \"In­tro­duc­tion to Vert.x\"\n        }), \" se­ries. So, let’s have a quick look about the con­tent of the pre­vi­ous posts. In \", _jsx(Link, {\n          href: \"/blog/my-first-vert-x-3-application\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"the first post\"\n          })\n        }), \", we de­vel­oped a very sim­ple Vert.x 3 ap­pli­ca­tion, and saw how this ap­pli­ca­tion can be tested, pack­aged and ex­e­cuted. In \", _jsx(Link, {\n          href: \"/blog/vert-x-application-configuration\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"the last post\"\n          })\n        }), \", we saw how this ap­pli­ca­tion be­came con­fig­urable and how we can use a ran­dom port in test.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Well, noth­ing fancy… Let’s go a bit fur­ther this time and de­velop a \", _jsx(_components.em, {\n          children: \"CRUD-​ish\"\n        }), \" ap­pli­ca­tion. So an ap­pli­ca­tion ex­pos­ing an HTML page in­ter­act­ing with the back­end using a REST API. The level of \", _jsx(_components.em, {\n          children: \"REST­full­ness\"\n        }), \" of the API is not the topic of this post, I let you de­cide as it’s a very slip­pery topic.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, in other words we are going to see:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Vert.x Web - a frame­work that let you cre­ate Web ap­pli­ca­tions eas­ily using Vert.x\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"How to ex­pose sta­tic re­sources\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"How to de­velop a REST API\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The code de­vel­oped in this post is avail­able on the \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/tree/post-3\",\n          children: \"post-3\"\n        }), \" branch of this \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app\",\n          children: \"Github\"\n        }), \" project. We are going to start from the  \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/tree/post-2\",\n          children: \"post-2\"\n        }), \" code­base.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, let’s start.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"vertx-web\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#vertx-web\"\n        }), \"Vert.x Web\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you may have no­tices in the pre­vi­ous posts, deal­ing with com­plex HTTP ap­pli­ca­tion using only Vert.x Core would be kind of cum­ber­some. That’s the main rea­son be­hind \", _jsx(Link, {\n          href: \"/docs/vertx-web/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x Web\"\n          })\n        }), \". It makes the de­vel­op­ment of Vert.x base web ap­pli­ca­tions re­ally easy, with­out chang­ing the phi­los­o­phy.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To use Vert.x Web, you need to up­date the \", _jsx(_components.code, {\n          children: \"pom.xml\"\n        }), \" file to add the fol­low­ing de­pen­dency:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-web\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.0.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"That’s the only thing you need to use Vert.x Web. Sweet, no ?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s now use it. Re­mem­ber, in the pre­vi­ous post, when we re­quested \", _jsx(_components.a, {\n          href: \"http://localhost:8080\",\n          children: \"http://lo­cal­host:8080\"\n        }), \", we reply a nice \", _jsx(_components.em, {\n          children: \"Hello World\"\n        }), \" mes­sage. Let’s do the same with Vert.x Web.  Open the \", _jsx(_components.code, {\n          children: \"io.vertx.blog.first.MyFirstVerticle\"\n        }), \" class and change the \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method to be:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Future<Void> fut)\"\n          }), \" {\\n \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create a router object.\"\n          }), \"\\n \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n\\n \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Bind \\\"/\\\" to our hello message - so we are still compatible.\"\n          }), \"\\n router.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \").handler(routingContext -> {\\n   \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"HttpServerResponse\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"response\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" routingContext.response();\\n   response\\n       .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \")\\n       .end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Hello from my first Vert.x 3 application</h1>\\\"\"\n          }), \");\\n });\\n\\n \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create the HTTP server and pass the \\\"accept\\\" method to the request handler.\"\n          }), \"\\n vertx\\n     .createHttpServer()\\n     .requestHandler(router::accept)\\n     .listen(\\n         \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Retrieve the port from the configuration,\"\n          }), \"\\n         \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// default to 8080.\"\n          }), \"\\n         config().getInteger(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \"),\\n         result -> {\\n           \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (result.succeeded()) {\\n             fut.complete();\\n           } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n             fut.fail(result.cause());\\n           }\\n         }\\n     );\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You may be sur­prise by the length of this snip­pet (in com­par­i­son to the pre­vi­ous code). But as we are going to see, it will make our app on steroids, just be pa­tient.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you can see, we start by cre­at­ing a \", _jsx(_components.code, {\n          children: \"Router\"\n        }), \" ob­ject. The router is the cor­ner­stone of Vert.x Web. This ob­ject is re­spon­si­ble for dis­patch­ing the HTTP re­quests to the right \", _jsx(_components.em, {\n          children: \"han­dler\"\n        }), \". Two other con­cepts are very im­por­tant in Vert.x Web:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Routes - which let you de­fine how re­quest are dis­patched\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Han­dlers - which are the ac­tual ac­tion pro­cess­ing the re­quests and writ­ing the re­sult. Han­dlers can be chained.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you un­der­stand these 3 con­cepts, you have un­der­stood every­thing in Vert.x Web.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s focus on this code first:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"router.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \").handler(routingContext -> {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"HttpServerResponse\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"response\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" routingContext.response();\\n  response\\n      .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \")\\n      .end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Hello from my first Vert.x 3 application</h1>\\\"\"\n          }), \");\\n});\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It \", _jsx(_components.em, {\n          children: \"routes\"\n        }), \" re­quests ar­riv­ing on ”/” to the given \", _jsx(_components.em, {\n          children: \"han­dler\"\n        }), \". Han­dlers re­ceive a \", _jsx(_components.code, {\n          children: \"RoutingContext\"\n        }), \" ob­ject. This han­dler is quite sim­i­lar to the code we had be­fore, and it’s quite nor­mal as it ma­nip­u­lates the same type of ob­ject: \", _jsx(_components.code, {\n          children: \"HttpServerResponse\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s now have a look to the rest of the code:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"vertx\\n    .createHttpServer()\\n    .requestHandler(router::accept)\\n    .listen(\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Retrieve the port from the configuration,\"\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// default to 8080.\"\n          }), \"\\n        config().getInteger(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \"),\\n        result -> {\\n          \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (result.succeeded()) {\\n            fut.complete();\\n          } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n            fut.fail(result.cause());\\n          }\\n        }\\n    );\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It’s ba­si­cally the same code as be­fore, ex­cept that we change the re­quest han­dler. We pass \", _jsx(_components.code, {\n          children: \"router::accept\"\n        }), \" to the han­dler. You may not be fa­mil­iar with this no­ta­tion. It’s a ref­er­ence to a method (here the method \", _jsx(_components.code, {\n          children: \"accept\"\n        }), \" from the \", _jsx(_components.code, {\n          children: \"router\"\n        }), \" ob­ject). In other worlds, it in­structs vert.x to call the \", _jsx(_components.code, {\n          children: \"accept\"\n        }), \" method of the \", _jsx(_components.code, {\n          children: \"router\"\n        }), \" when it re­ceives a re­quest.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s try to see if this work:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"By open­ing \", _jsx(_components.code, {\n          children: \"http://localhost:8080\"\n        }), \" in your browser you should see the \", _jsx(_components.em, {\n          children: \"Hello\"\n        }), \" mes­sage. As we didn’t change the be­hav­ior of the ap­pli­ca­tion, our tests are still valid.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"exposing-static-resources\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#exposing-static-resources\"\n        }), \"Exposing static resources\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ok, so we have a first ap­pli­ca­tion using vert.x web. Let’s see some of the ben­e­fits. Let’s start with serv­ing sta­tic re­sources, such as an \", _jsx(_components.code, {\n          children: \"index.html\"\n        }), \" page. Be­fore we go fur­ther, I should start with a dis­claimer: “the HTML page we are going to see here is ugly like hell : I’m not a UI guy”. I should also add that there are prob­a­bly plenty of bet­ter ways to im­ple­ment this and a myr­iad of frame­works I should try, but that’s not the point. I tried to keep things sim­ple and just re­ly­ing on JQuery and Twit­ter Boot­strap, so if you know a bit of JavaScript you can un­der­stand and edit the page.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s cre­ate the HTML page that will be the entry point of our ap­pli­ca­tion. Cre­ate an \", _jsx(_components.code, {\n          children: \"index.html\"\n        }), \" page in \", _jsx(_components.code, {\n          children: \"src/main/resources/assets\"\n        }), \" with the con­tent from \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/blob/post-3/src/main/resources/assets/index.html\",\n          children: \"here\"\n        }), \". As it’s just a HTML page with a bit of JavaScript, we won’t de­tail the file here. If you have ques­tions, just post com­ments.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ba­si­cally, the page is a sim­ple \", _jsx(_components.em, {\n          children: \"CRUD\"\n        }), \" UI to man­age my col­lec­tion of \", _jsx(_components.em, {\n          children: \"not-​yet-finished\"\n        }), \" bot­tles of Whisky. It was made in a generic way, so you can trans­pose it to your own col­lec­tion. The list of prod­uct is dis­played in the main table. You can cre­ate a new prod­uct, edit one or delete one. These ac­tions are re­ly­ing on a REST API (that we are going to im­ple­ment) through AJAX calls. That’s all.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Once this page is cre­ated, edit the \", _jsx(_components.code, {\n          children: \"io.vertx.blog.first.MyFirstVerticle\"\n        }), \" class and change the \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method to be:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Future<Void> fut)\"\n          }), \" {\\n \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n router.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \").handler(routingContext -> {\\n   \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"HttpServerResponse\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"response\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" routingContext.response();\\n   response\\n       .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/html\\\"\"\n          }), \")\\n       .end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"<h1>Hello from my first Vert.x 3 application</h1>\\\"\"\n          }), \");\\n });\\n\\n \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Serve static resources from the /assets directory\"\n          }), \"\\n router.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/assets/*\\\"\"\n          }), \").handler(StaticHandler.create(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"assets\\\"\"\n          }), \"));\\n\\n vertx\\n     .createHttpServer()\\n     .requestHandler(router::accept)\\n     .listen(\\n         \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Retrieve the port from the configuration,\"\n          }), \"\\n         \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// default to 8080.\"\n          }), \"\\n         config().getInteger(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"http.port\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \"),\\n         result -> {\\n           \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (result.succeeded()) {\\n             fut.complete();\\n           } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n             fut.fail(result.cause());\\n           }\\n         }\\n     );\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The only dif­fer­ence with the pre­vi­ous code is the \", _jsx(_components.code, {\n          children: \"router.route(\\\"/assets/*\\\").handler(StaticHandler.create(\\\"assets\\\"));\"\n        }), \" line. So, what does this line mean? It’s ac­tu­ally quite sim­ple. It \", _jsx(_components.em, {\n          children: \"routes\"\n        }), \" re­quests on “/as­sets/*” to re­sources stored in the “as­sets” di­rec­tory. So our \", _jsx(_components.code, {\n          children: \"index.html\"\n        }), \" page is going to be served using \", _jsx(_components.code, {\n          children: \"http://localhost:8080/assets/index.html\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Be­fore test­ing this, let’s take a few sec­onds on the han­dler cre­ation. All pro­cess­ing ac­tions in Vert.x web are im­ple­mented as \", _jsx(_components.em, {\n          children: \"han­dler\"\n        }), \". To cre­ate a han­dler you al­ways call the \", _jsx(_components.code, {\n          children: \"create\"\n        }), \" method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So, I’m sure you are im­pa­tient to see our beau­ti­ful HTML page. Let’s build and run the ap­pli­ca­tion:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now, open your browser to \", _jsx(_components.code, {\n          children: \"http://localhost:8080/assets/index.html\"\n        }), \". Here it is… Ugly right? I told you.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As you may no­tice too… the table is empty, this is be­cause we didn’t im­ple­ment the REST API yet. Let’s do that now.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"rest-api-with-vertx-web\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#rest-api-with-vertx-web\"\n        }), \"REST API with Vert.x Web\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Vert.x Web makes the im­ple­men­ta­tion of REST API re­ally easy, as it ba­si­cally \", _jsx(_components.em, {\n          children: \"routes\"\n        }), \" your URL to the right han­dler. The API is very sim­ple, and will be struc­tured as fol­lows:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"GET /api/whiskies\"\n          }), \" => get all bot­tles (\", _jsx(_components.code, {\n            children: \"getAll\"\n          }), \")\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"GET /api/whiskies/:id\"\n          }), \" => get the bot­tle with the cor­re­spond­ing id (\", _jsx(_components.code, {\n            children: \"getOne\"\n          }), \")\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"POST /api/whiskies\"\n          }), \" => add a new bot­tle (\", _jsx(_components.code, {\n            children: \"addOne\"\n          }), \")\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"PUT /api/whiskies/:id\"\n          }), \" => up­date a bot­tle (\", _jsx(_components.code, {\n            children: \"updateOne\"\n          }), \")\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"DELETE /api/whiskies/id\"\n          }), \" => delete a bot­tle (\", _jsx(_components.code, {\n            children: \"deleteOne\"\n          }), \")\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"we-need-some-data\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#we-need-some-data\"\n        }), \"We need some data…\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"But be­fore going fur­ther, let’s cre­ate our \", _jsx(_components.em, {\n          children: \"data\"\n        }), \" ob­ject. Cre­ate the \", _jsx(_components.code, {\n          children: \"src/main/java/io/vertx/blog/first/Whisky.java\"\n        }), \" with the fol­low­ing con­tent:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" io.vertx.blog.first;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.concurrent.atomic.AtomicInteger;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Whisky\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"AtomicInteger\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"COUNTER\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"AtomicInteger\"\n          }), \"();\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" id;\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" String name;\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" String origin;\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"Whisky\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(String name, String origin)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".id = COUNTER.getAndIncrement();\\n    \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".name = name;\\n    \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".origin = origin;\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"Whisky\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".id = COUNTER.getAndIncrement();\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" String \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getName\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" name;\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" String \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getOrigin\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" origin;\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getId\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" id;\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"setName\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(String name)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".name = name;\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"setOrigin\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(String origin)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".origin = origin;\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It’s a very sim­ple \", _jsx(_components.em, {\n          children: \"bean\"\n        }), \" class (so with get­ters and set­ters). We choose this for­mat be­cause Vert.x is re­ly­ing on \", _jsx(_components.a, {\n          href: \"http://wiki.fasterxml.com/JacksonHome\",\n          children: \"Jack­son\"\n        }), \" to han­dle the JSON for­mat. Jack­son au­to­mates the se­ri­al­iza­tion and de­se­ri­al­iza­tion of \", _jsx(_components.em, {\n          children: \"bean\"\n        }), \" classes, mak­ing our code much sim­pler.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now, let’s cre­ate a cou­ple of bot­tles. In the \", _jsx(_components.code, {\n          children: \"MyFirstVerticle\"\n        }), \" class, add the fol­low­ing code:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Store our product\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Map<Integer, Whisky> products = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"LinkedHashMap\"\n          }), \"<>();\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create some product\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createSomeData\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"bowmore\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Whisky\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Bowmore 15 Years Laimrig\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Scotland, Islay\\\"\"\n          }), \");\\n  products.put(bowmore.getId(), bowmore);\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"talisker\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Whisky\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Talisker 57° North\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Scotland, Island\\\"\"\n          }), \");\\n  products.put(talisker.getId(), talisker);\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then, in the \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method, call the \", _jsx(_components.code, {\n          children: \"createSomeData\"\n        }), \" method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Future<Void> fut)\"\n          }), \" {\\n\\n  createSomeData();\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create a router object.\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Router.router(vertx);\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Rest of the method\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you have no­ticed, we don’t re­ally have a \", _jsx(_components.em, {\n          children: \"back­end\"\n        }), \" here, it’s just a (in-​memory) map. Adding a back­end will be cov­ered by an­other post.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"get-our-products\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#get-our-products\"\n        }), \"Get our products\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Enough dec­o­ra­tion, let’s im­ple­ment the REST API. We are going to start with \", _jsx(_components.code, {\n          children: \"GET /api/whiskies\"\n        }), \". It re­turns the list of bot­tles in a JSON Array.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method, add this line just below the sta­tic han­dler line:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"router.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies\\\"\"\n          }), \").handler(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"::getAll);\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This line in­structs the \", _jsx(_components.code, {\n          children: \"router\"\n        }), \" to han­dle the \", _jsx(_components.code, {\n          children: \"GET\"\n        }), \" re­quests on “/api/whiskies” by call­ing the \", _jsx(_components.code, {\n          children: \"getAll\"\n        }), \" method. We could have in­lined the han­dler code, but for clar­ity rea­sons let’s cre­ate an­other  method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getAll\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext routingContext)\"\n          }), \" {\\n  routingContext.response()\\n      .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json; charset=utf-8\\\"\"\n          }), \")\\n      .end(Json.encodePrettily(products.values()));\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As every \", _jsx(_components.em, {\n          children: \"han­dler\"\n        }), \" our method re­ceives a \", _jsx(_components.code, {\n          children: \"RoutingContext\"\n        }), \". It pop­u­lates the \", _jsx(_components.code, {\n          children: \"response\"\n        }), \" by set­ting the \", _jsx(_components.code, {\n          children: \"content-type\"\n        }), \" and the ac­tual con­tent. Be­cause our con­tent may con­tain \", _jsx(_components.em, {\n          children: \"weird\"\n        }), \" char­ac­ters, we force the charset to UTF-8. To cre­ate the ac­tual con­tent, no need to com­pute the JSON string our­self. Vert.x lets us use the \", _jsx(_components.code, {\n          children: \"Json\"\n        }), \" API. So \", _jsx(_components.code, {\n          children: \"Json.encodePrettily(products.values())\"\n        }), \" com­putes the JSON string rep­re­sent­ing the set of bot­tles.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We could have used \", _jsx(_components.code, {\n          children: \"Json.encodePrettily(products)\"\n        }), \", but to make the JavaScript code sim­pler, we just re­turn the set of bot­tles and not an ob­ject con­tain­ing \", _jsx(_components.code, {\n          children: \"ID => Bottle\"\n        }), \" en­tries.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"With this in place, we should be able to re­trieve the set of bot­tle from our HTML page. Let’s try it:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then open the HTML page in your browser (\", _jsx(_components.code, {\n          children: \"http://localhost:8080/assets/index.html\"\n        }), \"), and should should see:\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/images/blog/intro-series/post-3-My_Whisky_Collection.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I’m sure you are cu­ri­ous, and want to ac­tu­ally see what is re­turned by our REST API. Let’s open a browser to \", _jsx(_components.code, {\n          children: \"http://localhost:8080/api/whiskies\"\n        }), \". You should get:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-css\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-selector-attr\",\n            children: [\"[ {  \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"id\\\"\"\n            }), \" : 0,  \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"name\\\"\"\n            }), \" : \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Bowmore 15 Years Laimrig\\\"\"\n            }), \",  \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"origin\\\"\"\n            }), \" : \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Scotland, Islay\\\"\"\n            }), \"}, {  \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"id\\\"\"\n            }), \" : 1,  \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"name\\\"\"\n            }), \" : \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Talisker 57° North\\\"\"\n            }), \",  \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"origin\\\"\"\n            }), \" : \", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"Scotland, Island\\\"\"\n            }), \"} ]\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"create-a-product\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#create-a-product\"\n        }), \"Create a product\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now we can re­trieve the set of bot­tles, let’s cre­ate a new one. Un­like the pre­vi­ous REST API end­point, this one need to read the re­quest’s body. For per­for­mance rea­son, it should be ex­plic­itly en­abled. Don’t be scared… it’s just a han­dler.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method, add these lines just below the line end­ing by \", _jsx(_components.code, {\n          children: \"getAll\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"router.route(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies*\\\"\"\n          }), \").handler(BodyHandler.create());\\nrouter.post(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies\\\"\"\n          }), \").handler(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"::addOne);\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The first line en­ables the read­ing of the re­quest body for all routes under “/api/whiskies”. We could have en­abled it glob­ally with \", _jsx(_components.code, {\n          children: \"router.route().handler(BodyHandler.create())\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The sec­ond line maps \", _jsx(_components.code, {\n          children: \"POST\"\n        }), \" re­quests on \", _jsx(_components.code, {\n          children: \"/api/whiskies\"\n        }), \" to the \", _jsx(_components.code, {\n          children: \"addOne\"\n        }), \" method. Let’s cre­ate this method:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"addOne\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext routingContext)\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"whisky\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Json.decodeValue(routingContext.getBodyAsString(),\\n      Whisky.class);\\n  products.put(whisky.getId(), whisky);\\n  routingContext.response()\\n      .setStatusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"201\"\n          }), \")\\n      .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json; charset=utf-8\\\"\"\n          }), \")\\n      .end(Json.encodePrettily(whisky));\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The method starts by re­triev­ing the \", _jsx(_components.code, {\n          children: \"Whisky\"\n        }), \" ob­ject from the re­quest body. It just reads the body into a String and passes it to the \", _jsx(_components.code, {\n          children: \"Json.decodeValue\"\n        }), \" method. Once cre­ated it adds it to the \", _jsx(_components.em, {\n          children: \"back­end\"\n        }), \" map and re­turns the cre­ated bot­tle as JSON.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s try this. Re­build and restart the ap­pli­ca­tion with:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-perl\",\n          children: [\"mvn clean \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \"\\njava -jar target/\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"my\"\n          }), \"-first-app-\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1.0\"\n          }), \"-SNAPSHOT-fat.jar\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then, re­fresh the HTML page and click on the \", _jsx(_components.code, {\n          children: \"Add a new bottle\"\n        }), \" but­ton. Enter the data such as: “Jame­son” as name and “Ire­land” as ori­gin (purists would have no­ticed that this is ac­tu­ally a Whiskey and not a Whisky). The bot­tle should be added to the table.\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"Status 201?\",\n        children: _jsxs(_components.p, {\n          children: [\"As you can see, we have set the re­sponse sta­tus to \", _jsx(_components.code, {\n            children: \"201\"\n          }), \". It means \", _jsx(_components.code, {\n            children: \"CREATED\"\n          }), \", and is the gen­er­ally used in REST API that cre­ate an en­tity. By de­fault vert.x web is set­ting the sta­tus to \", _jsx(_components.code, {\n            children: \"200\"\n          }), \" mean­ing \", _jsx(_components.code, {\n            children: \"OK\"\n          }), \".\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"finishing-a-bottle\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#finishing-a-bottle\"\n        }), \"Finishing a bottle\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Well, bot­tles do not last for­ever, so we should be able to delete a bot­tle. In the \", _jsx(_components.code, {\n          children: \"start\"\n        }), \" method, add this line:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"router.delete(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/api/whiskies/:id\\\"\"\n          }), \").handler(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"::deleteOne);\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the URL, we de­fine a \", _jsx(_components.em, {\n          children: \"path pa­ra­me­ter\"\n        }), \" \", _jsx(_components.code, {\n          children: \":id\"\n        }), \". So, when han­dling a match­ing re­quest, Vert.x ex­tracts the path seg­ment cor­re­spond­ing to the pa­ra­me­ter and let us ac­cess it in the han­dler method. For in­stance, \", _jsx(_components.code, {\n          children: \"/api/whiskies/0\"\n        }), \" maps \", _jsx(_components.code, {\n          children: \"id\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"0\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s see how the pa­ra­me­ter can be used in the han­dler method. Cre­ate the \", _jsx(_components.code, {\n          children: \"deleteOne\"\n        }), \" method as fol­lows:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"deleteOne\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(RoutingContext routingContext)\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"id\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" routingContext.request().getParam(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"id\\\"\"\n          }), \");\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (id == \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \") {\\n    routingContext.response().setStatusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"400\"\n          }), \").end();\\n  } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Integer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"idAsInteger\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Integer.valueOf(id);\\n    products.remove(idAsInteger);\\n  }\\n  routingContext.response().setStatusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"204\"\n          }), \").end();\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.em, {\n          children: \"path pa­ra­me­ter\"\n        }), \" is re­trieved using \", _jsx(_components.code, {\n          children: \"routingContext.request().getParam(\\\"id\\\")\"\n        }), \".  It checks whether it’s \", _jsx(_components.code, {\n          children: \"null\"\n        }), \" (not set), and in this case re­turns a \", _jsx(_components.code, {\n          children: \"Bad Request\"\n        }), \" re­sponse (sta­tus code 400). Oth­er­wise, it re­moves it from the \", _jsx(_components.em, {\n          children: \"back­end\"\n        }), \" map.\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"Status 204?\",\n        children: _jsxs(_components.p, {\n          children: [\"As you can see, we have set the re­sponse sta­tus to \", _jsx(_components.code, {\n            children: \"204 - NO CONTENT\"\n          }), \". Re­sponse to the HTTP Verb \", _jsx(_components.code, {\n            children: \"delete\"\n          }), \" have gen­er­ally no con­tent.\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"the-other-methods\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#the-other-methods\"\n        }), \"The other methods\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We won’t de­tail \", _jsx(_components.code, {\n          children: \"getOne\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"updateOne\"\n        }), \" as the im­ple­men­ta­tions are straight­for­ward and very sim­i­lar. Their im­ple­men­ta­tions are avail­able on \", _jsx(_components.a, {\n          href: \"https://github.com/cescoffier/my-vertx-first-app/blob/post-3/src/main/java/io/vertx/blog/first/MyFirstVerticle.java\",\n          children: \"GitHub\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"cheers\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#cheers\"\n        }), \"Cheers!\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"It’s time to con­clude this post. We have seen how Vert.x Web lets you im­ple­ment a REST API eas­ily and how it can serve sta­tic re­sources. A bit more fancy than be­fore, but still pretty easy.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(Link, {\n          href: \"/blog/unit-and-integration-tests/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"In the next post\"\n          })\n        }), \", we are going to im­prove our tests to cover the REST API.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Say Tuned & Happy Cod­ing !\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},"nextPost":{"meta":{"title":"Vert.x Application Configuration","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"In our previous post, we developed a very simple Vert.x 3 application, and saw how this application can be tested, packaged and executed. That was nice, wasn’t it?"},"date":"2015-07-20","slug":"vert-x-application-configuration"},"relatedPosts":[{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"}]},"__N_SSG":true}