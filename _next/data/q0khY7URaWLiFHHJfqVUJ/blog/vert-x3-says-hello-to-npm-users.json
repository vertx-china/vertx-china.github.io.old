{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Vert.x 3 says “hello” to NPM users","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"In programming literature it has become the standard to create a hello world program as the first example. In this article, I'll demonstrate how NPM users can quickly get started with Vert.x."},"date":"2015-07-13","slug":"vert-x3-says-hello-to-npm-users","readingTime":{"text":"4 min read","minutes":3.375,"time":202500,"words":675},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      h2: \"h2\",\n      a: \"a\",\n      pre: \"pre\",\n      span: \"span\",\n      ul: \"ul\",\n      li: \"li\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"In pro­gram­ming lit­er­a­ture it has be­come the stan­dard to cre­ate a hello world pro­gram as the first ex­am­ple. In this\\nar­ti­cle, I’ll be demon­strat­ing how \", _jsx(_components.code, {\n          children: \"NPM\"\n        }), \" users can quickly get started with \", _jsx(_components.code, {\n          children: \"vert.x\"\n        }), \". You will see that it is not\\nthat dif­fer­ent and in fact it can be done using the tools you’re used to. Note that al­though we are using \", _jsx(_components.code, {\n          children: \"NPM\"\n        }), \" we are\\nnot re­ly­ing on \", _jsx(_components.code, {\n          children: \"node.js\"\n        }), \", all \", _jsx(_components.code, {\n          children: \"javascript\"\n        }), \" code runs on the \", _jsx(_components.code, {\n          children: \"JVM\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"hello-world-examples\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#hello-world-examples\"\n        }), \"Hello World Examples\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here are four sim­ple hello world ex­am­ples. The com­ments in the code ex­plain how the code works and the text around it\\nex­plain what it does and how to test it.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"hello-console\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#hello-console\"\n        }), \"Hello Console\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This ex­am­ple is about as plain as it can get. It prints the words ”\", _jsx(_components.code, {\n          children: \"Hello World\"\n        }), \"” to the ter­mi­nal. If you’re a\\njavascript de­vel­oper you should be al­ready used to \", _jsx(_components.code, {\n          children: \"npm\"\n        }), \" and know that you al­ways start a project with the file\\n\", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [\"{\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx3-hello-console\\\"\"\n          }), \",\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"private\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \",\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"dependencies\\\"\"\n          }), \": {\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx3-min\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"3.0.0-1\\\"\"\n          }), \"\\n  },\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"scripts\\\"\"\n          }), \": {\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"start\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"./node_modules/.bin/vertx run server.js\\\"\"\n          }), \"\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we have a de­pen­dency wich is ob­vi­ous \", _jsx(_components.code, {\n          children: \"vert.x\"\n        }), \" now note that there are 3 flavours of this de­pen­dency:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://www.npmjs.com/package/vertx3-min\",\n            children: \"min\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://www.npmjs.com/package/vertx3-base\",\n            children: \"base\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://www.npmjs.com/package/vertx3-full\",\n            children: \"full\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Ac­cord­ing to your needs you can pick a dif­fer­ent flavour, since for a sim­ple hello world we only need the min­i­mal that\\nis the one we add to the de­pen­dency prop­erty.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now we need to do a sim­ple hello app, we will call this file ”\", _jsx(_components.code, {\n          children: \"server.js\"\n        }), \"“:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Call the console.log function.\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-variable hljs-language\",\n            children: \"console\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"log\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello World\\\"\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You can run this by ex­e­cut­ing:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-bash\",\n          children: \"npm install\\nnpm start\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The first com­mand re­trieve the vert.x stack while the sec­onds starts your pro­gram.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"hello-http\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#hello-http\"\n        }), \"Hello HTTP\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I’d guess that while it’s not the only use case for \", _jsx(_components.code, {\n          children: \"vert.x\"\n        }), \", most peo­ple are using it as a web ap­pli­ca­tion plat­form. So\\nthe next ex­am­ple will be a sim­ple HTTP server that re­sponds to every re­quest with the plain text mes­sage ”\", _jsx(_components.code, {\n          children: \"Hello World\"\n        }), \"”\\n\", _jsx(_components.code, {\n          children: \"server.js\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [\"vertx.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createHttpServer\"\n          }), \"()\\n  .\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"requestHandler\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"req\"\n          }), \") {\\n    req.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"response\"\n          }), \"()\\n      .\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"putHeader\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/plain\\\"\"\n          }), \")\\n      .\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"end\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello World!\\\"\"\n          }), \");\\n}).\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"listen\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now you can reuse the same \", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \" we’ve just de­fined in the pre­vi­ous sec­tion and start the server with\\n\", _jsx(_components.code, {\n          children: \"npm start\"\n        }), \". Once the server starts you can open a browser to \", _jsx(_components.code, {\n          children: \"http://localhost:8080\"\n        }), \" and enjoy the mes­sage.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"hello-tcp\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#hello-tcp\"\n        }), \"Hello TCP\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Vert.x\"\n        }), \" also makes an ex­cel­lent TCP server, and here is an ex­am­ple that re­sponds to all TCP con­nec­tions with the\\nmes­sage “Hello World” and then closes the con­nec­tion \", _jsx(_components.code, {\n          children: \"server.js\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" server = vertx.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createNetServer\"\n          }), \"();\\nserver.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"connectHandler\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"socket\"\n          }), \") {\\n  socket.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"write\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello World!\\\\n\\\"\"\n          }), \");\\n  socket.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"close\"\n          }), \"();\\n});\\n\\nserver.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"listen\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"7000\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Again reuse the pre­vi­ous \", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \" and test it by doing \", _jsx(_components.code, {\n          children: \"telnet localhost 7000\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"hello-web\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#hello-web\"\n        }), \"Hello Web\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Often you won’t be using \", _jsx(_components.code, {\n          children: \"vert.x\"\n        }), \" built-​in li­braries be­cause they are de­signed to be very low level. This makes \", _jsx(_components.code, {\n          children: \"vert.x\"\n        }), \"\\nquick, nim­ble, and easy to main­tain, but if you are plan­ning to build a com­plex ap­pli­ca­tion you want some pro­duc­tiv­ity\\nand rely on a sim­ple web frame­work. For this spe­cific case there is \", _jsx(_components.code, {\n          children: \"vert.x web\"\n        }), \",\\n\", _jsx(Link, {\n          href: \"/docs/#web\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"a sim­ple, yet pro­duc­tive frame­work\"\n          })\n        }), \", to build fast web ap­pli­ca­tion with rout­ing, tem­plate\\nren­der­ing, lots of mid­dle­ware etc…usu­ally not enough to get started on a real world ap­pli­ca­tion. This ex­am­ple shows an\\nHTTP server that re­sponds with “Hello World” to all re­quests to ”/” and re­sponds with a 404 error to every­thing else\\n\", _jsx(_components.code, {\n          children: \"server.js\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Router\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"require\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx-web-js/router\\\"\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" server = vertx.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"createHttpServer\"\n          }), \"();\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" router = \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Router\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"router\"\n          }), \"(vertx);\\n\\nrouter.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"get\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \").\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"handler\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"function\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"ctx\"\n          }), \") {\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// This handler will be called for \\\"/\\\" requests\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" response = ctx.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"response\"\n          }), \"();\\n  response.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"putHeader\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"text/plain\\\"\"\n          }), \");\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Write to the response and end it\"\n          }), \"\\n  response.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"end\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello World!\\\"\"\n          }), \");\\n});\\n\\nserver.\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"requestHandler\"\n          }), \"(router.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"accept\"\n          }), \").\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"listen\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In order to test this, you will need to in­stall the \", _jsx(_components.code, {\n          children: \"vertx3-full\"\n        }), \" stack. There are two ways to do this. You can ei­ther\\nin­stall it glob­ally \", _jsx(_components.code, {\n          children: \"npm install -g vertx3-full\"\n        }), \" or add it as a de­pen­dency to our \", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \" as we have done be­fore,\\nfor ex­am­ple \", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-javascript\",\n          children: [\"{\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx3-hello-web\\\"\"\n          }), \",\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"private\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \",\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"dependencies\\\"\"\n          }), \": {\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"vertx3-full\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"3.0.0-1\\\"\"\n          }), \"\\n  },\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"scripts\\\"\"\n          }), \": {\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"start\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"./node_modules/.bin/vertx run server.js\\\"\"\n          }), \"\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"That’s it for now. Hope­fully this will help you get started work­ing with \", _jsx(_components.code, {\n          children: \"vert.x\"\n        }), \"!\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},"nextPost":{"meta":{"title":"Checklist for Migrating from Vert.x 2.1.x to Vert.x 3 - Part One","category":"guides","authors":[{"name":"Mark Spritzler","github_id":"bytor99999"}],"summary":"So while upgrading our application, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major upgrade from the previous version, with so many changes."},"date":"2015-07-06","slug":"checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Checklist for Migrating from Vert.x 2.1.x to Vert.x 3 - Part One","category":"guides","authors":[{"name":"Mark Spritzler","github_id":"bytor99999"}],"summary":"So while upgrading our application, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major upgrade from the previous version, with so many changes."},"date":"2015-07-06","slug":"checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one"}]},"__N_SSG":true}