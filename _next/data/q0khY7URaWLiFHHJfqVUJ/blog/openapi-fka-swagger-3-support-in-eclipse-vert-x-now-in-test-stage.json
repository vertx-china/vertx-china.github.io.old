{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"OpenAPI (fka Swagger) 3 support in Eclipse Vert.x now in test stage!","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"As GSoC 2017's student, I'm working on an embedded support to OpenAPI 3 standard inside Eclipse Vert.x framework. Now, after a lot of work, you can try it!"},"date":"2017-07-04","slug":"openapi-fka-swagger-3-support-in-eclipse-vert-x-now-in-test-stage","readingTime":{"text":"6 min read","minutes":5.8,"time":348000,"words":1160},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      h2: \"h2\",\n      a: \"a\",\n      strong: \"strong\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      span: \"span\"\n    }, props.components), {Alert, Link} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(Alert, {\n        info: true,\n        title: \"Now on upstream!\",\n        children: _jsxs(_components.p, {\n          children: [\"We have pub­lished this pack­age with name \", _jsx(_components.code, {\n            children: \"vertx-web-api-contract\"\n          })]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"As GSoC 2017’s stu­dent, I’m ac­tu­ally work­ing on an em­bed­ded sup­port to Ope­nAPI 3 stan­dard in­side Eclipse Vert.x frame­work. Now, after a lot of work, you can try it!\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"why-openapi-3\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#why-openapi-3\"\n        }), \"Why OpenAPI 3?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ope­nAPI 2 is the most im­por­tant industry-​grade stan­dard for API Spec­i­fi­ca­tions. As you can see on \", _jsx(_components.a, {\n          href: \"https://www.openapis.org/blog/2017/05/25/the-open-api-initiative-is-sending-you-a-save-the-date-card?utm_source=Blog&utm_medium=Twitter&utm_campaign=SaveTheDate\",\n          children: \"of­fi­cial blog of Ope­nAPI Ini­tia­tive\"\n        }), \", the re­lease of ver­sion 3 is be­hind the cor­ner, so we want to give to our com­mu­nity the lat­est tools for the lat­est stan­dards!\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Vert.x project ob­jec­tive is to give you more in­te­grated tools. With this new sup­port, it gives you the abil­ity to use the \", _jsx(_components.a, {\n          href: \"https://swaggerhub.com/blog/api-design/design-first-or-code-first-api-development/\",\n          children: \"De­sign Dri­ven\"\n        }), \" (or De­sign First) ap­proach \", _jsx(_components.strong, {\n          children: \"with­out load­ing any thirds par­ties li­braries\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"features\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#features\"\n        }), \"Features\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The ac­tu­ally sup­ported fea­tures are the fol­low­ing (we reefer to Ope­nAPI ver­sion 3.0.0):\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Ope­nAPI 3 com­pli­ant API spec­i­fi­ca­tion val­i­da­tion with \", _jsx(_components.strong, {\n            children: \"load­ing of ex­ter­nal Json schemas\"\n          })]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Au­to­matic re­quest val­i­da­tion\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Au­to­matic mount of se­cu­rity val­i­da­tion han­dlers\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Au­to­matic 501 re­sponse for not im­ple­mented op­er­a­tions\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Router fac­tory to pro­vide all this fea­tures to users\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Au­to­matic re­quest val­i­da­tion is pro­vided by a new han­dler: \", _jsx(_components.code, {\n          children: \"ValidationHandler\"\n        }), \". You can also de­fine your own \", _jsx(_components.code, {\n          children: \"ValidationHandler\"\n        }), \" with­out API spec­i­fi­ca­tions, but I will dis­cuss it later.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The re­quest val­i­da­tion (pro­vided by sub­class \", _jsx(_components.code, {\n          children: \"OpenAPI3RequestValidationHandler\"\n        }), \") ac­tu­ally sup­ports:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Pa­ra­me­ters de­fined in \", _jsx(_components.a, {\n            href: \"https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#parameter-object\",\n            children: \"Pa­ra­me­ter ob­ject\"\n          }), \". We sup­port every type of pa­ra­me­ter, in­clud­ing \", _jsx(_components.code, {\n            children: \"object\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"array\"\n          }), \". We also sup­port every type de­scrip­tion field (for ex­am­ple \", _jsx(_components.code, {\n            children: \"format\"\n          }), \", \", _jsx(_components.code, {\n            children: \"minimum\"\n          }), \", \", _jsx(_components.code, {\n            children: \"maximum\"\n          }), \", etc). Also, at the mo­ment, we sup­port every com­bi­na­tion of \", _jsx(_components.code, {\n            children: \"style\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"explode\"\n          }), \" field (ex­cluded styles \", _jsx(_components.code, {\n            children: \"matrix\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"label\"\n          }), \")\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Body de­fined in new \", _jsx(_components.a, {\n            href: \"https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#request-body-object\",\n            children: \"Re­quest­Body ob­ject\"\n          }), \". In par­tic­u­lar:\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"For \", _jsx(_components.code, {\n                children: \"application/json\"\n              }), \" the val­i­da­tion han­dler will take schema that you have de­fined in \", _jsx(_components.code, {\n                children: \"schema\"\n              }), \" ob­ject and will val­i­date json bod­ies with it\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"For \", _jsx(_components.code, {\n                children: \"application/x-www-form-urlencoded\"\n              }), \" and \", _jsx(_components.code, {\n                children: \"multipart/form-data\"\n              }), \" the val­i­da­tion han­dler will take care of val­i­date every pa­ra­me­ters in form at­trib­utes. It ac­tu­ally sup­ports only comma sep­a­rated val­ues for \", _jsx(_components.code, {\n                children: \"object\"\n              }), \" and \", _jsx(_components.code, {\n                children: \"arrays\"\n              })]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"For other pa­ra­me­ter types it will check \", _jsx(_components.code, {\n                children: \"Content-Type\"\n              }), \" header\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Re­quest val­i­da­tion er­rors will be car­ried with \", _jsx(_components.code, {\n          children: \"RoutingContext\"\n        }), \" en­cap­su­lated in an ob­ject called \", _jsx(_components.code, {\n          children: \"ValidationHandler\"\n        }), \", so you have to at­tach fail­ure han­dler to check if some­thing went wrong dur­ing val­i­da­tion. Also the \", _jsx(_components.code, {\n          children: \"RoutingContext\"\n        }), \" carry a new ob­ject called \", _jsx(_components.code, {\n          children: \"RequestParameters\"\n        }), \" that en­cap­su­late all re­quest pa­ra­me­ters de­se­ri­al­ized and parsed.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Router fac­tory is in­tended to give you a re­ally sim­ple user in­ter­face to use Ope­nAPI 3 sup­port. Most im­por­tant fea­tures are:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Async load­ing of spec­i­fi­ca­tion and its schema de­pen­den­cies\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Au­to­matic con­vert Ope­nAPI style paths to Vert.x style paths\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Lazy meth­ods: op­er­a­tions (com­bi­na­tion of paths and HTTP meth­ods) are mounted in de­f­i­n­i­tion order in­side spec­i­fi­ca­tion\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Au­to­matic mount of se­cu­rity val­i­da­tion han­dlers\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Also, it’s planned to re­lease a \", _jsx(_components.strong, {\n          children: \"project skele­ton gen­er­a­tor\"\n        }), \" based on API spec.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"startup-your-project\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#startup-your-project\"\n        }), \"Startup your project\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We are in a test­ing stage, so the vertx-​web of­fi­cial repo doesn’t con­tain it. To in­clude the mod­i­fied ver­sion of vertx-​web re­place your vertx-​web maven de­pen­dency with this one:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-web-api-contract\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.6.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now you can start using Ope­nAPI 3 in­side your Vert.x pow­ered app!\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"First of all you need to load the spec­i­fi­ca­tion and con­struct the router fac­tory:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Load the api spec. This operation is asynchronous\"\n          }), \"\\nOpenAPI3RouterFactory.create(\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".vertx, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"src/main/resources/petstore.yaml\\\"\"\n          }), \", ar -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (ar.succeeded()) {\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Spec loaded with success\"\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"OpenAPI3RouterFactory\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"routerFactory\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ar.result();\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Something went wrong during router factory initialization\"\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Throwable\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"exception\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ar.cause();\\n        logger.error(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Ops!\\\"\"\n          }), \", exception);\\n    }\\n});\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"handlers-mounting\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#handlers-mounting\"\n        }), \"Handlers mounting\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now load han­dlers to your op­er­a­tions. Use \", _jsx(_components.code, {\n          children: \"addHandlerByOperationId(String operationId, Handler<RoutingContext> handler)\"\n        }), \" to add an han­dler to a route that matches the \", _jsx(_components.code, {\n          children: \"operationId\"\n        }), \". To add a fail­ure han­dler use \", _jsx(_components.code, {\n          children: \"addFailureHandlerByOperationId(String operationId, Handler<RoutingContext> failureHandler) \"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can, of course, \", _jsx(_components.strong, {\n          children: \"add mul­ti­ple han­dlers to same op­er­a­tion\"\n        }), \", with­out over­writ­ing the ex­ist­ing ones.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This is an ex­am­ple of \", _jsx(_components.code, {\n          children: \"addHandlerByOperationId()\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Add an handler with operationId\"\n          }), \"\\nrouterFactory.addHandlerByOperationId(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"listPets\\\"\"\n          }), \", routingContext -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Handle listPets operation (GET /pets)\"\n          }), \"\\n}, routingContext -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Handle failure\"\n          }), \"\\n});\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"request-parameters\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#request-parameters\"\n        }), \"Request parameters\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now you can freely use re­quest pa­ra­me­ters. To get the \", _jsx(_components.code, {\n          children: \"RequestParameters\"\n        }), \" ob­ject:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RequestParameters\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"params\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" routingContext.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"parsedParameters\\\"\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"RequestParameters\"\n        }), \" ob­ject pro­vides all meth­ods to ac­cess to query, cookie, header, path, form and en­tire body pa­ra­me­ters. Here are some ex­am­ples of how to use this ob­ject.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Pa­ra­me­ter with name \", _jsx(_components.code, {\n          children: \"awesomeParameter\"\n        }), \" with type \", _jsx(_components.code, {\n          children: \"integer\"\n        }), \" in \", _jsx(_components.code, {\n          children: \"query\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RequestParameter\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"awesomeParameter\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" params.queryParameter(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"awesomeParameter\\\"\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (awesomeParameter != \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \") {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// awesomeParameter parameter exists, but we are not sure that is empty or not (query parameters can be empty with allowEmptyValue: true)\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (!awesomeParameter.isEmpty()) {\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Now we are sure that it exists and it's not empty, so we can extract it\"\n          }), \"\\n      \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Integer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"awesome\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" awesomeParameter.getInteger();\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Parameter exists, but it's empty value\"\n          }), \"\\n    }\\n} \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Parameter doesn't exist (it's not required)\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you can see, every pa­ra­me­ter is mapped in re­spec­tive ob­jects (\", _jsx(_components.code, {\n          children: \"integer\"\n        }), \" in \", _jsx(_components.code, {\n          children: \"Integer\"\n        }), \", \", _jsx(_components.code, {\n          children: \"integer\"\n        }), \" with \", _jsx(_components.code, {\n          children: \"format: int64\"\n        }), \" in \", _jsx(_components.code, {\n          children: \"Long\"\n        }), \", \", _jsx(_components.code, {\n          children: \"float\"\n        }), \" in \", _jsx(_components.code, {\n          children: \"Float\"\n        }), \" and so on)\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Comma sep­a­rated array with name \", _jsx(_components.code, {\n          children: \"awesomeParameters\"\n        }), \" with type \", _jsx(_components.code, {\n          children: \"integer\"\n        }), \" in \", _jsx(_components.code, {\n          children: \"query\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RequestParameter\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"awesomeParameters\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" params.queryParameter(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"awesomeParameters\\\"\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (awesomeParameters != \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \" && !awesomeParameters.isEmpty()) {\\n    List<RequestParameter> awesomeList = awesomeParameters.getArray();\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \" (RequestParameter awesome : awesomeList) {\\n      \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Integer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"a\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" awesome.getInteger();\\n    }\\n} \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// awesomeParameters not found or empty string\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"JSON Body:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"RequestParameter\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"body\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" params.body();\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (body != \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \")\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"JsonObject\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"jsonBody\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" body.getJsonObject();\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"security-handling\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#security-handling\"\n        }), \"Security handling\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You can mount only one se­cu­rity han­dler for a com­bi­na­tion of schema and scope.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To add a se­cu­rity han­dler only with a schema name:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"routerFactory.addSecurityHandler(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"security_scheme_name\\\"\"\n          }), \", routingContext -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Handle security here and then call next()\"\n          }), \"\\n    routingContext.next();\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To add a se­cu­rity han­dler with a com­bi­na­tion of schema name and scope:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"routerFactory.addSecuritySchemaScopeValidator(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"security_scheme_name\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"scope_name\\\"\"\n          }), \", routingContext -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Handle security here and then call next()\"\n          }), \"\\n    routingContext.next();\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        children: _jsxs(_components.p, {\n          children: [\"You can de­fine se­cu­rity han­dlers where you want but de­fine it! | Dur­ing Router in­stan­ti­a­tion, if fac­tory finds a path that re­quire a se­cu­rity schema with­out an as­signed han­dler, It will throw a \", _jsx(_components.code, {\n            children: \"RouterFactoryException\"\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"error-handling\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#error-handling\"\n        }), \"Error handling\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Every time you add an han­dler for an op­er­a­tion you can add a fail­ure han­dler. To han­dle a \", _jsx(_components.code, {\n          children: \"ValidationException\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Throwable\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"failure\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" routingContext.failure();\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (failure \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"instanceof\"\n          }), \" ValidationException)\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Handle Validation Exception\"\n          }), \"\\n    routingContext.response().setStatusCode(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"400\"\n          }), \").setStatusMessage(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"ValidationError\\\"\"\n          }), \").end(failure.getMessage());\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Also the router fac­tory pro­vides two other tools:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"It au­to­mat­i­cally mounts a 501 \", _jsx(_components.code, {\n            children: \"Not Implemented\"\n          }), \" han­dler for op­er­a­tions where you haven’t mounted any han­dler\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"It can load a de­fault \", _jsx(_components.code, {\n            children: \"ValidationException\"\n          }), \" fail­ure han­dler\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Both these op­tions are con­fig­urable with \", _jsx(Link, {\n          href: \"/docs/apidocs/io/vertx/ext/web/api/contract/RouterFactoryOptions.html\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: _jsx(_components.code, {\n              children: \"RouterFactoryOptions\"\n            })\n          })\n        })]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"and-now-use-it\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#and-now-use-it\"\n        }), \"And now use it!\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now you are ready to gen­er­ate the \", _jsx(_components.code, {\n          children: \"Router\"\n        }), \"!\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"router\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" routerFactory.getRouter();\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Now you can use your Router instance\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"HttpServer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"server\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" vertx.createHttpServer(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"HttpServerOptions\"\n          }), \"().setPort(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \").setHost(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \"));\\nserver.requestHandler(router::accept).listen();\\n\"]\n        })\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"Lazy methods!\",\n        children: _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"getRouter()\"\n          }), \" gen­er­ate the \", _jsx(_components.code, {\n            children: \"Router\"\n          }), \" ob­ject, so you don’t have to care about code de­f­i­n­i­tion order\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"and-now\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#and-now\"\n        }), \"And now?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can find a com­plete ex­am­ple on \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-examples/tree/master/web-examples#http-request-validation-and-openapi-3-router-factory\",\n          children: _jsx(_components.code, {\n            children: \"vertx-examples\"\n          })\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can ac­cess to \", _jsx(Link, {\n          href: \"/docs/#web\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"doc­u­men­ta­tion here\"\n          })\n        }), \" and \", _jsx(Link, {\n          href: \"/docs/apidocs/io/vertx/ext/web/api/contract/package-summary.html\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Javadoc here\"\n          })\n        })]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        title: \"We want you!\",\n        children: _jsxs(_components.p, {\n          children: [\"Please give us your feed­back open­ing an issue \", _jsx(_components.a, {\n            href: \"https://github.com/slinkydeveloper/vertx-web/issues\",\n            children: \"here\"\n          })]\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x 3.5.0.Beta1","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"It's summer time and we have just released Vert.x 3.5.0.Beta1!"},"date":"2017-08-10","slug":"vert-x-3-5-0-beta1"},"nextPost":{"meta":{"title":"Preview of a guide for Java developers","category":"news","authors":[{"name":"Julien Ponge","github_id":"jponge"}],"summary":"We are introducing the book “A gentle guide to asynchronous programming with Eclipse Vert.x for enterprise application developers”."},"date":"2017-06-09","slug":"preview-of-a-guide-for-java-developers"},"relatedPosts":[{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Vert.x Web API Service Introduction","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"This blog post teaches you how to use the new module vertx-web-api-service to combine the Web Router and the OpenAPI Router Factory with service proxies."},"date":"2018-12-13","slug":"vert-x-web-api-service-introduction"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"}]},"__N_SSG":true}