{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Dynamic Routing in Serverless Microservice with Vert.x Event Bus","category":"guides","authors":[{"name":"Rowell Belen","github_id":"bytekast"}],"summary":"The Serverless Framework has become the de facto toolkit for building and deploying serverless functions or applications."},"date":"2017-04-14","slug":"dynamic-routing-in-serverless-microservice-with-vert-x-event-bus","readingTime":{"text":"3 min read","minutes":2.6,"time":156000,"words":520},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      em: \"em\",\n      strong: \"strong\",\n      code: \"code\",\n      blockquote: \"blockquote\"\n    }, props.components), {Alert, Link, Gist} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    if (!Gist) _missingMdxReference(\"Gist\", true);\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(Alert, {\n        info: true,\n        children: _jsxs(_components.p, {\n          children: [\"This is a re-​publication of the fol­low­ing \", _jsx(_components.a, {\n            href: \"https://www.rowellbelen.com/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus/\",\n            children: \"blog post\"\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"serverless-framework\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#serverless-framework\"\n        }), \"Serverless framework\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"https://serverless.com\",\n          children: \"Server­less Frame­work\"\n        }), \" has be­come the \", _jsx(_components.em, {\n          children: \"De Facto\"\n        }), \" toolkit for build­ing and de­ploy­ing Server­less func­tions or ap­pli­ca­tions. Its com­mu­nity has done a great job ad­vanc­ing the tools around Server­less ar­chi­tec­ture.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"How­ever, in the Server­less com­mu­nity there is de­bate among de­vel­op­ers on whether a sin­gle \", _jsx(_components.strong, {\n          children: \"AWS Lambda\"\n        }), \" func­tion should only be re­spon­si­ble for a sin­gle API end­point. My an­swer, based on my real-​world pro­duc­tion ex­pe­ri­ence, is \", _jsx(_components.strong, {\n          children: \"NO\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Imag­ine if you are build­ing a set of APIs with \", _jsx(_components.strong, {\n          children: \"10\"\n        }), \" end­points and you need to de­ploy the APIs to \", _jsx(_components.strong, {\n          children: \"DEV\"\n        }), \", \", _jsx(_components.strong, {\n          children: \"STAGE\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"PROD\"\n        }), \" en­vi­ron­ments. Now you are look­ing at \", _jsx(_components.strong, {\n          children: \"30\"\n        }), \" dif­fer­ent func­tions to ver­sion, de­ploy and man­age - not to men­tion the \", _jsx(_components.em, {\n          children: \"Copy & Paste\"\n        }), \" code and con­fig­u­ra­tion that will re­sult from this type of set-​up. \", _jsx(_components.strong, {\n          children: \"NO THANKS!!!\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I be­lieve a more prag­matic ap­proach is \", _jsx(_components.strong, {\n          children: \"1 Lambda Func­tion\"\n        }), \" == \", _jsx(_components.strong, {\n          children: \"1 Mi­croser­vice\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"For ex­am­ple, if you were build­ing a \", _jsx(_components.strong, {\n          children: \"User Mi­croser­vice\"\n        }), \" with basic \", _jsx(_components.strong, {\n          children: \"CRUD\"\n        }), \" func­tion­al­ity, you should im­ple­ment \", _jsx(_components.code, {\n          children: \"CREATE\"\n        }), \", \", _jsx(_components.code, {\n          children: \"READ\"\n        }), \", \", _jsx(_components.code, {\n          children: \"UPDATE\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"DELETE\"\n        }), \" in a \", _jsx(_components.strong, {\n          children: \"sin­gle\"\n        }), \" Lambda func­tion. In the code, you should re­solve the de­sired ac­tion by in­spect­ing the re­quest or the con­text.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"vertx-to-the-rescue\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#vertx-to-the-rescue\"\n        }), \"Vert.x to the rescue\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"There are many ben­e­fits to using \", _jsx(_components.strong, {\n          children: \"Vert.x\"\n        }), \" in any ap­pli­ca­tion. With \", _jsx(_components.strong, {\n          children: \"Vert.x\"\n        }), \", you get a rock-​solid and light­weight toolkit for build­ing \", _jsx(_components.strong, {\n          children: \"re­ac­tive\"\n        }), \", \", _jsx(_components.strong, {\n          children: \"highly per­for­mant\"\n        }), \", \", _jsx(_components.strong, {\n          children: \"event-​driven\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"non-​blocking\"\n        }), \" ap­pli­ca­tions. The toolkit even pro­vides asyn­chro­nous \", _jsx(_components.em, {\n          children: \"APIs\"\n        }), \" for ac­cess­ing tra­di­tional block­ing dri­vers such as \", _jsx(_components.strong, {\n          children: _jsx(Link, {\n            href: \"/docs/vertx-jdbc-client/groovy/\",\n            passHref: true,\n            children: _jsx(_components.a, {\n              href: \"\",\n              children: \"JDBC\"\n            })\n          })\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"How­ever, for this ex­am­ple, we will mainly focus on the \", _jsx(Link, {\n          href: \"/docs/vertx-core/groovy/#event_bus\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Event Bus\"\n          })\n        }), \". The event bus al­lows dif­fer­ent parts of your ap­pli­ca­tion to com­mu­ni­cate with each other via event mes­sages. It sup­ports \", _jsx(_components.em, {\n          children: \"pub­lish/sub­scribe\"\n        }), \", \", _jsx(_components.em, {\n          children: \"point to point\"\n        }), \", and \", _jsx(_components.em, {\n          children: \"request-​response mes­sag­ing\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"For the \", _jsx(_components.strong, {\n          children: \"User Mi­croser­vice\"\n        }), \" ex­am­ple above, we could treat the com­bi­na­tion of the \", _jsx(_components.code, {\n          children: \"HTTP METHOD\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"RESOURCE PATH\"\n        }), \" as a unique event chan­nel, and reg­is­ter the sub­scribers/han­dlers to re­spond ap­pro­pri­ately.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s dive right in.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"goal\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#goal\"\n        }), \"Goal\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Cre­ate a \", _jsx(_components.em, {\n          children: \"re­ac­tive\"\n        }), \", \", _jsx(_components.em, {\n          children: \"message-​driven\"\n        }), \", \", _jsx(_components.em, {\n          children: \"asyn­chro­nous\"\n        }), \" \", _jsx(_components.strong, {\n          children: \"User Mi­croser­vice\"\n        }), \" with \", _jsx(_components.code, {\n          children: \"GET\"\n        }), \", \", _jsx(_components.code, {\n          children: \"POST\"\n        }), \", \", _jsx(_components.code, {\n          children: \"DELETE\"\n        }), \", \", _jsx(_components.code, {\n          children: \"PUT\"\n        }), \" CRUD op­er­a­tions in a \", _jsx(_components.em, {\n          children: \"sin­gle\"\n        }), \" \", _jsx(_components.strong, {\n          children: _jsx(_components.a, {\n            href: \"aws.amazon.com/lambda\",\n            children: \"AWS Lambda Func­tion\"\n          })\n        }), \" using the \", _jsx(_components.a, {\n          href: \"https://serverless.com\",\n          children: \"Server­less Frame­work\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Serverless stack definition\"\n        }), \":\"]\n      }), \"\\n\", _jsx(Gist, {\n        url: \"https://gist.github.com/bytekast/48daa2ca479156c98d2735cca181ef30\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"solution\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#solution\"\n        }), \"Solution\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Use \", _jsx(Link, {\n          href: \"/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x\"\n          })\n        }), \"’s \", _jsx(Link, {\n          href: \"/docs/vertx-core/groovy/#event_bus\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Event Bus\"\n          })\n        }), \" to han­dle \", _jsx(_components.strong, {\n          children: \"dy­namic rout­ing\"\n        }), \" to \", _jsx(_components.strong, {\n          children: \"event han­dlers\"\n        }), \" based on \", _jsx(_components.em, {\n          children: \"HTTP method\"\n        }), \" and \", _jsx(_components.em, {\n          children: \"re­source path\"\n        }), \" from the API input.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Lambda Handler\"\n        }), \":\"]\n      }), \"\\n\", _jsx(Gist, {\n        url: \"https://gist.github.com/bytekast/d5a544f8cdcd327a12010100b2ba2d66\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"code-review\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#code-review\"\n        }), \"Code review\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Lines \", _jsx(_components.code, {\n          children: \"14-19\"\n        }), \" ini­tial­izes the \", _jsx(_components.strong, {\n          children: \"Vert.x\"\n        }), \" in­stance. AWS Lambda will hold on to this in­stance for the life of the con­tainer/\", _jsx(_components.strong, {\n          children: \"JVM\"\n        }), \". It is reused in sub­se­quent re­quests.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Line \", _jsx(_components.code, {\n          children: \"17\"\n        }), \" reg­is­ters the \", _jsx(_components.strong, {\n          children: \"User Ser­vice\"\n        }), \" \", _jsx(_components.em, {\n          children: \"han­dlers\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Line \", _jsx(_components.code, {\n          children: \"22\"\n        }), \" de­fines the \", _jsx(_components.strong, {\n          children: \"main han­dler\"\n        }), \" method that is called when the \", _jsx(_components.strong, {\n          children: \"Lambda func­tion\"\n        }), \" is in­voked.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Line \", _jsx(_components.code, {\n          children: \"27\"\n        }), \" sends the Lambda func­tion input to the (dy­namic) \", _jsx(_components.strong, {\n          children: \"ad­dress\"\n        }), \" where han­dlers are wait­ing to re­spond.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Lines \", _jsx(_components.code, {\n          children: \"44-66\"\n        }), \" de­fines the spe­cific \", _jsx(_components.em, {\n          children: \"han­dlers\"\n        }), \" and binds them to the ap­pro­pri­ate \", _jsx(_components.em, {\n          children: \"chan­nels\"\n        }), \" (http method + re­source path)\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"summary\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#summary\"\n        }), \"Summary\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you can see, \", _jsx(Link, {\n          href: \"/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x\"\n          })\n        }), \"’s \", _jsx(Link, {\n          href: \"/docs/vertx-core/groovy/#event_bus\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Event Bus\"\n          })\n        }), \" makes it very easy to dy­nam­i­cally sup­port mul­ti­ple routes in a sin­gle \", _jsx(_components.strong, {\n          children: \"Server­less\"\n        }), \" func­tion. This re­duces the num­ber of func­tions you have to man­age, de­ploy and main­tain in \", _jsx(_components.strong, {\n          children: \"AWS\"\n        }), \". In ad­di­tion, you gain ac­cess to asyn­chro­nous, non-​blocking APIs that come stan­dard with \", _jsx(_components.strong, {\n          children: \"Vert.x\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Server­less + Vert.x = BLISS\"\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Building a real-time web app with Angular/Ngrx and Vert.x","category":"guides","authors":[{"name":"Benoit Hediard","github_id":"benorama"}],"summary":"There are multiple tech stacks to build a real-time web app. What are the best choices to build Angular client apps, connected to a JVM-based backend?"},"date":"2017-04-26","slug":"building-a-real-time-web-app-with-angular-ngrx-and-vert-x"},"nextPost":{"meta":{"title":"Scala is here","category":"guides","authors":[{"name":"Jochen Mader","github_id":"codepitbull"}],"summary":"The rise of Scala as one of the most important languages on the JVM caught many (me included) by surprise. This hybrid of functional and imperative paradigms struck a chord with many developers."},"date":"2017-03-20","slug":"scala-is-here"},"relatedPosts":[{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"}]},"__N_SSG":true}