{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Eclipse Vert.x for Scala next steps","category":"news","authors":[{"name":"Jochen Mader","github_id":"codepitbull"}],"summary":"This blog post gives an overview of the current plans for the vertx-lang-scala module, in particular with respect to the upcoming Vert.x 4."},"date":"2019-08-30","slug":"eclipse-vert-x-for-scala-next-steps","readingTime":{"text":"6 min read","minutes":5.225,"time":313500,"words":1045},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      strong: \"strong\",\n      ul: \"ul\",\n      li: \"li\",\n      h2: \"h2\",\n      a: \"a\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      h3: \"h3\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"TL;DR:\"\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"No Scala 2.13 in Eclipse Vert.x 3.x due to in­creased sup­port bur­den\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"New value classes based ap­proach for Vert.x 4\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"retrospective\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#retrospective\"\n        }), \"Retrospective\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It’s been more than two years since the in­cep­tion of \", _jsx(_components.code, {\n          children: \"vertx-lang-scala\"\n        }), \" to the Vert.x ecosys­tem. And al­most as long since I wrote my first \", _jsx(Link, {\n          href: \"/blog/scala-is-here/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"blog post\"\n          })\n        }), \" about it.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"A lot has hap­pened since March 2017:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"vertx-lang-scala\"\n          }), \" kept up with new ver­sions of Scala\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"all Vert.x-​modules are sup­ported (35 so far)\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"a Giter8 based \", _jsx(_components.a, {\n            href: \"https://github.com/vert-x3/vertx-scala.g8\",\n            children: \"tem­plate\"\n          }), \" was added for eas­ily boot­strap­ping a Vert.x-​Scala-project\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Bugs were squashed\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And most re­cently we re­ceived a great con­tri­bu­tion by \", _jsx(_components.a, {\n          href: \"https://github.com/NikolajLeischner\",\n          children: \"Niko­laj Leis­chner\"\n        }), \" who was kind enough to port the \", _jsx(_components.a, {\n          href: \"https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/Scala/vertx-web-scala\",\n          children: \"techempow­ered\"\n        }), \" bench­mark to vert-​lang-scala. Which will be part of the next steps.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The num­bers pro­duced by this bench­mark were very promis­ing and and ad­di­tional mo­ti­va­tion to move to the next phase of Scala sup­port for Vert.x.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"old-idea\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#old-idea\"\n        }), \"Old idea\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Be­fore get­ting to the new ideas I want to take a look at the “old” one.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The cur­rent ver­sion of vert-​lang-scala is based around the idea of wrap­ping the Vert.x-API with a ded­i­cated Scala-​layer. That layer is cre­ated using a Freemarker-​based code gen­er­a­tor. I took this idea from the first try by Tim Fox for build­ing that sup­port.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Wrap­ping the ex­ist­ing Java-​API was rather painful but gave me great flex­i­bil­ity to cre­ate an id­iomatic Scala-​API.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"But an ap­proach like that comes with a price:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"There are a lot of in­ter­me­di­ate ob­jects being cre­ated.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Many un­nec­ces­sary con­ver­sions be­tween Java/Scala types\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Both in­creased mem­ory con­sump­tion and garbage col­lec­tion ac­tiv­ity quite a bit and has been bug­ging me from the be­gin­ning.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"new-idea\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#new-idea\"\n        }), \"New idea\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"With Vert.x 4 ap­proach­ing I was fi­nally able to in­vest time into the re­work I had wanted to do for quite a while.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The core idea is to re­place the cur­rent wrap­ping based ap­proach with some­thing more light­weight but na­tive to the Scala-​world.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And that’s where \", _jsx(_components.a, {\n          href: \"https://docs.scala-lang.org/overviews/core/value-classes.html\",\n          children: \"value classes\"\n        }), \" come in.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Value classes allow the ex­ten­sion of ex­ist­ing classes with ad­di­tional meth­ods. They make it easy to con­trol \", _jsx(_components.strong, {\n          children: \"when\"\n        }), \" meth­ods be­come vis­i­ble and do that with a min­i­mum of over­head. To be pre­cise: A wrap­ping class is nor­mally ever only in­stan­ti­ated \", _jsx(_components.strong, {\n          children: \"once\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"A good ex­am­ple is the ad­di­tion of meth­ods for wrap­ping the Vert.x ap­proach of Promises with Scala-​Futures. Each method re­turn­ing a Vert.x-​Promise needs to re­ceive an al­ter­na­tive ver­sion which re­turns a Scala-​Future.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In Vert.x 3 I achieved that by adding meth­ods to the wrap­per and giv­ing them a dis­tinct name. A method called \", _jsx(_components.strong, {\n          children: \"lis­ten\"\n        }), \" re­turn­ing a Promise would re­ceive a com­pan­ion called \", _jsx(_components.strong, {\n          children: \"lis­ten­Fu­ture\"\n        }), \" in the Scala layer.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s look at how this looks in the new ap­proach:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-scala\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" io.vertx.scala\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"hljs-class\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"object\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"core\"\n            })]\n          }), \"{\\n   \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"implicit\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"hljs-class\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"class\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"HttpServerScala\"\n            }), \"(\", _jsxs(_components.span, {\n              className: \"hljs-params\",\n              children: [\"val asJava: io.vertx.core.http.\", _jsx(_components.span, {\n                className: \"hljs-type\",\n                children: \"HttpServer\"\n              })]\n            }), \") \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"extends\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"AnyVal\"\n            }), \" \"]\n          }), \"{\\n      \", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"def\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"listenFuture\"\n            })]\n          }), \"(port: java.lang.\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Integer\"\n          }), \"): scala.concurrent.\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Future\"\n          }), \"[io.vertx.core.http.\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"HttpServer\"\n          }), \"] = {..}\\n      ..\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The code above does the fol­low­ing things:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"It cre­ates a pack­age ob­ject for \", _jsx(_components.strong, {\n            children: \"io.vertx.scala.core\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"it adds an im­plict class \", _jsx(_components.strong, {\n            children: \"HttpServer­Scala\"\n          }), \" to wrpa \", _jsx(_components.strong, {\n            children: \"HttpServer\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"it adds a \", _jsx(_components.strong, {\n            children: \"lis­ten­Fu­ture\"\n          }), \" method\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Using this method in code looks like this:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-scala\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" io.vertx.scala.demo\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.lang.scala.\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"VertxExecutionContext\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" io.vertx.scala.core._\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" scala.util.{\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Failure\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Success\"\n          }), \"}\\n\\n\", _jsxs(_components.span, {\n            className: \"hljs-class\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"object\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"Main\"\n            }), \" \"]\n          }), \"{\\n  \", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"def\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"main\"\n            })]\n          }), \"(args: \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Array\"\n          }), \"[\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \"]): \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Unit\"\n          }), \" = {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"val\"\n          }), \" vertx = \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Vertx\"\n          }), \".vertx()\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"implicit\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"val\"\n          }), \" ec = \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"VertxExecutionContext\"\n          }), \"(vertx.getOrCreateContext())\\n    vertx\\n      .createHttpServer()\\n      .requestHandler(r => {\\n        r.response().end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"bye\\\"\"\n          }), \")\\n      })\\n      .listenFuture(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"6667\"\n          }), \")\\n      .onComplete {\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"case\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Success\"\n          }), \"(_) => println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Started\\\"\"\n          }), \")\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"case\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Failure\"\n          }), \"(exception) => println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Failure\\\"\"\n          }), \")\\n      }\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Im­port­ing the pack­age ob­ject using \", _jsx(_components.strong, {\n          children: \"im­port io.vertx.scala.core._\"\n        }), \" brings the ex­ten­sion method into scope and makes them avail­able on all in­stances of \", _jsx(_components.strong, {\n          children: \"HttpServer\"\n        }), \". In the ex­am­ple above \", _jsx(_components.strong, {\n          children: \"cre­ate­HttpServer()\"\n        }), \" re­turn such an in­stance and we can now use the id­iomatic Scala way of han­dling a Fu­ture.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"even-more\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#even-more\"\n        }), \"Even more\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Ex­tend­ing classes with Future-​methods is only one of the new things to come. On top of that the sup­port for DataOb­jects will be con­sid­er­ably im­proved, both through ex­tend­ing them and by pro­vid­ing type aliases.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I also switched from doing all con­ver­sions for col­lec­tions au­to­mat­i­cally to hand­ing the con­trol back to the user. Some­thing which gets even more im­por­tant for Scala 2.13 and the new col­lec­tion API.\"\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"the-downside\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#the-downside\"\n        }), \"The downside\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The clear down­side of this ap­proach is that the Java-​methods will stay vis­i­ble since the java-​classes won’t be wrapped but ex­tended. This might lead to some con­fu­sion but I am pretty sure the ben­e­fits out­weight this down­side.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The big­ger change will be the re­moval of au­to­matic von­ver­sion be­tween Scala types (Long/Int/String and  Col­lec­tions) and their Java coun­ter­parts. I spent con­sid­er­able time try­ing to tune that part in the cur­rent ver­sion bbut al­ways ended up hit­ting some edge­case. For now I’ve de­cided to have the user pick the right time to con­vert.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I might still add this fea­ture in a later ver­sion if user feed­back points into that di­rec­tion.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"when-will-i-get-it\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#when-will-i-get-it\"\n        }), \"When will I get it?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"First for the good news: There is al­ready a \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-lang-scala/tree/4.0\",\n          children: \"branch\"\n        }), \" with a full im­ple­men­ta­tion.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The bad news: It will break until Vert.x 4.0 is fi­nally re­leased.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Vert.x 4 is in ac­tive de­vel­op­ment with most APIs al­ready fi­nal­ized but break­ing changes still hap­pen. So use at your own risk!\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"what-about-scala-213\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#what-about-scala-213\"\n        }), \"What about Scala 2.13?\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Scala 2.13 has been re­leased re­cently which prompted ques­tions from the com­mu­nity about when it will be sup­ported by Vert.x.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I haven’t done a good job pro­vid­ing the re­sults of our in­ter­nal dis­cus­sions on that topic to the com­mu­nity. So here we go:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Vert.x 3 will stay on 2.12 for the fol­low­ing rea­sons:\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"Both are still ac­tively sup­ported\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"Scala ecosys­tems takes some time to do the switch to 2.13\"\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"We sim­ply don’t have the ca­pac­ity to sup­port both ver­sions \", _jsx(_components.strong, {\n                children: \"AND\"\n              }), \" the up­com­ing new ver­sion\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Vert.x 4 will re­ceive 2.13 sup­port\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"Scala ecosys­tem will have moved closer to 2.13 adop­tion when Vert.x 4 comes out\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"for-the-adventure-seaker\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#for-the-adventure-seaker\"\n        }), \"For the adventure seaker\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I ac­tu­ally did a port of vertx-​lang-scala 3.8 to Scala 2.13 and you can grab the work in this \", _jsx(_components.a, {\n          href: \"https://github.com/vert-x3/vertx-lang-scala/tree/3.8_2.13\",\n          children: \"branch\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Don’t ex­pect \", _jsx(_components.strong, {\n          children: \"ANY\"\n        }), \" sup­port for this branch. This was only an ex­per­i­ment to see how much I had to change for ini­tial 2.13 sup­port.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"summary\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#summary\"\n        }), \"Summary\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Vert.x 4 will be an evo­lu­tion­ary step for vertx-​lang-scala. Value classes promise to re­duce both com­plex­ity and al­lo­ca­tion rate, two things which have been bug­ging me quite a bit with the cur­rent ap­proach.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I am eager to hear from you all what you think about this new di­rec­tion.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Eclipse Vert.x 4 milestone 3 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"The next milestone release of Vert.x 4 aims to provide a reliable distribution of the current development for people who want to try it and provide feedback."},"date":"2019-09-19","slug":"eclipse-vert-x-4-milestone-3-released"},"nextPost":{"meta":{"title":"Eclipse Vert.x 4 milestone 2 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"The new milestone release of Vert.x 4 includes progress on futurisation, tracing, and many other improvements."},"date":"2019-08-26","slug":"eclipse-vert-x-4-milestone-2-released"},"relatedPosts":[{"meta":{"title":"Scala is here","category":"guides","authors":[{"name":"Jochen Mader","github_id":"codepitbull"}],"summary":"The rise of Scala as one of the most important languages on the JVM caught many (me included) by surprise. This hybrid of functional and imperative paradigms struck a chord with many developers."},"date":"2017-03-20","slug":"scala-is-here"},{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"}]},"__N_SSG":true}