{"pageProps":{"slug":"3.9.5/vertx-rx/js","title":"Vert.x for RxJS","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_read_stream_support\">Read stream support</a></li>\n<li><a href=\"#_handler_support\">Handler support</a></li>\n<li><a href=\"#_future_support\">Future support</a></li>\n<li><a href=\"#_scheduler_support\">Scheduler support</a></li>\n<li><a href=\"#_examples\">Examples</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_eventbus_message_stream\">EventBus message stream</a></li>\n<li><a href=\"#_timers\">Timers</a></li>\n<li><a href=\"#_http_client_requests\">Http client requests</a></li>\n<li><a href=\"#_http_server_requests\">Http server requests</a></li>\n<li><a href=\"#_websocket_client\">Websocket client</a></li>\n<li><a href=\"#_websocket_server\">Websocket server</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x for RxJS</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/Reactive-Extensions/RxJS\">RxJS</a> is a popular library for composing asynchronous and event\nbased programs using observable sequences for the JavaScript.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x integrates naturally with RxJS, allowing to use observable wherever you can use streams or asynchronous results.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x for RxJS comes as an extension for RxJS:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It provides the <code>Rx</code> object we need for creating <code>Observable</code>, or other kind of Rx objects.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are using Maven or Gradle, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>{maven-groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>{maven-artifactId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{maven-version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile {maven-groupId}:{maven-artifactId}:{maven-version}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_read_stream_support\"><a class=\"anchor\" href=\"#_read_stream_support\"></a>Read stream support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>RxJS observable is a perfect match for Vert.x read streams : both provide a flow of items.\nA read stream can be adapted to an observable with the <code>Rx.Observable.fromReadStream</code> function:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> fs = vertx.<span class=\"hljs-title function_\">fileSystem</span>();\nfs.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;/data.txt&quot;</span>, {}, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, err</span>) {\n  <span class=\"hljs-keyword\">var</span> file = result.<span class=\"hljs-title function_\">result</span>();\n  <span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(file);\n  observable.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Read data: &quot;</span> + data.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>));\n  });\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_handler_support\"><a class=\"anchor\" href=\"#_handler_support\"></a>Handler support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code>rx.vertx</code> module provides an <code>observableHandler</code> function:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-title function_\">observableHandler</span>();\nobservable.<span class=\"hljs-title function_\">subscribe</span>(\n    <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n        <span class=\"hljs-comment\">// Got event</span>\n    }\n);\nvertx.<span class=\"hljs-title function_\">setTimer</span>(<span class=\"hljs-number\">1000</span>, observable.<span class=\"hljs-title function_\">toHandler</span>());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Rx can also turn an existing Observer into an handler:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n\n<span class=\"hljs-comment\">// Create an observer via the Rx api</span>\n<span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observer</span>.<span class=\"hljs-title function_\">create</span>(\n    <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n        <span class=\"hljs-comment\">// Got event</span>\n    }\n);\n\n<span class=\"hljs-comment\">// The rx.vertx extension augmented the observer with the toHandler method</span>\n<span class=\"hljs-keyword\">var</span> handler = observer.<span class=\"hljs-title function_\">toHandler</span>();\nvertx.<span class=\"hljs-title function_\">setTimer</span>(<span class=\"hljs-number\">1000</span>, handler);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_future_support\"><a class=\"anchor\" href=\"#_future_support\"></a>Future support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In Vert.x future objects are modelled as async result handlers and occur as last parameter of asynchronous methods.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>rx.vertx</code> module provides an <code>observableFuture</code> function:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n\n<span class=\"hljs-comment\">// Create an observable that is also an handler of async result</span>\n<span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-title function_\">observableFuture</span>();\nobservable.<span class=\"hljs-title function_\">subscribe</span>(\n    <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">server</span>) {\n        <span class=\"hljs-comment\">// Server is listening</span>\n    },\n    <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) {\n        <span class=\"hljs-comment\">// Server could not start</span>\n    }\n);\n\n<span class=\"hljs-keyword\">var</span> server = vertx.<span class=\"hljs-title function_\">createHttpServer</span>({ <span class=\"hljs-string\">&quot;port&quot;</span>:<span class=\"hljs-number\">1234</span>, <span class=\"hljs-string\">&quot;host&quot;</span>:<span class=\"hljs-string\">&quot;localhost&quot;</span> });\nserver.<span class=\"hljs-title function_\">listen</span>(observable.<span class=\"hljs-title function_\">toHandler</span>());</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Rx can also turn an existing Observer into an future:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n\n<span class=\"hljs-comment\">// Create an observer via the Rx api</span>\n<span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observer</span>.<span class=\"hljs-title function_\">create</span>(\n    <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n        <span class=\"hljs-comment\">// Got event</span>\n    }\n);\n\n<span class=\"hljs-comment\">// The rx.vertx extension augmented the observer with the toHandler method</span>\n<span class=\"hljs-keyword\">var</span> future = observer.<span class=\"hljs-title function_\">toFuture</span>();</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_scheduler_support\"><a class=\"anchor\" href=\"#_scheduler_support\"></a>Scheduler support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>RxJS relies on the default context method <em>timeout</em> and <em>interval</em> functions to schedule operations. The\nvertx-js integration implements such functions providing an out of the box scheduler support.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_examples\"><a class=\"anchor\" href=\"#_examples\"></a>Examples</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Let&#8217;s study now a few examples of using Vert.x with RxJava.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_eventbus_message_stream\"><a class=\"anchor\" href=\"#_eventbus_message_stream\"></a>EventBus message stream</h3>\n<div class=\"paragraph\">\n<p>The event bus message consumer provides naturally an stream of messages:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> eb = vertx.<span class=\"hljs-title function_\">eventBus</span>();\n<span class=\"hljs-keyword\">var</span> messageConsumer = eb.<span class=\"hljs-title function_\">consumer</span>(<span class=\"hljs-string\">&quot;the-address&quot;</span>);\n\n<span class=\"hljs-comment\">// Create an observable from the message consumer</span>\n<span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(messageConsumer);\n\n<span class=\"hljs-comment\">// Subscribe to the observable</span>\n<span class=\"hljs-keyword\">var</span> subscription = observable.<span class=\"hljs-title function_\">subscribe</span>(\n    <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>) {\n        <span class=\"hljs-comment\">// Got message</span>\n    });\n\n<span class=\"hljs-comment\">// Unregisters the stream after 10 seconds</span>\nvertx.<span class=\"hljs-title function_\">setTimer</span>(<span class=\"hljs-number\">10000</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    subscription.<span class=\"hljs-title function_\">dispose</span>();\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The message consumer provides a stream of messages. The <code>Message#body()</code> method gives access to a new\n stream of message bodies if needed:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> eb = vertx.<span class=\"hljs-title function_\">eventBus</span>();\n<span class=\"hljs-keyword\">var</span> messageConsumer = eb.<span class=\"hljs-title function_\">consumer</span>(<span class=\"hljs-string\">&quot;the-address&quot;</span>);\n<span class=\"hljs-keyword\">var</span> bodyConsumer = messageConsumer.<span class=\"hljs-title function_\">bodyStream</span>();\n\n<span class=\"hljs-comment\">// Create an observable from the body consumer</span>\n<span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(bodyConsumer);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>RxJS map/reduce composition style can be then be used:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> eb = vertx.<span class=\"hljs-title function_\">eventBus</span>();\n<span class=\"hljs-keyword\">var</span> consumer = eb.<span class=\"hljs-title function_\">consumer</span>(<span class=\"hljs-string\">&quot;heat-sensor&quot;</span>).<span class=\"hljs-title function_\">bodyStream</span>();\n<span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(consumer);\n\nobservable.\n    <span class=\"hljs-title function_\">bufferWithTime</span>(<span class=\"hljs-number\">500</span>).\n    <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arr</span>) { <span class=\"hljs-keyword\">return</span> arr.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">acc, x</span>) { <span class=\"hljs-keyword\">return</span> acc + x; }, <span class=\"hljs-string\">&quot;&quot;</span>) }).\n    <span class=\"hljs-title function_\">subscribe</span>(\n    <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">heat</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Current heat is &quot;</span> + heat);\n    });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_timers\"><a class=\"anchor\" href=\"#_timers\"></a>Timers</h3>\n<div class=\"paragraph\">\n<p>Timer task can be created with <code>Vertx#timerStream(long)</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(vertx.<span class=\"hljs-title function_\">timerStream</span>(<span class=\"hljs-number\">1000</span>));\ntimer.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Callback after 1 second&quot;</span>);\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Periodic task can be created with <code>Vertx#periodicStream(long)</code>:</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_client_requests\"><a class=\"anchor\" href=\"#_http_client_requests\"></a>Http client requests</h3>\n<div class=\"paragraph\">\n<p>The HttpClientRequest provides a one shot callback with the\n<code>http.HttpClientResponse</code> object. The observable reports a request failure.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> client = vertx.<span class=\"hljs-title function_\">createHttpClient</span>();\n<span class=\"hljs-keyword\">var</span> req = client.<span class=\"hljs-title function_\">request</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/the_uri&quot;</span>);\n<span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(req);\nobservable.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resp</span>) {\n    <span class=\"hljs-comment\">// Process the response</span>\n}, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) {\n    <span class=\"hljs-comment\">// Could not connect</span>\n});\nreq.<span class=\"hljs-title function_\">end</span>();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The response can be processed as an stream of buffer:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> client = vertx.<span class=\"hljs-title function_\">createHttpClient</span>();\n<span class=\"hljs-keyword\">var</span> req = client.<span class=\"hljs-title function_\">request</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/the_uri&quot;</span>);\n<span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(req).<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resp</span>) {\n    <span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(resp);\n    observable.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">buffer</span>) {\n        <span class=\"hljs-comment\">// Process buffer</span>\n    });\n});\nreq.<span class=\"hljs-title function_\">end</span>();</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_server_requests\"><a class=\"anchor\" href=\"#_http_server_requests\"></a>Http server requests</h3>\n<div class=\"paragraph\">\n<p>The <code>HttpServer#requestStream()</code> provides a callback for each incoming\nrequest:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> server = vertx.<span class=\"hljs-title function_\">createHttpServer</span>();\n<span class=\"hljs-keyword\">var</span> requests = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(server.<span class=\"hljs-title function_\">requestStream</span>());\nrequests.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request</span>) {\n    <span class=\"hljs-comment\">// Process the request</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>HttpServerRequest</code> can then be adapted to a buffer observable:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-title class_\">Unresolved</span> directive <span class=\"hljs-keyword\">in</span> index.<span class=\"hljs-property\">adoc</span> - <span class=\"hljs-attr\">include</span>::http_server_request_observable.<span class=\"hljs-property\">js</span>[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_websocket_client\"><a class=\"anchor\" href=\"#_websocket_client\"></a>Websocket client</h3>\n<div class=\"paragraph\">\n<p>The <code>HttpClient#websocketStream</code> provides a single callback when the websocket connects, otherwise a failure:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> client = vertx.<span class=\"hljs-title function_\">createHttpClient</span>();\n<span class=\"hljs-keyword\">var</span> stream = client.<span class=\"hljs-title function_\">websocketStream</span>(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/the_uri&quot;</span>);\n<span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(stream).\n    <span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ws</span>) {\n        <span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(ws);\n        observable.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">buffer</span>) {\n            <span class=\"hljs-comment\">// Process message</span>\n        });\n\n    });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>WebSocket</code> can then be turned into an observable of buffer easily</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> client = vertx.<span class=\"hljs-title function_\">createHttpClient</span>();\n<span class=\"hljs-keyword\">var</span> stream = client.<span class=\"hljs-title function_\">websocketStream</span>(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/the_uri&quot;</span>);\n<span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(stream);\nobservable.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ws</span>) {\n    <span class=\"hljs-comment\">// Use the websocket</span>\n}, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) {\n    <span class=\"hljs-comment\">// Could not connect</span>\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_websocket_server\"><a class=\"anchor\" href=\"#_websocket_server\"></a>Websocket server</h3>\n<div class=\"paragraph\">\n<p>The <code>HttpServer#websocketStream()</code> provides a callback for each incoming connection:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> server = vertx.<span class=\"hljs-title function_\">createHttpServer</span>();\n<span class=\"hljs-keyword\">var</span> sockets = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(server.<span class=\"hljs-title function_\">websocketStream</span>());\nsockets.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ws</span>) {\n    <span class=\"hljs-comment\">// Process the web socket</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>ServerWebSocket</code> can be turned into a buffer observable easily:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Rx</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rx.vertx&quot;</span>);\n<span class=\"hljs-keyword\">var</span> server = vertx.<span class=\"hljs-title function_\">createHttpServer</span>();\n<span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(server.<span class=\"hljs-title function_\">websocketStream</span>()).<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ws</span>) {\n    <span class=\"hljs-keyword\">var</span> observable = <span class=\"hljs-title class_\">Rx</span>.<span class=\"hljs-property\">Observable</span>.<span class=\"hljs-title function_\">fromReadStream</span>(ws);\n    observable.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">buffer</span>) {\n       <span class=\"hljs-comment\">// Process message</span>\n    });\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"3.9.5"},"__N_SSG":true}