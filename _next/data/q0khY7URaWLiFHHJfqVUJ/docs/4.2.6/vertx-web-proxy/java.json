{"pageProps":{"slug":"4.2.6/vertx-web-proxy/java","title":"Vert.x Web Proxy","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_web_proxy\">使用 Vert.x Web Proxy</a></li>\n<li><a href=\"#_basic_web_proxy\">Web Proxy基础</a></li>\n<li><a href=\"#_origin_server_backend\">源服务器 (后端)</a></li>\n<li><a href=\"#_proxy_server\">代理服务器</a></li>\n<li><a href=\"#_using_proxyhandler\">使用 <code>ProxyHandler</code></a></li>\n<li><a href=\"#_using_proxyhandler_for_multiple_targets\">使用 <code>ProxyHandler</code> 请求多个目标</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Web Proxy</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Web Proxy 使用 <a href=\"https://github.com/eclipse-vertx/vertx-http-proxy\">Vert.x Http Proxy</a>\n提供了一个用于处理反向代理逻辑的处理器</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\n这个模块处于 <em>Tech Preview</em> 阶段，这意味着在不同版本之间API可能会不太一样\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_web_proxy\"><a class=\"anchor\" href=\"#_using_vert_x_web_proxy\"></a>使用 Vert.x Web Proxy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>使用 Vert.x Web Proxy之前，请把以下的依赖放到您的构建描述文件的 <em>依赖</em> 部分中</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 文件中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web-proxy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-web-proxy:4.2.6&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_basic_web_proxy\"><a class=\"anchor\" href=\"#_basic_web_proxy\"></a>Web Proxy基础</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>为了使用Vert.x Web Proxy实现一个本地反向代理，您需要了解这些名词</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><strong>代理服务器</strong> 使用 <code>ProxyHandler</code> 处理前端请求并把他们转发给 <strong>源服务器</strong> .</p>\n</li>\n<li>\n<p><strong>源服务器</strong> 处理来自 <strong>代理服务器</strong> 的请求并处理相对应的响应.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>现在，您已经了解了相应的整体概念。\n让我们来深入实现，先从 <strong>源服务器</strong> 再到使用 <code>ProxyHandler</code> 的 <strong>代理服务器</strong> ：</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_origin_server_backend\"><a class=\"anchor\" href=\"#_origin_server_backend\"></a>源服务器 (后端)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以简单地创建一个 <strong>源服务器</strong> 然后利用 Vert.x Web 的 <code>Router</code> 处理请求,\n这个 <strong>源服务器</strong> 会监听 <code>7070</code> 端口</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">HttpServer</span> <span class=\"hljs-variable\">backendServer</span> <span class=\"hljs-operator\">=</span> vertx.createHttpServer();\n\n<span class=\"hljs-type\">Router</span> <span class=\"hljs-variable\">backendRouter</span> <span class=\"hljs-operator\">=</span> Router.router(vertx);\n\nbackendRouter.route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/foo&quot;</span>).handler(rc -&gt; {\n  rc.response()\n    .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>)\n    .end(<span class=\"hljs-string\">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;I&#x27;m the target resource!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);\n});\n\nbackendServer.requestHandler(backendRouter).listen(<span class=\"hljs-number\">7070</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_proxy_server\"><a class=\"anchor\" href=\"#_proxy_server\"></a>代理服务器</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>创建一个监听 <code>8080</code> 端口的 <strong>代理服务器</strong></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">HttpServer</span> <span class=\"hljs-variable\">proxyServer</span> <span class=\"hljs-operator\">=</span> vertx.createHttpServer();\n\n<span class=\"hljs-type\">Router</span> <span class=\"hljs-variable\">proxyRouter</span> <span class=\"hljs-operator\">=</span> Router.router(vertx);\n\nproxyServer.requestHandler(proxyRouter);\n\nproxyServer.listen(<span class=\"hljs-number\">8080</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_proxyhandler\"><a class=\"anchor\" href=\"#_using_proxyhandler\"></a>使用 <code>ProxyHandler</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>最后一个有趣的部分就是将 <strong>代理服务器</strong> 的请求路由到 <strong>源服务器</strong>,\n因此您需要创建一个指定源服务器目标的 <code>HttpProxy</code> 和 <code>ProxyHandler</code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">HttpClient</span> <span class=\"hljs-variable\">proxyClient</span> <span class=\"hljs-operator\">=</span> vertx.createHttpClient();\n\n<span class=\"hljs-type\">HttpProxy</span> <span class=\"hljs-variable\">httpProxy</span> <span class=\"hljs-operator\">=</span> HttpProxy.reverseProxy(proxyClient);\nhttpProxy.origin(<span class=\"hljs-number\">7070</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n\nproxyRouter\n  .route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/foo&quot;</span>).handler(ProxyHandler.create(httpProxy));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者您也可以在 <code>ProxyHandler</code> 中指定目标</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">HttpClient</span> <span class=\"hljs-variable\">proxyClient</span> <span class=\"hljs-operator\">=</span> vertx.createHttpClient();\n\n<span class=\"hljs-type\">HttpProxy</span> <span class=\"hljs-variable\">httpProxy</span> <span class=\"hljs-operator\">=</span> HttpProxy.reverseProxy(proxyClient);\n\nproxyRouter\n  .route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/foo&quot;</span>)\n  .handler(ProxyHandler.create(httpProxy, <span class=\"hljs-number\">7070</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>最后， <strong>代理服务器</strong> 请求将作为反向代理被很方便地路由到 <strong>源服务器</strong></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_proxyhandler_for_multiple_targets\"><a class=\"anchor\" href=\"#_using_proxyhandler_for_multiple_targets\"></a>使用 <code>ProxyHandler</code> 请求多个目标</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>为了将 <strong>代理服务器</strong> 请求路由到多个 <strong>源服务器</strong> ，\n您只需为每一个源服务器目标创建一个 <code>HttpProxy</code> 并且分别指定对应的目标</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">HttpClient</span> <span class=\"hljs-variable\">proxyClient</span> <span class=\"hljs-operator\">=</span> vertx.createHttpClient();\n\n<span class=\"hljs-type\">HttpProxy</span> <span class=\"hljs-variable\">httpProxy1</span> <span class=\"hljs-operator\">=</span> HttpProxy.reverseProxy(proxyClient);\nhttpProxy1.origin(<span class=\"hljs-number\">7070</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n\n<span class=\"hljs-type\">HttpProxy</span> <span class=\"hljs-variable\">httpProxy2</span> <span class=\"hljs-operator\">=</span> HttpProxy.reverseProxy(proxyClient);\nhttpProxy2.origin(<span class=\"hljs-number\">6060</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n\nproxyRouter\n  .route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/foo&quot;</span>).handler(ProxyHandler.create(httpProxy1));\n\nproxyRouter\n  .route(HttpMethod.GET, <span class=\"hljs-string\">&quot;/bar&quot;</span>).handler(ProxyHandler.create(httpProxy2));</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.2.6"},"__N_SSG":true}