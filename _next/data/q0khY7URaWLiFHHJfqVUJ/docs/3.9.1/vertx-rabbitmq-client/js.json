{"pageProps":{"slug":"3.9.1/vertx-rabbitmq-client/js","title":"RabbitMQ Client for Vert.x","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_getting_started\">Getting Started</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_maven\">Maven</a></li>\n<li><a href=\"#_gradle\">Gradle</a></li>\n<li><a href=\"#_create_a_client\">Create a client</a></li>\n<li><a href=\"#_declare_exchange_with_additional_config\">Declare exchange with additional config</a></li>\n<li><a href=\"#_declare_queue_with_additional_config\">Declare queue with additional config</a></li>\n</ul>\n</li>\n<li><a href=\"#_operations\">Operations</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_publish\">Publish</a></li>\n<li><a href=\"#_publish_with_confirm\">Publish with confirm</a></li>\n<li><a href=\"#_consume\">Consume</a></li>\n<li><a href=\"#_get\">Get</a></li>\n<li><a href=\"#_consume_messages_without_auto_ack\">Consume messages without auto-ack</a></li>\n</ul>\n</li>\n<li><a href=\"#_running_the_tests\">Running the tests</a></li>\n</ul>\n</div>","contents":"<h1>RabbitMQ Client for Vert.x</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A Vert.x client allowing applications to interact with a RabbitMQ broker (AMQP 0.9.1)</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>This service is experimental and the APIs are likely to change before settling down.</strong></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting Started</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_maven\"><a class=\"anchor\" href=\"#_maven\"></a>Maven</h3>\n<div class=\"paragraph\">\n<p>Add the following dependency to your maven project</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-rabbitmq-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_gradle\"><a class=\"anchor\" href=\"#_gradle\"></a>Gradle</h3>\n<div class=\"paragraph\">\n<p>Add the following dependency to your gradle project</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-rabbitmq-client:3.9.1&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_create_a_client\"><a class=\"anchor\" href=\"#_create_a_client\"></a>Create a client</h3>\n<div class=\"paragraph\">\n<p>You can create a client instance as follows using a full amqp uri:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">RabbitMQClient</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-rabbitmq-js/rabbit_mq_client&quot;</span>);\n<span class=\"hljs-keyword\">var</span> config = {\n};\n<span class=\"hljs-comment\">// full amqp uri</span>\nconfig.<span class=\"hljs-property\">uri</span> = <span class=\"hljs-string\">&quot;amqp://xvjvsrrc:VbuL1atClKt7zVNQha0bnnScbNvGiqgb@moose.rmq.cloudamqp.com/xvjvsrrc&quot;</span>;\n<span class=\"hljs-keyword\">var</span> client = <span class=\"hljs-title class_\">RabbitMQClient</span>.<span class=\"hljs-title function_\">create</span>(vertx, config);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or you can also specify individual parameters manually:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">RabbitMQClient</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-rabbitmq-js/rabbit_mq_client&quot;</span>);\n<span class=\"hljs-keyword\">var</span> config = {\n};\n<span class=\"hljs-comment\">// Each parameter is optional</span>\n<span class=\"hljs-comment\">// The default parameter with be used if the parameter is not set</span>\nconfig.<span class=\"hljs-property\">user</span> = <span class=\"hljs-string\">&quot;user1&quot;</span>;\nconfig.<span class=\"hljs-property\">password</span> = <span class=\"hljs-string\">&quot;password1&quot;</span>;\nconfig.<span class=\"hljs-property\">host</span> = <span class=\"hljs-string\">&quot;localhost&quot;</span>;\nconfig.<span class=\"hljs-property\">port</span> = <span class=\"hljs-number\">5672</span>;\nconfig.<span class=\"hljs-property\">virtualHost</span> = <span class=\"hljs-string\">&quot;vhost1&quot;</span>;\nconfig.<span class=\"hljs-property\">connectionTimeout</span> = <span class=\"hljs-number\">6000</span>;\nconfig.<span class=\"hljs-property\">requestedHeartbeat</span> = <span class=\"hljs-number\">60</span>;\nconfig.<span class=\"hljs-property\">handshakeTimeout</span> = <span class=\"hljs-number\">6000</span>;\nconfig.<span class=\"hljs-property\">requestedChannelMax</span> = <span class=\"hljs-number\">5</span>;\nconfig.<span class=\"hljs-property\">networkRecoveryInterval</span> = <span class=\"hljs-number\">500</span>;\nconfig.<span class=\"hljs-property\">automaticRecoveryEnabled</span> = <span class=\"hljs-literal\">true</span>;\n\n<span class=\"hljs-keyword\">var</span> client = <span class=\"hljs-title class_\">RabbitMQClient</span>.<span class=\"hljs-title function_\">create</span>(vertx, config);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can set multiples addresses to connect to a cluster;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">RabbitMQClient</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-rabbitmq-js/rabbit_mq_client&quot;</span>);\n<span class=\"hljs-keyword\">var</span> config = {\n};\nconfig.<span class=\"hljs-property\">user</span> = <span class=\"hljs-string\">&quot;user1&quot;</span>;\nconfig.<span class=\"hljs-property\">password</span> = <span class=\"hljs-string\">&quot;password1&quot;</span>;\nconfig.<span class=\"hljs-property\">virtualHost</span> = <span class=\"hljs-string\">&quot;vhost1&quot;</span>;\n\nconfig.<span class=\"hljs-property\">addresses</span> = [<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;com.rabbitmq.client.Address&quot;</span>).<span class=\"hljs-title function_\">parseAddresses</span>(<span class=\"hljs-string\">&quot;firstHost,secondHost:5672&quot;</span>)];\n\n<span class=\"hljs-keyword\">var</span> client = <span class=\"hljs-title class_\">RabbitMQClient</span>.<span class=\"hljs-title function_\">create</span>(vertx, config);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_declare_exchange_with_additional_config\"><a class=\"anchor\" href=\"#_declare_exchange_with_additional_config\"></a>Declare exchange with additional config</h3>\n<div class=\"paragraph\">\n<p>You can pass additional config parameters to RabbitMQ&#8217;s exchangeDeclare method</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> config = {\n};\n\nconfig.<span class=\"hljs-property\">x</span>-dead-letter-exchange = <span class=\"hljs-string\">&quot;my.deadletter.exchange&quot;</span>;\nconfig.<span class=\"hljs-property\">alternate</span>-exchange = <span class=\"hljs-string\">&quot;my.alternate.exchange&quot;</span>;\n<span class=\"hljs-comment\">// ...</span>\nclient.<span class=\"hljs-title function_\">exchangeDeclare</span>(<span class=\"hljs-string\">&quot;my.exchange&quot;</span>, <span class=\"hljs-string\">&quot;fanout&quot;</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, config, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">onResult, onResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (onResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Exchange successfully declared with config&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    onResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_declare_queue_with_additional_config\"><a class=\"anchor\" href=\"#_declare_queue_with_additional_config\"></a>Declare queue with additional config</h3>\n<div class=\"paragraph\">\n<p>You can pass additional config parameters to RabbitMQs queueDeclare method</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> config = {\n};\nconfig.<span class=\"hljs-property\">x</span>-message-ttl = <span class=\"hljs-number\">10000</span>;\n\nclient.<span class=\"hljs-title function_\">queueDeclare</span>(<span class=\"hljs-string\">&quot;my-queue&quot;</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, config, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">queueResult, queueResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (queueResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Queue declared!&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;Queue failed to be declared!&quot;</span>);\n    queueResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_operations\"><a class=\"anchor\" href=\"#_operations\"></a>Operations</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following are some examples of the operations supported by the RabbitMQService API.\nConsult the javadoc/documentation for detailed information on all API methods.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish\"><a class=\"anchor\" href=\"#_publish\"></a>Publish</h3>\n<div class=\"paragraph\">\n<p>Publish a message to a queue</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> message = {\n  <span class=\"hljs-string\">&quot;body&quot;</span> : <span class=\"hljs-string\">&quot;Hello RabbitMQ, from Vert.x !&quot;</span>\n};\nclient.<span class=\"hljs-title function_\">basicPublish</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;my.queue&quot;</span>, message, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">pubResult, pubResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (pubResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Message published !&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    pubResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish_with_confirm\"><a class=\"anchor\" href=\"#_publish_with_confirm\"></a>Publish with confirm</h3>\n<div class=\"paragraph\">\n<p>Publish a message to a queue and confirm the broker acknowledged it.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> message = {\n  <span class=\"hljs-string\">&quot;body&quot;</span> : <span class=\"hljs-string\">&quot;Hello RabbitMQ, from Vert.x !&quot;</span>\n};\n\n<span class=\"hljs-comment\">// Put the channel in confirm mode. This can be done once at init.</span>\nclient.<span class=\"hljs-title function_\">confirmSelect</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">confirmResult, confirmResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (confirmResult_err == <span class=\"hljs-literal\">null</span>) {\n    client.<span class=\"hljs-title function_\">basicPublish</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;my.queue&quot;</span>, message, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">pubResult, pubResult_err</span>) {\n      <span class=\"hljs-keyword\">if</span> (pubResult_err == <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-comment\">// Check the message got confirmed by the broker.</span>\n        client.<span class=\"hljs-title function_\">waitForConfirms</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">waitResult, waitResult_err</span>) {\n          <span class=\"hljs-keyword\">if</span> (waitResult_err == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Message published !&quot;</span>)} <span class=\"hljs-keyword\">else</span> {\n            waitResult_err.<span class=\"hljs-title function_\">printStackTrace</span>()}\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        pubResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n      }\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    confirmResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consume\"><a class=\"anchor\" href=\"#_consume\"></a>Consume</h3>\n<div class=\"paragraph\">\n<p>Consume messages from a queue.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-comment\">// Create a stream of messages from a queue</span>\nclient.<span class=\"hljs-title function_\">basicConsumer</span>(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">rabbitMQConsumerAsyncResult, rabbitMQConsumerAsyncResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (rabbitMQConsumerAsyncResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;RabbitMQ consumer created !&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> mqConsumer = rabbitMQConsumerAsyncResult;\n    mqConsumer.<span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">message</span>) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Got message: &quot;</span> + message.<span class=\"hljs-title function_\">body</span>().<span class=\"hljs-title function_\">toString</span>());\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    rabbitMQConsumerAsyncResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>At any moment of time you can pause or resume the stream. When stream is paused you won&#8217;t receive any message.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">consumer.<span class=\"hljs-title function_\">pause</span>();\nconsumer.<span class=\"hljs-title function_\">resume</span>();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>There are actually a set of options to specify when creating a consumption stream.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>QueueOptions</code> lets you specify:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The size of internal queue with <code>setMaxInternalQueueSize</code></p>\n</li>\n<li>\n<p>Should the stream keep more recent messages when queue size is exceed with <code>setKeepMostRecent</code></p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> options = {\n  <span class=\"hljs-string\">&quot;maxInternalQueueSize&quot;</span> : <span class=\"hljs-number\">1000</span>,\n  <span class=\"hljs-string\">&quot;keepMostRecent&quot;</span> : <span class=\"hljs-literal\">true</span>\n};\n\nclient.<span class=\"hljs-title function_\">basicConsumer</span>(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, options, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">rabbitMQConsumerAsyncResult, rabbitMQConsumerAsyncResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (rabbitMQConsumerAsyncResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;RabbitMQ consumer created !&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    rabbitMQConsumerAsyncResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you want to stop consuming message from a queue, you can do:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">rabbitMQConsumer.<span class=\"hljs-title function_\">cancel</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cancelResult, cancelResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (cancelResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Consumption successfully stopped&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Tired in attempt to stop consumption&quot;</span>);\n    cancelResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can get notified by the end handler when the queue won&#8217;t process any more messages:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">rabbitMQConsumer.<span class=\"hljs-title function_\">endHandler</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;It is the end of the stream&quot;</span>);\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can set the exception handler to be notified of any error that may occur when a message is processed:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">consumer.<span class=\"hljs-title function_\">exceptionHandler</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;An exception occurred in the process of message handling&quot;</span>);\n  e.<span class=\"hljs-title function_\">printStackTrace</span>();\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And finally, you may want to retrive a related to the consumer tag:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> consumerTag = consumer.<span class=\"hljs-title function_\">consumerTag</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Consumer tag is: &quot;</span> + consumerTag);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_get\"><a class=\"anchor\" href=\"#_get\"></a>Get</h3>\n<div class=\"paragraph\">\n<p>Will get a message from a queue</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">client.<span class=\"hljs-title function_\">basicGet</span>(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">getResult, getResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (getResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> msg = getResult;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Got message: &quot;</span> + msg.<span class=\"hljs-property\">body</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    getResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consume_messages_without_auto_ack\"><a class=\"anchor\" href=\"#_consume_messages_without_auto_ack\"></a>Consume messages without auto-ack</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-comment\">// Setup the rabbitmq consumer</span>\nclient.<span class=\"hljs-title function_\">basicConsumer</span>(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, {\n  <span class=\"hljs-string\">&quot;autoAck&quot;</span> : <span class=\"hljs-literal\">false</span>\n}, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">consumeResult, consumeResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (consumeResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;RabbitMQ consumer created !&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> consumer = consumeResult;\n\n    <span class=\"hljs-comment\">// Set the handler which messages will be sent to</span>\n    consumer.<span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">msg</span>) {\n      <span class=\"hljs-keyword\">var</span> json = msg.<span class=\"hljs-title function_\">body</span>();\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Got message: &quot;</span> + json.<span class=\"hljs-property\">body</span>);\n      <span class=\"hljs-comment\">// ack</span>\n      client.<span class=\"hljs-title function_\">basicAck</span>(json.<span class=\"hljs-property\">deliveryTag</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">asyncResult, asyncResult_err</span>) {\n      });\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    consumeResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_running_the_tests\"><a class=\"anchor\" href=\"#_running_the_tests\"></a>Running the tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You will need to have RabbitMQ installed and running with default ports on localhost for this to work.</p>\n</div>\n</div>\n</div>","version":"3.9.1"},"__N_SSG":true}