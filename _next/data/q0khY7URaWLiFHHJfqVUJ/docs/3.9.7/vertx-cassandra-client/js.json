{"pageProps":{"slug":"3.9.7/vertx-cassandra-client/js","title":"Cassandra Client for Vert.x","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_getting_started\">Getting started</a></li>\n<li><a href=\"#_creating_a_client\">Creating a client</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_client_options\">Client options</a></li>\n<li><a href=\"#_shared_clients\">Shared clients</a></li>\n<li><a href=\"#_client_lifecycle\">Client lifecycle</a></li>\n</ul>\n</li>\n<li><a href=\"#_using_the_api\">Using the API</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_querying\">Querying</a></li>\n<li><a href=\"#_collector_queries\">Collector queries</a></li>\n<li><a href=\"#_prepared_queries\">Prepared queries</a></li>\n<li><a href=\"#_batching\">Batching</a></li>\n<li><a href=\"#_object_mapper\">Object Mapper</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Cassandra Client for Vert.x</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A Vert.x client allowing applications to interact with an <a href=\"http://cassandra.apache.org/\">Apache Cassandra</a> service.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nThis module has <em>Tech Preview</em> status, this means the API can change between versions.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use this module, add the following to the <em>dependencies</em> section of your Maven POM file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-cassandra-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or, if you use Gradle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-cassandra-client:3.9.7&#x27;</span></code></pre>\n</div>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nThe Cassandra client is not compatible with the Vert.x Dropwizard Metrics library.\nBoth are using a different major version of the Dropwizard Metrics library and the Datastax Java driver <a href=\"https://github.com/datastax/java-driver/pull/943\">won&#8217;t upgrade</a> to the most recent version due to the drop of Java 7.\nThe next major version (4.x) of the driver will use a more recent Dropwizard Metrics library  version.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_client\"><a class=\"anchor\" href=\"#_creating_a_client\"></a>Creating a client</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_client_options\"><a class=\"anchor\" href=\"#_client_options\"></a>Client options</h3>\n<div class=\"paragraph\">\n<p>Cassandra is a distributed system, and it can have many nodes.\nTo connect to Cassandra you need to specify the addresses of some cluster nodes when creating a <code><a href=\"../dataobjects.html#CassandraClientOptions\">CassandraClientOptions</a></code> object:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">CassandraClient</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-cassandra-js/cassandra_client&quot;</span>);\n<span class=\"hljs-keyword\">var</span> options = {\n  <span class=\"hljs-string\">&quot;contactPoints&quot;</span> : [\n    <span class=\"hljs-string\">&quot;node1.address&quot;</span>,\n    <span class=\"hljs-string\">&quot;node2.address&quot;</span>,\n    <span class=\"hljs-string\">&quot;node3.address&quot;</span>\n  ]\n};\n<span class=\"hljs-keyword\">var</span> client = <span class=\"hljs-title class_\">CassandraClient</span>.<span class=\"hljs-title function_\">create</span>(vertx, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>By default, the Cassandra client for Vert.x connects to the local machine&#8217;s port <code>9042</code> and is not tied to any specific keyspace.\nBut you can set either or both of these options:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">CassandraClient</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-cassandra-js/cassandra_client&quot;</span>);\n<span class=\"hljs-keyword\">var</span> options = {\n  <span class=\"hljs-string\">&quot;port&quot;</span> : <span class=\"hljs-number\">9142</span>,\n  <span class=\"hljs-string\">&quot;keyspace&quot;</span> : <span class=\"hljs-string\">&quot;my_keyspace&quot;</span>\n};\n<span class=\"hljs-keyword\">var</span> client = <span class=\"hljs-title class_\">CassandraClient</span>.<span class=\"hljs-title function_\">create</span>(vertx, options);</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">提示</div>\n</td>\n<td class=\"content\">\nFor fine tuning purposes, <code><a href=\"../dataobjects.html#CassandraClientOptions\">CassandraClientOptions</a></code> exposes a <code>com.datastax.driver.core.Cluster.Builder</code> instance.\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_shared_clients\"><a class=\"anchor\" href=\"#_shared_clients\"></a>Shared clients</h3>\n<div class=\"paragraph\">\n<p>If you deploy multiple instances of your verticle or have different verticles interacting with the same database, it is recommended to create a shared client:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">CassandraClient</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-cassandra-js/cassandra_client&quot;</span>);\n<span class=\"hljs-keyword\">var</span> options = {\n  <span class=\"hljs-string\">&quot;contactPoints&quot;</span> : [\n    <span class=\"hljs-string\">&quot;node1.address&quot;</span>,\n    <span class=\"hljs-string\">&quot;node2.address&quot;</span>,\n    <span class=\"hljs-string\">&quot;node3.address&quot;</span>\n  ],\n  <span class=\"hljs-string\">&quot;keyspace&quot;</span> : <span class=\"hljs-string\">&quot;my_keyspace&quot;</span>\n};\n<span class=\"hljs-keyword\">var</span> client = <span class=\"hljs-title class_\">CassandraClient</span>.<span class=\"hljs-title function_\">createShared</span>(vertx, <span class=\"hljs-string\">&quot;sharedClientName&quot;</span>, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Shared clients with the same name will use a single underlying <code>com.datastax.driver.core.Session</code>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_client_lifecycle\"><a class=\"anchor\" href=\"#_client_lifecycle\"></a>Client lifecycle</h3>\n<div class=\"paragraph\">\n<p>After the client is created, it is not connected until the first query is executed.</p>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">提示</div>\n</td>\n<td class=\"content\">\nA shared client can be connected after creation if another client with the same name has already executed a query.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Clients created inside a verticle are automatically stopped when the verticle is undeployed.\nIn other words, you do not need to invoke <code><a href=\"../../jsdoc/module-vertx-cassandra-js_cassandra_client-CassandraClient.html#close\">close</a></code> in the verticle <code>stop</code> method.</p>\n</div>\n<div class=\"paragraph\">\n<p>In all other cases, you must manually close the client.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nWhen a shared client is closed, the driver dession is not closed if other clients with the same name are still running.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_api\"><a class=\"anchor\" href=\"#_using_the_api\"></a>Using the API</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The client API is represented by <code><a href=\"../../jsdoc/module-vertx-cassandra-js_cassandra_client-CassandraClient.html\">CassandraClient</a></code>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_querying\"><a class=\"anchor\" href=\"#_querying\"></a>Querying</h3>\n<div class=\"paragraph\">\n<p>You can get query results using three different ways.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_streaming\"><a class=\"anchor\" href=\"#_streaming\"></a>Streaming</h4>\n<div class=\"paragraph\">\n<p>The streaming API is most appropriate when you need to consume results iteratively, e.g you want to process each item.\nThis is very efficient specially for large amount of rows.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to give you some inspiration and ideas on how you can use the API, we&#8217;d like to you to consider this example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">cassandraClient.<span class=\"hljs-title function_\">queryStream</span>(<span class=\"hljs-string\">&quot;SELECT my_string_col FROM my_keyspace.my_table where my_key = &#x27;my_value&#x27;&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">queryStream, queryStream_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (queryStream_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> stream = queryStream;\n\n    <span class=\"hljs-comment\">// resume stream when queue is ready to accept buffers again</span>\n    response.<span class=\"hljs-title function_\">drainHandler</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v</span>) {\n      stream.<span class=\"hljs-title function_\">resume</span>();\n    });\n\n    stream.<span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">row</span>) {\n      <span class=\"hljs-keyword\">var</span> value = row.<span class=\"hljs-title function_\">getString</span>(<span class=\"hljs-string\">&quot;my_string_col&quot;</span>);\n      response.<span class=\"hljs-title function_\">write</span>(value);\n\n      <span class=\"hljs-comment\">// pause row stream when we buffer queue is full</span>\n      <span class=\"hljs-keyword\">if</span> (response.<span class=\"hljs-title function_\">writeQueueFull</span>()) {\n        stream.<span class=\"hljs-title function_\">pause</span>();\n      }\n    });\n\n    <span class=\"hljs-comment\">// end request when we reached end of the stream</span>\n    stream.<span class=\"hljs-title function_\">endHandler</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">end</span>) {\n      response.<span class=\"hljs-title function_\">end</span>();\n    });\n\n  } <span class=\"hljs-keyword\">else</span> {\n    queryStream_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n    <span class=\"hljs-comment\">// response with internal server error if we are not able to execute given query</span>\n    response.<span class=\"hljs-title function_\">setStatusCode</span>(<span class=\"hljs-number\">500</span>).<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">&quot;Unable to execute the query&quot;</span>);\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the example, we are executing a query, and stream results via HTTP.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_bulk_fetching\"><a class=\"anchor\" href=\"#_bulk_fetching\"></a>Bulk fetching</h4>\n<div class=\"paragraph\">\n<p>This API should be used when you need to process all the rows at the same time.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">cassandraClient.<span class=\"hljs-title function_\">executeWithFullFetch</span>(<span class=\"hljs-string\">&quot;SELECT * FROM my_keyspace.my_table where my_key = &#x27;my_value&#x27;&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">executeWithFullFetch, executeWithFullFetch_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (executeWithFullFetch_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> rows = executeWithFullFetch;\n    <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">forEach</span>.<span class=\"hljs-title function_\">call</span>(rows, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">row</span>) {\n      <span class=\"hljs-comment\">// handle each row here</span>\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Unable to execute the query&quot;</span>);\n    executeWithFullFetch_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">小心</div>\n</td>\n<td class=\"content\">\nUse bulk fetching only if you can afford to load the full result set in memory.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_collector_queries\"><a class=\"anchor\" href=\"#_collector_queries\"></a>Collector queries</h3>\n<div class=\"paragraph\">\n<p>You can use Java collectors with the query API:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-title class_\">Code</span> not translatable</code></pre>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_low_level_fetch\"><a class=\"anchor\" href=\"#_low_level_fetch\"></a>Low level fetch</h4>\n<div class=\"paragraph\">\n<p>This API provides greater control over loading at the expense of being a bit lower-level than the streaming and bulk fetching APIs.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">cassandraClient.<span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-string\">&quot;SELECT * FROM my_keyspace.my_table where my_key = &#x27;my_value&#x27;&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">execute, execute_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (execute_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> resultSet = execute;\n\n    resultSet.<span class=\"hljs-title function_\">one</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">one, one_err</span>) {\n      <span class=\"hljs-keyword\">if</span> (one_err == <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">var</span> row = one;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;One row successfully fetched&quot;</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Unable to fetch a row&quot;</span>);\n        one_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n      }\n    });\n\n    resultSet.<span class=\"hljs-title function_\">fetchMoreResults</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fetchMoreResults, fetchMoreResults_err</span>) {\n      <span class=\"hljs-keyword\">if</span> (fetchMoreResults_err == <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">var</span> availableWithoutFetching = resultSet.<span class=\"hljs-title function_\">getAvailableWithoutFetching</span>();\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Now we have &quot;</span> + availableWithoutFetching + <span class=\"hljs-string\">&quot; rows fetched, but not consumed!&quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (resultSet.<span class=\"hljs-title function_\">isFullyFetched</span>()) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;The result is fully fetched, we don&#x27;t need to call this method for one more time!&quot;</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;The result still does not fully fetched&quot;</span>);\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Unable to fetch more results&quot;</span>);\n        fetchMoreResults_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n      }\n    });\n\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Unable to execute the query&quot;</span>);\n    execute_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_prepared_queries\"><a class=\"anchor\" href=\"#_prepared_queries\"></a>Prepared queries</h3>\n<div class=\"paragraph\">\n<p>For security and efficiency reasons, it is a good idea to use prepared statements for all the queries you are using more than once.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can prepare a query:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">cassandraClient.<span class=\"hljs-title function_\">prepare</span>(<span class=\"hljs-string\">&quot;SELECT * FROM my_keyspace.my_table where my_key = ? &quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">preparedStatementResult, preparedStatementResult_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (preparedStatementResult_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;The query has successfully been prepared&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> preparedStatement = preparedStatementResult;\n    <span class=\"hljs-comment\">// now you can use this PreparedStatement object for the next queries</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Unable to prepare the query&quot;</span>);\n    preparedStatementResult_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And then use the <a href=\"https://docs.datastax.com/en/drivers/java/3.5/com/datastax/driver/core/PreparedStatement.html\"><code>PreparedStatement</code></a> for all the next queries:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-comment\">// You can execute you prepared statement using any way to execute queries.</span>\n\n<span class=\"hljs-comment\">// Low level fetch API</span>\ncassandraClient.<span class=\"hljs-title function_\">execute</span>(preparedStatement.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-string\">&quot;my_value&quot;</span>), <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">done, done_err</span>) {\n  <span class=\"hljs-keyword\">var</span> results = done;\n  <span class=\"hljs-comment\">// handle results here</span>\n});\n\n<span class=\"hljs-comment\">// Bulk fetching API</span>\ncassandraClient.<span class=\"hljs-title function_\">executeWithFullFetch</span>(preparedStatement.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-string\">&quot;my_value&quot;</span>), <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">done, done_err</span>) {\n  <span class=\"hljs-keyword\">var</span> results = done;\n  <span class=\"hljs-comment\">// handle results here</span>\n});\n\n<span class=\"hljs-comment\">// Streaming API</span>\ncassandraClient.<span class=\"hljs-title function_\">queryStream</span>(preparedStatement.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-string\">&quot;my_value&quot;</span>), <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">done, done_err</span>) {\n  <span class=\"hljs-keyword\">var</span> results = done;\n  <span class=\"hljs-comment\">// handle results here</span>\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_batching\"><a class=\"anchor\" href=\"#_batching\"></a>Batching</h3>\n<div class=\"paragraph\">\n<p>In case you&#8217;d like to execute several queries at once, you can use <a href=\"https://docs.datastax.com/en/drivers/java/3.5/com/datastax/driver/core/BatchStatement.html\"><code>BatchStatement</code></a> for that:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> batchStatement = <span class=\"hljs-keyword\">new</span> (<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;com.datastax.driver.core.BatchStatement&quot;</span>))().<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> (<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;com.datastax.driver.core.SimpleStatement&quot;</span>))(<span class=\"hljs-string\">&quot;INSERT INTO NAMES (name) VALUES (&#x27;Pavel&#x27;)&quot;</span>)).<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> (<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;com.datastax.driver.core.SimpleStatement&quot;</span>))(<span class=\"hljs-string\">&quot;INSERT INTO NAMES (name) VALUES (&#x27;Thomas&#x27;)&quot;</span>)).<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> (<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;com.datastax.driver.core.SimpleStatement&quot;</span>))(<span class=\"hljs-string\">&quot;INSERT INTO NAMES (name) VALUES (&#x27;Julien&#x27;)&quot;</span>));\n\ncassandraClient.<span class=\"hljs-title function_\">execute</span>(batchStatement, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result, result_err</span>) {\n  <span class=\"hljs-keyword\">if</span> (result_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;The given batch executed successfully&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Unable to execute the batch&quot;</span>);\n    result_err.<span class=\"hljs-title function_\">printStackTrace</span>();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_object_mapper\"><a class=\"anchor\" href=\"#_object_mapper\"></a>Object Mapper</h3>\n<div class=\"paragraph\">\n<p>You can use the object <code><a href=\"../../jsdoc/module-vertx-cassandra-js_mapper-Mapper.html\">Mapper</a></code> to map between domain classes and queries.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, add the following to the <em>dependencies</em> section of your Maven POM file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.datastax.cassandra<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>cassandra-driver-mapping<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or, if you use Gradle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&#x27;com.datastax.cassandra:cassandra-driver-mapping:3.5.0&#x27;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Consider the following entity:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Table(keyspace = &quot;test&quot;, name = &quot;names&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MappedClass</span> {\n <span class=\"hljs-meta\">@PartitionKey</span>\n <span class=\"hljs-keyword\">private</span> String name;\n\n <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MappedClass</span><span class=\"hljs-params\">(String name)</span> {\n   <span class=\"hljs-built_in\">this</span>.name = name;\n }\n\n MappedClass() {\n   <span class=\"hljs-comment\">// Required for mapping</span>\n }\n\n <span class=\"hljs-comment\">// getters / setters</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Create a mapper for it and you may save, retrieve or delete data from the corresponding table:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">MappingManager</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-cassandra-js/mapping_manager&quot;</span>);\n<span class=\"hljs-keyword\">var</span> mappingManager = <span class=\"hljs-title class_\">MappingManager</span>.<span class=\"hljs-title function_\">create</span>(cassandraClient);\n<span class=\"hljs-keyword\">var</span> mapper = mappingManager.<span class=\"hljs-title function_\">mapper</span>(<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;examples.CassandraClientExamples.MappedClass&quot;</span>).<span class=\"hljs-property\">class</span>);\n\n<span class=\"hljs-keyword\">var</span> value = <span class=\"hljs-keyword\">new</span> (<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;examples.CassandraClientExamples.MappedClass&quot;</span>))(<span class=\"hljs-string\">&quot;foo&quot;</span>);\n\nmapper.<span class=\"hljs-title function_\">save</span>(value, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">handler, handler_err</span>) {\n  <span class=\"hljs-comment\">// Entity saved</span>\n});\n\nmapper.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;java.util.Collections&quot;</span>).<span class=\"hljs-title function_\">singletonList</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>), <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">handler, handler_err</span>) {\n  <span class=\"hljs-comment\">// Entity loaded</span>\n});\n\nmapper.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-title class_\">Java</span>.<span class=\"hljs-title function_\">type</span>(<span class=\"hljs-string\">&quot;java.util.Collections&quot;</span>).<span class=\"hljs-title function_\">singletonList</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>), <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">handler, handler_err</span>) {\n  <span class=\"hljs-comment\">// Entity deleted</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">提示</div>\n</td>\n<td class=\"content\">\nIt is safe to reuse mapping manager and mapper instances for a given Cassandra client.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>","version":"3.9.7"},"__N_SSG":true}