{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Checklist for Migrating from Vert.x 2.1.x to Vert.x 3 - Part One","category":"guides","authors":[{"name":"Mark Spritzler","github_id":"bytor99999"}],"summary":"So while upgrading our application, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major upgrade from the previous version, with so many changes."},"date":"2015-07-06","slug":"checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one","readingTime":{"text":"9 min read","minutes":8.74,"time":524400,"words":1748},"content":{"compiledSource":"var h=Object.defineProperty,m=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var l=(a,n,t)=>n in a?h(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))r.call(n,t)&&l(a,t,n[t]);if(o)for(var t of o(n))s.call(n,t)&&l(a,t,n[t]);return a},p=(a,n)=>m(a,c(n));var d=(a,n)=>{var t={};for(var i in a)r.call(a,i)&&n.indexOf(i)<0&&(t[i]=a[i]);if(a!=null&&o)for(var i of o(a))n.indexOf(i)<0&&s.call(a,i)&&(t[i]=a[i]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var i=t,{components:a}=i,n=d(i,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"This blog post presents feed\\xADbacks from a project mi\\xADgra\\xADtion using Vert.x 2 to Vert.x 3.\"),mdx(\"h2\",e({},{id:\"we-are-in-the-process-of-converting-our-vertx-215-application-to-vertx-30\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#we-are-in-the-process-of-converting-our-vertx-215-application-to-vertx-30\"})),\"We are in the process of converting our Vert.x 2.1.5 application to Vert.x 3.0.\"),mdx(\"p\",null,\"So while up\\xADgrad\\xADing our ap\\xADpli\\xADca\\xADtion, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major up\\xADgrade from the pre\\xADvi\\xADous ver\\xADsion, with so many changes.\"),mdx(\"p\",null,\"It re\\xADquires re-\\u200Bthinking your cur\\xADrent 2.x Vert.x ap\\xADpli\\xADca\\xADtion. There are new classes, new apis, and a new pack\\xADage struc\\xADture that has greatly sim\\xADpli\\xADfied things that we used to have to work around. There\\xADfore in our up\\xADgrade it re\\xADquired us to refac\\xADtor and re\\xADmove any un\\xADnec\\xADes\\xADsary \",mdx(\"em\",{parentName:\"p\"},\"\\u201Chacks\\u201D\"),\" that weren\\u2019t avail\\xADable in 2 that are now a part of Vert.x 3 that you re\\xADally want and need to take ad\\xADvan\\xADtage of. (I don\\u2019t mean there are hacks in 3.x, just that we had in our ap\\xADpli\\xADca\\xADtion with Vert.x 2.x)\"),mdx(\"p\",null,\"There are \",mdx(\"em\",{parentName:\"p\"},\"Met\\xADrics\"),\", and \",mdx(\"em\",{parentName:\"p\"},\"Clus\\xADtered shared data\"),\", with lock\\xADing and many more fea\\xADtures that are amaz\\xADing new ad\\xADdi\\xADtions. These are things we had to hack into our ap\\xADpli\\xADca\\xADtion with Vert.x 2.x. We added our own \",mdx(\"inlineCode\",{parentName:\"p\"},\"MetricsRegistry\"),\" from \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://dropwizard.github.io/metrics/3.1.0/getting-started/\"}),\"Drop\\xADWiz\\xADard\"),\" which meant mak\\xADing our own \",mdx(\"inlineCode\",{parentName:\"p\"},\"Main\"),\" class that called Vert.x\\u2019s \",mdx(\"inlineCode\",{parentName:\"p\"},\"Starter\"),\" class after start\\xADing up the reg\\xADistry, but only in our \",mdx(\"em\",{parentName:\"p\"},\"De\\xADvops\"),\" server de\\xADploys, not our de\\xADvel\\xADoper ma\\xADchines. And we had to build our own dis\\xADtrib\\xADuted locked of clus\\xADtered data that also re\\xADquired writ\\xADing a com\\xADpre\\xADhen\\xADsive dis\\xADtrib\\xADuted timers. (The timers got fixed with a bet\\xADter actor model). But now we can use what Vert.x gives us in\\xADter\\xADnally for those use cases.\"),mdx(\"p\",null,\"This blog post is part one, as I am sure there will be some new changes that we need to do that we haven\\u2019t got\\xADten to yet. Which as we go, will post in part two. Also that this post is a work in progress in that when\\xADever you are up\\xADgrad\\xADing and refac\\xADtor\\xADing your code, it doesn\\u2019t leave much time for tak\\xADing de\\xADtailed notes, or writ\\xADing beau\\xADti\\xADful prose. I am a ter\\xADri\\xADble writer even when I can fully con\\xADcen\\xADtrate on it. So the first draft will just be a list of my notes. These notes are not in any par\\xADtic\\xADu\\xADlar order, but some things like tests you might want to save for last. (Just DON\\u2019T delete your tests, tests are very im\\xADpor\\xADtant)\"),mdx(\"p\",null,\"One of the first things that Vert.x has changed is the whole \",mdx(\"em\",{parentName:\"p\"},\"class\\xADloader\"),\" setup. Read the Vert.x Docs for more in\\xADfor\\xADma\\xADtion but ba\\xADsi\\xADcally, we have a flat \",mdx(\"em\",{parentName:\"p\"},\"class\\xADloader\"),\" sys\\xADtem now. YAY! And one of the first things I no\\xADticed that is gone is the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Platform\"),\" mod\\xADule.\"),mdx(\"h2\",e({},{id:\"changes-we-have-made\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#changes-we-have-made\"})),\"Changes we have made.\"),mdx(\"h3\",e({},{id:\"dependency-changes\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#dependency-changes\"})),\"Dependency changes\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"So the first thing we did was to re\\xADmove the \",mdx(\"inlineCode\",{parentName:\"p\"},\"vert.x-platform\"),\" de\\xADpen\\xADdency from our \",mdx(\"inlineCode\",{parentName:\"p\"},\"pom\"),\" file (Build de\\xADpen\\xADdency file of what\\xADever build sys\\xADtem you use) This also means that you will be re\\xADmov\\xADing any im\\xADport state\\xADments from your code that has \",mdx(\"inlineCode\",{parentName:\"p\"},\".platform\"),\". Which leads us to the next point.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"Change all the im\\xADports for Vertx. from \",mdx(\"inlineCode\",{parentName:\"p\"},\"org.vertx\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"io.vertx\"),\". This could be a lot of work, as it is in every class you use Vert.x in. We had at least 250 lo\\xADca\\xADtions to change here. Some classes have moved pack\\xADages and \\u201Cjars\\u201D that have them, so there will be some new jars to in\\xADclude as de\\xADpen\\xADden\\xADcies and dif\\xADfer\\xADent im\\xADport state\\xADments for them.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"If using a lan\\xADguage other than Java, change the de\\xADpen\\xADdency to \",mdx(\"inlineCode\",{parentName:\"p\"},\"vertx-lang-<<language>>\"))),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},`Re\\xADmove any mod\\xADules ref\\xADer\\xADences that are using Vert.x 2.x stuff. You can get an odd error like\n`,mdx(\"em\",{parentName:\"p\"},\"The type org.vertx.java.core.json.JsonOb\\xADject can\\xADnot be re\\xADsolved. It is in\\xADdi\\xADrectly ref\\xADer\\xADenced from re\\xADquired .class files\"),\".\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"p\"},\"testtools\"),\" de\\xADpen\\xADdency is gone. There is now Vertx-\\u200Bunit. So all your pre\\xADvi\\xADous tests need to be com\\xADpletely re-\\u200Bwritten in the new style. This can be re\\xADally dif\\xADfi\\xADcult and time con\\xADsum\\xADing as the tests you al\\xADready have writ\\xADten re\\xADally do need to be re-\\u200Bwritten from scratch. But these tests are also the back\\xADbone in know\\xADing if your code is work\\xADing. So this could take months if you have a re\\xADally full set of test suites al\\xADready. Also note the list below is to con\\xADvert your JUnit In\\xADte\\xADgra\\xADtion tests. as vertx-\\u200Bunit first and fore\\xADmost pro\\xADvides its own test\\xADing frame\\xADwork/suite but it also works in JUnit, and if you are using JUnit you need to do the fol\\xADlow\\xADing\"))),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Re\\xADmove all the im\\xADports to \",mdx(\"inlineCode\",{parentName:\"li\"},\"TestTools\"),\", in\\xADclud\\xADing \",mdx(\"inlineCode\",{parentName:\"li\"},\"VertxAssert\"),\". I would do a find/re\\xADplace to re\\xADplace all the \",mdx(\"inlineCode\",{parentName:\"li\"},\"VertxAssert\"),\" to \",mdx(\"inlineCode\",{parentName:\"li\"},\"testContext\"),\" for when you have to add \",mdx(\"inlineCode\",{parentName:\"li\"},\"TestContext\"),\" to all your \",mdx(\"inlineCode\",{parentName:\"li\"},\"@Test\"),\" meth\\xADods. I rec\\xADom\\xADmend nam\\xADing the pa\\xADra\\xADme\\xADter \",mdx(\"inlineCode\",{parentName:\"li\"},\"testContext\"),\", just to put more con\\xADtext, into your con\\xADtext. Be\\xADcause if you just have \",mdx(\"inlineCode\",{parentName:\"li\"},\"context\"),\" as your pa\\xADra\\xADme\\xADter name, how do you know what con\\xADtext the con\\xADtext is? Sorry, that was too much fun. Ba\\xADsi\\xADcally, what I am say\\xADing is if you have say \",mdx(\"inlineCode\",{parentName:\"li\"},\"Spring ApplicationContext\"),\" in with your in\\xADte\\xADgra\\xADtion tests with Vert.x what does \",mdx(\"inlineCode\",{parentName:\"li\"},\"context\"),\" rep\\xADre\\xADsent? Spring or Vert.x test con\\xADtext.\"),mdx(\"li\",{parentName:\"ul\"},\"Add \",mdx(\"inlineCode\",{parentName:\"li\"},\"@RunWith(VertxUnitRunner.class)\"),\" above your test class\"),mdx(\"li\",{parentName:\"ul\"},\"Re\\xADmove any \",mdx(\"inlineCode\",{parentName:\"li\"},\"VertxAssert.testComplete()\"),\" those are gone. It needs \",mdx(\"inlineCode\",{parentName:\"li\"},\"TestContext.async().complete()\"),\". It is also im\\xADpor\\xADtant to un\\xADder\\xADstand what \",mdx(\"inlineCode\",{parentName:\"li\"},\"async()\"),\" means. When to call it, when to com\\xADplete it. It also al\\xADlows you to do mul\\xADti\\xADple \",mdx(\"inlineCode\",{parentName:\"li\"},\"async()\"),\" calls and nested ones. I think I needed that when I had a test that was a longer use case of many mes\\xADsages being sent, but only after re\\xADsponses to other ones oc\\xADcurred. For in\\xADstance, to do chat in our app, you have to con\\xADnect, sub\\xADscribe, friend some\\xADone, then you can send a chat mes\\xADsage. So that is 4 total Vert.x Mes\\xADsages sent from the Test client. And you can sub\\xADscribe until con\\xADnect com\\xADpleted, and you can send or re\\xADceive mes\\xADsages un\\xADless you are sub\\xADscribed and have a friend. So we need to have a few \",mdx(\"inlineCode\",{parentName:\"li\"},\"async()\"),\" calls in that sce\\xADnario.\"),mdx(\"li\",{parentName:\"ul\"},\"What is in your \",mdx(\"inlineCode\",{parentName:\"li\"},\"start\"),\" method over\\xADride. Make that an \",mdx(\"inlineCode\",{parentName:\"li\"},\"@Before\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"What is in your \",mdx(\"inlineCode\",{parentName:\"li\"},\"stop\"),\" method over\\xADride. Make that an \",mdx(\"inlineCode\",{parentName:\"li\"},\"@After\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"If you have your as\\xADser\\xADtions have cus\\xADtom mes\\xADsage \",mdx(\"em\",{parentName:\"li\"},\"strings\"),\" to log out when they fail, that pa\\xADra\\xADme\\xADter is now at the end of the \",mdx(\"inlineCode\",{parentName:\"li\"},\"assert\"),\" method call. Yes, this one can be painful.\")),mdx(\"h3\",e({},{id:\"build-changes\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#build-changes\"})),\"Build Changes\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"Re\\xADmove all \",mdx(\"em\",{parentName:\"p\"},\"vertx maven plugin\"),\" code to gen\\xADer\\xADate mod\\xADules, in\\xADstead cre\\xADate \",mdx(\"em\",{parentName:\"p\"},\"fat\"),\" jars, which re\\xADquires adding the \",mdx(\"em\",{parentName:\"p\"},\"Shade maven plugin\"),\" to put all jar files into a big fat jar. The vertx-\\u200Bexamples project has \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/vert-x3/vertx-examples/tree/master/maven-simplest\"}),\"simplest-\\u200Bmaven\"),\" which has the stuff to cre\\xADate the fat jar. \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/vert-x3/vertx-examples/tree/master/gradle-simplest\"}),\"simplest-\\u200Bgradle\"),\" is the gra\\xADdle equiv\\xADa\\xADlent.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"If you were run\\xADning your ap\\xADpli\\xADca\\xADtion with \",mdx(\"inlineCode\",{parentName:\"p\"},\"runMod\"),\" or some\\xADthing like that then you need to cre\\xADate a \",mdx(\"em\",{parentName:\"p\"},\"fat\"),\" jar, chang\\xADing the build file as in \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/vert-x3/vertx-examples/blob/master/maven-simplest/pom.xml\"}),\"this one\"),\" and cre\\xADate a Main class like here \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/vert-x3/vertx-examples/blob/master/maven-simplest/src/main/java/io/vertx/example/HelloWorldEmbedded.java\"}),\"this one\"),\".\"))),mdx(\"h3\",e({},{id:\"classcode-changes\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#classcode-changes\"})),\"Class/Code Changes\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"p\"},\"Verticle\"),\" is now an in\\xADter\\xADface and not a class to ex\\xADtend, so using Groovy as an ex\\xADam\\xADple you now ex\\xADtend \",mdx(\"inlineCode\",{parentName:\"p\"},\"GroovyVerticle\"),\". In Java ex\\xADtend \",mdx(\"inlineCode\",{parentName:\"p\"},\"AbstractVerticle\"),\" in\\xADstead.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"There is no \",mdx(\"inlineCode\",{parentName:\"p\"},\"registerHandler\"),\" on the event\\xADBus any\\xADmore. So every\\xADwhere you do that has to change to cre\\xADate/call \",mdx(\"inlineCode\",{parentName:\"p\"},\"consumer()\"),\" and to un\\xADreg\\xADis\\xADter that han\\xADdler, you have to have a ref\\xADer\\xADence to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"MessageConsumer\"),\" that \",mdx(\"inlineCode\",{parentName:\"p\"},\"consumer()\"),\" call re\\xADturns and call its \",mdx(\"inlineCode\",{parentName:\"p\"},\"unregister\"),\" method.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"p\"},\"JsonObject.toMap()\"),\" changed to \",mdx(\"inlineCode\",{parentName:\"p\"},\"JsonObject.getMap()\"))),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"p\"},\"JsonObject\"),\" also re\\xADmoved all the \",mdx(\"inlineCode\",{parentName:\"p\"},\"putXXX\"),\" meth\\xADods with just one \",mdx(\"inlineCode\",{parentName:\"p\"},\"put\"),\" method with over\\xADloaded ver\\xADsions for dif\\xADfer\\xADent types.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"p\"},\"JsonObjectMessage\"),\" no longer ex\\xADists. What re\\xADplaces de\\xADpends on what you are doing. Mean\\xADing, if it is an \",mdx(\"inlineCode\",{parentName:\"p\"},\"async\"),\" call\\xADback to a de\\xADploy, you will get a \",mdx(\"inlineCode\",{parentName:\"p\"},\"Message\"),\" in\\xADstance back that has \",mdx(\"inlineCode\",{parentName:\"p\"},\"succeeded()\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"failed()\"),\" meth\\xADods as well as \",mdx(\"inlineCode\",{parentName:\"p\"},\"body()\"),\" to check any re\\xADsults. If it is a \",mdx(\"inlineCode\",{parentName:\"p\"},\"Consumer\"),`, it is typ\\xADi\\xADcally a straight for\\xADward\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"JsonObject\"),\". If you are in Groovy it is also a \",mdx(\"inlineCode\",{parentName:\"p\"},\"JsonObject\"),\", but the \",mdx(\"inlineCode\",{parentName:\"p\"},\"body()\"),\" is a \",mdx(\"inlineCode\",{parentName:\"p\"},\"Map\"),\" which you can use di\\xADrectly now, in\\xADstead of hav\\xADing to con\\xADvert from \",mdx(\"inlineCode\",{parentName:\"p\"},\"JsonObject\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"Map\"),\".\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"There isn\\u2019t a \",mdx(\"inlineCode\",{parentName:\"p\"},\"container\"),\" vari\\xADable in \",mdx(\"inlineCode\",{parentName:\"p\"},\"Verticles\"),\" any\\xADmore for de\\xADploy\\xADing ver\\xADti\\xADcles and also a con\\xADfig file. You need to use \",mdx(\"inlineCode\",{parentName:\"p\"},\"vertx.getOrCreateContext().config()\"),\" to get to it. I used that in the SockJS Ex\\xADam\\xADple code below.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"p\"},\"SharedData\"),\" no longer has shared sets. It has a \",mdx(\"inlineCode\",{parentName:\"p\"},\"Map\"),\" of \",mdx(\"inlineCode\",{parentName:\"p\"},\"SharedData\"),\", so an entry in that \",mdx(\"inlineCode\",{parentName:\"p\"},\"Map\"),\" of shared data could be the name of the set as the key, and a \",mdx(\"inlineCode\",{parentName:\"p\"},\"Set\"),\" as the value. It ac\\xADtu\\xADally gives you more flex\\xADi\\xADbil\\xADity of what you put into Shared data, so this is ac\\xADtu\\xADally a big win for us.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"Get\\xADting the \",mdx(\"inlineCode\",{parentName:\"p\"},\"writeHandlerID\"),\" from a Socket type, is now a method call in\\xADstead of \",mdx(\"inlineCode\",{parentName:\"p\"},\".writeHandlerID\"),\", so \",mdx(\"inlineCode\",{parentName:\"p\"},\".writeHandlerID()\"))),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"p\"},\"SockJSSocket\"),\" is in \",mdx(\"em\",{parentName:\"p\"},\"vertx-\\u200Bweb\"),\" pack\\xADage now, so in\\xADclude it to get the class.\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"There isn\\u2019t a \",mdx(\"inlineCode\",{parentName:\"p\"},\"SockJSServer\"),\" class any\\xADmore ei\\xADther. So you will cre\\xADate a \",mdx(\"inlineCode\",{parentName:\"p\"},\"WebServer\"),\", a \",mdx(\"inlineCode\",{parentName:\"p\"},\"Router\"),`\nand set SSL (if you are using SSL on the Web\\xADServer) then cre\\xADate a `,mdx(\"inlineCode\",{parentName:\"p\"},\"SockJSHandler\"),\" to as\\xADsign to the router via the \",mdx(\"inlineCode\",{parentName:\"p\"},\"route()\"),\" method and \",mdx(\"inlineCode\",{parentName:\"p\"},\"handler()\"),` meth\\xADods in the Router api.\nHere is an ex\\xADam\\xADple of our code. Al\\xADthough I haven\\u2019t tested it yet. ;)`))),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-groovy\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-class\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"MyVerticle\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"extends\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"GroovyVerticle\"),\" {\"),`\n  Router router\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@Override\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"void\"),\" start() \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"throws\"),` Exception {\n     router = Router.router(vertx)\n     (Map<String, Object>) sslConfig =\n        (Map<String, Object>)vertx.getOrCreateContext()\n          .config().get(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),\"'ssl'\"),`)\n\n     HttpServer sslHttpServer = vertx.createHttpServer(\n         `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-symbol\"}),\"SSL:\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-literal\"}),\"true\"),`,\n         `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-symbol\"}),\"keyStorePath:\"),\" sslConfig.get(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"keystore\"'),`),\n         `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-symbol\"}),\"keyStorePassword:\"),\" sslConfig.get(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"password\"'),`))\n\n     startWebApiServer(sslHttpServer)\n  }\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"private\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"void\"),\" startWebApiServer(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"final\"),` HttpServer httpServer) {\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"def\"),` sockHandler = SockJSHandler.create(vertx, [:])\n    sockHandler.socketHandler {\n      SockJSSocket ws -> sockJSConnectHandler(ws)\n    }\n    router.route(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/hdpoker\"'),`).handler(sockHandler)\n    httpServer.requestHandler(router.&accept)\n    httpServer.listen()\n  }\n\n}\n`)),mdx(\"h4\",e({},{id:\"more-testing-change\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#more-testing-change\"})),\"More testing change\"),mdx(\"p\",null,`Test\\xADing mes\\xADsages in In\\xADte\\xADgra\\xADtion Tests. To tell the test method that this has async calls put\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"Async async = testContext.async()\"),\" as the first line in the test method. Yes, this is a lit\\xADtle re\\xADdun\\xADdant from above, but I al\\xADways for\\xADgot to put \",mdx(\"inlineCode\",{parentName:\"p\"},\"async()\"),\" calls in my in\\xADte\\xADgra\\xADtion tests and they would pass so quickly, with\\xADout send\\xADing any\\xADthing out, be\\xADcause it wasn\\u2019t wait\\xADing any\\xADmore\"),mdx(\"h3\",e({},{id:\"runtime-changes\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#runtime-changes\"})),\"Runtime changes\"),mdx(\"p\",null,\"If you don\\u2019t use Vert.x built-\\u200Bin Log\\xADging and need to use slf4j, then re\\xADmem\\xADber that you should set a sys\\xADtem prop\\xADerty called \",mdx(\"inlineCode\",{parentName:\"p\"},\"vertx.logger-delegate-factory-class-name\"),\" with the name of a Java class which im\\xADple\\xADments the in\\xADter\\xADface \",mdx(\"inlineCode\",{parentName:\"p\"},\"LoggerFactory\"),\". Vert.x pro\\xADvides pre-\\u200Bbuilt im\\xADple\\xADmen\\xADta\\xADtions for Log4J and SLF4J with the class names \",mdx(\"inlineCode\",{parentName:\"p\"},\"io.vertx.core.logging.Log4jLogDelegateFactory\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"io.vertx.core.logging.SLF4JLogDelegateFactory\"),\".\"),mdx(\"h2\",e({},{id:\"still-working\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#still-working\"})),\"Still working\"),mdx(\"p\",null,`Well, that is all I have for you folks so far. We are still not done, as we haven\\u2019t got\\xADten our ap\\xADpli\\xADca\\xADtion run\\xADning with real clients just yet. But we do have all our in\\xADte\\xADgra\\xADtion tests from be\\xADfore com\\xADpletely pass\\xADing\nso, if some\\xADthing does come up, it should be a small one (KNOCK ON WOOD)`),mdx(\"p\",null,\"Please feel free to post on the Vert.x Google Group with any com\\xADments or sug\\xADges\\xADtions on what to add to this blog post or for Part Two.\"),mdx(\"p\",null,\"Thanks\"),mdx(\"p\",null,\"Mark S\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"prevPost":{"meta":{"title":"Vert.x 3 says “hello” to NPM users","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"In programming literature it has become the standard to create a hello world program as the first example. In this article, I'll demonstrate how NPM users can quickly get started with Vert.x."},"date":"2015-07-13","slug":"vert-x3-says-hello-to-npm-users"},"nextPost":{"meta":{"title":"Vert.x 3 and PostgreSQL JSON type","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"One of the interesting features of NoSQL databases is their schema-less mode of operation. This feature is very useful during project prototyping and early development since at early the stages of development of projects all data structures are not clear or have been defined yet."},"date":"2015-07-03","slug":"vert-x3-and-postgresql-json-type"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}