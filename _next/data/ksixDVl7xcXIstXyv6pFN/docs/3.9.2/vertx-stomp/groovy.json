{"pageProps":{"slug":"3.9.2/vertx-stomp/groovy","title":"Vert.x-Stomp","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vertx_stomp\">Using vertx-stomp</a></li>\n<li><a href=\"#_stomp_server\">STOMP server</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_creating_a_stomp_server\">Creating a STOMP server</a></li>\n<li><a href=\"#_closing_a_stomp_server\">Closing a STOMP server</a></li>\n<li><a href=\"#_configuration\">Configuration</a></li>\n<li><a href=\"#_subscriptions\">Subscriptions</a></li>\n<li><a href=\"#_type_of_destinations\">Type of destinations</a></li>\n<li><a href=\"#_providing_your_own_type_of_destination\">Providing your own type of destination</a></li>\n<li><a href=\"#_acknowledgment\">Acknowledgment</a></li>\n<li><a href=\"#_customizing_the_stomp_server\">Customizing the STOMP server</a></li>\n</ul>\n</li>\n<li><a href=\"#_stomp_client\">STOMP client</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_creating_a_stomp_client\">Creating a STOMP client</a></li>\n<li><a href=\"#_closing_a_stomp_client\">Closing a STOMP client</a></li>\n<li><a href=\"#_handling_errors\">Handling errors</a></li>\n<li><a href=\"#_configuration_2\">Configuration</a></li>\n<li><a href=\"#_subscribing_to_destinations\">Subscribing to destinations</a></li>\n<li><a href=\"#_sending_messages\">Sending messages</a></li>\n<li><a href=\"#_acknowledgements\">Acknowledgements</a></li>\n<li><a href=\"#_transactions\">Transactions</a></li>\n<li><a href=\"#_receipt\">Receipt</a></li>\n</ul>\n</li>\n<li><a href=\"#_using_the_stomp_server_as_a_bridge_to_the_vert_x_event_bus\">Using the STOMP server as a bridge to the vert.x Event Bus</a></li>\n<li><a href=\"#_using_the_stomp_server_with_web_sockets\">Using the STOMP server with web sockets</a></li>\n<li><a href=\"#_registering_received_and_writing_frame_handlers\">Registering received and writing frame handlers</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x-Stomp</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>STOMP is the Simple (or Streaming) Text Orientated Messaging Protocol. STOMP\nprovides an interoperable wire format so that STOMP clients can communicate with any STOMP message broker to\nprovide easy and widespread messaging interoperability among many languages, platforms and brokers. Get more details about STOMP on <a href=\"https://stomp.github.io/index.html\" class=\"bare\">https://stomp.github.io/index.html</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vertx-Stomp is an implementation of a STOMP server and client. You can use the STOMP server with other clients and\nuse the STOMP client with other servers. The server and the client supports the version 1.0, 1.1 and 1.2 of the\nSTOMP protocol (see <a href=\"https://stomp.github.io/stomp-specification-1.2.html\" class=\"bare\">https://stomp.github.io/stomp-specification-1.2.html</a>). The STOMP server can also be used as a\nbridge with the vert.x event bus, or directly with web sockets (using StompJS).</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vertx_stomp\"><a class=\"anchor\" href=\"#_using_vertx_stomp\"></a>Using vertx-stomp</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Vert.x Stomp server and client, add the following dependency to the <em>dependencies</em> section of your build\ndescriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-stomp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-stomp:3.9.2'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_stomp_server\"><a class=\"anchor\" href=\"#_stomp_server\"></a>STOMP server</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_creating_a_stomp_server\"><a class=\"anchor\" href=\"#_creating_a_stomp_server\"></a>Creating a STOMP server</h3>\n<div class=\"paragraph\">\n<p>The simplest way to create an STOMP server, using all default options is as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx)).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This creates a STOMP server listening on <code>localhost:61613</code> that is compliant with the STOMP specification.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can configure the port and host in the <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServer.html#listen-int-java.lang.String-\">listen</a></code>\nmethod:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx)).listen(<span class=\"hljs-number\">1234</span>, <span class=\"hljs-string\">\"0.0.0.0\"</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If you pass <code>-1</code> as port, the TCP server would not be started. This is useful when using the websocket\nbridge. To be notified when the server is ready, use a handler as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx)).listen({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n    println(<span class=\"hljs-string\">\"Failing to start the STOMP server : ${ar.cause().getMessage()}\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Ready to receive STOMP frames\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The handler receive a reference on the <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServer.html\">StompServer</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also configure the host and port in <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServerOptions.html\">StompServerOptions</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx, [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">1234</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"0.0.0.0\"</span>\n]).handler(StompServerHandler.create(vertx)).listen()</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_closing_a_stomp_server\"><a class=\"anchor\" href=\"#_closing_a_stomp_server\"></a>Closing a STOMP server</h3>\n<div class=\"paragraph\">\n<p>STOMP servers are closed as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">server.close({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    println(<span class=\"hljs-string\">\"The STOMP server has been closed\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"The STOMP server failed to close : ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuration\"><a class=\"anchor\" href=\"#_configuration\"></a>Configuration</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServerOptions.html\">StompServerOptions</a></code> let you configure some aspects of the STOMP server.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, the STOMP server is based on a\n<code><a href=\"../../apidocs/io/vertx/core/net/NetServer.html\">NetServer</a></code>, so you can configure the underlying <code><a href=\"../../apidocs/io/vertx/core/net/NetServer.html\">NetServer</a></code> from\nthe <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServerOptions.html\">StompServerOptions</a></code>. Alternatively you can also pass the\n<code><a href=\"../../apidocs/io/vertx/core/net/NetServer.html\">NetServer</a></code> you want to use:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx, netServer).handler(StompServerHandler.create(vertx)).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServerOptions.html\">StompServerOptions</a></code> let you configure:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the host and port of the STOMP server - defaults to <code>0.0.0.0:61613</code>.</p>\n</li>\n<li>\n<p>whether or not the STOMP server is secured - defaults to <code>false</code></p>\n</li>\n<li>\n<p>the max STOMP frame body - default to 10 Mb</p>\n</li>\n<li>\n<p>the maximum number of headers accepted in a STOMP frame - defaults to 1000</p>\n</li>\n<li>\n<p>the max length of a header line in a STOMP frame - defaults to 10240</p>\n</li>\n<li>\n<p>the STOMP heartbeat time - default to <code>1000, 1000</code></p>\n</li>\n<li>\n<p>the supported STOMP protocol versions (1.0, 1.1 and 1.2 by default)</p>\n</li>\n<li>\n<p>the maximum number of frame allowed in a transaction (defaults to 1000)</p>\n</li>\n<li>\n<p>the size of the transaction chunk - defaults to 1000 (see\n<code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServerOptions.html#setTransactionChunkSize-int-\">setTransactionChunkSize</a></code>)</p>\n</li>\n<li>\n<p>the maximum number of subscriptions a client can handle - defaults to 1000</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The STOMP heartbeat is configured using a JSON object as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx, [\n<span class=\"hljs-symbol\">  heartbeat:</span>[\n<span class=\"hljs-symbol\">    x:</span><span class=\"hljs-number\">1000</span>,\n<span class=\"hljs-symbol\">    y:</span><span class=\"hljs-number\">1000</span>\n  ]\n]).handler(StompServerHandler.create(vertx)).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Enabling security requires an additional <code><a href=\"../../apidocs/io/vertx/ext/auth/AuthProvider.html\">AuthProvider</a></code> handling the\nauthentication requests:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx, [\n<span class=\"hljs-symbol\">  secured:</span><span class=\"hljs-literal\">true</span>\n]).handler(StompServerHandler.create(vertx).authProvider(provider)).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information about <code><a href=\"../../apidocs/io/vertx/ext/auth/AuthProvider.html\">AuthProvider</a></code> is available\n<a href=\"http://vertx.io/docs/#authentication_and_authorisation\">here</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If a frame exceeds one of the size limits, the frame is rejected and the client receives an <code>ERROR</code> frame. As the\nspecification requires, the client connection is closed immediately after having sent the error. The same behavior\nhappens with the other thresholds.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_subscriptions\"><a class=\"anchor\" href=\"#_subscriptions\"></a>Subscriptions</h3>\n<div class=\"paragraph\">\n<p>The default STOMP server handles subscription destination as opaque Strings. So it does not promote a structure\nand it not hierarchic. By default the STOMP server follow a <em>topic</em> semantic (so messages are dispatched to all\nsubscribers).</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_type_of_destinations\"><a class=\"anchor\" href=\"#_type_of_destinations\"></a>Type of destinations</h3>\n<div class=\"paragraph\">\n<p>By default, the STOMP server manages <em>destinations</em> as topics. So messages are dispatched to all subscribers. You\ncan configure the server to use queues, or mix both types:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx).destinationFactory({ v, name -&gt;\n  <span class=\"hljs-keyword\">if</span> (name.startsWith(<span class=\"hljs-string\">\"/queue\"</span>)) {\n    <span class=\"hljs-keyword\">return</span> Destination.queue(vertx, name)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> Destination.topic(vertx, name)\n  }\n})).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the last example, all destination starting with <code>/queue</code> are queues while others are topics. The destination is\ncreated when the first subscription on this destination is received.</p>\n</div>\n<div class=\"paragraph\">\n<p>A server can decide to reject the destination creation by returning <code>null</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx).destinationFactory({ v, name -&gt;\n  <span class=\"hljs-keyword\">if</span> (name.startsWith(<span class=\"hljs-string\">\"/forbidden\"</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (name.startsWith(<span class=\"hljs-string\">\"/queue\"</span>)) {\n    <span class=\"hljs-keyword\">return</span> Destination.queue(vertx, name)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> Destination.topic(vertx, name)\n  }\n})).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this case, the subscriber received an <code>ERROR</code> frame.</p>\n</div>\n<div class=\"paragraph\">\n<p>Queues dispatches messages using a round-robin strategies.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_providing_your_own_type_of_destination\"><a class=\"anchor\" href=\"#_providing_your_own_type_of_destination\"></a>Providing your own type of destination</h3>\n<div class=\"paragraph\">\n<p>On purpose the STOMP server does not implement any advanced feature. IF you need more advanced dispatching policy,\nyou can implement your own type of destination by providing a <code><a href=\"../../apidocs/io/vertx/ext/stomp/DestinationFactory.html\">DestinationFactory</a></code>\nreturning your own <code><a href=\"../../apidocs/io/vertx/ext/stomp/Destination.html\">Destination</a></code> object.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_acknowledgment\"><a class=\"anchor\" href=\"#_acknowledgment\"></a>Acknowledgment</h3>\n<div class=\"paragraph\">\n<p>By default, the STOMP server does nothing when a message is not acknowledged. You can customize this by\nproviding your own <code><a href=\"../../apidocs/io/vertx/ext/stomp/Destination.html\">Destination</a></code> implementation.</p>\n</div>\n<div class=\"paragraph\">\n<p>The custom destination should call the</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServerHandler.html#onAck-io.vertx.ext.stomp.StompServerConnection-io.vertx.ext.stomp.Frame-java.util.List-\">onAck</a></code>\nand\n<code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServerHandler.html#onNack-io.vertx.ext.stomp.StompServerConnection-io.vertx.ext.stomp.Frame-java.util.List-\">onNack</a></code>\nmethod in order to let the <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServerHandler.html\">StompServerHandler</a></code> customizes the behavior:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx).onAckHandler({ acknowledgement -&gt;\n  <span class=\"hljs-comment\">// Action to execute when the frames (one in `client-individual` mode, several</span>\n  <span class=\"hljs-comment\">// in `client` mode are acknowledged.</span>\n}).onNackHandler({ acknowledgement -&gt;\n  <span class=\"hljs-comment\">// Action to execute when the frames (1 in `client-individual` mode, several in</span>\n  <span class=\"hljs-comment\">// `client` mode are not acknowledged.</span>\n})).listen()</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_customizing_the_stomp_server\"><a class=\"anchor\" href=\"#_customizing_the_stomp_server\"></a>Customizing the STOMP server</h3>\n<div class=\"paragraph\">\n<p>In addition to the handlers seen above, you can configure almost all aspects of the STOMP server, such as the\nactions made when specific frames are received, the <code>ping</code> to sent to the client (to implement the heartbeat).\nHere are some examples:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx).closeHandler({ connection -&gt;\n  <span class=\"hljs-comment\">// client connection closed</span>\n}).beginHandler({ frame -&gt;\n  <span class=\"hljs-comment\">// transaction starts</span>\n}).commitHandler({ frame -&gt;\n  <span class=\"hljs-comment\">// transaction committed</span>\n})).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Be aware that changing the default behavior may break the compliance with the STOMP specification. So, please look\nat the default implementations.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_stomp_client\"><a class=\"anchor\" href=\"#_stomp_client\"></a>STOMP client</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>STOMP clients connect to STOMP server and can send and receive frames.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_creating_a_stomp_client\"><a class=\"anchor\" href=\"#_creating_a_stomp_client\"></a>Creating a STOMP client</h3>\n<div class=\"paragraph\">\n<p>You create a <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClient.html\">StompClient</a></code> instance with default options as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The previous snippet creates a STOMP client connecting to \"0.0.0.0:61613\". Once connected, you get a\n<code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClientConnection.html\">StompClientConnection</a></code> that let you interact with the server. You can\nconfigure the host and port as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect(<span class=\"hljs-number\">61613</span>, <span class=\"hljs-string\">\"0.0.0.0\"</span>, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To catch connection errors due to authentication issues, or whatever error frames sent by the server during\nthe connection negotiation, you can register a <em>error handler</em> on the Stomp Client. All\nconnections created with the client inherit of the error handler (but can have their own):</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).errorFrameHandler({ frame -&gt;\n  <span class=\"hljs-comment\">// Received the ERROR frame</span>\n}).connect(<span class=\"hljs-number\">61613</span>, <span class=\"hljs-string\">\"0.0.0.0\"</span>, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also configure the host and port in the <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClientOptions.html\">StompClientOptions</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx, [\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"localhost\"</span>,\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">1234</span>\n]).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_closing_a_stomp_client\"><a class=\"anchor\" href=\"#_closing_a_stomp_client\"></a>Closing a STOMP client</h3>\n<div class=\"paragraph\">\n<p>You can close a STOMP client:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx, [\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"localhost\"</span>,\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">1234</span>\n]).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})\n\nclient.close()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>However, this way would not notify the server of the disconnection. To cleanly close the connection, you should\nuse the <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClientConnection.html#disconnect--\">disconnect</a></code> method:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx, [\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"localhost\"</span>,\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">1234</span>\n]).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n\n    connection.disconnect()\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If the heartbeat is enabled and if the client did not detect server activity after the configured timeout, the\nconnection is automatically closed.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_errors\"><a class=\"anchor\" href=\"#_handling_errors\"></a>Handling errors</h3>\n<div class=\"paragraph\">\n<p>On the <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClientConnection.html\">StompClientConnection</a></code>, you can register an error handler receiving <code>ERROR</code>\nframes sent by the server. Notice that the server closes the connection with the client after having sent such frame:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx, [\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"localhost\"</span>,\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">1234</span>\n]).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n    connection.errorHandler({ frame -&gt;\n      println(<span class=\"hljs-string\">\"ERROR frame received : ${frame}\"</span>)\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The client can also be notified when a connection drop has been detected. Connection failures are detected using the\nSTOMP heartbeat mechanism. When the server has not sent a message in the heartbeat time window, the connection is\nclosed and the <code>connectionDroppedHandler</code> is called (if set). To configure a <code>connectionDroppedHandler</code>, call\n<code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClientConnection.html#connectionDroppedHandler-io.vertx.core.Handler-\">connectionDroppedHandler</a></code>. The handler can\nfor instance tries to reconnect to the server:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n    connection.connectionDroppedHandler({ con -&gt;\n      <span class=\"hljs-comment\">// The connection has been lost</span>\n      <span class=\"hljs-comment\">// You can reconnect or switch to another server.</span>\n    })\n\n    connection.send(<span class=\"hljs-string\">\"/queue\"</span>, Buffer.buffer(<span class=\"hljs-string\">\"Hello\"</span>), { frame -&gt;\n      println(<span class=\"hljs-string\">\"Message processed by the server\"</span>)\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuration_2\"><a class=\"anchor\" href=\"#_configuration_2\"></a>Configuration</h3>\n<div class=\"paragraph\">\n<p>You can configure various aspect by passing a\n<code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClientOptions.html\">StompClientOptions</a></code> when creating the <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClient.html\">StompClient</a></code>. As the\nSTOMP client relies on a <code><a href=\"../../apidocs/io/vertx/core/net/NetClient.html\">NetClient</a></code>, you can configure the underlying Net Client from\nthe <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClientOptions.html\">StompClientOptions</a></code>. Alternatively, you can pass the <code><a href=\"../../apidocs/io/vertx/core/net/NetClient.html\">NetClient</a></code>\nyou want to use in the\n<code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClient.html#connect-io.vertx.core.net.NetClient-io.vertx.core.Handler-\">connect</a></code> method:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect(netClient, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n    connection.errorHandler({ frame -&gt;\n      println(<span class=\"hljs-string\">\"ERROR frame received : ${frame}\"</span>)\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/ext/stomp/StompClientOptions.html\">StompClientOptions</a></code> let you configure:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the host and port ot the STOMP server</p>\n</li>\n<li>\n<p>the login and passcode to connect to the server</p>\n</li>\n<li>\n<p>whether or not the <code>content-length</code> header should be added to the frame if not set explicitly. (enabled by default)</p>\n</li>\n<li>\n<p>whether or not the <code>STOMP</code> command should be used instead of the <code>CONNECT</code> command (disabled by default)</p>\n</li>\n<li>\n<p>whether or not the <code>host</code> header should be ignored in the <code>CONNECT</code> frame (disabled by default)</p>\n</li>\n<li>\n<p>the heartbeat configuration (1000, 1000 by default)</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_subscribing_to_destinations\"><a class=\"anchor\" href=\"#_subscribing_to_destinations\"></a>Subscribing to destinations</h3>\n<div class=\"paragraph\">\n<p>To subscribe to a destination, use:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n    connection.subscribe(<span class=\"hljs-string\">\"/queue\"</span>, { frame -&gt;\n      println(<span class=\"hljs-string\">\"Just received a frame from /queue : ${frame}\"</span>)\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To unsubscribe, use:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n    connection.subscribe(<span class=\"hljs-string\">\"/queue\"</span>, { frame -&gt;\n      println(<span class=\"hljs-string\">\"Just received a frame from /queue : ${frame}\"</span>)\n    })\n\n    <span class=\"hljs-comment\">// ....</span>\n\n    connection.unsubscribe(<span class=\"hljs-string\">\"/queue\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_sending_messages\"><a class=\"anchor\" href=\"#_sending_messages\"></a>Sending messages</h3>\n<div class=\"paragraph\">\n<p>To send a message, use:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n    <span class=\"hljs-keyword\">def</span> headers = [:]\n    headers[<span class=\"hljs-string\">\"header1\"</span>] = <span class=\"hljs-string\">\"value1\"</span>\n    connection.send(<span class=\"hljs-string\">\"/queue\"</span>, headers, Buffer.buffer(<span class=\"hljs-string\">\"Hello\"</span>))\n    <span class=\"hljs-comment\">// No headers:</span>\n    connection.send(<span class=\"hljs-string\">\"/queue\"</span>, Buffer.buffer(<span class=\"hljs-string\">\"World\"</span>))\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In Java and Groovy, you can use the <code><a href=\"../../apidocs/io/vertx/ext/stomp/utils/Headers.html\">Headers</a></code> class to ease the header creation.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_acknowledgements\"><a class=\"anchor\" href=\"#_acknowledgements\"></a>Acknowledgements</h3>\n<div class=\"paragraph\">\n<p>Clients can send <code>ACK</code> and <code>NACK</code> frames:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n    connection.subscribe(<span class=\"hljs-string\">\"/queue\"</span>, { frame -&gt;\n      connection.ack(frame.ack)\n      <span class=\"hljs-comment\">// OR</span>\n      connection.nack(frame.ack)\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_transactions\"><a class=\"anchor\" href=\"#_transactions\"></a>Transactions</h3>\n<div class=\"paragraph\">\n<p>Clients can also create transactions. <code>ACK</code>, <code>NACK</code> and <code>SEND</code> frames sent in the transaction will be delivery\nonly when the transaction is committed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n    <span class=\"hljs-keyword\">def</span> headers = [:]\n    headers[<span class=\"hljs-string\">\"transaction\"</span>] = <span class=\"hljs-string\">\"my-transaction\"</span>\n    connection.beginTX(<span class=\"hljs-string\">\"my-transaction\"</span>)\n    connection.send(<span class=\"hljs-string\">\"/queue\"</span>, headers, Buffer.buffer(<span class=\"hljs-string\">\"Hello\"</span>))\n    connection.send(<span class=\"hljs-string\">\"/queue\"</span>, headers, Buffer.buffer(<span class=\"hljs-string\">\"World\"</span>))\n    connection.send(<span class=\"hljs-string\">\"/queue\"</span>, headers, Buffer.buffer(<span class=\"hljs-string\">\"!!!\"</span>))\n    connection.commit(<span class=\"hljs-string\">\"my-transaction\"</span>)\n    <span class=\"hljs-comment\">// OR</span>\n    connection.abort(<span class=\"hljs-string\">\"my-transaction\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_receipt\"><a class=\"anchor\" href=\"#_receipt\"></a>Receipt</h3>\n<div class=\"paragraph\">\n<p>Each sent commands can have a <em>receipt</em> handler, notified when the server has processed the message:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> connection = ar.result()\n\n    connection.send(<span class=\"hljs-string\">\"/queue\"</span>, Buffer.buffer(<span class=\"hljs-string\">\"Hello\"</span>), { frame -&gt;\n      println(<span class=\"hljs-string\">\"Message processed by the server\"</span>)\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to connect to the STOMP server: ${ar.cause().toString()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_stomp_server_as_a_bridge_to_the_vert_x_event_bus\"><a class=\"anchor\" href=\"#_using_the_stomp_server_as_a_bridge_to_the_vert_x_event_bus\"></a>Using the STOMP server as a bridge to the vert.x Event Bus</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The STOMP server can be used as a bridge to the vert.x Event Bus. The bridge is bi-directional meaning the STOMP\nframes are translated to Event Bus messages and Event Bus messages are translated to STOMP frames.</p>\n</div>\n<div class=\"paragraph\">\n<p>To enable the bridge you need to configure the inbound and outbound addresses. Inbound addresses are STOMP\ndestination that are transferred to the event bus. The STOMP destination is used as the event bus address. Outbound\naddresses are event bus addresses that are transferred to STOMP.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx).bridge([\n<span class=\"hljs-symbol\">  inboundPermitteds:</span>[\n    [\n<span class=\"hljs-symbol\">      address:</span><span class=\"hljs-string\">\"/toBus\"</span>\n    ]\n  ],\n<span class=\"hljs-symbol\">  outboundPermitteds:</span>[\n    [\n<span class=\"hljs-symbol\">      address:</span><span class=\"hljs-string\">\"/toStomp\"</span>\n    ]\n  ]\n])).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>By default, the bridge use a publish/subscribe delivery (topic). You can configure it to use a point to point\ndelivery where only one STOMP client or Event Bus consumer is invoked:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx).bridge([\n<span class=\"hljs-symbol\">  inboundPermitteds:</span>[\n    [\n<span class=\"hljs-symbol\">      address:</span><span class=\"hljs-string\">\"/toBus\"</span>\n    ]\n  ],\n<span class=\"hljs-symbol\">  outboundPermitteds:</span>[\n    [\n<span class=\"hljs-symbol\">      address:</span><span class=\"hljs-string\">\"/toStomp\"</span>\n    ]\n  ],\n<span class=\"hljs-symbol\">  pointToPoint:</span><span class=\"hljs-literal\">true</span>\n])).listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The permitted options can also be expressed as a \"regex\" or with a <em>match</em>. A <em>match</em> is a structure that the\nmessage payload must meet. For instance, in the next examples, the payload must contains the field \"foo\" set to\n\"bar\". Structure match only supports JSON object.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx).bridge([\n<span class=\"hljs-symbol\">  inboundPermitteds:</span>[\n    [\n<span class=\"hljs-symbol\">      address:</span><span class=\"hljs-string\">\"/toBus\"</span>,\n<span class=\"hljs-symbol\">      match:</span>[\n<span class=\"hljs-symbol\">        foo:</span><span class=\"hljs-string\">\"bar\"</span>\n      ]\n    ]\n  ],\n<span class=\"hljs-symbol\">  outboundPermitteds:</span>[\n    [\n<span class=\"hljs-symbol\">      address:</span><span class=\"hljs-string\">\"/toStomp\"</span>\n    ]\n  ],\n<span class=\"hljs-symbol\">  pointToPoint:</span><span class=\"hljs-literal\">true</span>\n])).listen()</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_stomp_server_with_web_sockets\"><a class=\"anchor\" href=\"#_using_the_stomp_server_with_web_sockets\"></a>Using the STOMP server with web sockets</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you want to connect a JavaScript client (node.js or a browser) directly with the STOMP server, you can use a\nweb socket. The STOMP protocol has been adapted to work over web sockets in\n<a href=\"http://jmesnil.net/stomp-websocket/doc/\">StompJS</a>. The JavaScript connects directly to the STOMP server and send\nSTOMP frames on the web socket. It also receives the STOMP frame directly on the web socket.</p>\n</div>\n<div class=\"paragraph\">\n<p>To configure the server to use StompJS, you need to:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Enable the web socket bridge and configure the path of the listening web socket (<code>/stomp</code> by default).</p>\n</li>\n<li>\n<p>Import <a href=\"http://jmesnil.net/stomp-websocket/doc/#download\">StompJS</a> in your application (as a script on an\nHTML page, or as an npm module (<a href=\"https://www.npmjs.com/package/stompjs\" class=\"bare\">https://www.npmjs.com/package/stompjs</a>).</p>\n</li>\n<li>\n<p>Connect to the server</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>To achieve the first step, you would need a HTTP server, and pass the\n<code><a href=\"../../apidocs/io/vertx/ext/stomp/StompServer.html#webSocketHandler--\">webSocketHandler</a></code> result to\n<code><a href=\"../../apidocs/io/vertx/core/http/HttpServer.html#webSocketHandler-io.vertx.core.Handler-\">webSocketHandler</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx, [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">-1</span>,\n<span class=\"hljs-symbol\">  websocketBridge:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-symbol\">  websocketPath:</span><span class=\"hljs-string\">\"/stomp\"</span>\n]).handler(StompServerHandler.create(vertx))\n\n<span class=\"hljs-keyword\">def</span> http = vertx.createHttpServer([\n<span class=\"hljs-symbol\">  webSocketSubProtocols:</span>[<span class=\"hljs-string\">\"v10.stomp, v11.stomp\"</span>]\n]).webSocketHandler(server.webSocketHandler()).listen(<span class=\"hljs-number\">8080</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Don&#8217;t forget to declare the supported sub-protocols. Without this, the connection will be rejected.</p>\n</div>\n<div class=\"paragraph\">\n<p>Then follow the instructions from  <a href=\"http://jmesnil.net/stomp-websocket/doc/\">the StompJS documentation</a> to connect to\nthe server. Here is a simple example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">\"ws://localhost:8080/stomp\"</span>;\n<span class=\"hljs-keyword\">var</span> client = Stomp.client(url);\n<span class=\"hljs-keyword\">var</span> callback = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">frame</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(frame);\n};\n\nclient.connect({}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-keyword\">var</span> subscription = client.subscribe(<span class=\"hljs-string\">\"foo\"</span>, callback);\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_registering_received_and_writing_frame_handlers\"><a class=\"anchor\" href=\"#_registering_received_and_writing_frame_handlers\"></a>Registering received and writing frame handlers</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>STOMP clients, client&#8217;s connections and server handlers support registering a received\n<code><a href=\"../../apidocs/io/vertx/ext/stomp/Frame.html\">Frame</a></code> handler that would be notified every time a frame is received from the wire. It lets\nyou log the frames, or implement custom behavior. The handler is already called for <code>PING</code>\nframes, and <em>illegal / unknown</em> frames:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx).receivedFrameHandler({ sf -&gt;\n  println(sf.frame())\n})).listen()\n\n<span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).receivedFrameHandler({ frame -&gt;\n  println(frame)\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The handler is called before the frame is processed, so you can also <em>modify</em> the frame.</p>\n</div>\n<div class=\"paragraph\">\n<p>Frames not using a valid STOMP command use the <code>UNKNOWN</code> command. The original command is written\nin the headers using the <code><a href=\"../../apidocs/io/vertx/ext/stomp/Frame.html#STOMP_FRAME_COMMAND\">Frame.STOMP_FRAME_COMMAND</a></code> key.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also register a handler to be notified when a frame is going to be sent (written to the wire):</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> server = StompServer.create(vertx).handler(StompServerHandler.create(vertx)).writingFrameHandler({ sf -&gt;\n  println(sf.frame())\n}).listen()\n\n<span class=\"hljs-keyword\">def</span> client = StompClient.create(vertx).writingFrameHandler({ frame -&gt;\n  println(frame)\n})</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"3.9.2"},"__N_SSG":true}