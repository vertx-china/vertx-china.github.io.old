{"pageProps":{"slug":"3.8.5/vertx-redis-client/js","title":"Vert.x-redis","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_redis\">Using Vert.x-Redis</a></li>\n<li><a href=\"#_connecting_to_redis\">Connecting to Redis</a></li>\n<li><a href=\"#_running_commands\">Running commands</a></li>\n<li><a href=\"#_high_availability_mode\">High Availability mode</a></li>\n<li><a href=\"#_cluster_mode\">Cluster mode</a></li>\n<li><a href=\"#_pubsub_mode\">Pub/Sub mode</a></li>\n<li><a href=\"#_domain_sockets\">Domain Sockets</a></li>\n<li><a href=\"#_implementing_reconnect_on_error\">Implementing Reconnect on Error</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x-redis</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x-redis is redis client to be used with Vert.x.</p>\n</div>\n<div class=\"paragraph\">\n<p>This module allows data to be saved, retrieved, searched for, and deleted in a Redis. Redis is an open source, BSD\nlicensed, advanced key-value store. It is often referred to as a data structure server since keys can contain\nstrings, hashes, lists, sets and sorted sets. To use this module you must have a Redis server instance running on\nyour network.</p>\n</div>\n<div class=\"paragraph\">\n<p>Redis has a rich API and it can be organized in the following groups:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Cluster - Commands related to cluster management, note that using most of these commands you will need a redis server with version &gt;=3.0.0</p>\n</li>\n<li>\n<p>Connection - Commands that allow you to switch DBs, connect, disconnect and authenticate to a server.</p>\n</li>\n<li>\n<p>Hashes - Commands that allow operations on hashes.</p>\n</li>\n<li>\n<p>HyperLogLog - Commands to approximating the number of distinct elements in a multiset, a HyperLogLog.</p>\n</li>\n<li>\n<p>Keys - Commands to work with Keys.</p>\n</li>\n<li>\n<p>List - Commands to work with Lists.</p>\n</li>\n<li>\n<p>Pub/Sub - Commands to create queues and pub/sub clients.</p>\n</li>\n<li>\n<p>Scripting - Commands to run Lua Scripts in redis.</p>\n</li>\n<li>\n<p>Server - Commands to manage and get server configurations.</p>\n</li>\n<li>\n<p>Sets - Commands to work with un ordered sets.</p>\n</li>\n<li>\n<p>Sorted Sets - Commands to work with sorted sets.</p>\n</li>\n<li>\n<p>Strings - Commands to work with Strings.</p>\n</li>\n<li>\n<p>Transactions - Commands to handle transaction lifecycle.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_redis\"><a class=\"anchor\" href=\"#_using_vert_x_redis\"></a>Using Vert.x-Redis</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Vert.x Redis client, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-redis-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-redis-client:3.8.5'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connecting_to_redis\"><a class=\"anchor\" href=\"#_connecting_to_redis\"></a>Connecting to Redis</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Redis client can operate in 3 distinct modes:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Simple client (probably what most users need).</p>\n</li>\n<li>\n<p>Sentinel (when working with Redis in High Availability mode).</p>\n</li>\n<li>\n<p>Cluster (when working with Redis in Clustered mode).</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The connection mode is selected by the factory method on the Redis interface. Regardless of the mode the client can be\nconfigured using a <code><a href=\"../dataobjects.html#RedisOptions\">RedisOptions</a></code> data object. By default some configuration values are\ninitialized with the following values:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>netClientOptions</code>: default is <code>TcpKeepAlive: true</code>, <code>TcpNoDelay: true</code></p>\n</li>\n<li>\n<p><code>endpoint</code>: default is <code>localhost:6379</code></p>\n</li>\n<li>\n<p><code>masterName</code>: default is <code>mymaster</code></p>\n</li>\n<li>\n<p><code>role</code> default is <code>MASTER</code></p>\n</li>\n<li>\n<p><code>slaves</code> default is <code>NEVER</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>In order to obtain a connection use the following code:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> Redis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/redis\"</span>);\nRedis.createClient(vertx, {\n}).connect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">onConnect, onConnect_err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (onConnect_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> client = onConnect;\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the configuration contains a <code>password</code> and/or a <code>select</code> database, these 2 commands will be executed automatically\nonce a successful connection is established to the server.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> Redis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/redis\"</span>);\n<span class=\"hljs-keyword\">var</span> options = {\n  <span class=\"hljs-string\">\"password\"</span> : <span class=\"hljs-string\">\"abracadabra\"</span>,\n  <span class=\"hljs-string\">\"select\"</span> : <span class=\"hljs-number\">1</span>\n};\n\nRedis.createClient(vertx, options).connect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">onConnect, onConnect_err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (onConnect_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> client = onConnect;\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_running_commands\"><a class=\"anchor\" href=\"#_running_commands\"></a>Running commands</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Given that the redis client is connected to the server, all commands are now possible to execute using this module.\nThe module offers a clean API for executing commands without the need to hand write the command itself, for example\nif one wants to get a value of a key it can be done as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> RedisAPI = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/redis_api\"</span>);\n<span class=\"hljs-keyword\">var</span> redis = RedisAPI.api(client);\n\nredis.get(<span class=\"hljs-string\">\"mykey\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res, res_err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (res_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// so something...</span>\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The response object is a generic type that allow converting from the basic redis types to your language types. For\nexample, if your response is of type <code>INTEGER</code> then you can get the value as any numeric primitive type <code>int</code>, <code>long</code>,\netc&#8230;&#8203;</p>\n</div>\n<div class=\"paragraph\">\n<p>Or you can perform more complex tasks such as handling responses as iterators:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-comment\">// this is a multi redis response (think of it as an array</span>\n<span class=\"hljs-keyword\">if</span> (response.type() === <span class=\"hljs-string\">'MULTI'</span>) {\n  <span class=\"hljs-built_in\">Array</span>.prototype.forEach.call(response, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-comment\">// do something with item...</span>\n  });\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_high_availability_mode\"><a class=\"anchor\" href=\"#_high_availability_mode\"></a>High Availability mode</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To work with high availability mode the connection creation is quite similar:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> Command = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/command\"</span>);\n<span class=\"hljs-keyword\">var</span> Request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/request\"</span>);\n<span class=\"hljs-keyword\">var</span> SocketAddress = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-js/socket_address\"</span>);\n<span class=\"hljs-keyword\">var</span> Redis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/redis\"</span>);\nRedis.createClient(vertx, {\n  <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"SENTINEL\"</span>,\n  <span class=\"hljs-string\">\"endpoints\"</span> : [\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">5000</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>),\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">5001</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>),\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">5002</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>)\n  ],\n  <span class=\"hljs-string\">\"masterName\"</span> : <span class=\"hljs-string\">\"sentinel7000\"</span>,\n  <span class=\"hljs-string\">\"role\"</span> : <span class=\"hljs-string\">\"MASTER\"</span>\n}).connect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">onConnect, onConnect_err</span>) </span>{\n  <span class=\"hljs-comment\">// assuming we got a connection to the master node</span>\n  <span class=\"hljs-comment\">// query the info for the node</span>\n  onConnect.send(Request.cmd(Command.INFO), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">info, info_err</span>) </span>{\n    <span class=\"hljs-comment\">// do something...</span>\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>What is important to notice is that in this mode, an extra connection is established to the server(s) and behind the\nscenes the client will listen for events from the sentinel. When the sentinel notifies that we switched masters, then\nan exception is send to the client and you can decide what to do next.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cluster_mode\"><a class=\"anchor\" href=\"#_cluster_mode\"></a>Cluster mode</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To work with cluster the connection creation is quite similar:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> SocketAddress = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-js/socket_address\"</span>);\n<span class=\"hljs-keyword\">var</span> options = {\n  <span class=\"hljs-string\">\"endpoints\"</span> : [\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">7000</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>),\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">7001</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>),\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">7002</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>),\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">7003</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>),\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">7004</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>),\n    SocketAddress.inetSocketAddress(<span class=\"hljs-number\">7005</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>)\n  ]\n};</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this case the configuration requires one of more members of the cluster to be known. This list will be used to ask\nthe cluster for the current configuration, which means if any of the listed members is not available it will be skipped.</p>\n</div>\n<div class=\"paragraph\">\n<p>In cluster mode a connection is established to each node and special care is needed when executing commands. It is\nrecommended to read redis manual in order to understand how clustering works. The client operating in this mode will do\na best effort to identify which slot is used by the executed command in order to execute it on the right node. There\ncould be cases where this isn&#8217;t possible to identify and in that case as a best effort the command will be run on a\nrandom node.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pubsub_mode\"><a class=\"anchor\" href=\"#_pubsub_mode\"></a>Pub/Sub mode</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Redis supports queues and pub/sub mode, when operated in this mode once a connection invokes a subscriber mode then\nit cannot be used for running other commands than the command to leave that mode.</p>\n</div>\n<div class=\"paragraph\">\n<p>To start a subscriber one would do:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> Redis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/redis\"</span>);\n\nRedis.createClient(vertx, {\n}).connect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">onConnect, onConnect_err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (onConnect_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> client = onConnect;\n\n    client.handler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">message</span>) </span>{\n      <span class=\"hljs-comment\">// do whatever you need to do with your message</span>\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And from another place in the code publish messages to the queue:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> Command = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/command\"</span>);\n<span class=\"hljs-keyword\">var</span> Request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/request\"</span>);\n\nredis.send(Request.cmd(Command.PUBLISH).arg(<span class=\"hljs-string\">\"channel1\"</span>).arg(<span class=\"hljs-string\">\"Hello World!\"</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res, res_err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (res_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// published!</span>\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_domain_sockets\"><a class=\"anchor\" href=\"#_domain_sockets\"></a>Domain Sockets</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Most of the examples shown connecting to a TCP sockets, however it is also possible to use Redis connecting to a UNIX\ndomain docket:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> SocketAddress = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-js/socket_address\"</span>);\n<span class=\"hljs-keyword\">var</span> Redis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-redis-js/redis\"</span>);\n\nRedis.createClient(vertx, SocketAddress.domainSocketAddress(<span class=\"hljs-string\">\"/tmp/redis.sock\"</span>)).connect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">onConnect, onConnect_err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (onConnect_err == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> client = onConnect;\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Be aware that HA and cluster modes report server addresses always on TCP addresses not domain sockets. So the\ncombination is not possible. Not because of this client but how Redis works.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_implementing_reconnect_on_error\"><a class=\"anchor\" href=\"#_implementing_reconnect_on_error\"></a>Implementing Reconnect on Error</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A typical scenario is that a user will want to reconnect to the server whenever an error occurs. The automatic reconnect\nis not part of the redis client has it will force a behaviour that might not match the user expectations, for example:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>What should happen to current in-flight requests?</p>\n</li>\n<li>\n<p>Should the exception handler be invoked or not?</p>\n</li>\n<li>\n<p>What if the retry will also fail?</p>\n</li>\n<li>\n<p>Should the previous state (db, authentication, subscriptions) be restored?</p>\n</li>\n<li>\n<p>Etc&#8230;&#8203;</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>In order to give the user full flexibility, this decision should not be performed by the client. However a simple\nreconnect with backoff timeout could be implemented as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this example the client object will be replaced on reconnect and the application will retry up to 16 times with a\nbackoff up to 1280ms. By discarding the client we ensure that all old inflight responses are lost and all new ones\nwill be on the new connection.</p>\n</div>\n</div>\n</div>"},"__N_SSG":true}