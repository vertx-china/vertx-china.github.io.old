{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"What's new in Vert.x 4.1","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"See an overview of all new and exciting features in Vert.x 4.1, including Vert.x HTTP proxy, RxJava 3, Open Telemetry, and more.","pinned":true},"date":"2021-05-21","slug":"whats-new-in-vert-x-4-1","readingTime":{"text":"4 min read","minutes":3.615,"time":216900,"words":723},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x 4.1 comes with plenty of new ex\\xADcit\\xADing fea\\xADtures.\"), mdx(\"p\", null, \"Here is an overview of the most im\\xADpor\\xADtant fea\\xADtures sup\\xADported in Vert.x 4.1.\"), mdx(\"h2\", {\n    \"id\": \"reactive-microsoft-sql-server-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#reactive-microsoft-sql-server-client\"\n  })), \"Reactive Microsoft SQL Server Client\"), mdx(\"p\", null, \"The \", mdx(Link, {\n    href: \"/docs/4.1.0/vertx-mssql-client/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Re\\xADac\\xADtive Mi\\xADcrosoft SQL Server Client\")), \" joins the \", mdx(Link, {\n    href: \"/docs/#databases\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"data\\xADbase clients\")), \" fam\\xADily!\"), mdx(\"p\", null, \"In this first re\\xADlease, sev\\xADeral com\\xADmon data types are sup\\xADported, as well as pre\\xADpared state\\xADments and trans\\xADac\\xADtions.\"), mdx(\"h2\", {\n    \"id\": \"vertx-http-proxy\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-http-proxy\"\n  })), \"Vert.x HTTP Proxy\"), mdx(\"p\", null, \"It is very easy to write an HTTP proxy with Vert.x, yet there are a lot of things that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mnot.net/blog/2011/07/11/what_proxies_must_do\"\n  }), \"prox\\xADies must do\"), \".\"), mdx(\"p\", null, mdx(Link, {\n    href: \"/docs/4.1.0/vertx-http-proxy/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x HTTP Proxy\")), \" is a new com\\xADpo\\xADnent of the stack that aims to make it easy to write prox\\xADies.\"), mdx(\"p\", null, \"You can cre\\xADate a proxy as fol\\xADlows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"proxyServer.requestHandler(\\n       HttpProxy.reverseProxy(vertx.createHttpClient())\\n       .origin(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"7070\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \"))\\n   .listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\")), mdx(\"p\", null, \"The proxy can also dy\\xADnam\\xADi\\xADcally re\\xADsolve the ori\\xADgin (i.e the prox\\xADied server):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"HttpProxy proxy = HttpProxy.reverseProxy(proxyClient).originSelector(\\n  address -> resolveOrigin(address)\\n);\\n\")), mdx(\"p\", null, mdx(Link, {\n    href: \"/docs/4.1.0/vertx-web-proxy/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x Web Proxy\")), \" in\\xADte\\xADgrates the proxy with Vert.x Web.\"), mdx(\"p\", null, \"This com\\xADpo\\xADnent is in tech pre\\xADview and will re\\xADceive more fea\\xADtures over time.\"), mdx(\"h2\", {\n    \"id\": \"rxjava-3\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#rxjava-3\"\n  })), \"RxJava 3\"), mdx(\"p\", null, \"Vert.x has been sup\\xADport\\xADing Rx\\xADJava for many years, the \", mdx(Link, {\n    href: \"/docs/4.1.0/vertx-rx/java3/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Rx\\xADJava 3 sup\\xADport\")), \" has landed in 4.1\"), mdx(\"p\", null, \"The rx\\xADi\\xADfied API works like pre\\xADvi\\xADous ver\\xADsions, how\\xADever reg\\xADu\\xADlar meth\\xADods are ex\\xADposed with Rx\\xADJava types\\nin\\xADstead of call\\xADbacks since Vert.x 4 async model is based on fu\\xADtures.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"server.requestHandler(req -> {\\n  HttpServerResponse resp = req.respone();\\n  resp.setChunked(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// No need to subscribe to the completable\"), \"\\n  Completable c1 = resp.write(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"1\\\"\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Write result is cached, this will send\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// 1\"), \"\\n  c1.subscribe();\\n  c1.subscribe();\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// The Rxified API however requires subscription to trigger the call\"), \"\\n  Completable c2 = resp.rxWrite(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"2\\\"\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Write is subscription based, this will send\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// 2\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// 2\"), \"\\n  c2.subscribe();\\n  c2.subscribe();\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"open-telemetry-support\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#open-telemetry-support\"\n  })), \"Open Telemetry support\"), mdx(\"p\", null, mdx(Link, {\n    href: \"/docs/4.1.0/vertx-opentelemetry/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Open Teleme\\xADtry\")), \" trac\\xADing is a new and no\\xADtice\\xADable trac\\xADing in\\xADte\\xADgra\\xADtion avail\\xADable in 4.1.\"), mdx(\"h2\", {\n    \"id\": \"service-proxy-with-futures\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#service-proxy-with-futures\"\n  })), \"Service proxy with futures\"), mdx(\"p\", null, \"Vert.x 4 pro\\xADvides a future-\\u200Bfirst API. How\\xADever, ser\\xADvice prox\\xADies can only be de\\xADclared with call\\xADbacks.\"), mdx(\"p\", null, \"We ad\\xADdressed this issue in Vert.x 4.1 and you can now write ser\\xADvice prox\\xADies with fu\\xADtures. The only change you\\nneed is to de\\xADclare the fu\\xADture usage in the Code\\xADgen mod\\xADule de\\xADc\\xADla\\xADra\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"vertx-web\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-web\"\n  })), \"Vertx-Web\"), mdx(\"p\", null, \"In this re\\xADlease, we im\\xADproved the log\\xADging han\\xADdler to en\\xADable cus\\xADtom log\\xADging for\\xADmats.\"), mdx(\"p\", null, \"The OAuth2 han\\xADdler now fol\\xADlows the OIDC stan\\xADdard by val\\xADi\\xADdat\\xADing the re\\xADquested scopes are present in the OAuth2 re\\xADsponse. A new APIKEY han\\xADdler was added to sup\\xADport more se\\xADcu\\xADrity use cases, and it is now pos\\xADsi\\xADble to write cus\\xADtom authn han\\xADdlers with\\xADout re\\xADquir\\xADing in\\xADter\\xADnal classes.\"), mdx(\"p\", null, \"The API \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx.json()\"), \" now fol\\xADlows the IANA con\\xADtent type stan\\xADdard.\"), mdx(\"h2\", {\n    \"id\": \"vertx-web-openapi\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-web-openapi\"\n  })), \"Vertx-Web OpenAPI\"), mdx(\"p\", null, \"A lot of com\\xADmu\\xADnity dis\\xADcus\\xADsions and work has been done to im\\xADprove the se\\xADcu\\xADrity han\\xADdling of Ope\\xADnAPI in Vert.x. We now sup\\xADport all kinds of se\\xADcu\\xADrity de\\xADscribed in Ope\\xADnAPI 3.0, OpenId, OAuth2, API-\\u200BKey, HTTP.\"), mdx(\"p\", null, \"The new API also al\\xADlows for fetch\\xADing the se\\xADcu\\xADrity con\\xADfig\\xADu\\xADra\\xADtion from the doc\\xADu\\xADment it\\xADself, rather than hav\\xADing it double-\\u200Bconfigured in the doc\\xADu\\xADment and in the code.\"), mdx(\"h2\", {\n    \"id\": \"vertx-auth\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-auth\"\n  })), \"Vertx-Auth\"), mdx(\"p\", null, \"In the Vert.x auth mod\\xADule, sup\\xADport for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EdDSA\"), \" was added to the JOSE/COSE code. This means that we can now use those al\\xADgo\\xADrithms in JWT/OAuth2/OIDC/FIDO2. The sup\\xADport re\\xADlies only on the pro\\xADvided JDK which means that users will need to use JDK 15 or above to be able to use those al\\xADgo\\xADrithms.\"), mdx(\"p\", null, \"In the JOSE code, im\\xADprove\\xADments were made to cor\\xADrectly fol\\xADlow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use\"), \" value of a JWK and more tests were added to ver\\xADify that we in\\xADterop prop\\xADerly with to\\xADkens gen\\xADer\\xADated by other li\\xADbraries.\"), mdx(\"p\", null, \"Fi\\xADnally, in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FIDO2/Webauthn\"), \" we fol\\xADlow the rec\\xADom\\xADmen\\xADda\\xADtion of stor\\xADing the at\\xADtes\\xADta\\xADtion cer\\xADtifi\\xADcates, which al\\xADlows of\\xADfline val\\xADi\\xADda\\xADtion of de\\xADvices. This is a util\\xADity that al\\xADlows you to check if to\\xADkens have been com\\xADpro\\xADmised and dis\\xADable their fu\\xADture use at the RP.\"), mdx(\"h2\", {\n    \"id\": \"kotlin-15-support\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#kotlin-15-support\"\n  })), \"Kotlin 1.5 support\"), mdx(\"p\", null, \"Vert.x 4.1 sup\\xADports Kotlin 1.5\"), mdx(\"h2\", {\n    \"id\": \"general-pool-improvements\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#general-pool-improvements\"\n  })), \"General pool improvements\"), mdx(\"p\", null, \"Vert.x in\\xADter\\xADnal pool has been im\\xADproved to gain more flex\\xADi\\xADbil\\xADity with new fea\\xADtures such as\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mul\\xADti\\xADple event loops per pool\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"waiter can\\xADcel\\xADla\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lock free im\\xADple\\xADmen\\xADta\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"con\\xADnec\\xADtion se\\xADlec\\xADtion strat\\xADegy\")), mdx(\"p\", null, \"In ad\\xADdi\\xADtion, the in\\xADter\\xADnal pool is now used by the Vert.x SQL Client and Vert.x Mail Clients.\"), mdx(\"h2\", {\n    \"id\": \"web-session-storage-with-infinispan\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#web-session-storage-with-infinispan\"\n  })), \"Web Session Storage with Infinispan\"), mdx(\"p\", null, \"Vert.x Web \", mdx(Link, {\n    href: \"/docs/4.1.0/vertx-web/java/#_session_stores\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"ses\\xADsion stor\\xADage\")), \" is plug\\xADgable.\\nIn this ver\\xADsion, a new ses\\xADsion store with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://infinispan.org/\"\n  }), \"In\\xADfin\\xADis\\xADpan\"), \" in-\\u200Bmemory data grid is avail\\xADable.\"), mdx(\"p\", null, \"It is im\\xADple\\xADmented on top of the In\\xADfin\\xADis\\xADpan client so it can be used with ei\\xADther stand\\xADalone or clus\\xADtered Vert.x ap\\xADpli\\xADca\\xADtions.\"), mdx(\"p\", null, \"If you want to get started, don\\u2019t miss the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://how-to.vertx.io/web-session-infinispan-howto/\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Web Ses\\xADsion Stor\\xADage with In\\xADfin\\xADis\\xADpan Client\"), \" how-\\u200Bto\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x 4.1 comes with plenty of new ex­cit­ing fea­tures.</p><p>Here is an overview of the most im­por­tant fea­tures sup­ported in Vert.x 4.1.</p><h2 id=\"reactive-microsoft-sql-server-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#reactive-microsoft-sql-server-client\"></a>Reactive Microsoft SQL Server Client</h2><p>The <a href=\"/docs/4.1.0/vertx-mssql-client/java/\">Re­ac­tive Mi­crosoft SQL Server Client</a> joins the <a href=\"/docs/#databases\">data­base clients</a> fam­ily!</p><p>In this first re­lease, sev­eral com­mon data types are sup­ported, as well as pre­pared state­ments and trans­ac­tions.</p><h2 id=\"vertx-http-proxy\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-http-proxy\"></a>Vert.x HTTP Proxy</h2><p>It is very easy to write an HTTP proxy with Vert.x, yet there are a lot of things that <a href=\"https://www.mnot.net/blog/2011/07/11/what_proxies_must_do\">prox­ies must do</a>.</p><p><a href=\"/docs/4.1.0/vertx-http-proxy/java/\">Vert.x HTTP Proxy</a> is a new com­po­nent of the stack that aims to make it easy to write prox­ies.</p><p>You can cre­ate a proxy as fol­lows:</p><pre><code class=\"hljs language-java\">proxyServer.requestHandler(\n       HttpProxy.reverseProxy(vertx.createHttpClient())\n       .origin(<span class=\"hljs-number\">7070</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>))\n   .listen(<span class=\"hljs-number\">8080</span>);\n</code></pre><p>The proxy can also dy­nam­i­cally re­solve the ori­gin (i.e the prox­ied server):</p><pre><code class=\"hljs language-java\">HttpProxy proxy = HttpProxy.reverseProxy(proxyClient).originSelector(\n  address -&gt; resolveOrigin(address)\n);\n</code></pre><p><a href=\"/docs/4.1.0/vertx-web-proxy/java/\">Vert.x Web Proxy</a> in­te­grates the proxy with Vert.x Web.</p><p>This com­po­nent is in tech pre­view and will re­ceive more fea­tures over time.</p><h2 id=\"rxjava-3\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#rxjava-3\"></a>RxJava 3</h2><p>Vert.x has been sup­port­ing Rx­Java for many years, the <a href=\"/docs/4.1.0/vertx-rx/java3/\">Rx­Java 3 sup­port</a> has landed in 4.1</p><p>The rx­i­fied API works like pre­vi­ous ver­sions, how­ever reg­u­lar meth­ods are ex­posed with Rx­Java types\nin­stead of call­backs since Vert.x 4 async model is based on fu­tures.</p><pre><code class=\"hljs language-java\">server.requestHandler(req -&gt; {\n  HttpServerResponse resp = req.respone();\n  resp.setChunked(<span class=\"hljs-keyword\">true</span>);\n\n  <span class=\"hljs-comment\">// No need to subscribe to the completable</span>\n  Completable c1 = resp.write(<span class=\"hljs-string\">&quot;1&quot;</span>);\n\n  <span class=\"hljs-comment\">// Write result is cached, this will send</span>\n  <span class=\"hljs-comment\">// 1</span>\n  c1.subscribe();\n  c1.subscribe();\n\n  <span class=\"hljs-comment\">// The Rxified API however requires subscription to trigger the call</span>\n  Completable c2 = resp.rxWrite(<span class=\"hljs-string\">&quot;2&quot;</span>);\n\n  <span class=\"hljs-comment\">// Write is subscription based, this will send</span>\n  <span class=\"hljs-comment\">// 2</span>\n  <span class=\"hljs-comment\">// 2</span>\n  c2.subscribe();\n  c2.subscribe();\n});\n</code></pre><h2 id=\"open-telemetry-support\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#open-telemetry-support\"></a>Open Telemetry support</h2><p><a href=\"/docs/4.1.0/vertx-opentelemetry/java/\">Open Teleme­try</a> trac­ing is a new and no­tice­able trac­ing in­te­gra­tion avail­able in 4.1.</p><h2 id=\"service-proxy-with-futures\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#service-proxy-with-futures\"></a>Service proxy with futures</h2><p>Vert.x 4 pro­vides a future-​first API. How­ever, ser­vice prox­ies can only be de­clared with call­backs.</p><p>We ad­dressed this issue in Vert.x 4.1 and you can now write ser­vice prox­ies with fu­tures. The only change you\nneed is to de­clare the fu­ture usage in the Code­gen mod­ule de­c­la­ra­tion.</p><h2 id=\"vertx-web\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-web\"></a>Vertx-Web</h2><p>In this re­lease, we im­proved the log­ging han­dler to en­able cus­tom log­ging for­mats.</p><p>The OAuth2 han­dler now fol­lows the OIDC stan­dard by val­i­dat­ing the re­quested scopes are present in the OAuth2 re­sponse. A new APIKEY han­dler was added to sup­port more se­cu­rity use cases, and it is now pos­si­ble to write cus­tom authn han­dlers with­out re­quir­ing in­ter­nal classes.</p><p>The API <code>ctx.json()</code> now fol­lows the IANA con­tent type stan­dard.</p><h2 id=\"vertx-web-openapi\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-web-openapi\"></a>Vertx-Web OpenAPI</h2><p>A lot of com­mu­nity dis­cus­sions and work has been done to im­prove the se­cu­rity han­dling of Ope­nAPI in Vert.x. We now sup­port all kinds of se­cu­rity de­scribed in Ope­nAPI 3.0, OpenId, OAuth2, API-​Key, HTTP.</p><p>The new API also al­lows for fetch­ing the se­cu­rity con­fig­u­ra­tion from the doc­u­ment it­self, rather than hav­ing it double-​configured in the doc­u­ment and in the code.</p><h2 id=\"vertx-auth\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-auth\"></a>Vertx-Auth</h2><p>In the Vert.x auth mod­ule, sup­port for <code>EdDSA</code> was added to the JOSE/COSE code. This means that we can now use those al­go­rithms in JWT/OAuth2/OIDC/FIDO2. The sup­port re­lies only on the pro­vided JDK which means that users will need to use JDK 15 or above to be able to use those al­go­rithms.</p><p>In the JOSE code, im­prove­ments were made to cor­rectly fol­low the <code>use</code> value of a JWK and more tests were added to ver­ify that we in­terop prop­erly with to­kens gen­er­ated by other li­braries.</p><p>Fi­nally, in <code>FIDO2/Webauthn</code> we fol­low the rec­om­men­da­tion of stor­ing the at­tes­ta­tion cer­tifi­cates, which al­lows of­fline val­i­da­tion of de­vices. This is a util­ity that al­lows you to check if to­kens have been com­pro­mised and dis­able their fu­ture use at the RP.</p><h2 id=\"kotlin-15-support\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#kotlin-15-support\"></a>Kotlin 1.5 support</h2><p>Vert.x 4.1 sup­ports Kotlin 1.5</p><h2 id=\"general-pool-improvements\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#general-pool-improvements\"></a>General pool improvements</h2><p>Vert.x in­ter­nal pool has been im­proved to gain more flex­i­bil­ity with new fea­tures such as</p><ul><li>mul­ti­ple event loops per pool</li><li>waiter can­cel­la­tion</li><li>lock free im­ple­men­ta­tion</li><li>con­nec­tion se­lec­tion strat­egy</li></ul><p>In ad­di­tion, the in­ter­nal pool is now used by the Vert.x SQL Client and Vert.x Mail Clients.</p><h2 id=\"web-session-storage-with-infinispan\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#web-session-storage-with-infinispan\"></a>Web Session Storage with Infinispan</h2><p>Vert.x Web <a href=\"/docs/4.1.0/vertx-web/java/#_session_stores\">ses­sion stor­age</a> is plug­gable.\nIn this ver­sion, a new ses­sion store with <a href=\"https://infinispan.org/\">In­fin­is­pan</a> in-​memory data grid is avail­able.</p><p>It is im­ple­mented on top of the In­fin­is­pan client so it can be used with ei­ther stand­alone or clus­tered Vert.x ap­pli­ca­tions.</p><p>If you want to get started, don’t miss the <a href=\"https://how-to.vertx.io/web-session-infinispan-howto/\"><em>Web Ses­sion Stor­age with In­fin­is­pan Client</em> how-​to</a>.</p>","scope":{}}},"prevPost":null,"nextPost":{"meta":{"title":"Migrate from Vert.x 3 to Vert.x 4","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We provide a clear and well-documented migration path from Vert.x 3.9 to Vert.x 4. Existing users will feel at home with the new version.","pinned":true},"date":"2020-12-02","slug":"from-vert-x-3-to-vert-x-4"},"relatedPosts":[{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Eclipse Vert.x 4.1.0.Beta1 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"The first beta of the upcoming Vert.x 4.1 has just been released. We consider it feature complete and invite the community to test it."},"date":"2021-05-12","slug":"eclipse-vert-x-4-1-Beta1-released"},{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"}]},"__N_SSG":true}