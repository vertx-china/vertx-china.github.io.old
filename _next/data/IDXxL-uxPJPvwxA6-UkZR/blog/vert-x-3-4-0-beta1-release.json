{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Vert.x 3.4.0.Beta1 release","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have released 3.4.0.Beta1, this release is the biggest since Vert.x 3.0.0 with plenty of great features."},"date":"2017-02-09","slug":"vert-x-3-4-0-beta1-release","readingTime":{"text":"6 min read","minutes":5.605,"time":336300,"words":1121},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We have re\\xADleased 3.4.0.Beta1, this re\\xADlease is the biggest since Vert.x 3.0.0 with plenty of great fea\\xADtures.\"), mdx(\"p\", null, \"You can use con\\xADsume it in your projects from Maven or Gra\\xADdle as usual with the ver\\xADsion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.4.0.Beta1\"), \" or read\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(Link, {\n    href: \"/docs/3.4.0.Beta1/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion pre\\xADview\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\"\n  }), \"re\\xADlease notes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"see the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\"\n  }), \"ac\\xADtual ex\\xADam\\xADples\"))), mdx(\"p\", null, \"Let me out\\xADline the im\\xADpor\\xADtant changes you can al\\xADready find in this Beta1.\"), mdx(\"h2\", {\n    \"id\": \"vertx-web-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-web-client\"\n  })), \"Vert.x Web Client\"), mdx(\"p\", null, \"In a sim\\xADple sen\\xADtence \\u201CVert.x Web Client is to Vert.x Http\\xADClient what Vert.x Web is to HttpServer\\u201D\"), mdx(\"p\", null, \"The Web Client makes it easy to do HTTP re\\xADquest/re\\xADsponse in\\xADter\\xADac\\xADtions with a web server, and pro\\xADvides ad\\xADvanced fea\\xADtures like:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Json body en\\xADcod\\xADing / de\\xADcod\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"re\\xADquest/re\\xADsponse pump\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"re\\xADquest pa\\xADra\\xADme\\xADters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uni\\xADfied error han\\xADdling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"form sub\\xADmis\\xADsions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"and more!\")), mdx(\"p\", null, \"Built on top of Http\\xADClient, it nat\\xADu\\xADrally in\\xADher\\xADits its fea\\xADtures and pro\\xADvides a bet\\xADter API, let me give an overview in one ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"WebClient client = WebClient.\\nclient\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .as(BodyCodec.json(User.class))\\n  .send(ar -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n\\n      HttpResponse<User> response = ar.result();\\n      User user = response.body();\\n\\n      System.out.println(\\\"Received response with status code\\\" + response.statusCode() + \\\" with body \\\" +\\n        user.getFirstName() + \\\" \\\" + user.getLastName());\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage());\\n    }\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"rxjava-singles\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#rxjava-singles\"\n  })), \"RxJava singles\"), mdx(\"p\", null, \"Rx\\xADJava is a very pop\\xADu\\xADlar Java ex\\xADten\\xADsion and in this re\\xADlease we fo\\xADcused on the API us\\xADabil\\xADity with the sup\\xADport\\nof the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Single\"), \" Rx\\xADJava type.\"), mdx(\"p\", null, \"The new meth\\xADods are pre\\xADfixed by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rx\"), \" and dep\\xADre\\xADcates the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Observable\"), \" suf\\xADfixed meth\\xADods.\"), mdx(\"p\", null, \"So in\\xADstead of start\\xADing a server with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listenObservable\"), \" now you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rxListen\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"HttpServer server = vertx.createHttpServer();\\nSingle<HttpServer> single = server.rxListen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \");\\nsingle.subscribe(\\n  ok -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server started\\\"\"), \"),\\n  err -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + err.getMessage()));\\n\")), mdx(\"p\", null, \"One no\\xADtice\\xADable dif\\xADfer\\xADence with the pre\\xADvi\\xADous API, is that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listen\"), \" method is called when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Single\"), \" is sub\\xADscribed.\"), mdx(\"p\", null, \"This is very handy when com\\xADbined with the new web client:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Single<HttpResponse<Buffer>> single = client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .rxSend();\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send the request\"), \"\\nsingle.subscribe(response -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"got response \\\"\"), \" + response.statusCode());\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send the request again\"), \"\\nsingle.subscribe(response -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"got response \\\"\"), \" + response.statusCode());\\n\")), mdx(\"h2\", {\n    \"id\": \"polyglot\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#polyglot\"\n  })), \"Polyglot\"), mdx(\"p\", null, \"In this beta you can try \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x for Kotlin\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x for Kotlin\"), \" is based on the Java API and pro\\xADvides also the ex\\xADe\\xADcu\\xADtion of Kotlin Ver\\xADti\\xADcles.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-kotlin\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.*\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.kotlin.core.http.HttpServerOptions\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Server\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"AbstractVerticle\")), \"() {\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"override\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"fun\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\")), \" {\\n    vertx.createHttpServer(\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// We provide Kotlin extension methods, allowing to use an idiomatic Kotlin API for building these options\"), \"\\n        HttpServerOptions(\\n            port = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \",\\n            host = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \"\\n        ))\\n        .requestHandler() { req ->\\n          req.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello from Kotlin\\\"\"), \")\\n        }\\n        .listen()\\n    println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server started on 8080\\\"\"), \")\\n  }\\n}\\n\")), mdx(\"p\", null, \"It can be di\\xADrectly ran from the com\\xADmand line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"julien:vertx-kotlin-example julien$ vertx run Server.kt\\nServer started on 8080\\nSucceeded \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" deploying verticle\\n\")), mdx(\"p\", null, \"As you can see, Kotlin is using the Java API di\\xADrectly, and we thought that it might be a cool thing to do the\\nsame with Groovy sup\\xADport. So we have re\\xADcon\\xADsid\\xADered our Groovy sup\\xADport and now it uses the plain Java API,\\nwith\\xADout los\\xADing the ex\\xADist\\xADing fea\\xADtures.\"), mdx(\"p\", null, \"Thanks to Groovy ex\\xADten\\xADsion meth\\xADods, id\\xADiomatic Groovy is still sup\\xADported while ben\\xADe\\xADfit\\xADing from the full Java API!\"), mdx(\"p\", null, \"Scala sup\\xADport is also planned for 3.4.0 and will be re\\xADleased soon, watch \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/vertx_project\"\n  }), \"@vertx_project\"), \".\"), mdx(\"h2\", {\n    \"id\": \"the-microservices-story-goes-on\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#the-microservices-story-goes-on\"\n  })), \"The microservices story goes on\\u2026\"), mdx(\"p\", null, \"Our APIs have ma\\xADtured and now they have been moved out of tech pre\\xADview, of course this wasn\\u2019t enough and we now\\nhave \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x Con\\xADfig\"), \", an ex\\xADten\\xADsi\\xADble way to con\\xADfig\\xADure Vert.x ap\\xADpli\\xADca\\xADtions sup\\xADport\\xADing File, json, ENV, sys\\xADtem prop\\xADer\\xADties,\\nHTTP, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ku\\xADber\\xADnetes Con\\xADfigmap\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Con\\xADsul\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Spring Con\\xADfig Server\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Redis\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Git\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Zookeeper\"), \", \\u2026 stores as well as\\nsev\\xADeral for\\xADmats: prop\\xADer\\xADties file, YAML and Hocon.\"), mdx(\"p\", null, \"Here is a small ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ConfigStoreOptions httpStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions()\\n  .setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http\\\"\"), \")\\n  .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n    .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"host\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \").put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \").put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"path\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/conf\\\"\"), \"));\\n\\nConfigStoreOptions fileStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions()\\n  .setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"file\\\"\"), \")\\n  .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"path\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my-config.json\\\"\"), \"));\\n\\nConfigStoreOptions sysPropsStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions().setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"sys\\\"\"), \");\\n\\nConfigRetrieverOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigRetrieverOptions()\\n  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);\\n\\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);\\n\")), mdx(\"p\", null, \"Vert.x Con\\xADfig also sup\\xADports push based no\\xADti\\xADfi\\xADca\\xADtion style:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ConfigRetriever retriever = ConfigRetriever.create(Vertx.vertx(), options);\\nretriever.configStream()\\n  .endHandler(v -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// retriever closed\"), \"\\n  })\\n  .exceptionHandler(t -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// an error has been caught while retrieving the configuration\"), \"\\n  })\\n  .handler(conf -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// the configuration\"), \"\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"vertx-mqtt-server\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-mqtt-server\"\n  })), \"Vertx MQTT Server\"), mdx(\"p\", null, \"Vert.x MQTT Server is able to han\\xADdle con\\xADnec\\xADtions, com\\xADmu\\xADni\\xADca\\xADtion and mes\\xADsages ex\\xADchange with re\\xADmote MQTT clients.\\nIts API pro\\xADvides a bunch of events re\\xADlated to pro\\xADto\\xADcol mes\\xADsages re\\xADceived by clients and ex\\xADposes allow to send\\nmes\\xADsages to them.\"), mdx(\"p\", null, \"Here is a small ef\\xADfec\\xADtive ex\\xADam\\xADple of cre\\xADat\\xADing, the Vert.x way!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"MqttServerOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MqttServerOptions()\\n  .setPort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1883\"), \")\\n  .setHost(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0\\\"\"), \");\\n\\nMqttServer server = MqttServer.create(vertx, options);\\n\\nserver.endpointHandler(endpoint -> {\\n\\n  System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"connected client \\\"\"), \" + endpoint.clientIdentifier());\\n\\n  endpoint.publishHandler(message -> {\\n\\n    System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Just received message on [\\\"\"), \" + message.topicName() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"] payload [\\\"\"), \" +\\n      message.payload() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"] with QoS [\\\"\"), \" +\\n      message.qosLevel() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"]\\\"\"), \");\\n  });\\n\\n  endpoint.accept(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"false\"), \");\\n});\\n\\nserver.listen(ar -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n    System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"MQTT server started and listening on port \\\"\"), \" + server.actualPort());\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    System.err.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"MQTT server error on start\\\"\"), \" + ar.cause().getMessage());\\n  }\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"vertx-sql-streaming\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-sql-streaming\"\n  })), \"Vert.x SQL streaming\"), mdx(\"p\", null, \"We now sup\\xADport stream\\xADing style for SQL queries:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"connection.queryStream(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"select * from test\\\"\"), \", stream -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (stream.succeeded()) {\\n    SQLRowStream sqlRowStream = stream.result();\\n\\n    sqlRowStream\\n      .handler(row -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// do something with the row...\"), \"\\n        System.out.println(row.encode());\\n      })\\n      .endHandler(v -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// no more data available, close the connection\"), \"\\n        connection.close(done -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (done.failed()) {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throw\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RuntimeException(done.cause());\\n          }\\n        });\\n      });\\n  }\\n});\\n\")), mdx(\"p\", null, \"And with the Rx\\xADJava API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-reasonml\"\n  }), \"client\\n  .rx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"GetConnection()\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Connect to the database\"), \"\\n  .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MapObservable(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \" -> { \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), \" With \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"the\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"connection\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"...\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"CREATE TABLE test(col VARCHAR(20))\\\"\"), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...create test table\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO test (col) VALUES ('val1')\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...insert a row\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO test (col) VALUES ('val2')\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...another one\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxQueryStream\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM test\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...get values stream\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MapObservable(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"sqlRowStream\"), \" -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"sqlRowStream\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"toObservable\"), \"()\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform the stream into an Observable...\"), \"\\n          .\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"do\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"OnTerminate(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"close\"), \")\"), \"; \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...and close the connection when the stream is fully read or an error occurs\"), \"\\n      });\\n  }).subscribe(row -> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"System\"), \".\")), \"out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Row : \\\"\"), \" + row.encode\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"()\"), \"));\\n\")), mdx(\"h2\", {\n    \"id\": \"finally\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finally\"\n  })), \"Finally\"), mdx(\"p\", null, \"In ad\\xADdi\\xADtion to all these bril\\xADlant fea\\xADtures here is a list of more-\\u200Bthan-noticeable things you have in this Beta1:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x In\\xADfin\\xADis\\xADpan re\\xADplaces Vert.x Jgroups clus\\xADter man\\xADager\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x Con\\xADsul Client pro\\xADvides a full fledged client for Con\\xADsul\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oauth2 pre\\xADde\\xADfined con\\xADfig\\xADu\\xADra\\xADtion with 16 set\\xADtings from \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Azure Ac\\xADtive Di\\xADrec\\xADtory\"), \", to \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Twit\\xADter\"), \" with the usual sus\\xADpects (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Face\\xADbook\"), \", \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"LinkedIn\"), \", \\u2026)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Http client now fol\\xADlow redi\\xADrects\")), mdx(\"p\", null, \"You can use and con\\xADsume it in your projects from Maven or Gra\\xADdle as usual with the ver\\xADsion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.4.0.Beta1\"), \" or read\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(Link, {\n    href: \"/docs/3.4.0.Beta1/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion pre\\xADview\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\"\n  }), \"re\\xADlease notes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"see the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\"\n  }), \"ac\\xADtual ex\\xADam\\xADples\"))), mdx(\"p\", null, \"Last but not least, I want to per\\xADson\\xADally thank all the peo\\xADple that con\\xADtributed to this re\\xADlease, be\\xADyond the Vert.x core team, the ac\\xADtual\\nVert.x com\\xADmit\\xADters and many other peo\\xADple who have given a lot of ef\\xADfort to this up\\xADcom\\xADing 3.4.0!!!!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We have re­leased 3.4.0.Beta1, this re­lease is the biggest since Vert.x 3.0.0 with plenty of great fea­tures.</p><p>You can use con­sume it in your projects from Maven or Gra­dle as usual with the ver­sion <code>3.4.0.Beta1</code> or read</p><ul><li>the <a href=\"/docs/3.4.0.Beta1\">doc­u­men­ta­tion pre­view</a></li><li>the <a href=\"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\">re­lease notes</a></li><li>see the <a href=\"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\">ac­tual ex­am­ples</a></li></ul><p>Let me out­line the im­por­tant changes you can al­ready find in this Beta1.</p><h2 id=\"vertx-web-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-web-client\"></a>Vert.x Web Client</h2><p>In a sim­ple sen­tence “Vert.x Web Client is to Vert.x Http­Client what Vert.x Web is to HttpServer”</p><p>The Web Client makes it easy to do HTTP re­quest/re­sponse in­ter­ac­tions with a web server, and pro­vides ad­vanced fea­tures like:</p><ul><li>Json body en­cod­ing / de­cod­ing</li><li>re­quest/re­sponse pump­ing</li><li>re­quest pa­ra­me­ters</li><li>uni­fied error han­dling</li><li>form sub­mis­sions</li><li>and more!</li></ul><p>Built on top of Http­Client, it nat­u­rally in­her­its its fea­tures and pro­vides a bet­ter API, let me give an overview in one ex­am­ple:</p><pre><code class=\"hljs language-java\">WebClient client = WebClient.\nclient\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .as(BodyCodec.json(User.class))\n  .send(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n      HttpResponse&lt;User&gt; response = ar.result();\n      User user = response.body();\n\n      System.out.println(&quot;Received response with status code&quot; + response.statusCode() + &quot; with body &quot; +\n        user.getFirstName() + &quot; &quot; + user.getLastName());\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage());\n    }\n  });\n</code></pre><h2 id=\"rxjava-singles\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#rxjava-singles\"></a>RxJava singles</h2><p>Rx­Java is a very pop­u­lar Java ex­ten­sion and in this re­lease we fo­cused on the API us­abil­ity with the sup­port\nof the <code>Single</code> Rx­Java type.</p><p>The new meth­ods are pre­fixed by <code>rx</code> and dep­re­cates the <code>Observable</code> suf­fixed meth­ods.</p><p>So in­stead of start­ing a server with <code>listenObservable</code> now you use <code>rxListen</code>:</p><pre><code class=\"hljs language-java\">HttpServer server = vertx.createHttpServer();\nSingle&lt;HttpServer&gt; single = server.rxListen(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\nsingle.subscribe(\n  ok -&gt; System.out.println(<span class=\"hljs-string\">&quot;Server started&quot;</span>),\n  err -&gt; System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + err.getMessage()));\n</code></pre><p>One no­tice­able dif­fer­ence with the pre­vi­ous API, is that the <code>listen</code> method is called when the <code>Single</code> is sub­scribed.</p><p>This is very handy when com­bined with the new web client:</p><pre><code class=\"hljs language-java\">Single&lt;HttpResponse&lt;Buffer&gt;&gt; single = client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .rxSend();\n\n<span class=\"hljs-comment\">// Send the request</span>\nsingle.subscribe(response -&gt; System.out.println(<span class=\"hljs-string\">&quot;got response &quot;</span> + response.statusCode());\n\n<span class=\"hljs-comment\">// Send the request again</span>\nsingle.subscribe(response -&gt; System.out.println(<span class=\"hljs-string\">&quot;got response &quot;</span> + response.statusCode());\n</code></pre><h2 id=\"polyglot\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#polyglot\"></a>Polyglot</h2><p>In this beta you can try <em>Vert.x for Kotlin</em>.</p><p><em>Vert.x for Kotlin</em> is based on the Java API and pro­vides also the ex­e­cu­tion of Kotlin Ver­ti­cles.</p><pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">import</span> io.vertx.core.*\n<span class=\"hljs-keyword\">import</span> io.vertx.kotlin.core.http.HttpServerOptions\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Server</span> : <span class=\"hljs-type\">AbstractVerticle</span></span>() {\n\n  <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span> {\n    vertx.createHttpServer(\n\n        <span class=\"hljs-comment\">// We provide Kotlin extension methods, allowing to use an idiomatic Kotlin API for building these options</span>\n        HttpServerOptions(\n            port = <span class=\"hljs-number\">8080</span>,\n            host = <span class=\"hljs-string\">&quot;localhost&quot;</span>\n        ))\n        .requestHandler() { req -&gt;\n          req.response().end(<span class=\"hljs-string\">&quot;Hello from Kotlin&quot;</span>)\n        }\n        .listen()\n    println(<span class=\"hljs-string\">&quot;Server started on 8080&quot;</span>)\n  }\n}\n</code></pre><p>It can be di­rectly ran from the com­mand line:</p><pre><code class=\"hljs language-bash\">julien:vertx-kotlin-example julien$ vertx run Server.kt\nServer started on 8080\nSucceeded <span class=\"hljs-keyword\">in</span> deploying verticle\n</code></pre><p>As you can see, Kotlin is using the Java API di­rectly, and we thought that it might be a cool thing to do the\nsame with Groovy sup­port. So we have re­con­sid­ered our Groovy sup­port and now it uses the plain Java API,\nwith­out los­ing the ex­ist­ing fea­tures.</p><p>Thanks to Groovy ex­ten­sion meth­ods, id­iomatic Groovy is still sup­ported while ben­e­fit­ing from the full Java API!</p><p>Scala sup­port is also planned for 3.4.0 and will be re­leased soon, watch <a href=\"https://twitter.com/vertx_project\">@vertx_project</a>.</p><h2 id=\"the-microservices-story-goes-on\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#the-microservices-story-goes-on\"></a>The microservices story goes on…</h2><p>Our APIs have ma­tured and now they have been moved out of tech pre­view, of course this wasn’t enough and we now\nhave <em>Vert.x Con­fig</em>, an ex­ten­si­ble way to con­fig­ure Vert.x ap­pli­ca­tions sup­port­ing File, json, ENV, sys­tem prop­er­ties,\nHTTP, <em>Ku­ber­netes Con­figmap</em>, <em>Con­sul</em>, <em>Spring Con­fig Server</em>, <em>Redis</em>, <em>Git</em>, <em>Zookeeper</em>, … stores as well as\nsev­eral for­mats: prop­er­ties file, YAML and Hocon.</p><p>Here is a small ex­am­ple:</p><pre><code class=\"hljs language-java\">ConfigStoreOptions httpStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">&quot;http&quot;</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">8080</span>).put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;/conf&quot;</span>));\n\nConfigStoreOptions fileStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">&quot;file&quot;</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;my-config.json&quot;</span>));\n\nConfigStoreOptions sysPropsStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions().setType(<span class=\"hljs-string\">&quot;sys&quot;</span>);\n\nConfigRetrieverOptions options = <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);\n</code></pre><p>Vert.x Con­fig also sup­ports push based no­ti­fi­ca­tion style:</p><pre><code class=\"hljs language-java\">ConfigRetriever retriever = ConfigRetriever.create(Vertx.vertx(), options);\nretriever.configStream()\n  .endHandler(v -&gt; {\n    <span class=\"hljs-comment\">// retriever closed</span>\n  })\n  .exceptionHandler(t -&gt; {\n    <span class=\"hljs-comment\">// an error has been caught while retrieving the configuration</span>\n  })\n  .handler(conf -&gt; {\n    <span class=\"hljs-comment\">// the configuration</span>\n  });\n</code></pre><h2 id=\"vertx-mqtt-server\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-mqtt-server\"></a>Vertx MQTT Server</h2><p>Vert.x MQTT Server is able to han­dle con­nec­tions, com­mu­ni­ca­tion and mes­sages ex­change with re­mote MQTT clients.\nIts API pro­vides a bunch of events re­lated to pro­to­col mes­sages re­ceived by clients and ex­poses allow to send\nmes­sages to them.</p><p>Here is a small ef­fec­tive ex­am­ple of cre­at­ing, the Vert.x way!</p><pre><code class=\"hljs language-java\">MqttServerOptions options = <span class=\"hljs-keyword\">new</span> MqttServerOptions()\n  .setPort(<span class=\"hljs-number\">1883</span>)\n  .setHost(<span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>);\n\nMqttServer server = MqttServer.create(vertx, options);\n\nserver.endpointHandler(endpoint -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;connected client &quot;</span> + endpoint.clientIdentifier());\n\n  endpoint.publishHandler(message -&gt; {\n\n    System.out.println(<span class=\"hljs-string\">&quot;Just received message on [&quot;</span> + message.topicName() + <span class=\"hljs-string\">&quot;] payload [&quot;</span> +\n      message.payload() + <span class=\"hljs-string\">&quot;] with QoS [&quot;</span> +\n      message.qosLevel() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n  });\n\n  endpoint.accept(<span class=\"hljs-keyword\">false</span>);\n});\n\nserver.listen(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;MQTT server started and listening on port &quot;</span> + server.actualPort());\n  } <span class=\"hljs-keyword\">else</span> {\n    System.err.println(<span class=\"hljs-string\">&quot;MQTT server error on start&quot;</span> + ar.cause().getMessage());\n  }\n});\n</code></pre><h2 id=\"vertx-sql-streaming\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-sql-streaming\"></a>Vert.x SQL streaming</h2><p>We now sup­port stream­ing style for SQL queries:</p><pre><code class=\"hljs language-java\">connection.queryStream(<span class=\"hljs-string\">&quot;select * from test&quot;</span>, stream -&gt; {\n  <span class=\"hljs-keyword\">if</span> (stream.succeeded()) {\n    SQLRowStream sqlRowStream = stream.result();\n\n    sqlRowStream\n      .handler(row -&gt; {\n        <span class=\"hljs-comment\">// do something with the row...</span>\n        System.out.println(row.encode());\n      })\n      .endHandler(v -&gt; {\n        <span class=\"hljs-comment\">// no more data available, close the connection</span>\n        connection.close(done -&gt; {\n          <span class=\"hljs-keyword\">if</span> (done.failed()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(done.cause());\n          }\n        });\n      });\n  }\n});\n</code></pre><p>And with the Rx­Java API:</p><pre><code class=\"hljs language-reasonml\">client\n  .rx<span class=\"hljs-constructor\">GetConnection()</span> <span class=\"hljs-comment\">// Connect to the database</span>\n  .flat<span class=\"hljs-constructor\">MapObservable(<span class=\"hljs-params\">conn</span> -&gt; { <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> With <span class=\"hljs-params\">the</span> <span class=\"hljs-params\">connection</span><span class=\"hljs-operator\">...</span>\n    <span class=\"hljs-params\">return</span> <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;CREATE TABLE test(col VARCHAR(20))&quot;</span>)</span> <span class=\"hljs-comment\">// ...create test table</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;INSERT INTO test (col) VALUES (&#x27;val1&#x27;)&quot;</span>)</span>) <span class=\"hljs-comment\">// ...insert a row</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;INSERT INTO test (col) VALUES (&#x27;val2&#x27;)&quot;</span>)</span>) <span class=\"hljs-comment\">// ...another one</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxQueryStream</span>(<span class=\"hljs-string\">&quot;SELECT * FROM test&quot;</span>)</span>) <span class=\"hljs-comment\">// ...get values stream</span>\n      .flat<span class=\"hljs-constructor\">MapObservable(<span class=\"hljs-params\">sqlRowStream</span> -&gt; {\n        <span class=\"hljs-params\">return</span> <span class=\"hljs-params\">sqlRowStream</span>.<span class=\"hljs-params\">toObservable</span>()</span> <span class=\"hljs-comment\">// Transform the stream into an Observable...</span>\n          .<span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">OnTerminate(<span class=\"hljs-params\">conn</span>::<span class=\"hljs-params\">close</span>)</span>; <span class=\"hljs-comment\">// ...and close the connection when the stream is fully read or an error occurs</span>\n      });\n  }).subscribe(row -&gt; <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">&quot;Row : &quot;</span> + row.encode<span class=\"hljs-literal\">()</span>));\n</code></pre><h2 id=\"finally\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finally\"></a>Finally</h2><p>In ad­di­tion to all these bril­lant fea­tures here is a list of more-​than-noticeable things you have in this Beta1:</p><ul><li>Vert.x In­fin­is­pan re­places Vert.x Jgroups clus­ter man­ager</li><li>Vert.x Con­sul Client pro­vides a full fledged client for Con­sul</li><li>Oauth2 pre­de­fined con­fig­u­ra­tion with 16 set­tings from <em>Azure Ac­tive Di­rec­tory</em>, to <em>Twit­ter</em> with the usual sus­pects (<em>Face­book</em>, <em>LinkedIn</em>, …)</li><li>Http client now fol­low redi­rects</li></ul><p>You can use and con­sume it in your projects from Maven or Gra­dle as usual with the ver­sion <code>3.4.0.Beta1</code> or read</p><ul><li>the <a href=\"/docs/3.4.0.Beta1\">doc­u­men­ta­tion pre­view</a></li><li>the <a href=\"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\">re­lease notes</a></li><li>see the <a href=\"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\">ac­tual ex­am­ples</a></li></ul><p>Last but not least, I want to per­son­ally thank all the peo­ple that con­tributed to this re­lease, be­yond the Vert.x core team, the ac­tual\nVert.x com­mit­ters and many other peo­ple who have given a lot of ef­fort to this up­com­ing 3.4.0!!!!</p>","scope":{}}},"prevPost":{"meta":{"title":"Vert.x 3.4.0 is released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Vert.x 3.4.0 has just been released with many new exciting features!"},"date":"2017-03-07","slug":"vert-x-3-4-0-is-released"},"nextPost":{"meta":{"title":"An Introduction to the Vert.x Context Object","category":"guides","authors":[{"name":"Jez Prime","github_id":"millross"}],"summary":"Under the hood, the vert.x Context class plays a critical part in maintaining the thread-safety guarantees of verticles. Most of the time, vert.x coders don't need to make use of Context objects directly."},"date":"2017-01-31","slug":"an-introduction-to-the-vert-x-context-object"},"relatedPosts":[{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Eclipse Vert.x 4 milestone 5 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We are extremely pleased to announce the fifth 4.0 milestone release of Eclipse Vert.x. This release aims to provide a reliable distribution of the current development of Vert.x 4."},"date":"2020-06-10","slug":"eclipse-vert-x-4-milestone-5-released"}]},"__N_SSG":true}