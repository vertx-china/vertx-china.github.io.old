{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client","readingTime":{"text":"10 min read","minutes":9.02,"time":541199.9999999999,"words":1804},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Fi\\xADnally, back\\u2026 This post is the fifth post of the in\\xADtro\\xADduc\\xADtion to vert.x blog se\\xADries, after a not-\\u200Bthat-small break. In this post we are going to see how we can use JDBC in a vert.x ap\\xADpli\\xADca\\xADtion, and this, using the asyn\\xADchro\\xADnous API pro\\xADvided by the \", mdx(Link, {\n    href: \"/docs/vertx-jdbc-client/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"vertx-\\u200Bjdbc-client\")), \".\"), mdx(\"h2\", {\n    \"id\": \"previously-in-the-introduction-to-vertx-series\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#previously-in-the-introduction-to-vertx-series\"\n  })), \"Previously in the introduction to vert.x series\"), mdx(\"p\", null, \"As it was quite some time since the last post, let\\u2019s start by re\\xADfresh\\xADing our mind about the four pre\\xADvi\\xADous posts:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/my-first-vert-x-3-application/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"first post\")), \" has de\\xADscribed how to build a vert.x ap\\xADpli\\xADca\\xADtion with Maven and ex\\xADe\\xADcute unit tests.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/vert-x-application-configuration/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"sec\\xADond post\")), \" has de\\xADscribed how this ap\\xADpli\\xADca\\xADtion can be\\xADcome con\\xADfig\\xADurable.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/some-rest-with-vert-x/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"third post\")), \" has in\\xADtro\\xADduced \", mdx(Link, {\n    href: \"/docs/vertx-web/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"vertx-\\u200Bweb\")), \", and a small col\\xADlec\\xADtion man\\xADage\\xADment ap\\xADpli\\xADca\\xADtion has been de\\xADvel\\xADoped. This ap\\xADpli\\xADca\\xADtion of\\xADfers a REST API used by a HTML/JavaScript fron\\xADtend.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/unit-and-integration-tests/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"pre\\xADvi\\xADous post\")), \" has pre\\xADsented how you can run in\\xADte\\xADgra\\xADtion tests to en\\xADsure the be\\xADhav\\xADior of your ap\\xADpli\\xADca\\xADtion.\")), mdx(\"p\", null, \"In this post, back to code. The cur\\xADrent ap\\xADpli\\xADca\\xADtion uses an in-\\u200Bmemory map to store the prod\\xADucts. It\\u2019s time to use a data\\xADbase. In this post we are going to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://hsqldb.org/\"\n  }), \"HSQL\"), \", but you can use any data\\xADbase pro\\xADvid\\xADing a JDBC dri\\xADver. In\\xADter\\xADac\\xADtions with the data\\xADbase will be asyn\\xADchro\\xADnous and made using the \", mdx(Link, {\n    href: \"/docs/vertx-jdbc-client/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"vertx-\\u200Bjdbc-client\")), \".\"), mdx(\"p\", null, \"The code of this post are avail\\xADable on this Github \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app\"\n  }), \"project\"), \", in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\"\n  }), \"post-5 branch\"), \" branch.\"), mdx(\"h2\", {\n    \"id\": \"asynchronous\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#asynchronous\"\n  })), \"Asynchronous?\"), mdx(\"p\", null, \"One of the vert.x char\\xADac\\xADter\\xADis\\xADtics is being asyn\\xADchro\\xADnous. With an asyn\\xADchro\\xADnous API, you don\\u2019t wait for a re\\xADsult, but you are no\\xADti\\xADfied when this re\\xADsult is ready. Just to il\\xADlus\\xADtrate this, let\\u2019s take a very sim\\xADple ex\\xADam\\xADple.\"), mdx(\"p\", null, \"Let\\u2019s imag\\xADine an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add\"), \" method. Tra\\xADdi\\xADtion\\xADally, you would use it like this: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int r = add(1, 1)\"), \". This is a syn\\xADchro\\xADnous API as you are wait\\xADing for the re\\xADsult. An asyn\\xADchro\\xADnous ver\\xADsion of this API would be: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add(1, 1, r -> { /* do something with the result */ })\"), \". In this ver\\xADsion, you pass a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Handler\"), \" called when the re\\xADsult has been com\\xADputed. The method does not re\\xADturn any\\xADthing, and could be im\\xADple\\xADmented as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"add\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" a, \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" b, Handler<Integer> resultHandler)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" r = a + b;\\n    resultHandler.handle(r);\\n}\\n\")), mdx(\"p\", null, \"Just to avoid mis\\xADcon\\xADcep\\xADtions, asyn\\xADchro\\xADnous API are not about threads. As we can see in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add\"), \" ex\\xADam\\xADple, there are no threads in\\xADvolved.\"), mdx(\"h2\", {\n    \"id\": \"jdbc-yes-but-asynchronous\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#jdbc-yes-but-asynchronous\"\n  })), \"JDBC yes, but asynchronous\"), mdx(\"p\", null, \"So, now that we have seen some ba\\xADsics about asyn\\xADchro\\xADnous API, let\\u2019s have a look to the vertx-\\u200Bjdbc-client. This com\\xADpo\\xADnent lets us in\\xADter\\xADact with a data\\xADbase through a JDBC dri\\xADver. These in\\xADter\\xADac\\xADtions are asyn\\xADchro\\xADnous, so when you were doing:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"String sql = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM Products\\\"\"), \";\\nResultSet rs = stmt.executeQuery(sql);\\n\")), mdx(\"p\", null, \"it will be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"connection.query(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM Products\\\"\"), \", result -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// do something with the result\"), \"\\n});\\n\")), mdx(\"p\", null, \"This model is more ef\\xADfi\\xADcient as it avoids wait\\xADing for the re\\xADsult. You are no\\xADti\\xADfied when the re\\xADsult is avail\\xADable.\"), mdx(\"p\", null, \"Let\\u2019s now mod\\xADify our ap\\xADpli\\xADca\\xADtion to use a data\\xADbase to store our prod\\xADucts.\"), mdx(\"h2\", {\n    \"id\": \"some-maven-dependencies\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#some-maven-dependencies\"\n  })), \"Some maven dependencies\"), mdx(\"p\", null, \"The first things we need to do it to de\\xADclare two new Maven de\\xADpen\\xADden\\xADcies in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-jdbc-client\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.1.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"org.hsqldb\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"hsqldb\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"2.3.3\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"The first de\\xADpen\\xADdency pro\\xADvides the vertx-\\u200Bjdbc-client, while the sec\\xADond one pro\\xADvide the HSQL JDBC dri\\xADver. If you want to use an\\xADother data\\xADbase, change this de\\xADpen\\xADdency. You will also need to change the JDBC url and JDBC dri\\xADver class name later.\"), mdx(\"h2\", {\n    \"id\": \"initializing-the-jdbc-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#initializing-the-jdbc-client\"\n  })), \"Initializing the JDBC client\"), mdx(\"p\", null, \"Now that we have added these de\\xADpen\\xADden\\xADcies, it\\u2019s time to cre\\xADate our JDBC client:\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFirstVerticle\"), \" class, de\\xADclare a new field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JDBCClient jdbc;\"), \", and add the fol\\xADlow\\xADing line at the be\\xADgin\\xADning of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"jdbc = JDBCClient.createShared(vertx, config(), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"My-Whisky-Collection\\\"\"), \");\\n\")), mdx(\"p\", null, \"This cre\\xADates an in\\xADstance of JDBC client, con\\xADfig\\xADured with the con\\xADfig\\xADu\\xADra\\xADtion pro\\xADvided to the ver\\xADti\\xADcle. To work cor\\xADrectly this con\\xADfig\\xADu\\xADra\\xADtion needs to pro\\xADvide:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"url\"), \" - the JDBC url such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jdbc:hsqldb:mem:db?shutdown=true\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"dri\\xADver_class\"), \" - the JDBC dri\\xADver class such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"org.hsqldb.jdbcDriver\"))), mdx(\"p\", null, \"Ok, we have the client, we need a con\\xADnec\\xADtion to the data\\xADbase. This is achieved using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jdbc.getConnection\"), \" that take a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Handler<AsyncResult<SQLConnection>>\"), \" as pa\\xADra\\xADme\\xADter. Let\\u2019s have a deeper look to this type. It\\u2019s a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Handler\"), \", so it is called when the re\\xADsult is ready. This re\\xADsult is an in\\xADstance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult<SQLConnection>\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult\"), \" is a struc\\xADture pro\\xADvided by vert.x that lets us know if the op\\xADer\\xADa\\xADtion was com\\xADpleted suc\\xADcess\\xADfully or failed. In case of suc\\xADcess, it pro\\xADvides the re\\xADsult, here an in\\xADstance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \".\"), mdx(\"p\", null, \"When you re\\xADceive an in\\xADstance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult\"), \", your code gen\\xADer\\xADally looks like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n  System.err.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"The operation has failed...: \\\"\"), \"\\n      + ar.cause().getMessage());\\n} \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Use the result:\"), \"\\n  result = ar.result();\\n }\\n\")), mdx(\"p\", null, \"So, let\\u2019s go back to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \". We need to re\\xADtrieve it, and then start the rest of the ap\\xADpli\\xADca\\xADtion. This changes how we start the ap\\xADpli\\xADca\\xADtion, as it will be\\xADcome asyn\\xADchro\\xADnous. So, if we di\\xADvide our startup se\\xADquence into small chunks it would be some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"startBackend(\\n (connection) -> createSomeData(connection,\\n     (nothing) -> startWebApp(\\n         (http) -> completeStartup(http, fut)\\n     ), fut\\n ), fut);\\n\")), mdx(\"p\", null, \"with:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"startBackend\"), \" - re\\xADtrieves a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLConnection\"), \" and then calls the next step\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"createSomeData\"), \" - ini\\xADtial\\xADizes the data\\xADbase and in\\xADserts some data. When done, it calls the next step\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"startWebApp\"), \" - starts our web ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"completeStartup\"), \" - fi\\xADnal\\xADizes our start se\\xADquence\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fut\"), \" is the com\\xADple\\xADtion fu\\xADture passed by vert.x that let us re\\xADport when we are started, or if an issue has been en\\xADcoun\\xADtered while start\\xADing.\"), mdx(\"p\", null, \"Let\\u2019s have a look to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startBackend\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"startBackend\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Handler<AsyncResult<SQLConnection>> next, Future<Void> fut)\"), \" \"), \"{\\n  jdbc.getConnection(ar -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n      fut.fail(ar.cause());\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      next.handle(Future.succeededFuture(ar.result()));\\n    }\\n  });\\n}\\n\")), mdx(\"p\", null, \"This method re\\xADtrieves a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \", check whether this op\\xADer\\xADa\\xADtion suc\\xADceeded. If so, it calls the next step. In case of fail\\xADure, it re\\xADports it.\"), mdx(\"p\", null, \"The other meth\\xADods fol\\xADlow the same pat\\xADtern: 1) check if the last op\\xADer\\xADa\\xADtion has suc\\xADceeded, 2) do the task, 3) call the next step.\"), mdx(\"h3\", {\n    \"id\": \"a-bit-of-sql\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#a-bit-of-sql\"\n  })), \"A bit of SQL\\u2026\"), mdx(\"p\", null, \"Our client is ready, let\\u2019s now write some SQL state\\xADments. Let\\u2019s start by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createSomeData\"), \" method that is part of the startup se\\xADquence:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"createSomeData\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(AsyncResult<SQLConnection> result,\\n    Handler<AsyncResult<Void>> next, Future<Void> fut)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.failed()) {\\n      fut.fail(result.cause());\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      SQLConnection connection = result.result();\\n      connection.execute(\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"CREATE TABLE IF NOT EXISTS Whisky (id INTEGER IDENTITY, name varchar(100), \\\"\"), \" +\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"origin varchar(100))\\\"\"), \",\\n          ar -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n              fut.fail(ar.cause());\\n              connection.close();\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n            }\\n            connection.query(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM Whisky\\\"\"), \", select -> {\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (select.failed()) {\\n                fut.fail(ar.cause());\\n                connection.close();\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n              }\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (select.result().getNumRows() == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \") {\\n                insert(\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bowmore 15 Years Laimrig\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Islay\\\"\"), \"),\\n                    connection,\\n                    (v) -> insert(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Talisker 57\\xB0 North\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Island\\\"\"), \"),\\n                        connection,\\n                        (r) -> {\\n                          next.handle(Future.<Void>succeededFuture());\\n                          connection.close();\\n                        }));                                                    \\n              } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                next.handle(Future.<Void>succeededFuture());\\n                connection.close();\\n              }\\n            });\\n          });\\n    }\\n  }\\n\")), mdx(\"p\", null, \"This method checks that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \" is avail\\xADable and then start ex\\xADe\\xADcut\\xADing some SQL state\\xADments. First, it cre\\xADates the ta\\xADbles if there are not there yet. As you can see, the method called is struc\\xADtured as fol\\xADlows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"connection.execute(\\n    SQL statement,\\n    handler called when the statement has been executed\\n)\\n\")), mdx(\"p\", null, \"The han\\xADdler re\\xADceives an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult<Void>\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"i.e.\"), \" a no\\xADti\\xADfi\\xADca\\xADtion of the com\\xADple\\xADtion with\\xADout an ac\\xADtual re\\xADsult.\"), mdx(Alert, {\n    info: true,\n    title: \"Closing connection\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Don\\u2019t for\\xADget to close the SQL con\\xADnec\\xADtion when you are done. The con\\xADnec\\xADtion will be given back to the con\\xADnec\\xADtion pool and be reused.\")), mdx(\"p\", null, \"In the code of this han\\xADdler, we check whether or not the state\\xADment has been ex\\xADe\\xADcuted cor\\xADrectly, and if so we check to see if the table al\\xADready con\\xADtains some data, if not, it in\\xADserts data using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"insert\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Whisky whisky, SQLConnection connection, Handler<AsyncResult<Whisky>> next)\"), \" \"), \"{\\n  String sql = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO Whisky (name, origin) VALUES ?, ?\\\"\"), \";\\n  connection.updateWithParams(sql,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonArray().add(whisky.getName()).add(whisky.getOrigin()),\\n      (ar) -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n          next.handle(Future.failedFuture(ar.cause()));\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n        }\\n        UpdateResult result = ar.result();\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Build a new whisky instance with the generated id.\"), \"\\n        Whisky w = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(result.getKeys().getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"), whisky.getName(), whisky.getOrigin());\\n        next.handle(Future.succeededFuture(w));\\n      });\\n}\\n\")), mdx(\"p\", null, \"This method uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateWithParams\"), \" method with an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IN\\xADSERT\"), \" state\\xADment, and pass val\\xADues. This ap\\xADproach avoids SQL in\\xADjec\\xADtion. Once the the state\\xADment has been ex\\xADe\\xADcuted, we cre\\xADates a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Whisky\"), \" ob\\xADject with the cre\\xADated (auto-\\u200Bgenerated) id.\"), mdx(\"h2\", {\n    \"id\": \"some-rest-with-a-pinch-of-sql\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#some-rest-with-a-pinch-of-sql\"\n  })), \"Some REST with a pinch of SQL\"), mdx(\"p\", null, \"The method de\\xADscribed  above is part of our start se\\xADquence. But what about the method in\\xADvoked by our REST API. Let\\u2019s have a look to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAll\"), \" method. This method is called by the web front-\\u200Bend to re\\xADtrieve all stored prod\\xADucts:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getAll\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n    jdbc.getConnection(ar -> {\\n      SQLConnection connection = ar.result();\\n      connection.query(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM Whisky\\\"\"), \", result -> {\\n        List<Whisky> whiskies = result.result().getRows().stream().map(Whisky::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \").collect(Collectors.toList());\\n        routingContext.response()\\n            .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n            .end(Json.encodePrettily(whiskies));\\n        connection.close(); \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Close the connection     \"), \"\\n      });\\n    });\\n  }\\n\")), mdx(\"p\", null, \"This method gets a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \", and then issue a query. Once the re\\xADsult has been re\\xADtrieved it writes the HTTP re\\xADsponse as be\\xADfore. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getOne\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteOne\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateOne\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addOne\"), \" meth\\xADods fol\\xADlow the same pat\\xADtern. No\\xADtice that the con\\xADnec\\xADtion can be closed after the re\\xADsponse has been writ\\xADten.\"), mdx(\"p\", null, \"Let\\u2019s have a look to the re\\xADsult pro\\xADvided to the han\\xADdler passed to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" method. It gets a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ResultSet\"), \", which con\\xADtains the query re\\xADsult. Each row is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \", so if your data ob\\xADject has a con\\xADstruc\\xADtor tak\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \" as unique ar\\xADgu\\xADment, cre\\xADat\\xADing there ob\\xADjects is straight\\xADfor\\xADward.\"), mdx(\"h2\", {\n    \"id\": \"test-test-and-test-again\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#test-test-and-test-again\"\n  })), \"Test, test, and test again\"), mdx(\"p\", null, \"We need to slightly up\\xADdate our tests to con\\xADfig\\xADure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JDBCClient\"), \". In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFirstVertilceTest\"), \" class, change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DeploymentOption\"), \" ob\\xADject cre\\xADated in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUp\"), \" method to be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"DeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n    .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port)\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"url\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"jdbc:hsqldb:mem:test?shutdown=true\\\"\"), \")\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"driver_class\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"org.hsqldb.jdbcDriver\\\"\"), \")\\n    );\\n\")), mdx(\"p\", null, \"In ad\\xADdi\\xADtion to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.port\"), \", we also put the JDBC url and the class of the JDBC dri\\xADver. We use an in-\\u200Bmemory data\\xADbase for tests.\"), mdx(\"p\", null, \"The same mod\\xADi\\xADfi\\xADca\\xADtion needs to be done in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/resources/my-it-config.json\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"http.port\\\"\"), \": ${http.port},\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"url\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"jdbc:hsqldb:mem:it-test?shutdown=true\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"driver_class\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"org.hsqldb.jdbcDriver\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/conf/my-application-conf.json\"), \" file also needs to be up\\xADdated, not for the tests, but to run the ap\\xADpli\\xADca\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"http.port\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8082\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"url\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"jdbc:hsqldb:file:db/whiskies\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"driver_class\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"org.hsqldb.jdbcDriver\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"The JDBC url is a bit dif\\xADfer\\xADent in this last file, as we store the data\\xADbase on the file sys\\xADtem.\"), mdx(\"h2\", {\n    \"id\": \"show-time\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#show-time\"\n  })), \"Show time!\"), mdx(\"p\", null, \"Let\\u2019s now build our ap\\xADpli\\xADca\\xADtion:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mvn clean package\")), mdx(\"p\", null, \"As we didn\\u2019t change the API (nei\\xADther the pub\\xADlic java one nor the REST), test should run smoothly.\"), mdx(\"p\", null, \"Then launch the ap\\xADpli\\xADca\\xADtion with:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json \")), mdx(\"p\", null, \"Open your browser to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8082/assets/index.html\"), \", and you should see the ap\\xADpli\\xADca\\xADtion using the data\\xADbase. This time the prod\\xADucts are stored in a data\\xADbase per\\xADsisted on the file sys\\xADtem. So, if we stop and restart the ap\\xADpli\\xADca\\xADtion, the data is re\\xADstored.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"In this post, we saw how you can use JDBC data\\xADbase with vert.x, and thus with\\xADout too much bur\\xADden. You may have been sur\\xADprised by the asyn\\xADchro\\xADnous de\\xADvel\\xADop\\xADment model, but once you start using it, it\\u2019s hard to come back.\"), mdx(\"p\", null, \"In the \", mdx(Link, {\n    href: \"/blog/combine-vert-x-and-mongo-to-build-a-giant/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"next post\")), \", we see how the same ap\\xADpli\\xADca\\xADtion can use Mon\\xADgoDB in\\xADstead of HSQL.\"), mdx(\"p\", null, \"Stay tuned, and happy cod\\xADing!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Fi­nally, back… This post is the fifth post of the in­tro­duc­tion to vert.x blog se­ries, after a not-​that-small break. In this post we are going to see how we can use JDBC in a vert.x ap­pli­ca­tion, and this, using the asyn­chro­nous API pro­vided by the <a href=\"/docs/vertx-jdbc-client/java/\">vertx-​jdbc-client</a>.</p><h2 id=\"previously-in-the-introduction-to-vertx-series\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#previously-in-the-introduction-to-vertx-series\"></a>Previously in the introduction to vert.x series</h2><p>As it was quite some time since the last post, let’s start by re­fresh­ing our mind about the four pre­vi­ous posts:</p><ol><li>The <a href=\"/blog/my-first-vert-x-3-application/\">first post</a> has de­scribed how to build a vert.x ap­pli­ca­tion with Maven and ex­e­cute unit tests.</li><li>The <a href=\"/blog/vert-x-application-configuration/\">sec­ond post</a> has de­scribed how this ap­pli­ca­tion can be­come con­fig­urable.</li><li>The <a href=\"/blog/some-rest-with-vert-x/\">third post</a> has in­tro­duced <a href=\"/docs/vertx-web/java/\">vertx-​web</a>, and a small col­lec­tion man­age­ment ap­pli­ca­tion has been de­vel­oped. This ap­pli­ca­tion of­fers a REST API used by a HTML/JavaScript fron­tend.</li><li>The <a href=\"/blog/unit-and-integration-tests/\">pre­vi­ous post</a> has pre­sented how you can run in­te­gra­tion tests to en­sure the be­hav­ior of your ap­pli­ca­tion.</li></ol><p>In this post, back to code. The cur­rent ap­pli­ca­tion uses an in-​memory map to store the prod­ucts. It’s time to use a data­base. In this post we are going to use <a href=\"http://hsqldb.org/\">HSQL</a>, but you can use any data­base pro­vid­ing a JDBC dri­ver. In­ter­ac­tions with the data­base will be asyn­chro­nous and made using the <a href=\"/docs/vertx-jdbc-client/java/\">vertx-​jdbc-client</a>.</p><p>The code of this post are avail­able on this Github <a href=\"https://github.com/cescoffier/my-vertx-first-app\">project</a>, in the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\">post-5 branch</a> branch.</p><h2 id=\"asynchronous\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#asynchronous\"></a>Asynchronous?</h2><p>One of the vert.x char­ac­ter­is­tics is being asyn­chro­nous. With an asyn­chro­nous API, you don’t wait for a re­sult, but you are no­ti­fied when this re­sult is ready. Just to il­lus­trate this, let’s take a very sim­ple ex­am­ple.</p><p>Let’s imag­ine an <code>add</code> method. Tra­di­tion­ally, you would use it like this: <code>int r = add(1, 1)</code>. This is a syn­chro­nous API as you are wait­ing for the re­sult. An asyn­chro­nous ver­sion of this API would be: <code>add(1, 1, r -&gt; { /* do something with the result */ })</code>. In this ver­sion, you pass a <code>Handler</code> called when the re­sult has been com­puted. The method does not re­turn any­thing, and could be im­ple­mented as:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b, Handler&lt;Integer&gt; resultHandler)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> r = a + b;\n    resultHandler.handle(r);\n}\n</code></pre><p>Just to avoid mis­con­cep­tions, asyn­chro­nous API are not about threads. As we can see in the <code>add</code> ex­am­ple, there are no threads in­volved.</p><h2 id=\"jdbc-yes-but-asynchronous\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#jdbc-yes-but-asynchronous\"></a>JDBC yes, but asynchronous</h2><p>So, now that we have seen some ba­sics about asyn­chro­nous API, let’s have a look to the vertx-​jdbc-client. This com­po­nent lets us in­ter­act with a data­base through a JDBC dri­ver. These in­ter­ac­tions are asyn­chro­nous, so when you were doing:</p><pre><code class=\"hljs language-java\">String sql = <span class=\"hljs-string\">&quot;SELECT * FROM Products&quot;</span>;\nResultSet rs = stmt.executeQuery(sql);\n</code></pre><p>it will be:</p><pre><code class=\"hljs language-java\">connection.query(<span class=\"hljs-string\">&quot;SELECT * FROM Products&quot;</span>, result -&gt; {\n        <span class=\"hljs-comment\">// do something with the result</span>\n});\n</code></pre><p>This model is more ef­fi­cient as it avoids wait­ing for the re­sult. You are no­ti­fied when the re­sult is avail­able.</p><p>Let’s now mod­ify our ap­pli­ca­tion to use a data­base to store our prod­ucts.</p><h2 id=\"some-maven-dependencies\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#some-maven-dependencies\"></a>Some maven dependencies</h2><p>The first things we need to do it to de­clare two new Maven de­pen­den­cies in our <code>pom.xml</code> file:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-jdbc-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.hsqldb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hsqldb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>The first de­pen­dency pro­vides the vertx-​jdbc-client, while the sec­ond one pro­vide the HSQL JDBC dri­ver. If you want to use an­other data­base, change this de­pen­dency. You will also need to change the JDBC url and JDBC dri­ver class name later.</p><h2 id=\"initializing-the-jdbc-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#initializing-the-jdbc-client\"></a>Initializing the JDBC client</h2><p>Now that we have added these de­pen­den­cies, it’s time to cre­ate our JDBC client:</p><p>In the <code>MyFirstVerticle</code> class, de­clare a new field <code>JDBCClient jdbc;</code>, and add the fol­low­ing line at the be­gin­ning of the <code>start</code> method:</p><pre><code class=\"hljs language-java\">jdbc = JDBCClient.createShared(vertx, config(), <span class=\"hljs-string\">&quot;My-Whisky-Collection&quot;</span>);\n</code></pre><p>This cre­ates an in­stance of JDBC client, con­fig­ured with the con­fig­u­ra­tion pro­vided to the ver­ti­cle. To work cor­rectly this con­fig­u­ra­tion needs to pro­vide:</p><ul><li><em>url</em> - the JDBC url such as <code>jdbc:hsqldb:mem:db?shutdown=true</code></li><li><em>dri­ver_class</em> - the JDBC dri­ver class such as <code>org.hsqldb.jdbcDriver</code></li></ul><p>Ok, we have the client, we need a con­nec­tion to the data­base. This is achieved using the <code>jdbc.getConnection</code> that take a <code>Handler&lt;AsyncResult&lt;SQLConnection&gt;&gt;</code> as pa­ra­me­ter. Let’s have a deeper look to this type. It’s a <code>Handler</code>, so it is called when the re­sult is ready. This re­sult is an in­stance of <code>AsyncResult&lt;SQLConnection&gt;</code>. <code>AsyncResult</code> is a struc­ture pro­vided by vert.x that lets us know if the op­er­a­tion was com­pleted suc­cess­fully or failed. In case of suc­cess, it pro­vides the re­sult, here an in­stance of <code>SQLConnection</code>.</p><p>When you re­ceive an in­stance of <code>AsyncResult</code>, your code gen­er­ally looks like:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">if</span> (ar.failed()) {\n  System.err.println(<span class=\"hljs-string\">&quot;The operation has failed...: &quot;</span>\n      + ar.cause().getMessage());\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// Use the result:</span>\n  result = ar.result();\n }\n</code></pre><p>So, let’s go back to our <code>SQLConnection</code>. We need to re­trieve it, and then start the rest of the ap­pli­ca­tion. This changes how we start the ap­pli­ca­tion, as it will be­come asyn­chro­nous. So, if we di­vide our startup se­quence into small chunks it would be some­thing like:</p><pre><code class=\"hljs language-java\">startBackend(\n (connection) -&gt; createSomeData(connection,\n     (nothing) -&gt; startWebApp(\n         (http) -&gt; completeStartup(http, fut)\n     ), fut\n ), fut);\n</code></pre><p>with:</p><ol><li><code>startBackend</code> - re­trieves a <code>SQLConnection</code> and then calls the next step</li><li><code>createSomeData</code> - ini­tial­izes the data­base and in­serts some data. When done, it calls the next step</li><li><code>startWebApp</code> - starts our web ap­pli­ca­tion</li><li><code>completeStartup</code> - fi­nal­izes our start se­quence</li></ol><p><code>fut</code> is the com­ple­tion fu­ture passed by vert.x that let us re­port when we are started, or if an issue has been en­coun­tered while start­ing.</p><p>Let’s have a look to <code>startBackend</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startBackend</span><span class=\"hljs-params\">(Handler&lt;AsyncResult&lt;SQLConnection&gt;&gt; next, Future&lt;Void&gt; fut)</span> </span>{\n  jdbc.getConnection(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n      fut.fail(ar.cause());\n    } <span class=\"hljs-keyword\">else</span> {\n      next.handle(Future.succeededFuture(ar.result()));\n    }\n  });\n}\n</code></pre><p>This method re­trieves a <code>SQLConnection</code>, check whether this op­er­a­tion suc­ceeded. If so, it calls the next step. In case of fail­ure, it re­ports it.</p><p>The other meth­ods fol­low the same pat­tern: 1) check if the last op­er­a­tion has suc­ceeded, 2) do the task, 3) call the next step.</p><h3 id=\"a-bit-of-sql\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#a-bit-of-sql\"></a>A bit of SQL…</h3><p>Our client is ready, let’s now write some SQL state­ments. Let’s start by the <code>createSomeData</code> method that is part of the startup se­quence:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createSomeData</span><span class=\"hljs-params\">(AsyncResult&lt;SQLConnection&gt; result,\n    Handler&lt;AsyncResult&lt;Void&gt;&gt; next, Future&lt;Void&gt; fut)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (result.failed()) {\n      fut.fail(result.cause());\n    } <span class=\"hljs-keyword\">else</span> {\n      SQLConnection connection = result.result();\n      connection.execute(\n          <span class=\"hljs-string\">&quot;CREATE TABLE IF NOT EXISTS Whisky (id INTEGER IDENTITY, name varchar(100), &quot;</span> +\n          <span class=\"hljs-string\">&quot;origin varchar(100))&quot;</span>,\n          ar -&gt; {\n            <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n              fut.fail(ar.cause());\n              connection.close();\n              <span class=\"hljs-keyword\">return</span>;\n            }\n            connection.query(<span class=\"hljs-string\">&quot;SELECT * FROM Whisky&quot;</span>, select -&gt; {\n              <span class=\"hljs-keyword\">if</span> (select.failed()) {\n                fut.fail(ar.cause());\n                connection.close();\n                <span class=\"hljs-keyword\">return</span>;\n              }\n              <span class=\"hljs-keyword\">if</span> (select.result().getNumRows() == <span class=\"hljs-number\">0</span>) {\n                insert(\n                    <span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Bowmore 15 Years Laimrig&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Islay&quot;</span>),\n                    connection,\n                    (v) -&gt; insert(<span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Talisker 57° North&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Island&quot;</span>),\n                        connection,\n                        (r) -&gt; {\n                          next.handle(Future.&lt;Void&gt;succeededFuture());\n                          connection.close();\n                        }));                                                    \n              } <span class=\"hljs-keyword\">else</span> {\n                next.handle(Future.&lt;Void&gt;succeededFuture());\n                connection.close();\n              }\n            });\n          });\n    }\n  }\n</code></pre><p>This method checks that the <code>SQLConnection</code> is avail­able and then start ex­e­cut­ing some SQL state­ments. First, it cre­ates the ta­bles if there are not there yet. As you can see, the method called is struc­tured as fol­lows:</p><pre><code class=\"hljs language-java\">connection.execute(\n    SQL statement,\n    handler called when the statement has been executed\n)\n</code></pre><p>The han­dler re­ceives an <code>AsyncResult&lt;Void&gt;</code>, <em>i.e.</em> a no­ti­fi­ca­tion of the com­ple­tion with­out an ac­tual re­sult.</p><div class=\"alert info\"><div class=\"alert-title\">Closing connection</div><p>Don’t for­get to close the SQL con­nec­tion when you are done. The con­nec­tion will be given back to the con­nec­tion pool and be reused.</p></div><p>In the code of this han­dler, we check whether or not the state­ment has been ex­e­cuted cor­rectly, and if so we check to see if the table al­ready con­tains some data, if not, it in­serts data using the <code>insert</code> method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Whisky whisky, SQLConnection connection, Handler&lt;AsyncResult&lt;Whisky&gt;&gt; next)</span> </span>{\n  String sql = <span class=\"hljs-string\">&quot;INSERT INTO Whisky (name, origin) VALUES ?, ?&quot;</span>;\n  connection.updateWithParams(sql,\n      <span class=\"hljs-keyword\">new</span> JsonArray().add(whisky.getName()).add(whisky.getOrigin()),\n      (ar) -&gt; {\n        <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n          next.handle(Future.failedFuture(ar.cause()));\n          <span class=\"hljs-keyword\">return</span>;\n        }\n        UpdateResult result = ar.result();\n        <span class=\"hljs-comment\">// Build a new whisky instance with the generated id.</span>\n        Whisky w = <span class=\"hljs-keyword\">new</span> Whisky(result.getKeys().getInteger(<span class=\"hljs-number\">0</span>), whisky.getName(), whisky.getOrigin());\n        next.handle(Future.succeededFuture(w));\n      });\n}\n</code></pre><p>This method uses the <code>updateWithParams</code> method with an <em>IN­SERT</em> state­ment, and pass val­ues. This ap­proach avoids SQL in­jec­tion. Once the the state­ment has been ex­e­cuted, we cre­ates a new <code>Whisky</code> ob­ject with the cre­ated (auto-​generated) id.</p><h2 id=\"some-rest-with-a-pinch-of-sql\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#some-rest-with-a-pinch-of-sql\"></a>Some REST with a pinch of SQL</h2><p>The method de­scribed  above is part of our start se­quence. But what about the method in­voked by our REST API. Let’s have a look to the <code>getAll</code> method. This method is called by the web front-​end to re­trieve all stored prod­ucts:</p><pre><code class=\"hljs language-java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n    jdbc.getConnection(ar -&gt; {\n      SQLConnection connection = ar.result();\n      connection.query(<span class=\"hljs-string\">&quot;SELECT * FROM Whisky&quot;</span>, result -&gt; {\n        List&lt;Whisky&gt; whiskies = result.result().getRows().stream().map(Whisky::<span class=\"hljs-keyword\">new</span>).collect(Collectors.toList());\n        routingContext.response()\n            .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n            .end(Json.encodePrettily(whiskies));\n        connection.close(); <span class=\"hljs-comment\">// Close the connection     </span>\n      });\n    });\n  }\n</code></pre><p>This method gets a <code>SQLConnection</code>, and then issue a query. Once the re­sult has been re­trieved it writes the HTTP re­sponse as be­fore. The <code>getOne</code>, <code>deleteOne</code>, <code>updateOne</code> and <code>addOne</code> meth­ods fol­low the same pat­tern. No­tice that the con­nec­tion can be closed after the re­sponse has been writ­ten.</p><p>Let’s have a look to the re­sult pro­vided to the han­dler passed to the <code>query</code> method. It gets a <code>ResultSet</code>, which con­tains the query re­sult. Each row is a <code>JsonObject</code>, so if your data ob­ject has a con­struc­tor tak­ing a <code>JsonObject</code> as unique ar­gu­ment, cre­at­ing there ob­jects is straight­for­ward.</p><h2 id=\"test-test-and-test-again\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#test-test-and-test-again\"></a>Test, test, and test again</h2><p>We need to slightly up­date our tests to con­fig­ure the <code>JDBCClient</code>. In the <code>MyFirstVertilceTest</code> class, change the <code>DeploymentOption</code> ob­ject cre­ated in the <code>setUp</code> method to be:</p><pre><code class=\"hljs language-java\">DeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port)\n        .put(<span class=\"hljs-string\">&quot;url&quot;</span>, <span class=\"hljs-string\">&quot;jdbc:hsqldb:mem:test?shutdown=true&quot;</span>)\n        .put(<span class=\"hljs-string\">&quot;driver_class&quot;</span>, <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>)\n    );\n</code></pre><p>In ad­di­tion to the <code>http.port</code>, we also put the JDBC url and the class of the JDBC dri­ver. We use an in-​memory data­base for tests.</p><p>The same mod­i­fi­ca­tion needs to be done in the <code>src/test/resources/my-it-config.json</code> file:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;http.port&quot;</span>: ${http.port},\n  <span class=\"hljs-attr\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;jdbc:hsqldb:mem:it-test?shutdown=true&quot;</span>,\n  <span class=\"hljs-attr\">&quot;driver_class&quot;</span>: <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>\n}\n</code></pre><p>The <code>src/main/conf/my-application-conf.json</code> file also needs to be up­dated, not for the tests, but to run the ap­pli­ca­tion:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;http.port&quot;</span> : <span class=\"hljs-number\">8082</span>,\n  <span class=\"hljs-attr\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;jdbc:hsqldb:file:db/whiskies&quot;</span>,\n  <span class=\"hljs-attr\">&quot;driver_class&quot;</span>: <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>\n}\n</code></pre><p>The JDBC url is a bit dif­fer­ent in this last file, as we store the data­base on the file sys­tem.</p><h2 id=\"show-time\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#show-time\"></a>Show time!</h2><p>Let’s now build our ap­pli­ca­tion:</p><p><code>mvn clean package</code></p><p>As we didn’t change the API (nei­ther the pub­lic java one nor the REST), test should run smoothly.</p><p>Then launch the ap­pli­ca­tion with:</p><p><code>java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json </code></p><p>Open your browser to <code>http://localhost:8082/assets/index.html</code>, and you should see the ap­pli­ca­tion using the data­base. This time the prod­ucts are stored in a data­base per­sisted on the file sys­tem. So, if we stop and restart the ap­pli­ca­tion, the data is re­stored.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>In this post, we saw how you can use JDBC data­base with vert.x, and thus with­out too much bur­den. You may have been sur­prised by the asyn­chro­nous de­vel­op­ment model, but once you start using it, it’s hard to come back.</p><p>In the <a href=\"/blog/combine-vert-x-and-mongo-to-build-a-giant/\">next post</a>, we see how the same ap­pli­ca­tion can use Mon­goDB in­stead of HSQL.</p><p>Stay tuned, and happy cod­ing!</p>","scope":{}}},"prevPost":{"meta":{"title":"Vert.x ES6 back to the future","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"On October 21th, 2015 we all rejoiced with the return from the past of Marty McFly with his flying car and so on, however in the Vert.x world we were quite sad about our rather old JavaScript support."},"date":"2015-11-25","slug":"vert-x-es6-back-to-the-future"},"nextPost":{"meta":{"title":"Vert.x 3.1.0 is released!","category":"releases","authors":[{"name":"Tim Fox","github_id":"purplefox"}],"summary":"I'm pleased to announce the release of Vert.x 3.1!"},"date":"2015-10-08","slug":"vert-x-3-1-0-is-released"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"}]},"__N_SSG":true}