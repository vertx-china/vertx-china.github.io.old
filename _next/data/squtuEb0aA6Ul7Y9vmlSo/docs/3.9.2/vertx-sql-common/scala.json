{"pageProps":{"slug":"3.9.2/vertx-sql-common/scala","title":"Vert.x Common SQL interface","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_vert_x_common_sql_interface\">Vert.x Common SQL interface</a></li>\n<li><a href=\"#_simple_sql_operations\">Simple SQL Operations</a></li>\n<li><a href=\"#_the_sql_connection\">The SQL Connection</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_auto_commit\">Auto-commit</a></li>\n<li><a href=\"#_executing_queries\">Executing queries</a></li>\n<li><a href=\"#_prepared_statement_queries\">Prepared statement queries</a></li>\n<li><a href=\"#_executing_insert_update_or_delete\">Executing INSERT, UPDATE or DELETE</a></li>\n<li><a href=\"#_prepared_statement_updates\">Prepared statement updates</a></li>\n<li><a href=\"#_callable_statements\">Callable statements</a></li>\n<li><a href=\"#_batch_operations\">Batch operations</a></li>\n<li><a href=\"#_executing_other_operations\">Executing other operations</a></li>\n<li><a href=\"#_multiple_resultset_responses\">Multiple ResultSet responses</a></li>\n<li><a href=\"#_streaming\">Streaming</a></li>\n<li><a href=\"#_using_transactions\">Using transactions</a></li>\n<li><a href=\"#_closing_connections\">Closing connections</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"\n<div class=\"sect1\">\n<h2 id=\"_vert_x_common_sql_interface\"><a class=\"anchor\" href=\"#_vert_x_common_sql_interface\"></a>Vert.x Common SQL interface</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The common SQL interface is used to interact with Vert.x SQL services.</p>\n</div>\n<div class=\"paragraph\">\n<p>You obtain a connection to the database via the service interface for the specific SQL service that\nyou are using (e.g. JDBC/MySQL/PostgreSQL).</p>\n</div>\n<div class=\"paragraph\">\n<p>To use this project, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-sql-common<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${maven.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-sql-common:${maven.version}'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_simple_sql_operations\"><a class=\"anchor\" href=\"#_simple_sql_operations\"></a>Simple SQL Operations</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are times when you will want to run a single SQL operation, e.g.: a single select of a row, or a update to a\nset of rows which do not require to be part of a transaction or have dependencies on the previous or next operation.</p>\n</div>\n<div class=\"paragraph\">\n<p>For these cases, clients provide a boilerplate-less API <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLOperations.html\">SQLOperations</a></code>. This interface will\nperform the following steps for you:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>acquire a connection from the connection pool</p>\n</li>\n<li>\n<p>perform your action</p>\n</li>\n<li>\n<p>close and return the connection to the connection pool</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>An example where users get loaded from the <code>USERS</code> table could be:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">client.queryFuture(<span class=\"hljs-string\">\"SELECT * FROM USERS\"</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n      <span class=\"hljs-keyword\">var</span> result = result\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// Failed!</span>\n    }\n    <span class=\"hljs-comment\">// NOTE that you don't need to worry about</span>\n    <span class=\"hljs-comment\">// the connection management (e.g.: close)</span>\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; println(<span class=\"hljs-string\">\"Failure\"</span>)\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can perform the following operations as a simple one \"shot\" method call:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLClient.html#query(java.lang.String)\">query</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLClient.html#queryWithParams(java.lang.String,%20io.vertx.core.json.JsonArray)\">queryWithParams</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLOperations.html#querySingle(java.lang.String)\">querySingle</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLOperations.html#querySingleWithParams(java.lang.String,%20io.vertx.core.json.JsonArray)\">querySingleWithParams</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLClient.html#update(java.lang.String)\">update</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLClient.html#updateWithParams(java.lang.String,%20io.vertx.core.json.JsonArray)\">updateWithParams</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLClient.html#call(java.lang.String)\">call</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLClient.html#callWithParams(java.lang.String,%20io.vertx.core.json.JsonArray,%20io.vertx.core.json.JsonArray)\">callWithParams</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>For further details on these API please refer to the <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLOperations.html\">SQLOperations</a></code> interface.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_the_sql_connection\"><a class=\"anchor\" href=\"#_the_sql_connection\"></a>The SQL Connection</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A connection to the database is represented by <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html\">SQLConnection</a></code>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_auto_commit\"><a class=\"anchor\" href=\"#_auto_commit\"></a>Auto-commit</h3>\n<div class=\"paragraph\">\n<p>When you obtain a connection auto commit is set to <code>true</code>. This means that each operation you perform will effectively\nexecute in its own transaction.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you wish to perform multiple operations in a single transaction you should set auto commit to false with\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#setAutoCommit(boolean)\">setAutoCommit</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>When the operation is complete, the handler will be called:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">connection.setAutoCommitFuture(<span class=\"hljs-literal\">false</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-comment\">// OK!</span>\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_executing_queries\"><a class=\"anchor\" href=\"#_executing_queries\"></a>Executing queries</h3>\n<div class=\"paragraph\">\n<p>To execute a query use <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#query(java.lang.String)\">query</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>The query string is raw SQL that is passed through without changes to the actual database.</p>\n</div>\n<div class=\"paragraph\">\n<p>The handler will be called with the results, represented by <code><a href=\"../dataobjects.html#ResultSet\">ResultSet</a></code> when the query has\nbeen run.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">connection.queryFuture(<span class=\"hljs-string\">\"SELECT ID, FNAME, LNAME, SHOE_SIZE from PEOPLE\"</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-comment\">// Get the result set</span>\n    <span class=\"hljs-keyword\">var</span> resultSet = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../dataobjects.html#ResultSet\">ResultSet</a></code> instance represents the results of a query.</p>\n</div>\n<div class=\"paragraph\">\n<p>The list of column names are available with <code><a href=\"../dataobjects.html#ResultSet#getColumnNames()\">getColumnNames</a></code>, and the actual results\navailable with <code><a href=\"../dataobjects.html#ResultSet#getResults()\">getResults</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>The results are a list of <code>JsonArray</code> instances, one for each row of the results.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> columnNames = todo-renderDataObjectMemberSelect\n\n<span class=\"hljs-keyword\">var</span> results = todo-renderDataObjectMemberSelect\n\nresults.foreach(row =&gt; {\n\n  <span class=\"hljs-keyword\">var</span> id = row.getValue(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">var</span> fName = row.getValue(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">var</span> lName = row.getValue(<span class=\"hljs-number\">2</span>)\n  <span class=\"hljs-keyword\">var</span> shoeSize = row.getValue(<span class=\"hljs-number\">3</span>)\n\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also retrieve the rows as a list of Json object instances with <code><a href=\"../dataobjects.html#ResultSet#getRows()\">getRows</a></code> -\nthis can give you a somewhat simpler API to work with, but please be aware that SQL results can contain duplicate\ncolumn names - if that&#8217;s the case you should use <code><a href=\"../dataobjects.html#ResultSet#getResults()\">getResults</a></code> instead.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of iterating through the results as Json object instances:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> rows = todo-renderDataObjectMemberSelect\n\nrows.foreach(row =&gt; {\n\n  <span class=\"hljs-keyword\">var</span> id = row.getValue(<span class=\"hljs-string\">\"ID\"</span>)\n  <span class=\"hljs-keyword\">var</span> fName = row.getValue(<span class=\"hljs-string\">\"FNAME\"</span>)\n  <span class=\"hljs-keyword\">var</span> lName = row.getValue(<span class=\"hljs-string\">\"LNAME\"</span>)\n  <span class=\"hljs-keyword\">var</span> shoeSize = row.getValue(<span class=\"hljs-string\">\"SHOE_SIZE\"</span>)\n\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_prepared_statement_queries\"><a class=\"anchor\" href=\"#_prepared_statement_queries\"></a>Prepared statement queries</h3>\n<div class=\"paragraph\">\n<p>To execute a prepared statement query you can use\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#queryWithParams(java.lang.String,%20io.vertx.core.json.JsonArray)\">queryWithParams</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This takes the query, containing the parameter place holders, and a <code>JsonArray</code> or parameter\nvalues.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-string\">\"SELECT ID, FNAME, LNAME, SHOE_SIZE from PEOPLE WHERE LNAME=? AND SHOE_SIZE &gt; ?\"</span>\n<span class=\"hljs-keyword\">var</span> params = <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonArray</span>().add(<span class=\"hljs-string\">\"Fox\"</span>).add(<span class=\"hljs-number\">9</span>)\n\nconnection.queryWithParamsFuture(query, params).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-comment\">// Get the result set</span>\n    <span class=\"hljs-keyword\">var</span> resultSet = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_executing_insert_update_or_delete\"><a class=\"anchor\" href=\"#_executing_insert_update_or_delete\"></a>Executing INSERT, UPDATE or DELETE</h3>\n<div class=\"paragraph\">\n<p>To execute an operation which updates the database use <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#update(java.lang.String)\">update</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The update string is raw SQL that is passed through without changes to the actual database.</p>\n</div>\n<div class=\"paragraph\">\n<p>The handler will be called with the results, represented by <code><a href=\"../dataobjects.html#UpdateResult\">UpdateResult</a></code> when the update has\nbeen run.</p>\n</div>\n<div class=\"paragraph\">\n<p>The update result holds the number of rows updated with <code><a href=\"../dataobjects.html#UpdateResult#getUpdated()\">getUpdated</a></code>, and\nif the update generated keys, they are available with <code><a href=\"../dataobjects.html#UpdateResult#getKeys()\">getKeys</a></code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">connection.updateFuture(<span class=\"hljs-string\">\"INSERT INTO PEOPLE VALUES (null, 'john', 'smith', 9)\"</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n\n    <span class=\"hljs-keyword\">var</span> result = result\n    println(<span class=\"hljs-string\">s\"Updated no. of rows: <span class=\"hljs-subst\">${todo-renderDataObjectMemberSelect}</span>\"</span>)\n    println(<span class=\"hljs-string\">s\"Generated keys: <span class=\"hljs-subst\">${todo-renderDataObjectMemberSelect}</span>\"</span>)\n\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_prepared_statement_updates\"><a class=\"anchor\" href=\"#_prepared_statement_updates\"></a>Prepared statement updates</h3>\n<div class=\"paragraph\">\n<p>To execute a prepared statement update you can use\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#updateWithParams(java.lang.String,%20io.vertx.core.json.JsonArray)\">updateWithParams</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This takes the update, containing the parameter place holders, and a <code>JsonArray</code> or parameter\nvalues.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> update = <span class=\"hljs-string\">\"UPDATE PEOPLE SET SHOE_SIZE = 10 WHERE LNAME=?\"</span>\n<span class=\"hljs-keyword\">var</span> params = <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonArray</span>().add(<span class=\"hljs-string\">\"Fox\"</span>)\n\nconnection.updateWithParamsFuture(update, params).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n\n    <span class=\"hljs-keyword\">var</span> updateResult = result\n\n    println(<span class=\"hljs-string\">s\"No. of rows updated: <span class=\"hljs-subst\">${todo-renderDataObjectMemberSelect}</span>\"</span>)\n\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_callable_statements\"><a class=\"anchor\" href=\"#_callable_statements\"></a>Callable statements</h3>\n<div class=\"paragraph\">\n<p>To execute a callable statement (either SQL functions or SQL procedures) you can use\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#callWithParams(java.lang.String,%20io.vertx.core.json.JsonArray,%20io.vertx.core.json.JsonArray)\">callWithParams</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This takes the callable statement using the standard JDBC format <code>{ call func_proc_name() }</code>, optionally including\nparameter place holders e.g.: <code>{ call func_proc_name(?, ?) }</code>, a <code>JsonArray</code> containing the\nparameter values and finally a <code>JsonArray</code> containing the\noutput types e.g.: <code>[null, 'VARCHAR']</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Note that the index of the output type is as important as the params array. If the return value is the second\nargument then the output array must contain a null value as the first element.</p>\n</div>\n<div class=\"paragraph\">\n<p>A SQL function returns some output using the <code>return</code> keyword, and in this case one can call it like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// Assume that there is a SQL function like this:</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// create function one_hour_ago() returns timestamp</span>\n<span class=\"hljs-comment\">//    now() - 1 hour;</span>\n\n<span class=\"hljs-comment\">// note that you do not need to declare the output for functions</span>\n<span class=\"hljs-keyword\">var</span> func = <span class=\"hljs-string\">\"{ call one_hour_ago() }\"</span>\n\nconnection.callFuture(func).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">var</span> result = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When working with Procedures you and still return values from your procedures via its arguments, in the case you do\nnot return anything the usage is as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// Assume that there is a SQL procedure like this:</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// create procedure new_customer(firstname varchar(50), lastname varchar(50))</span>\n<span class=\"hljs-comment\">//   modifies sql data</span>\n<span class=\"hljs-comment\">//   insert into customers values (default, firstname, lastname, current_timestamp);</span>\n\n<span class=\"hljs-keyword\">var</span> func = <span class=\"hljs-string\">\"{ call new_customer(?, ?) }\"</span>\n\nconnection.callWithParamsFuture(func, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonArray</span>().add(<span class=\"hljs-string\">\"John\"</span>).add(<span class=\"hljs-string\">\"Doe\"</span>), <span class=\"hljs-literal\">null</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-comment\">// Success!</span>\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>However you can also return values like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// Assume that there is a SQL procedure like this:</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// create procedure customer_lastname(IN firstname varchar(50), OUT lastname varchar(50))</span>\n<span class=\"hljs-comment\">//   modifies sql data</span>\n<span class=\"hljs-comment\">//   select lastname into lastname from customers where firstname = firstname;</span>\n\n<span class=\"hljs-keyword\">var</span> func = <span class=\"hljs-string\">\"{ call customer_lastname(?, ?) }\"</span>\n\nconnection.callWithParamsFuture(func, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonArray</span>().add(<span class=\"hljs-string\">\"John\"</span>), <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonArray</span>().add(<span class=\"hljs-literal\">null</span>).add(<span class=\"hljs-string\">\"VARCHAR\"</span>)).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">var</span> result = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note that the index of the arguments matches the index of the <code>?</code> and that the output parameters expect to be a\nString describing the type you want to receive.</p>\n</div>\n<div class=\"paragraph\">\n<p>To avoid ambiguation the implementations are expected to follow the following rules:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>When a place holder in the <code>IN</code> array is <code>NOT NULL</code> it will be taken</p>\n</li>\n<li>\n<p>When the <code>IN</code> value is NULL a check is performed on the OUT\nWhen the <code>OUT</code> value is not null it will be registered as a output parameter\nWhen the <code>OUT</code> is also null it is expected that the IN value is the <code>NULL</code> value.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The registered <code>OUT</code> parameters will be available as an array in the result set under the output property.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_batch_operations\"><a class=\"anchor\" href=\"#_batch_operations\"></a>Batch operations</h3>\n<div class=\"paragraph\">\n<p>The SQL common interface also defines how to execute batch operations. There are 3 types of batch operations:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Batched statements <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#batch(java.util.List)\">batch</a></code></p>\n</li>\n<li>\n<p>Batched prepared statements <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#batchWithParams(java.lang.String,%20java.util.List)\">batchWithParams</a></code></p>\n</li>\n<li>\n<p>Batched callable statements <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#batchCallableWithParams(java.lang.String,%20java.util.List,%20java.util.List)\">batchCallableWithParams</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>A batches statement will exeucte a list of sql statements as for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// Batch values</span>\n<span class=\"hljs-keyword\">var</span> batch = <span class=\"hljs-type\">List</span>()\nbatch :::= <span class=\"hljs-type\">List</span>(<span class=\"hljs-string\">\"INSERT INTO emp (NAME) VALUES ('JOE')\"</span>)\nbatch :::= <span class=\"hljs-type\">List</span>(<span class=\"hljs-string\">\"INSERT INTO emp (NAME) VALUES ('JANE')\"</span>)\n\nconnection.batchFuture(batch).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">var</span> result = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>While a prepared or callable statement batch will reuse the sql statement and take an list of arguments as for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// Batch values</span>\n<span class=\"hljs-keyword\">var</span> batch = <span class=\"hljs-type\">List</span>()\nbatch :::= <span class=\"hljs-type\">List</span>(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonArray</span>().add(<span class=\"hljs-string\">\"joe\"</span>))\nbatch :::= <span class=\"hljs-type\">List</span>(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonArray</span>().add(<span class=\"hljs-string\">\"jane\"</span>))\n\nconnection.batchWithParamsFuture(<span class=\"hljs-string\">\"INSERT INTO emp (name) VALUES (?)\"</span>, batch).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">var</span> result = result\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_executing_other_operations\"><a class=\"anchor\" href=\"#_executing_other_operations\"></a>Executing other operations</h3>\n<div class=\"paragraph\">\n<p>To execute any other database operation, e.g. a <code>CREATE TABLE</code> you can use\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#execute(java.lang.String)\">execute</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The string is passed through without changes to the actual database. The handler is called when the operation\nis complete</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> sql = <span class=\"hljs-string\">\"CREATE TABLE PEOPLE (ID int generated by default as identity (start with 1 increment by 1) not null,FNAME varchar(255), LNAME varchar(255), SHOE_SIZE int);\"</span>\n\nconnection.executeFuture(sql).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    println(<span class=\"hljs-string\">\"Table created !\"</span>)\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_multiple_resultset_responses\"><a class=\"anchor\" href=\"#_multiple_resultset_responses\"></a>Multiple ResultSet responses</h3>\n<div class=\"paragraph\">\n<p>In some cases your query might return more than one result set, in this case and to preserve the compatibility when\nthe returned result set object is converted to pure json, the next result sets are chained to the current result set\nunder the property <code>next</code>. A simple walk of all result sets can be achieved like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// do something with the result set...</span>\n\n<span class=\"hljs-comment\">// next step</span>\nrs = todo-renderDataObjectMemberSelect</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_streaming\"><a class=\"anchor\" href=\"#_streaming\"></a>Streaming</h3>\n<div class=\"paragraph\">\n<p>When dealing with large data sets, it is not advised to use API just described but to stream data since it avoids\ninflating the whole response into memory and JSON and data is just processed on a row by row basis, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">connection.queryStreamFuture(<span class=\"hljs-string\">\"SELECT * FROM large_table\"</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    result.handler((row: io.vertx.scala.core.json.<span class=\"hljs-type\">JsonArray</span>) =&gt; {\n      <span class=\"hljs-comment\">// do something with the row...</span>\n    })\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; println(<span class=\"hljs-string\">\"Failure\"</span>)\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You still have full control on when the stream is pauses, resumed and ended. For cases where your query returns\nmultiple result sets you should use the result set ended event to fetch the next one if available. If there is more\ndata the stream handler will receive the new data, otherwise the end handler is invoked.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">connection.queryStreamFuture(<span class=\"hljs-string\">\"SELECT * FROM large_table; SELECT * FROM other_table\"</span>).onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-keyword\">var</span> sqlRowStream = result\n\n    sqlRowStream.resultSetClosedHandler((v: java.lang.<span class=\"hljs-type\">Void</span>) =&gt; {\n      <span class=\"hljs-comment\">// will ask to restart the stream with the new result set if any</span>\n      sqlRowStream.moreResults()\n    }).handler((row: io.vertx.scala.core.json.<span class=\"hljs-type\">JsonArray</span>) =&gt; {\n      <span class=\"hljs-comment\">// do something with the row...</span>\n    }).endHandler((v: java.lang.<span class=\"hljs-type\">Void</span>) =&gt; {\n      <span class=\"hljs-comment\">// no more data available...</span>\n    })\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; println(<span class=\"hljs-string\">\"Failure\"</span>)\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_transactions\"><a class=\"anchor\" href=\"#_using_transactions\"></a>Using transactions</h3>\n<div class=\"paragraph\">\n<p>To use transactions first set auto-commit to false with <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#setAutoCommit(boolean)\">setAutoCommit</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You then do your transactional operations and when you want to commit or rollback use\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#commit()\">commit</a></code> or\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#rollback()\">rollback</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once the commit/rollback is complete the handler will be called and the next transaction will be automatically started.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// Do stuff with connection - updates etc</span>\n\n<span class=\"hljs-comment\">// Now commit</span>\n\nconnection.commitFuture().onComplete{\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(result) =&gt; {\n    <span class=\"hljs-comment\">// Committed OK!</span>\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(cause) =&gt; {\n    println(<span class=\"hljs-string\">s\"<span class=\"hljs-subst\">$cause</span>\"</span>)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_closing_connections\"><a class=\"anchor\" href=\"#_closing_connections\"></a>Closing connections</h3>\n<div class=\"paragraph\">\n<p>When you&#8217;ve done with the connection you should return it to the pool with <code><a href=\"../../scaladocs/io/vertx/scala/ext/sql/SQLConnection.html#close()\">close</a></code>.</p>\n</div>\n</div>\n</div>\n</div>","version":"3.9.2"},"__N_SSG":true}