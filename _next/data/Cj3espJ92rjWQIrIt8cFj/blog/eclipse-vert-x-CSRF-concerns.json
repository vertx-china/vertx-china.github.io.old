{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns","readingTime":{"text":"22 min read","minutes":21.545,"time":1292700,"words":4309},"content":{"compiledSource":"var d=Object.defineProperty,p=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;var h=(t,a,i)=>a in t?d(t,a,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[a]=i,e=(t,a)=>{for(var i in a||(a={}))r.call(a,i)&&h(t,i,a[i]);if(s)for(var i of s(a))n.call(a,i)&&h(t,i,a[i]);return t},c=(t,a)=>p(t,m(a));var l=(t,a)=>{var i={};for(var o in t)r.call(t,o)&&a.indexOf(o)<0&&(i[o]=t[o]);if(t!=null&&s)for(var o of s(t))a.indexOf(o)<0&&n.call(t,o)&&(i[o]=t[o]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var o=i,{components:t}=o,a=l(o,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The first mile\\xADstone re\\xADleases of Vert.x 4.0.0 suf\\xADfered from \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://nvd.nist.gov/vuln/detail/CVE-2020-35217\"}),\"CVE-2020-35217\"),`. Thanks to Xhe\\xADlal, we were able to ad\\xADdress the\nse\\xADcu\\xADrity bugs and fix it on the first beta. This blog post is a ex\\xADpla\\xADna\\xADtion why CSRF should be used in your web\nap\\xADpli\\xADca\\xADtions.`),mdx(\"h3\",e({},{id:\"be-aware-of-the-danger-cross-site-request-forgery-csrf\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#be-aware-of-the-danger-cross-site-request-forgery-csrf\"})),\"Be aware of the danger: Cross-Site Request Forgery (CSRF)\"),mdx(\"p\",null,`A pop\\xADu\\xADlar web vul\\xADner\\xADa\\xADbil\\xADity that has at\\xADtracted a lot of at\\xADten\\xADtion in the re\\xADsearch com\\xADmu\\xADnity is Cross-\\u200BSite Script\\xADing\n(XSS). This vul\\xADner\\xADa\\xADbil\\xADity al\\xADlows the at\\xADtacker to in\\xADject ar\\xADbi\\xADtrary JavaScript (JS) code on a web\\xADsite that will run in the\nsame ori\\xADgin as the web\\xADsite. Ac\\xADcord\\xADing to the Open Web Ap\\xADpli\\xADca\\xADtion Se\\xADcu\\xADrity Project (OWASP), XSS is the sec\\xADond most\npreva\\xADlent issue in the 2017\\u2019s OWASP Top `,\"[1]\",`, and it is found in around two-\\u200Bthirds of all web ap\\xADpli\\xADca\\xADtions. How\\xADever,\nwhile XSS gets all the at\\xADten\\xADtion, few de\\xADvel\\xADop\\xADers pay at\\xADten\\xADtion to an\\xADother at\\xADtack that can be equally de\\xADstruc\\xADtive and far\neas\\xADier to ex\\xADploit. This at\\xADtack is called Cross-\\u200BSite Re\\xADquest Forgery (CSRF). It was ranked by OWASP as the fifth most\ndan\\xADger\\xADous web vul\\xADner\\xADa\\xADbil\\xADity twice (2007, 2010) and eighth in 2013. For\\xADtu\\xADnately, the de\\xADvel\\xADop\\xADers\\u2019 aware\\xADness has in\\xADcreased\nin re\\xADcent years and most web frame\\xADworks pro\\xADvide at least one de\\xADfen\\xADsive mech\\xADa\\xADnism against CSRF. As a re\\xADsult, CSRF was not\nlisted in the 2017\\u2019s OWASP Top 10 list. Un\\xADfor\\xADtu\\xADnately, this at\\xADtack is far from ex\\xADtinct.`),mdx(\"h3\",e({},{id:\"csrf-origins\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#csrf-origins\"})),\"CSRF Origins\"),mdx(\"p\",null,`In 1988 Norm Hardy pub\\xADlished a paper where he ex\\xADplained a the\\xADo\\xADret\\xADi\\xADcal se\\xADcu\\xADrity issue that he called \\u201Ccon\\xADfused\ndeputy\\u201D `,\"[2]\",\". This se\\xADcu\\xADrity issue was first re\\xADported in 2000 in Bug\\xADTraq (nowa\\xADdays Se\\xADcu\\xADri\\xADty\\xADFo\\xADcus \",\"[3]\",\"). The post\",\"[4]\",` in\nBug\\xADTraq showed how ZOPE, a Python web frame\\xADwork, was vul\\xADner\\xADa\\xADble to this web \\u201Ccon\\xADfused deputy\\u201D that we today know as\nCSRF. This term (\\u201CCSRF\\u201D) was first used in June 2001 by Peter Watkins, fol\\xADlowed by a de\\xADtailed de\\xADscrip\\xADtion in 2004 by\nThomas Schreiber `,\"[5]\",`. The au\\xADthor de\\xADscribed a va\\xADri\\xADety of at\\xADtack sce\\xADnar\\xADios where CSRF could be ex\\xADploited, pro\\xADvid\\xADing the\nmost de\\xADtailed de\\xADscrip\\xADtion of the prob\\xADlem at the time. Since then CSRF has had many names such as XSRF, one-\\u200Bclick at\\xADtack,\nCross-\\u200BSite Ref\\xADer\\xADence Forgery, ses\\xADsion rid\\xADing, sea surf, hos\\xADtile link\\xADing, \\u201Csleep\\xADing giant\\u201D etc. For the rest of this\nblog, we will refer to this vul\\xADner\\xADa\\xADbil\\xADity as CSRF.`),mdx(\"h3\",e({},{id:\"how-does-csrf-exactly-work\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#how-does-csrf-exactly-work\"})),\"How does CSRF exactly work?\"),mdx(\"p\",null,`There are many de\\xADf\\xADi\\xADn\\xADi\\xADtions for it in the lit\\xADer\\xADa\\xADture, but the core idea re\\xADmains the same; in a CSRF at\\xADtack the vic\\xADtim\\u2019s\nbrowser is tricked by an at\\xADtacker into send\\xADing a state-\\u200Bchanging HTTP re\\xADquest with au\\xADthen\\xADti\\xADca\\xADtion cook\\xADies, which the\nvic\\xADtim did not in\\xADtend. This ex\\xADploits the fact that cook\\xADies are widely used on the in\\xADter\\xADnet and browsers au\\xADto\\xADmat\\xADi\\xADcally\nat\\xADtach them to re\\xADquests `,\"[6]\",`. For in\\xADstance, on\\xADline shops, so\\xADcial net\\xADworks, web\\xADmail ap\\xADpli\\xADca\\xADtions, etc. use cook\\xADies to\nmain\\xADtain state and track/re-\\u200Bidentify users with\\xADout need\\xADing to reau\\xADthen\\xADti\\xADcate. The rea\\xADson cook\\xADies are used is be\\xADcause\nHTTP is a state\\xADless pro\\xADto\\xADcol. The server re\\xADsponds to a re\\xADceived re\\xADquest and then \\u201Cfor\\xADgets\\u201D about the con\\xADnec\\xADtion. To\npre\\xADvent this state\\xADless\\xADness of HTTP, the au\\xADthen\\xADti\\xADca\\xADtion in\\xADfor\\xADma\\xADtion is stored some\\xADwhere in the server-\\u200Bside (e.g. ses\\xADsion\nstore, data\\xADbase, etc.) and the browser re\\xADceives only an iden\\xADti\\xADfier (ID) from the server for that ses\\xADsion, often via a\ncookie. The browser stores this cookie and when a user sends a re\\xADquest to the server, the browser will also\nau\\xADto\\xADmat\\xADi\\xADcally at\\xADtach the cookie(s) for this web ap\\xADpli\\xADca\\xADtion. The server re\\xADtrieves the Ses\\xADsion ID from the cookie and\nlooks up in its ses\\xADsion stor\\xADage or data\\xADbase to re\\xADtrieve the user\\u2019s data, iden\\xADti\\xADfied by the Ses\\xADsion ID.`),mdx(\"p\",null,`Many al\\xADter\\xADna\\xADtives exist when it comes to forg\\xADing a CSRF re\\xADquest. If a state-\\u200Bchanging re\\xADquest can be ex\\xADe\\xADcuted through\nHTTP GET, then an at\\xADtacker can ex\\xADploit this in (mainly) two ways. One op\\xADtion would be for the at\\xADtacker to send an email\nthat con\\xADtains a HTML tag with the CSRF pay\\xADload (e.g. `,mdx(\"code\",null,\"<\",\"img src=\\u201D\",mdx(\"a\",e({parentName:\"p\"},{href:\"http://bank.com/transfer?amount=x&dest=y%22/\"}),\"http://bank.com/trans\\xADfer?amount=x\",\"&\",\"dest=y\\u201D/\"),\">\"),`). If the\nweb\\xADmail ap\\xADpli\\xADca\\xADtion loads HTML im\\xADages au\\xADto\\xADmat\\xADi\\xADcally, then the browser will send the HTTP GET re\\xADquest and the CSRF at\\xADtack\nsuc\\xADceeds. The sec\\xADond op\\xADtion is for the at\\xADtacker to trick the user into vis\\xADit\\xADing his ma\\xADli\\xADcious web\\xADsite, which con\\xADtains\nthe above HTML image tag. Note that the at\\xADtacker is not lim\\xADited to only the `,mdx(\"code\",null,\"<\",\"img\",\">\"),` tag. The at\\xADtack can be trig\\xADgered\nby using dif\\xADfer\\xADent HTML tags, which usu\\xADally pro\\xADvide a src at\\xADtribute. How\\xADever, in most cases, ap\\xADpli\\xADca\\xADtions per\\xADform\nstate-\\u200Bchanging re\\xADquest through HTTP POST re\\xADquests. In this case, the at\\xADtacker has to cre\\xADate a hid\\xADden JS form in his\nma\\xADli\\xADcious web\\xADsite with the exact form fields that the server is ex\\xADpect\\xADing. Then, the at\\xADtacker can use JS\\u2019s events (e.g.\non\\xADload()) to au\\xADto\\xADmat\\xADi\\xADcally post the hid\\xADden form when the vic\\xADtim loads/vis\\xADits the page.`),mdx(\"p\",null,`CSRF can be con\\xADsid\\xADered a type of the con\\xADfused deputy at\\xADtack where the web browser (con\\xADfused deputy) is tricked into\nsend\\xADing a forged re\\xADquest (for a less priv\\xADi\\xADleged at\\xADtacker) to a web ap\\xADpli\\xADca\\xADtion. A CSRF at\\xADtack works be\\xADcause, by de\\xADsign,\na web browser au\\xADto\\xADmat\\xADi\\xADcally at\\xADtaches all cook\\xADies that it has for the tar\\xADget web ap\\xADpli\\xADca\\xADtion when a re\\xADquest is sent. A\nserver that does not pro\\xADtect against CSRF would ac\\xADcept and ex\\xADe\\xADcute the re\\xADquest as com\\xADing from the vic\\xADtim since the\nses\\xADsion cookie was part of the re\\xADquest. What is worse, the vic\\xADtim is not aware of the at\\xADtack until when it is too late.\nThe fig\\xADure below shows the steps of a com\\xADmon CSRF at\\xADtack. How\\xADever, some con\\xADdi\\xADtions have to be ful\\xADfilled for the at\\xADtack\nto work:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The at\\xADtacker must find an un\\xADpro\\xADtected state-\\u200Bchanging op\\xADer\\xADa\\xADtion in the tar\\xADget web ap\\xADpli\\xADca\\xADtion.\"),mdx(\"li\",{parentName:\"ul\"},\"The vic\\xADtim must be al\\xADready au\\xADthen\\xADti\\xADcated to the tar\\xADget web ap\\xADpli\\xADca\\xADtion (i.e. a ses\\xADsion cookie is al\\xADready stored in his/her browser).\"),mdx(\"li\",{parentName:\"ul\"},\"The at\\xADtacker must forge the state-\\u200Bchanging re\\xADquest cor\\xADrectly. This means that the at\\xADtacker must in\\xADclude all HTML form fields or re\\xADquest pa\\xADra\\xADme\\xADters that the server-\\u200Bside ex\\xADpects.\"),mdx(\"li\",{parentName:\"ul\"},\"The at\\xADtacker has to trick the au\\xADthen\\xADti\\xADcated vic\\xADtim into vis\\xADit\\xADing the at\\xADtacker\\u2019s web\\xADsite (where the CSRF at\\xADtack will take place) or trick the vic\\xADtim into click\\xADing a link.\"),mdx(\"li\",{parentName:\"ul\"},\"The means for au\\xADthen\\xADti\\xADca\\xADtion must be au\\xADto\\xADmat\\xADi\\xADcally at\\xADtached to the re\\xADquest by the browser (e.g. Basic Au\\xADthen\\xADti\\xADca\\xADtion re\\xADquest header \",\"[7]\",\" or cook\\xADies). Note that, dif\\xADfer\\xADent from XSS, CSRF aims to reuse the ses\\xADsion cookie, not steal it.\")),mdx(\"h3\",e({},{id:\"impact-of-csrf-attacks\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#impact-of-csrf-attacks\"})),\"Impact of CSRF attacks\"),mdx(\"p\",null,`The im\\xADpact of the at\\xADtack de\\xADpends on the spe\\xADcific op\\xADer\\xADa\\xADtion that is vul\\xADner\\xADa\\xADble to CSRF, but also on the priv\\xADi\\xADleges that\nthe vic\\xADtim has. This can re\\xADsult in a money trans\\xADfer, change of pass\\xADword, a pur\\xADchase in a shop\\xADping web\\xADsite, ac\\xADcount\ncom\\xADpro\\xADmise, cre\\xADated admin user, etc. Some\\xADtimes CSRF can be even more dan\\xADger\\xADous than ses\\xADsion hi\\xADjack\\xADing. For in\\xADstance, in\na court case, the vic\\xADtim can\\xADnot argue that he did not per\\xADform a trans\\xADac\\xADtion be\\xADcause the IP of the re\\xADquest (al\\xADthough\nun\\xADin\\xADtended) was that of the vic\\xADtim. To makes things even worse, the vic\\xADtim doesn\\u2019t even know which ma\\xADli\\xADcious web\\xADsite he\nvis\\xADited that trig\\xADgered the CSRF at\\xADtack. In the case of ses\\xADsion hi\\xADjack\\xADing, the ma\\xADli\\xADcious at\\xADtacker logs in with stolen\ncre\\xADden\\xADtials (usu\\xADally) from an IP ad\\xADdress dif\\xADfer\\xADent from that of the vic\\xADtim\\u2019s. There\\xADfore, in this case, the vic\\xADtim can\nargue that he was the vic\\xADtim of an at\\xADtack. There have also been other ex\\xADam\\xADples of CSRF at\\xADtacks that lead to re\\xADmote code\nex\\xADe\\xADcu\\xADtion with root priv\\xADi\\xADleges `,\"[8]\",\" or com\\xADpro\\xADmise of a root cer\\xADtifi\\xADcate \",\"[9]\",\".\"),mdx(\"p\",null,`Some\\xADtimes CSRF is mis\\xADtak\\xADenly con\\xADfused with XSS, but they are two dif\\xADfer\\xADent at\\xADtacks. XSS aims to ex\\xADe\\xADcute ar\\xADbi\\xADtrary JS\ncode on a vul\\xADner\\xADa\\xADble web\\xADsite. It abuses the trust that a client has in a cer\\xADtain web ap\\xADpli\\xADca\\xADtion, thus click\\xADing the\nlink. On the other hand, CSRF tricks the user\\u2019s browser to send un\\xADin\\xADtended HTTP re\\xADquests to a vul\\xADner\\xADa\\xADble web\nap\\xADpli\\xADca\\xADtion. It ex\\xADploits the trust that a web ap\\xADpli\\xADca\\xADtion has in the user. The web ap\\xADpli\\xADca\\xADtion as\\xADsumes that if a re\\xADquest\nwas re\\xADceived, then it orig\\xADi\\xADnated from the user (be\\xADcause of the ses\\xADsion cookie) and ex\\xADe\\xADcutes it. Ad\\xADdi\\xADtion\\xADally, in a CSRF\nex\\xADploit the at\\xADtacker can trick the vic\\xADtim\\u2019s browser to send an HTTP re\\xADquest, but he can\\xADnot read the re\\xADsponse of that\nre\\xADquest while XSS can issue re\\xADquests and also read the re\\xADsponse. XSS at\\xADtacks are based on JS, while CSRF at\\xADtacks can\nalso be car\\xADried out just by using a crafted HTML form. Fi\\xADnally, if a web ap\\xADpli\\xADca\\xADtion is vul\\xADner\\xADa\\xADble to XSS, then it is\nalso vul\\xADner\\xADa\\xADble to CSRF. How\\xADever, if a web ap\\xADpli\\xADca\\xADtion is safe from XSS, it might still be vul\\xADner\\xADa\\xADble to CSRF.`),mdx(\"p\",null,`Since its dis\\xADcov\\xADery in 2001, there have been many re\\xADported CSRF at\\xADtacks. Major web\\xADsites such as Net\\xADflix, Google, Yahoo,\nfi\\xADnan\\xADcial in\\xADsti\\xADtutes, Face\\xADbook, etc. have been vul\\xADner\\xADa\\xADble to CSRF and in some cases even more than once. Some of the\nmost fa\\xADmous cases are:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The Net\\xADflix web\\xADsite (2006): an at\\xADtacker could add a DVD to the vic\\xADtim\\u2019s shop\\xADping cart, change the ship\\xADping ad\\xADdress of the vic\\xADtim, or even com\\xADpro\\xADmise his/her ac\\xADcount.\"),mdx(\"li\",{parentName:\"ul\"},\"New York Time\\u2019s web\\xADsite \",\"[10]\",\": CSRF that leaks the email ad\\xADdress of the user. It was used for spam\\xADming the vic\\xADtims. The web\\xADsite kept users logged in for over a year.\"),mdx(\"li\",{parentName:\"ul\"},\"ING Di\\xADrect web ap\\xADpli\\xADca\\xADtion \",\"[10]\",\": vul\\xADner\\xADa\\xADble to a CSRF at\\xADtack that al\\xADlowed unau\\xADtho\\xADrized money trans\\xADfers from vic\\xADtim\\u2019s ac\\xADcount to the at\\xADtacker\\u2019s ac\\xADcount.\"),mdx(\"li\",{parentName:\"ul\"},\"YouTube \",\"[10]\",\": The vul\\xADner\\xADa\\xADbil\\xADity al\\xADlowed the at\\xADtacker to per\\xADform al\\xADmost all ac\\xADtions that a user can nor\\xADmally do.\"),mdx(\"li\",{parentName:\"ul\"},\"Google, Yahoo, Pay\\xADPal (2008) \",\"[11]\",\" were vul\\xADner\\xADa\\xADble to Login CSRF.\"),mdx(\"li\",{parentName:\"ul\"},\"Face\\xADbook (2009) was vul\\xADner\\xADa\\xADble to CSRF. The at\\xADtacker could use an HTML \",mdx(\"code\",null,\"<\",\"img\",\">\"),\" tag to steal the user\\u2019s ac\\xADcount in\\xADfor\\xADma\\xADtion.\"),mdx(\"li\",{parentName:\"ul\"},\"MetaFil\\xADter \",\"[10]\",\": the vul\\xADner\\xADa\\xADbil\\xADity al\\xADlowed an at\\xADtacker to take con\\xADtrol of a user\\u2019s ac\\xADcount.\"),mdx(\"li\",{parentName:\"ul\"},\"Twit\\xADter \",\"[12]\",\" was also vul\\xADner\\xADa\\xADble to CSRF in 2010. When au\\xADthen\\xADti\\xADcated users vis\\xADited the ma\\xADli\\xADcious web\\xADsite, they un\\xADin\\xADten\\xADtion\\xADally posted two tweets \\u2013 one with a link lead\\xADing to this ma\\xADli\\xADcious web\\xADsite and an\\xADother with a tweet about goats. Every user who clicked on the link pro\\xADvided in the first tweet also posted those two tweets, hence the worm was spread.\")),mdx(\"h3\",e({},{id:\"most-popular-anti-csrf-defenses\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#most-popular-anti-csrf-defenses\"})),\"Most popular anti-CSRF defenses\"),mdx(\"p\",null,\"Syn\\xADchro\\xADnizer Token Pat\\xADtern (STP) \",\"[13]\",` is one of the most pop\\xADu\\xADlar coun\\xADter\\xADmea\\xADsures. A se\\xADcret, unguess\\xADable, ran\\xADdom value\n(known as CSRF token) is gen\\xADer\\xADated on the server-\\u200Bside using a cryptographically-\\u200Bsecure pseudo\\xADran\\xADdom gen\\xADer\\xADa\\xADtor (CSPRNG)\nwith a ran\\xADdom input/seed. The gen\\xADer\\xADated token is stored in server-\\u200Bside stor\\xADage and must be tied to a spe\\xADcific user\n(usu\\xADally linked to the Ses\\xADsion ID). This stor\\xADage can be a ses\\xADsion data\\xADs\\xADtore (e.g. Redis), a data\\xADbase, a filesys\\xADtem (e.g.\nin PHP), server\\u2019s mem\\xADory, etc. The CSRF token is sent as part of the server\\u2019s re\\xADsponse and is usu\\xADally placed in a hid\\xADden\nHTML form field. Once a re\\xADquest ar\\xADrives in server-\\u200Bside, the server will use the Ses\\xADsion ID from the ses\\xADsion cookie\n(found in the in\\xADcom\\xADing re\\xADquest) to ex\\xADtract the CSRF token from the stor\\xADage. It will then com\\xADpare it against the CSRF\ntoken that came as part of the re\\xADquest\\u2019s body (or in a cus\\xADtom header).`),mdx(\"p\",null,\"Dou\\xADble Sub\\xADmit Cookie \",\"[14]\",` is an\\xADother pop\\xADu\\xADlar coun\\xADter\\xADmea\\xADsure that makes use of cook\\xADies in\\xADstead of ses\\xADsion stor\\xADage to\nstore a CSRF token. The se\\xADcu\\xADrity of this coun\\xADter\\xADmea\\xADsure re\\xADlies on the SOP. Only JS run\\xADning within the same ori\\xADgin is\nal\\xADlowed to read or mod\\xADify the cookie\\u2019s value. The server-\\u200Bside gen\\xADer\\xADates a CSRF token same as in the STP coun\\xADter\\xADmea\\xADsure.\nThe server cre\\xADates a cookie with the CSRF token in it and sends both this cookie and the CSRF token (usu\\xADally in an HTML\nform) to the client-\\u200Bside. When a re\\xADquest is sent to the server-\\u200Bside, this cookie that holds the CSRF token will be\nau\\xADto\\xADmat\\xADi\\xADcally sent by the browser in ad\\xADdi\\xADtion to the CSRF token in the re\\xADquest body/cus\\xADtom header, hence the name\n\\u201CDou\\xADble Sub\\xADmit\\u201D. The server-\\u200Bside will re\\xADtrieve the CSRF token from the cookie and com\\xADpare against the CSRF token in the\nre\\xADquest body/cus\\xADtom HTTP re\\xADquest header.`),mdx(\"h3\",e({},{id:\"great-does-not-mean-perfect\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#great-does-not-mean-perfect\"})),\"Great does not mean perfect!\"),mdx(\"p\",null,`Al\\xADthough anti-\\u200BCSRF de\\xADfenses mit\\xADi\\xADgate CSRF at\\xADtacks to a great ex\\xADtent, they are not per\\xADfect and may be sus\\xADcep\\xADti\\xADble to\ndif\\xADfer\\xADent at\\xADtacks vec\\xADtors:`),mdx(\"h4\",e({},{id:\"cryptography-concerns\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#cryptography-concerns\"})),\"Cryptography concerns\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Use of un\\xADsafe func\\xADtions for ran\\xADdom\\xADness: the func\\xADtion that is used to gen\\xADer\\xADate CSRF to\\xADkens/se\\xADcrets is cru\\xADcial for se\\xADcu\\xADrity. Pseudo-\\u200BRandom Num\\xADber Gen\\xADer\\xADa\\xADtors (PRNG) are fast func\\xADtions that out\\xADput low-\\u200Bquality ran\\xADdom\\xADness and should not be used to gen\\xADer\\xADate strings for crit\\xADi\\xADcal se\\xADcu\\xADrity op\\xADer\\xADa\\xADtions. It is ad\\xADvised to use cryptographically-\\u200Bsecure PRNG (CSPRNG) in\\xADstead. They pro\\xADvide enough ran\\xADdom\\xADness/en\\xADtropy in ex\\xADchange for longer gen\\xADer\\xADa\\xADtion time. Most lan\\xADguages pro\\xADvide a CSPRNG \",\"[15]\",\" so make sure to check be\\xADfore you end up using func\\xADtions like Math.Ran\\xADdom().\"),mdx(\"li\",{parentName:\"ul\"},\"In\\xADsuf\\xADfi\\xADcient ran\\xADdom\\xADness of the (CSRF) token: to\\xADkens need to be ran\\xADdomly gen\\xADer\\xADated (i.e. high en\\xADtropy) so that it can\\xADnot be guessed or brute-\\u200Bforced in a rea\\xADson\\xADable amount of time. In order to with\\xADstand the com\\xADpu\\xADta\\xADtion power of today\\u2019s com\\xADput\\xADers, to\\xADkens needs to have an en\\xADtropy of at least 128-bit to be con\\xADsid\\xADered se\\xADcure.\"),mdx(\"li\",{parentName:\"ul\"},\"In\\xADsuf\\xADfi\\xADcient ran\\xADdom\\xADness of the cryp\\xADto\\xADgraphic key: in those cases when the CSRF token/cookie is signed and/or en\\xADcrypted (for ad\\xADdi\\xADtional se\\xADcu\\xADrity or to pre\\xADvent tam\\xADper\\xADing), the se\\xADcret key that is used for en\\xADcrypt\\xADing or sign\\xADing dur\\xADing token gen\\xADer\\xADa\\xADtion might not be se\\xADcure enough. The se\\xADcret key should be ran\\xADdom enough so that the at\\xADtacker can\\xADnot eas\\xADily brute-\\u200Bforce it. De\\xADvel\\xADop\\xADers often copy and paste it from the doc\\xADu\\xADmen\\xADta\\xADtion code snip\\xADpet or Stack Over\\xADflow posts with\\xADout re\\xADal\\xADiz\\xADing the risks.\"),mdx(\"li\",{parentName:\"ul\"},\"Lack of key ro\\xADta\\xADtion: se\\xADcret keys should often be ro\\xADtated. The life\\xADtime of the cryp\\xADto\\xADgraphic key is im\\xADpor\\xADtant and de\\xADpends on many fac\\xADtors as al\\xADready cov\\xADered in de\\xADtail by OWASP \",\"[16]\",\".\"),mdx(\"li\",{parentName:\"ul\"},\"Use of in\\xADse\\xADcure cryp\\xADto\\xADgraphic al\\xADgo\\xADrithms: a web frame\\xADwork might still be using an in\\xADse\\xADcure cryp\\xADto\\xADgraphic al\\xADgo\\xADrithm such as DES, MD-5, SHA-1, or use un\\xADsafe block ci\\xADpher such as Elec\\xADtronic Code Book (ECB). OWASP pro\\xADvides de\\xADtailed doc\\xADu\\xADmen\\xADta\\xADtion con\\xADcern\\xADing cryp\\xADto\\xADgraphic op\\xADer\\xADa\\xADtions (as men\\xADtioned above).\"),mdx(\"li\",{parentName:\"ul\"},\"Use of dep\\xADre\\xADcated/un\\xADpatched cryp\\xADto\\xADgraphic li\\xADbraries: the cryp\\xADto\\xADgraphic al\\xADgo\\xADrithms are often pro\\xADvided by li\\xADbraries. An un\\xADpatched or dep\\xADre\\xADcated li\\xADbrary might be prob\\xADlem\\xADatic and de\\xADvel\\xADop\\xADers should al\\xADways be using the lat\\xADest (patched) ver\\xADsion.\"),mdx(\"li\",{parentName:\"ul\"},\"In\\xADse\\xADcure stor\\xADage of the ap\\xADpli\\xADca\\xADtion\\u2019s cryp\\xADto\\xADgraphic key: aside from ran\\xADdom\\xADness and key ro\\xADta\\xADtion, its stor\\xADage is also im\\xADpor\\xADtant. Stor\\xADing a se\\xADcret key hard\\xADcoded in the source code (or in some other in\\xADse\\xADcure lo\\xADca\\xADtion) would com\\xADpro\\xADmise the key if the code is leaked or a (ma\\xADli\\xADcious) em\\xADployee has ac\\xADcess to it.\"),mdx(\"li\",{parentName:\"ul\"},\"Server-\\u200Bside token stor\\xADage: A pos\\xADsi\\xADble im\\xADple\\xADmen\\xADta\\xADtion mis\\xADtake (for STP de\\xADfense for ex\\xADam\\xADple) would be the in\\xADcor\\xADrect map\\xADping user-\\u200Btoken be\\xADtween the user and the CSRF se\\xADcret that is stored on the server-\\u200Bside. An in\\xADcor\\xADrect map\\xADping might lead to many users hav\\xADing the same token. If the at\\xADtacker and vic\\xADtim share the same token, the at\\xADtacker can eas\\xADily forge a suc\\xADcess\\xADful CSRF at\\xADtack. Al\\xADthough this might sound as im\\xADprob\\xADa\\xADble, it has even hap\\xADpened re\\xADcently \",\"[17]\",\".\")),mdx(\"h4\",e({},{id:\"token-transmission-from-server-side-to-client-side\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#token-transmission-from-server-side-to-client-side\"})),\"Token transmission from server-side to client-side\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"MITM at\\xADtacks: Trans\\xADmis\\xADsion of the se\\xADcret val\\xADues over HTTP is in\\xADse\\xADcure since a net\\xADwork at\\xADtacker can per\\xADform a tra\\xADdi\\xADtional MITM at\\xADtack by in\\xADter\\xADcept\\xADing the re\\xADquest and leak the CSRF token. Ad\\xADdi\\xADtion\\xADally, SSL strip\\xADping at\\xADtack or a more ad\\xADvanced MITM \",\"[18]\",\" might be ex\\xADploited.\"),mdx(\"li\",{parentName:\"ul\"},\"BREACH \",\"[19]\",\": is an\\xADother at\\xADtack vec\\xADtor that can leak the CSRF token using a compression-\\u200Bbased side-\\u200Bchannel if the HTTP re\\xADsponse is com\\xADpressed. This at\\xADtack is pos\\xADsi\\xADble if the CSRF token is in the HTTP re\\xADsponse body (which nor\\xADmally is), along with some user-\\u200Bspecified input. The au\\xADthors that dis\\xADcov\\xADered BREACH showed how they leaked a CSRF token in 30 sec\\xADonds in Mi\\xADcrosoft\\u2019s Out\\xADlook Web Ac\\xADcess web\\xADsite.\"),mdx(\"li\",{parentName:\"ul\"},\"Plac\\xADing the token in the URL: is a com\\xADmon mis\\xADtake that might lead to CSRF token leak\\xADage through log files, browser his\\xADtory and Refer(r)er header. An\\xADother trick is to re\\xADtrieve the CSRF token by using the so-\\u200Bcalled \\u201CCSS His\\xADtory Hack\\u201D \",\"[20]\",\".\")),mdx(\"h4\",e({},{id:\"https-request-with-the-csrf-token-from-client-side\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#https-request-with-the-csrf-token-from-client-side\"})),\"HTTP(S) request with the CSRF token from client-side\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Code in\\xADjec\\xADtion (XSS, Dan\\xADgling Markup, CSS tricks): this cat\\xADe\\xADgory of at\\xADtacks aims to leak the se\\xADcret token by using JS (XSS), HTML (Dan\\xADgling markup), or CSS. Any XSS vec\\xADtor can be used to leak the CSRF token that is placed in the hid\\xADden HTML form. One might think that CSRF is point\\xADless when the at\\xADtacker can al\\xADready per\\xADform XSS, a larger threat than CSRF. How\\xADever, there are cases when the at\\xADtacker can be de\\xADtected, e.g. in server-\\u200Bside XSS cases. Al\\xADter\\xADna\\xADtively, an XSS vec\\xADtor in a sub\\xADdo\\xADmain might be ex\\xADploited to at\\xADtack an XSS-\\u200Bsecure tar\\xADget par\\xADent do\\xADmain. For in\\xADstance, the at\\xADtacker can use the XSS in the sub\\xADdo\\xADmain to set cook\\xADies for the par\\xADent do\\xADmain and per\\xADform a cookie toss\\xADing at\\xADtack (to be dis\\xADcussed soon). Dan\\xADgling Markup is an\\xADother kind of at\\xADtack that uses HTML to ex\\xADtract the CSRF token when attacker-\\u200Bcontrolled input is re\\xADflected in the HTML. A de\\xADtailed ex\\xADam\\xADple of this at\\xADtack can be found in this blog by Gareth Heyes\\\\cite{dan\\xADgling}.\"),mdx(\"li\",{parentName:\"ul\"},\"Click\\xADjack\\xADing \",\"[21]\",\": is an\\xADother at\\xADtack that can leak CSRF token or ren\\xADder the CSRF de\\xADfense use\\xADless. The de\\xADfense can be by\\xADpassed by fram\\xADing the tar\\xADget web ap\\xADpli\\xADca\\xADtion on the at\\xADtacker\\u2019s web\\xADsite. The vic\\xADtim is then tricked into sub\\xADmit\\xADting an HTML form on the tar\\xADget web ap\\xADpli\\xADca\\xADtion (same ori\\xADgin) which is loaded in\\xADside the at\\xADtacker\\u2019s web\\xADsite with the CSRF token in it. Since the CSRF token is part of the re\\xADquest, the de\\xADfense be\\xADcomes point\\xADless. How\\xADever, tra\\xADdi\\xADtional Click\\xADjack\\xADing is lim\\xADited to click\\xADing but\\xADtons while in re\\xADal\\xADity, an HTML form has to be filled in order to per\\xADform a sen\\xADsi\\xADtive op\\xADer\\xADa\\xADtion. Stone \",\"[22]\",\" showed how Click\\xADjack\\xADing could be used to achieve this. He sug\\xADgests the use of drag-\\u200Band-drop API to leak the CSRF token and/or fill HTML forms.\")),mdx(\"h4\",e({},{id:\"cookie-injection-for-cookie-based-mechanisms-like-double-submit-cookie\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#cookie-injection-for-cookie-based-mechanisms-like-double-submit-cookie\"})),\"Cookie injection (for cookie-based mechanisms like Double Submit Cookie)**\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Cookie toss\\xADing \",\"[23]\",\": this at\\xADtack vec\\xADtor is the nat\\xADural enemy of Dou\\xADble Sub\\xADmit coun\\xADter\\xADmea\\xADsure and ex\\xADploits the fact that an attacker-\\u200Bcontrolled sub\\xADdo\\xADmain can set a cookie for the tar\\xADget par\\xADent do\\xADmain. It also ex\\xADploits the com\\xADplex na\\xADture of cook\\xADies. A cookie is stored as a unique com\\xADbi\\xADna\\xADtion of name/do\\xADmain/path in the browser. Be\\xADcause name/do\\xADmain/path de\\xADter\\xADmine the unique\\xADness of a cookie, an at\\xADtacker can cre\\xADate a cookie from a sub\\xADdo\\xADmain that he con\\xADtrols with the same name and do\\xADmain but with a dif\\xADfer\\xADent path. This will cre\\xADate a whole new cookie and the browser will store it even if it has the same name. When the re\\xADquest is sent, the browser will at\\xADtach this header: \\u201CCookie: Xname=good; Xname=bad\\u201D (and no other cookie at\\xADtrib\\xADutes). As a re\\xADsult, the server that hosts the tar\\xADget par\\xADent do\\xADmain now sees two cook\\xADies with the same name but can\\xADnot dis\\xADtin\\xADguish which one be\\xADlongs to the par\\xADent do\\xADmain. The suc\\xADcess of the at\\xADtack re\\xADlies on the fact that the at\\xADtacker\\u2019s cookie (i.e. \\u201CXname=bad\\u201D cookie) is the one that is con\\xADsid\\xADered by the server. To in\\xADcrease the suc\\xADcess chance, the at\\xADtacker can also in\\xADclude a spe\\xADcific path in the forged cookie, e.g. path=trans\\xADfer. This ex\\xADploits the fact that (most) browsers will con\\xADsider a cookie with a path to be the \\u201Cmore specifically-\\u200Bscoped\\u201D and will send it first. Some pro\\xADgram\\xADming lan\\xADguages (e.g. PHP) cre\\xADate an array from the Cookie header and only con\\xADsider the first cookie of the array. Other lan\\xADguages like Python con\\xADsider the last cookie in the array. Egor Homakov \",\"[24]\",\" showed a de\\xADtailed ex\\xADam\\xADple of a real-\\u200Blife ap\\xADpli\\xADca\\xADtion of cookie toss\\xADing on GitHub.\"),mdx(\"li\",{parentName:\"ul\"},\"Cookie jar over\\xADflow \",\"[25]\",\": is an at\\xADtack vec\\xADtor that tar\\xADgets the web browser\\u2019s cookie jar. When a web\\xADsite sets a cookie, the browser adds it to the cookie jar which can be thought of as a data\\xADbase in the browser that stores cook\\xADies. Just like a real jar, there is a limit to how many cook\\xADies it can store. Fire\\xADfox al\\xADlows up to 150 cook\\xADies while Chrome al\\xADlows 180. If the limit is reached, the browser will start re\\xADplac\\xADing old cook\\xADies with new ones. There\\xADfore, an at\\xADtacker can do a cookie jar over\\xADflow to \\u201Ckick out\\u201D every sin\\xADgle cookie of the par\\xADent do\\xADmain and re\\xADplace them with attacker-\\u200Bspecified cook\\xADies (and CSRF token) just by run\\xADning a JS snip\\xADpet code on a sub\\xADdo\\xADmain. Even if the at\\xADtacker can\\xADnot mod\\xADify a cookie (e.g. HttpOnly or Same\\xADSite), he can use this over\\xADflow to con\\xADtrol what cook\\xADies the browser stores.\")),mdx(\"h4\",e({},{id:\"server-side-csrf-verification\"}),mdx(\"a\",e({parentName:\"h4\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#server-side-csrf-verification\"})),\"Server-side CSRF verification**\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"In\\xADse\\xADcure token com\\xADpar\\xADi\\xADson (tim\\xADing at\\xADtacks) \",\"[26]\",\": tim\\xADing at\\xADtacks on token com\\xADpar\\xADi\\xADson can hap\\xADpen if a token com\\xADpar\\xADi\\xADson is done using the \\u201D==\\u201D op\\xADer\\xADa\\xADtor or a func\\xADtion that is based on this op\\xADer\\xADa\\xADtor. The du\\xADra\\xADtion of the com\\xADpar\\xADi\\xADson is longer for strings with many char\\xADac\\xADters in com\\xADmon (e.g. \\u201Cuni\\xADver\\xADsity\\u201D and \\u201Cuni\\xADverse\\u201D) and shorter oth\\xADer\\xADwise (e.g., \\u201Cuni\\xADver\\xADsity\\u201D and \\u201Ctest\\u201D). This time dif\\xADfer\\xADence in the com\\xADpar\\xADi\\xADson can be used as a side-\\u200Bchannel to guess the CSRF token.\"),mdx(\"li\",{parentName:\"ul\"},\"Miss\\xADing checks for \\u201Csafe\\u201D HTTP meth\\xADods: a com\\xADmon mis\\xADtake is to per\\xADform CSRF ver\\xADi\\xADfi\\xADca\\xADtion only for un\\xADsafe HTTP meth\\xADods such as POST, PUT, DELETE, PATCH. In\\xADdeed, ac\\xADcord\\xADing to RFC 2616 \",\"[27]\",\", \\u201Csafe\\u201D meth\\xADods should be idem\\xADpo\\xADtent. How\\xADever, de\\xADvel\\xADop\\xADers use GET-\\u200Bbased re\\xADquests for state-\\u200Bchanging op\\xADer\\xADa\\xADtions quite often in prac\\xADtice (e.g. for log out). This al\\xADlows for GET-\\u200Bbased CSRF at\\xADtacks to hap\\xADpen.\"),mdx(\"li\",{parentName:\"ul\"},\"Miss\\xADing check for non-\\u200BPOST un\\xADsafe HTTP meth\\xADods: is an even more dan\\xADger\\xADous prac\\xADtice. There are few frame\\xADwork de\\xADvel\\xADop\\xADers that only per\\xADform CSRF ver\\xADi\\xADfi\\xADca\\xADtion only for POST re\\xADquests and ig\\xADnore other un\\xADsafe meth\\xADods such as DELETE or PUT. In some cases, the de\\xADvel\\xADoper doesn\\u2019t un\\xADder\\xADstand the risk of such be\\xADhav\\xADior \",\"[28]\",\".\"),mdx(\"li\",{parentName:\"ul\"},\"HTTP Method Over\\xADride is also a \\u201Cfea\\xADture\\u201D that can by\\xADpass the CSRF ver\\xADi\\xADfi\\xADca\\xADtion that is per\\xADformed only for spe\\xADcific HTTP head\\xADers. The at\\xADtacker can forge his re\\xADquest as a GET re\\xADquest and also add a cus\\xADtom re\\xADquest header (X-\\u200BHTTP-Method-Override) to over\\xADride the re\\xADquest method to PUT, POST, or DELETE. Usu\\xADally, this is pro\\xADvided as a mid\\xADdle\\xADware. If this mid\\xADdle\\xADware is spec\\xADi\\xADfied after the CSRF mid\\xADdle\\xADware, then the CSRF ver\\xADi\\xADfi\\xADca\\xADtion will be by\\xADpassed be\\xADcause it con\\xADsid\\xADers the re\\xADquest as GET. Next, when method over\\xADride mid\\xADdle\\xADware is ex\\xADe\\xADcuted, it will change the re\\xADquest method to POST and will ex\\xADe\\xADcute the CSRF re\\xADquest \",\"[29]\",\". An\\xADother at\\xADtack vec\\xADtor using HTTP Method Over\\xADride hap\\xADpens when the at\\xADtacker spec\\xADi\\xADfies an ar\\xADbi\\xADtrary name as a mod\\xADi\\xADfied re\\xADquest method and the coun\\xADter\\xADmea\\xADsure will trig\\xADger the CSRF ver\\xADi\\xADfi\\xADca\\xADtion only for a list of spec\\xADi\\xADfied meth\\xADods (e.g. only for POST, DELETE, etc.). In this case, the ver\\xADi\\xADfi\\xADca\\xADtion will not be called at all, lead\\xADing to CSRF.\"),mdx(\"li\",{parentName:\"ul\"},\"Log\\xADi\\xADcal er\\xADrors: are all er\\xADrors that don\\u2019t throw an ex\\xADcep\\xADtion but have a flaw in the code\\u2019s logic or pro\\xADgram\\xADming mis\\xADtakes (e.g. in\\xADcor\\xADrect \\u201Cif-\\u200Belse\\u201D clauses). As we will see dur\\xADing the field study, there are few frame\\xADworks that have ac\\xADtu\\xADally fallen vic\\xADtim to this prob\\xADlem.\"),mdx(\"li\",{parentName:\"ul\"},\"Re\\xADplay at\\xADtack \",\"[30]\",\": is one of the old\\xADest tricks that is usu\\xADally ex\\xADploited in cryp\\xADto\\xADgraphic pro\\xADto\\xADcols. The at\\xADtacker in\\xADter\\xADcepts a mes\\xADsage that is sent from A to B, say a re\\xADquest for money trans\\xADfer, and then re\\xADplay this at\\xADtack by send\\xADing the in\\xADter\\xADcepted mes\\xADsage to B mul\\xADti\\xADple times. B has no way of check\\xADing the fresh\\xADness of the mes\\xADsage and will do the trans\\xADac\\xADtion every time. This can hap\\xADpen with CSRF to\\xADkens as well. An at\\xADtacker that leaks a sin\\xADgle CSRF token can use it mul\\xADti\\xADple times until token ex\\xADpi\\xADra\\xADtion. This at\\xADtack is also aided by the way ses\\xADsions are usu\\xADally han\\xADdled in prac\\xADtice. Some ses\\xADsions can last for days or months and if time is not spec\\xADi\\xADfied in the cookie, the end of the ses\\xADsion is con\\xADsid\\xADered when the browser is closed. How\\xADever, some browsers like Chrome have \\u201CClear cook\\xADies and site data when you quit Chrome\\u201D fea\\xADture, which is by de\\xADfault dis\\xADabled. As a re\\xADsult, the ses\\xADsion does not re\\xADally end even when the browser is closed.\")),mdx(\"p\",null,\"\\u2022    \",mdx(\"strong\",{parentName:\"p\"},\"Cross-\\u200BSite Web\\xADSocket Hi\\xADjack\\xADing \",\"[31]\"),\": (WS) con\\xADnec\\xADtions are an\\xADother pos\\xADsi\\xADble at\\xADtack vec\\xADtor. An at\\xADtacker can write some code in his ma\\xADli\\xADcious web\\xADsite that ini\\xADti\\xADates a WS hand\\xADshake with the tar\\xADget server. Once the vic\\xADtim vis\\xADits the page, the browser will send an UP\\xADGRADE re\\xADquest header to\\xADgether with the ses\\xADsion cookie. In a nor\\xADmal sce\\xADnario, the server re\\xADsponds with CORS re\\xADsponse head\\xADers that would pre\\xADvent the cross-\\u200Borigin con\\xADnec\\xADtion. How\\xADever, the in\\xADter\\xADest\\xADing fact is that WS does not re\\xADspect SOP or CORS pol\\xADicy and the con\\xADnec\\xADtion will ac\\xADtu\\xADally be es\\xADtab\\xADlished. As a re\\xADsult, the at\\xADtacker can now leak the CSRF token and forge suc\\xADcess\\xADful CSRF at\\xADtacks.\"),mdx(\"p\",null,\"\\u2022    \",mdx(\"strong\",{parentName:\"p\"},\"In\\xADcor\\xADrect SOP re\\xADlax\\xADation (e.g. faulty CORS)\"),\": is also a pos\\xADsi\\xADble at\\xADtack vec\\xADtor that can lead to CSRF token leak\\xADage. An over-\\u200Bpermissive CORS that sets the re\\xADsponse head\\xADers Access-\\u200BControl-Allow-Origin: true and Access-\\u200BControl-Allow-Credentials:true would leak the CSRF token of the vic\\xADtim. The at\\xADtacker can sim\\xADply per\\xADform a GET re\\xADquest to re\\xADtrieve the CSRF-\\u200Bprotected HTML form, read the re\\xADsponse and steal the CSRF token. Then, he can con\\xADtinue per\\xADform\\xADing a CSRF at\\xADtack by pro\\xADvid\\xADing the valid CSRF token.\"),mdx(\"p\",null,\"Note: Same\\xADSite cook\\xADies ap\\xADpear to be the next at\\xADtempt to pre\\xADvent CSRF at\\xADtacks. Al\\xADthough Same\\xADSite raises the bar for at\\xADtack\\xADers, it is not per\\xADfect as well. For ex\\xADam\\xADple, Same\\xADSite: Lax does not com\\xADpletely pre\\xADvent CSRF. Three pos\\xADsi\\xADble at\\xADtacks can be ex\\xADploited: 1) at\\xADtacker can use top-\\u200Blevel nav\\xADi\\xADga\\xADtion (\",mdx(\"code\",null,\"<\",\"a\",\">\"),\") to trig\\xADger GET-\\u200Bbased CSRF. 2) \\u201CClient-\\u200Bside\\u201D CSRF can cir\\xADcum\\xADvent this mech\\xADa\\xADnism and even send POST-\\u200Bbased CSRF re\\xADquests with cook\\xADies at\\xADtached. 3) \",mdx(\"code\",null,\"<\",\"por\\xADtal\",\">\"),\", a new HTML tag that was in\\xADtro\\xADduced by Google in the end of 2019 for per\\xADfor\\xADmant web\\xADsite fram\\xADing. Until now, it is still a draft and only avail\\xADable on Google Ca\\xADnary. How\\xADever, de\\xADvel\\xADop\\xADers should be aware of the se\\xADcu\\xADrity risks. If the tar\\xADget web ap\\xADpli\\xADca\\xADtion is em\\xADbed\\xADded into at\\xADtacker\\u2019s site using \",mdx(\"code\",null,\"<\",\"por\\xADtal\",\">\"),\", then the browser will send the Same\\xADSite=Lax cookie even if it is a cross-\\u200Borigin re\\xADquest \",\"[32]\",\". Re\\xADcent at\\xADtacks show that Same\\xADSite can also be cir\\xADcum\\xADvented with other means \",\"[33]\",\".\"),mdx(\"p\",null,\"I hope that de\\xADvel\\xADop\\xADers be\\xADcome aware of these at\\xADtack vec\\xADtors and read the doc\\xADu\\xADmen\\xADta\\xADtion of the frame\\xADwork they use care\\xADfully. There is cur\\xADrently no frame\\xADwork that pre\\xADvents all these at\\xADtack vec\\xADtors and if se\\xADcu\\xADrity is your pri\\xADor\\xADity, make sure to check that you are safe from the above-\\u200Bmentioned at\\xADtack vec\\xADtors.\"),mdx(\"h3\",e({},{id:\"references\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#references\"})),\"References\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\"}),\"https://owasp.org/www-\\u200Bproject-top-ten/2017/A7_2017-\\u200BCross-Site_Script\\xADing_(XSS)\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://doi.org/10.1145/54289.871709\"}),\"https://doi.org/10.1145/54289.871709\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.securityfocus.com\"}),\"https://www.se\\xADcu\\xADri\\xADty\\xADfo\\xADcus.com\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://web.archive.org/web/20000622042229/http://www.zope.org/Members/jim/ZopeSecurity/ClientSideTrojan\"}),\"https://web.archive.org/web/20000622042229/http://www.zope.org/Mem\\xADbers/jim/ZopeSe\\xADcu\\xADrity/ClientSide\\xADTro\\xADjan\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://crypto.stanford.edu/cs155old/cs155-spring08/papers/Session_Riding.pdf\"}),\"https://crypto.stan\\xADford.edu/cs155old/cs155-\\u200Bspring08/pa\\xADpers/Ses\\xADsion_Rid\\xADing.pdf\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://homes.cs.washington.edu/~yoshi/papers/czeskis-arls.pdf\"}),\"https://homes.cs.wash\\xADing\\xADton.edu/~yoshi/pa\\xADpers/czeskis-\\u200Barls.pdf\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://tools.ietf.org/html/rfc7617\"}),\"https://tools.ietf.org/html/rfc7617\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.kb.cert.org/vuls/id/584089/\"}),\"https://www.kb.cert.org/vuls/id/584089/\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.kb.cert.org/vuls/id/264385/\"}),\"https://www.kb.cert.org/vuls/id/264385/\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://people.eecs.berkeley.edu/~daw/teaching/cs261-f11/reading/csrf.pdf\"}),\"https://peo\\xADple.eecs.berke\\xADley.edu/~daw/teach\\xADing/cs261-f11/read\\xADing/csrf.pdf\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://dl.acm.org/doi/10.1145/1455770.1455782\"}),\"https://dl.acm.org/doi/10.1145/1455770.1455782\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://twitter.com/TwitterSupport/status/25614603915\"}),\"https://twit\\xADter.com/Twit\\xADter\\xADSup\\xADport/sta\\xADtus/25614603915\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#synchronizer-token-pattern\"}),\"https://cheat\\xADsheet\\xADseries.owasp.org/cheat\\xADsheets/Cross-\\u200BSite_Re\\xADquest_Forgery_Pre\\xADven\\xADtion_Cheat_Sheet.html#synchronizer-\\u200Btoken-pattern\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie\"}),\"https://cheat\\xADsheet\\xADseries.owasp.org/cheat\\xADsheets/Cross-\\u200BSite_Re\\xADquest_Forgery_Pre\\xADven\\xADtion_Cheat_Sheet.html#double-\\u200Bsubmit-cookie\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html\"}),\"https://cheat\\xADsheet\\xADseries.owasp.org/cheat\\xADsheets/Cryp\\xADto\\xADgraphic_Stor\\xADage_Cheat_Sheet.html\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://cheatsheetseries.owasp.org/cheatsheets/Key%5C_Management%5C_Cheat%5C_Sheet.html%5C#key-management-lifecycle-best-practices\"}),\"https://cheat\\xADsheet\\xADseries.owasp.org/cheat\\xADsheets/Key\\\\_Man\\xADage\\xADment\\\\_Cheat\\\\_Sheet.html\\\\#key-\\u200Bmanagement-lifecycle-best-practices\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://nvd.nist.gov/vuln/detail/CVE-2020-11825\"}),\"https://nvd.nist.gov/vuln/de\\xADtail/CVE-2020-11825\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://owasp.org/www-chapter-london/assets/slides/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf\"}),\"https://owasp.org/www-\\u200Bchapter-london/as\\xADsets/slides/David_Johansson-\\u200BDouble_De\\xADfeat_of_Double-\\u200BSubmit_Cookie.pdf\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"http://www.breachattack.com/resources/BREACH%20-%20SSL,%20gone%20in%2030%20seconds.pdf\"}),\"http://www.breachat\\xADtack.com/re\\xADsources/BREACH%20-%20SSL,%20gone%20in%2030%20sec\\xADonds.pdf\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://blog.jeremiahgrossman.com/2006/08/i-know-where-youve-been.html\"}),\"https://blog.je\\xADre\\xADmi\\xADah\\xADgross\\xADman.com/2006/08/i-\\u200Bknow-where-youve-been.html\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://en.wikipedia.org/wiki/Clickjacking\"}),\"https://en.wikipedia.org/wiki/Click\\xADjack\\xADing\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.contextis.com/media/downloads/Next_Generation_Clickjacking.pdf\"}),\"https://www.con\\xADtex\\xADtis.com/media/down\\xADloads/Next_Gen\\xADer\\xADa\\xADtion_Click\\xADjack\\xADing.pdf\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://media.blackhat.com/bh-ad-11/Lundeen/bh-ad-11-Lundeen-New_Ways_Hack_WebApp-WP.pdf\"}),\"https://media.black\\xADhat.com/bh-\\u200Bad-11/Lun\\xADdeen/bh-\\u200Bad-11-\\u200BLundeen-New_Ways_Hack_WebApp-\\u200BWP.pdf\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"http://homakov.blogspot.com/2013/03/hacking-github-with-webkit.html\"}),\"http://homakov.blogspot.com/2013/03/hacking-\\u200Bgithub-with-webkit.html\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.sjoerdlangkemper.nl/2020/05/27/overwriting-httponly-cookies-from-javascript-using-cookie-jar-overflow/\"}),\"https://www.sjo\\xADerd\\xADlangkem\\xADper.nl/2020/05/27/overwriting-\\u200Bhttponly-cookies-from-javascript-using-cookie-jar-overflow/\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://cwe.mitre.org/data/definitions/208.html\"}),\"https://cwe.mitre.org/data/de\\xADf\\xADi\\xADn\\xADi\\xADtions/208.html\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.ietf.org/rfc/rfc2616.txt\"}),\"https://www.ietf.org/rfc/rfc2616.txt\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/hapijs/crumb/issues/4\"}),\"https://github.com/hapijs/crumb/is\\xADsues/4\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"http://blog.nibblesec.org/2014/05/nodejs-connect-csrf-bypass-abusing.html\"}),\"http://blog.nib\\xADblesec.org/2014/05/nodejs-\\u200Bconnect-csrf-bypass-abusing.html\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://en.wikipedia.org/wiki/Replay_attack\"}),\"https://en.wikipedia.org/wiki/Re\\xADplay_at\\xADtack\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://christian-schneider.net/CrossSiteWebSocketHijacking.html\"}),\"https://christian-\\u200Bschneider.net/Cross\\xADSiteWeb\\xADSock\\xADetHi\\xADjack\\xADing.html\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://research.securitum.com/security-analysis-of-portal-element/\"}),\"https://re\\xADsearch.se\\xADcu\\xADri\\xADtum.com/security-\\u200Banalysis-of-portal-element/\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.facebook.com/notes/facebook-bug-bounty/client-side-csrf/2056804174333798/?fref=mentions\"}),\"https://www.face\\xADbook.com/notes/facebook-\\u200Bbug-bounty/client-\\u200Bside-csrf/2056804174333798/?fref=men\\xADtions\"))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"prevPost":{"meta":{"title":"Eclipse Vert.x 4.0.2 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Eclipse Vert.x version 4.0.2 has just been released. It fixes quite a few bugs that have been reported by the community."},"date":"2021-02-05","slug":"eclipse-vert-x-4-0-2"},"nextPost":{"meta":{"title":"Eclipse Vert.x 3.9.5 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Eclipse Vert.x version 3.9.5 has just been released. It fixes quite a few bugs that have been reported by the community."},"date":"2020-12-16","slug":"eclipse-vert-x-3-9-5"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"}]},"__N_SSG":true}