{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0","readingTime":{"text":"8 min read","minutes":7.475,"time":448500,"words":1495},"content":{"compiledSource":"var d=Object.defineProperty,h=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var p=(a,s,t)=>s in a?d(a,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[s]=t,e=(a,s)=>{for(var t in s||(s={}))o.call(s,t)&&p(a,t,s[t]);if(r)for(var t of r(s))i.call(s,t)&&p(a,t,s[t]);return a},c=(a,s)=>h(a,m(s));var l=(a,s)=>{var t={};for(var n in a)o.call(a,n)&&s.indexOf(n)<0&&(t[n]=a[n]);if(a!=null&&r)for(var n of r(a))s.indexOf(n)<0&&i.call(a,n)&&(t[n]=a[n]);return t};const makeShortcode=a=>function(t){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},t))},Alert=makeShortcode(\"Alert\"),Link=makeShortcode(\"Link\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:a}=n,s=l(n,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),s),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Mi\\xADcroser\\xADvices and APIs are every\\xADwhere. Every\\xADone talks about them, pre\\xADsen\\xADta\\xADtion slides are full of them \\u2026 some peo\\xADple are ac\\xADtu\\xADally even build\\xADing them. Mi\\xADcroser\\xADvices and APIs are of course not com\\xADpletely new con\\xADcepts and they are a bit over-\\u200Bhyped. But in gen\\xADeral the ideas be\\xADhind them are not bad. Un\\xADfor\\xADtu\\xADnately, many peo\\xADple seem to be\\xADlieve that the only way how to im\\xADple\\xADment an API in mi\\xADcroser\\xADvice is to use HTTP and REST. That is of course not true. Mi\\xADcroser\\xADvices and APIs can be based on many dif\\xADfer\\xADent pro\\xADto\\xADcols and tech\\xADnolo\\xADgies. My fa\\xADvorite one is of course \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://www.amqp.org\"}),\"AMQP\"),\". Don\\u2019t take me wrong, HTTP and REST is not nec\\xADes\\xADsar\\xADily bad. But in some cases AMQP is sim\\xADply bet\\xADter and cre\\xADat\\xADing AMQP based APIs does not need to be com\\xADpli\\xADcated.\"),mdx(Alert,{info:!0,mdxType:\"Alert\"},mdx(\"p\",null,\"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://blog.effectivemessaging.com/2017/01/building-services-and-apis-with-amqp-10.html\"}),\"blog post\"))),mdx(\"h2\",e({},{id:\"livescore-service\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#livescore-service\"})),\"LiveScore service\"),mdx(\"p\",null,\"For demon\\xADstra\\xADtion, I will use a very sim\\xADple ser\\xADvice for keep\\xADing scores of foot\\xADball games. It has very basic API. It has only three calls:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Add a new game\"),mdx(\"li\",{parentName:\"ul\"},\"Up\\xADdate a score of ex\\xADist\\xADing game\"),mdx(\"li\",{parentName:\"ul\"},`List the scores\nThe AMQP vari\\xADants will be ad\\xADdi\\xADtion\\xADally able to push live up\\xADdates to the clients.`)),mdx(\"p\",null,\"The demo is using Java and Vert.x toolkit. \",mdx(Link,{href:\"/\",passHref:!0,mdxType:\"Link\"},mdx(\"a\",e({parentName:\"p\"},{href:\"\"}),\"Vert.x\")),\" is cool and I def\\xADi\\xADnitely rec\\xADom\\xADmend it to every\\xADone. But most of the stuff from the demo should be pos\\xADsi\\xADble also in any other pro\\xADgram\\xADming lan\\xADguages and/or frame\\xADwork.\"),mdx(\"h2\",e({},{id:\"http-api\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#http-api\"})),\"HTTP API\"),mdx(\"p\",null,\"HTTP im\\xADple\\xADmen\\xADta\\xADtion of my ser\\xADvice is a typ\\xADi\\xADcal REST API. Since it is very sim\\xADple, it ac\\xADcepts re\\xADquests only on one end\\xADpoint \\u2013 /api/v1.0/scores. New games are added as POST op\\xADer\\xADa\\xADtions, scores are up\\xADdated with PUT op\\xADer\\xADa\\xADtions and list of all scores can be ob\\xADtained with GET.\"),mdx(\"p\",null,\"With Vert.x, cre\\xADat\\xADing HTTP/REST API is very easy. First the web router has to be cre\\xADated with all planned API calls:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),`router = Router.router(vertx);  \nrouter.route(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/api/v1.0/*\"'),`).handler(BodyHandler.create());  \nrouter.get(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/api/v1.0/scores\"'),\").handler(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"this\"),`::getScores);  \nrouter.post(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/api/v1.0/scores\"'),\").handler(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"this\"),`::addGame);  \nrouter.put(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/api/v1.0/scores\"'),\").handler(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"this\"),`::setScore);  \n`)),mdx(\"p\",null,\"Then the HTTP server has to be cre\\xADated and linked with the router:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),\"HttpServerOptions httpOptions = \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` HttpServerOptions();  \nserver = vertx.createHttpServer(httpOptions)  \n   .requestHandler(router::accept)  \n   .listen(httpPort);  \n`)),mdx(\"p\",null,\"And fi\\xADnally the han\\xADdlers which will be trig\\xADgered for each API call have to be im\\xADple\\xADmented as well. The full code is on \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/scholzj/livescore-demo-vertx-http\"}),\"GitHub\"),\".\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/images/blog/services-and-apis-with-amqp/HTTP-API.png\",alt:null}))),mdx(\"p\",null,\"The HTTP API doesn\\u2019t pro\\xADvide any way how to au\\xADto\\xADmat\\xADi\\xADcally push the score up\\xADdates to the clients. The clients sim\\xADply have to poll the ser\\xADvice pe\\xADri\\xADod\\xADi\\xADcally to get the up\\xADdates. HTTP has of course some ways how to push live up\\xADdates to clients. For ex\\xADam\\xADple, with Web\\xADSock\\xADets or with chun\\xADked trans\\xADfers. How\\xADever, these are not that easy to im\\xADple\\xADment. The ser\\xADvice would also need to keep sep\\xADa\\xADrate con\\xADnec\\xADtion with every client and push the up\\xADdates for each of them sep\\xADa\\xADrately.\"),mdx(\"h2\",e({},{id:\"amqp-api\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#amqp-api\"})),\"AMQP API\"),mdx(\"p\",null,\"Cre\\xADat\\xADing the HTTP API was re\\xADally easy. Cre\\xADat\\xADing an AMQP API has to be more com\\xADpli\\xADcated, right? We would need an AMQP server, which will lis\\xADten on some port, ac\\xADcept the con\\xADnec\\xADtions, ses\\xADsions, links and so on. There are usu\\xADally no nice and sim\\xADple to use li\\xADbraries for this.\"),mdx(\"p\",null,\"Sure, this is one way how to do it. There is ac\\xADtu\\xADally a nice li\\xADbrary called \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://qpid.apache.org/proton/index.html\"}),\"Apache Qpid Pro\\xADton\"),\". It has Java and C ver\\xADsions and bind\\xADings into many other lan\\xADguages (Go, C++, Python, \\u2026). It makes cre\\xADat\\xADing your own AMQP server lot eas\\xADier. It will take care of de\\xADcod\\xADing and en\\xADcod\\xADing the AMQP pro\\xADto\\xADcol, han\\xADdling the con\\xADnec\\xADtions, ses\\xADsions etc. But still, Qpid Pro\\xADton is not even nearly as easy to use as the HTTP router used for the HTTP API.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/images/blog/services-and-apis-with-amqp/AMQP-Server-API.png\",alt:\"API with AMQP server\"}))),mdx(\"p\",null,\"Are there any eas\\xADier op\\xADtions? What if all what is needed to cre\\xADate AMQP based API is a sim\\xADple AMQP client? Nor\\xADmally, that should not be a pos\\xADsi\\xADble be\\xADcause we need the API to lis\\xADten on some port for the clients to con\\xADnect to it and send re\\xADquests. And clients usu\\xADally don\\u2019t lis\\xADten on any ports. How\\xADever, Apache Qpid has some\\xADthing called \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://qpid.apache.org/components/dispatch-router/index.html\"}),\"Dis\\xADpatch\"),\". It works as a light\\xADweight AMQP router. Dis\\xADpatch will serve as the AMQP server which was miss\\xADing. It will take care of han\\xADdling client con\\xADnec\\xADtions, se\\xADcu\\xADrity and shield the ser\\xADvice from the ac\\xADtual clients. All the ser\\xADvice needs to do is to use AMQP client to con\\xADnect to Dis\\xADpatch on pre\\xADde\\xADfined ad\\xADdress and wait for the re\\xADquest.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/images/blog/services-and-apis-with-amqp/AMQP-API.png\",alt:\"AMQP API with Dispatch router\"}))),mdx(\"p\",null,\"Dis\\xADpatch needs to be con\\xADfig\\xADured with three API entry points as ad\\xADdresses:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-text\"}),`address {  \n    prefix: /setScore  \n    distribution: balanced  \n}  \naddress {  \n    prefix: /getScore  \n    distribution: balanced  \n}  \naddress {  \n    prefix: /addGame  \n    distribution: balanced  \n}  \n`)),mdx(\"p\",null,\"LiveScore ser\\xADvice will con\\xADnect to these ad\\xADdresses as a re\\xADceiver / con\\xADsumer. Clients will con\\xADnect to them as senders  /pro\\xADduc\\xADers. And Dis\\xADpatch will take care of rout\\xADing the mes\\xADsages be\\xADtween the clients and the ser\\xADvice. Clients can also cre\\xADate ad\\xADdi\\xADtional re\\xADceivers so that the ser\\xADvice is able to re\\xADspond to their re\\xADquests and spec\\xADify the ad\\xADdress of the re\\xADceiver as the reply-\\u200Bto header in the re\\xADquest mes\\xADsage. LiveScore ser\\xADvice will au\\xADto\\xADmat\\xADi\\xADcally send the re\\xADsponse to this ad\\xADdress. But spec\\xADi\\xADfy\\xADing a reply-\\u200Bto is not manda\\xADtory. If the client wants, it can sim\\xADply fire the re\\xADquest and for\\xADget about the re\\xADsponse.\"),mdx(\"p\",null,\"LiveScore ser\\xADvice is using Vert.x AMQP Bridge which al\\xADlows easy in\\xADte\\xADgra\\xADtion be\\xADtween the Vert.x Event Bus and the AMQP con\\xADnec\\xADtion to my router. The ser\\xADvice starts the AMQP Bridge and if it suc\\xADcess\\xADfully con\\xADnects to Dis\\xADpatch it cre\\xADates three re\\xADceivers for the API calls.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),\"AmqpBridgeOptions options = \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),\" AmqpBridgeOptions().addEnabledSaslMechanism(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"ANONYMOUS\"'),`);  \nbridge = AmqpBridge.create(vertx, options);  \nbridge.start(amqpHostname, amqpPort, res -> {  \n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"if\"),` (res.succeeded())  \n   {  \n     bridge.createConsumer(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/setScore\"'),\").setMaxBufferedMessages(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"100\"),\").handler(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"this\"),`::setScore);  \n     bridge.createConsumer(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/getScores\"'),\").setMaxBufferedMessages(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"100\"),\").handler(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"this\"),`::getScores);  \n     bridge.createConsumer(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/addGame\"'),\").setMaxBufferedMessages(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"100\"),\").handler(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"this\"),`::addGame);  \n     fut.complete();  \n   }  \n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"else\"),`  \n   {  \n     fut.fail(res.cause());  \n   }  \n});  \n`)),mdx(\"p\",null,\"The only other thing which needs to be done is cre\\xADat\\xADing han\\xADdlers for han\\xADdling the re\\xADquests re\\xADceived from clients:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"getScores\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),\"(Message<Object> msg)\"),`  \n`),`{  \n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"if\"),\"(msg.replyAddress() != \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"null\"),`)  \n   {  \n     JsonObject response = `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` JsonObject();  \n     response.put(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"application_properties\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),\" JsonObject().put(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"status\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"200\"),`));  \n     response.put(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"body\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` JsonArray(Json.encode(scoreService.getScores())).encode());  \n     msg.reply(response);  \n   }  \n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"else\"),`  \n   {  \n     LOG.warn(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Received LiveScore/getScores request without reply to address\"'),`);  \n   }  \n}  \n`)),mdx(\"p\",null,\"Live broad\\xADcast\\xADing of score up\\xADdates is also very easy. New ad\\xADdress has to be added into Dis\\xADpatch con\\xADfig\\xADu\\xADra\\xADtion. This ad\\xADdress will be used in op\\xADpo\\xADsite di\\xADrec\\xADtion. the ser\\xADvice con\\xADnects to it as sender / pro\\xADducer and clients which want to re\\xADceive the live up\\xADdates cre\\xADate a re\\xADceiver against this ad\\xADdress. What is im\\xADpor\\xADtant, this ad\\xADdress has to be marked as mul\\xADti\\xADcast. Thanks to that every sin\\xADgle mes\\xADsage will be de\\xADliv\\xADered to all con\\xADnected clients and not just to one of them:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-text\"}),`address {  \n    prefix: /liveScores  \n    distribution: multicast  \n}  \n`)),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/images/blog/services-and-apis-with-amqp/AMQP-API-multicast.png\",alt:\"Multicasting messages\"}))),mdx(\"p\",null,\"Thanks to the mul\\xADti\\xADcast dis\\xADtri\\xADb\\xADu\\xADtion, the ser\\xADvice doesn\\u2019t need to send a sep\\xADa\\xADrate up\\xADdate to every sin\\xADgle client. It sends the mes\\xADsage only once and dis\\xADpatch takes care of the rest.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"broadcastUpdates\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),\"(Game game)\"),`  \n`),`{  \n   LOG.info(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Broadcasting game update \"'),` + game);  \n   JsonObject message = `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` JsonObject();  \n   message.put(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"body\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` JsonObject(Json.encode(game)).encode());  \n   producer.send(message);  \n} \n`)),mdx(\"p\",null,\"Again, the com\\xADplete source codes of the demo ser\\xADvice are avail\\xADable on \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/scholzj/livescore-demo-vertx-amqp-bridge\"}),\"GitHub\"),\".\"),mdx(\"h2\",e({},{id:\"how-to-structure-amqp-apis\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#how-to-structure-amqp-apis\"})),\"How to structure AMQP APIs?\"),mdx(\"p\",null,\"Com\\xADpared to HTTP and REST, AMQP gives its users a lot more free\\xADdom when de\\xADsign\\xADing the API. It isn\\u2019t tied up by the avail\\xADable HTTP meth\\xADods.\"),mdx(\"p\",null,\"My LiveScore ser\\xADvice is using the API end\\xADpoints named ac\\xADcord\\xADing to their func\\xADtion:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"/LiveScore/ad\\xADdGame\"),mdx(\"li\",{parentName:\"ul\"},\"/LiveScore/setScore\"),mdx(\"li\",{parentName:\"ul\"},`/LiveScore/getScores\nIt also uses HTTP sta\\xADtus codes in ap\\xADpli\\xADca\\xADtion prop\\xADer\\xADties of the dif\\xADfer\\xADent mes\\xADsages to de\\xADscribe the re\\xADsult of the re\\xADquest and JSON as the mes\\xADsage pay\\xADload with the ac\\xADtual re\\xADquest and re\\xADsponse.`)),mdx(\"p\",null,\"Is that the best way? To be hon\\xADest, I don\\u2019t know. Just for the re\\xADquest en\\xADcod\\xADing there are many dif\\xADfer\\xADent op\\xADtions. AMQP has its own en\\xADcod\\xADings which sup\\xADports all pos\\xADsi\\xADble basic as well as more ad\\xADvanced data types and struc\\xADtures. But AMQP can also trans\\xADfer any opaque data - be it JSON, XML, Google Pro\\xADto\\xADcol Buffers or any\\xADthing else. For sim\\xADple re\\xADquest, the pay\\xADload can be com\\xADpletely skipped and ap\\xADpli\\xADca\\xADtion prop\\xADer\\xADties can be used in\\xADstead. And for every\\xADone who re\\xADally loves HTTP/REST, one can also model the API in REST style as I did in an \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/scholzj/livescore-demo-vertx-amqp-bridge-rest-style\"}),\"al\\xADter\\xADna\\xADtive im\\xADple\\xADmen\\xADta\\xADtion\"),\" of my demo ser\\xADvice.\"),mdx(\"h2\",e({},{id:\"browser\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#browser\"})),\"Browser\"),mdx(\"p\",null,\"One of the en\\xADvi\\xADron\\xADments where HTTP is so to say \\u201Cat home\\u201D is browser. AMQP will prob\\xADa\\xADbly never be as \\u201Cna\\xADtive\\u201D pro\\xADto\\xADcol for any browser as HTTP is. How\\xADever AMQP can be used even from browsers. It has Web\\xADSocket bind\\xADing and there are Javascript AMQP li\\xADbraries - for ex\\xADam\\xADple rhea. So AMQP can be also used re\\xADally every\\xADwhere.\"),mdx(\"h2\",e({},{id:\"decoupling\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#decoupling\"})),\"Decoupling\"),mdx(\"p\",null,\"It is im\\xADpor\\xADtant to men\\xADtion that the Dis\\xADpatch router doesn\\u2019t de\\xADcou\\xADple the client from the ser\\xADvice. If de\\xADcou\\xADpling is what is needed, it can be eas\\xADily achieved by re\\xADplac\\xADing the Dis\\xADpatch router with some AMQP bro\\xADker. The bro\\xADker would de\\xADcou\\xADple the client from the ser\\xADvice with\\xADout any changes in the ser\\xADvice or clients.\"),mdx(\"h2\",e({},{id:\"conclusion\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#conclusion\"})),\"Conclusion\"),mdx(\"p\",null,\"While cre\\xADat\\xADing APIs using AMQP can be very easy, it doesn\\u2019t mean that AMQP is the best pro\\xADto\\xADcol for all APIs. There are def\\xADi\\xADnitely APIs where HTTP is more suit\\xADable. But in some use cases, AMQP has clear ad\\xADvan\\xADtages. In my LiveScore ex\\xADam\\xADple it is es\\xADpe\\xADcially one to many com\\xADmu\\xADni\\xADca\\xADtion. It is im\\xADpor\\xADtant to keep the mind open and se\\xADlect the best avail\\xADable for given ser\\xADvice.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"prevPost":{"meta":{"title":"An Introduction to the Vert.x Context Object","category":"guides","authors":[{"name":"Jez Prime","github_id":"millross"}],"summary":"Under the hood, the vert.x Context class plays a critical part in maintaining the thread-safety guarantees of verticles. Most of the time, vert.x coders don't need to make use of Context objects directly."},"date":"2017-01-31","slug":"an-introduction-to-the-vert-x-context-object"},"nextPost":{"meta":{"title":"Internet of Things - Reactive and Asynchronous with Vert.x","category":"guides","authors":[{"name":"Paolo Patierno","github_id":"ppatierno"}],"summary":"I have to admit … before joining Red Hat I didn’t know about the Eclipse Vert.x project but it took me few days to fall in love with it!"},"date":"2016-12-29","slug":"internet-of-things-reactive-and-asynchronous-with-vert-x"},"relatedPosts":[{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Vert.x Web API Service Introduction","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"This blog post teaches you how to use the new module vertx-web-api-service to combine the Web Router and the OpenAPI Router Factory with service proxies."},"date":"2018-12-13","slug":"vert-x-web-api-service-introduction"}]},"__N_SSG":true}