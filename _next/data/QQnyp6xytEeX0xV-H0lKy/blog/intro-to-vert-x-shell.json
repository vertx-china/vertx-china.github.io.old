{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Intro to Vert.x Shell","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Vert.x Shell provides an extensible command line for Vert.x, accessible via SSH, Telnet or a nice Web interface. Vert.x Shell comes out of the box with plenty of commands."},"date":"2016-01-25","slug":"intro-to-vert-x-shell","readingTime":{"text":"4 min read","minutes":3.1,"time":186000,"words":620},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x Shell pro\\xADvides an ex\\xADten\\xADsi\\xADble com\\xADmand line for Vert.x, ac\\xADces\\xADsi\\xADble via SSH, Tel\\xADnet or a nice Web in\\xADter\\xADface. Vert.x Shell comes out of the box with plenty of com\\xADmands for Vert.x which makes it very handy for doing sim\\xADple man\\xADage\\xADment op\\xADer\\xADa\\xADtions like de\\xADploy\\xADing a Ver\\xADti\\xADcle or get\\xADting the list of de\\xADployed Ver\\xADti\\xADcles. One power fea\\xADture of Vert.x Shell is its ex\\xADten\\xADsi\\xADbil\\xADity: one can eas\\xADily aug\\xADment Vert.x Shell with its own com\\xADmands. Let\\u2019s build an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"http-\\u200Bclient\"), \" in JavaScript!\"), mdx(\"h2\", {\n    \"id\": \"booting-the-shell\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#booting-the-shell\"\n  })), \"Booting the Shell\"), mdx(\"p\", null, \"Vert.x Shell can be started in a cou\\xADple of lines de\\xADpend\\xADing on the con\\xADnec\\xADtors you con\\xADfig\\xADure. The doc\\xADu\\xADmen\\xADta\\xADtion pro\\xADvides sev\\xADeral ex\\xADam\\xADples show\\xADing the \", mdx(Link, {\n    href: \"/docs/vertx-shell/js/#_programmatic_service\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Shell Ser\\xADvice con\\xADfig\\xADu\\xADra\\xADtion\")), \". For test\\xADing our com\\xADmand, we will use the Tel\\xADnet pro\\xADto\\xADcol be\\xADcause it is easy to con\\xADfig\\xADure and use, so we just need to copy the cor\\xADre\\xADspond\\xADing sec\\xADtion in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"vertx-\\u200Bhttp-client.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" ShellService = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-shell-js/shell_service\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" service = ShellService.create(vertx, {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"telnetOptions\\\"\"), \" : {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"host\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \",\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"port\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4000\"), \"\\n  }\\n});\\nservice.start();\\n\")), mdx(\"p\", null, \"We can run it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"Juliens-MacBook-Pro:java julien$ vertx run vertx-http-client.js\\nSucceeded in deploying verticle\\n\")), mdx(\"p\", null, \"And con\\xADnect to the shell:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"Juliens-MacBook-Pro:~ julien$ telnet localhost 4000\\nTrying ::1...\\ntelnet: connect to address ::1: Connection refused\\nTrying 127.0.0.1...\\nConnected to localhost.\\nEscape character is '^]'.\\n__      __ ______  _____  _______  __   __\\n\\\\ \\\\    / /|  ____||  _  \\\\|__   __| \\\\ \\\\ / /\\n \\\\ \\\\  / / | |____ | :_) |   | |     \\\\   /\\n  \\\\ \\\\/ /  |  ____||   __/   | |      > /\\n   \\\\  /   | |____ | |\\\\ \\\\    | |     / //\\\\\\n    \\\\/    |______||_| \\\\_\\\\   |_| o  /_/ \\\\_\\\\\\n\\n\\n%\\n\")), mdx(\"p\", null, \"You can now al\\xADready use the shell, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"help\"), \" com\\xADmand lists the avail\\xADable com\\xADmands.\"), mdx(\"h2\", {\n    \"id\": \"creating-a-command\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#creating-a-command\"\n  })), \"Creating a command\"), mdx(\"p\", null, \"For the sake of sim\\xADplic\\xADity we will write a sin\\xADgle script that starts the Shell ser\\xADvice and de\\xADploys our com\\xADmand. In the real world you would prob\\xADa\\xADbly have the com\\xADmand in one file and the de\\xADploy\\xADment in an\\xADother.\"), mdx(\"p\", null, \"The \", mdx(Link, {\n    href: \"/docs/vertx-shell/js/#_extending_vert_x_shell\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion\")), \" ex\\xADplains how to add a new com\\xADmand to Vert.x shell, we can just copy this sec\\xADtion and ap\\xADpend it to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"vertx-\\u200Bhttp-client.js\"), \" script:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" CommandBuilder = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-shell-js/command_builder\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" CommandRegistry = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-shell-js/command_registry\\\"\"), \");\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" builder = CommandBuilder.command(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http-client\\\"\"), \");\\nbuilder.processHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"process\"), \") \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Write a message to the console\"), \"\\n  process.write(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Implement the client\\\\n\\\"\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// End the process\"), \"\\n  process.end();\\n});\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Register the command\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" registry = CommandRegistry.getShared(vertx);\\nregistry.registerCommand(builder.build(vertx));\\n\")), mdx(\"p\", null, \"Now you can use the com\\xADmand just to see it in ac\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"% http-client\\nImplement the client\\n%\\n\")), mdx(\"h2\", {\n    \"id\": \"checking-arguments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#checking-arguments\"\n  })), \"Checking arguments\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"http-\\u200Bclient\"), \" re\\xADquires an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \" ar\\xADgu\\xADment, an ar\\xADgu\\xADment check is per\\xADformed at the be\\xADgin\\xADning of the process han\\xADdler:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Check the url argument\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (process.args().length < \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \") {\\n  process.write(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Missing URL\\\\n\\\"\"), \").end();\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n}\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" url = process.args()[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"];\\n\")), mdx(\"h2\", {\n    \"id\": \"implementing-the-command\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementing-the-command\"\n  })), \"Implementing the command\"), mdx(\"p\", null, \"The final step of this tu\\xADto\\xADr\\xADial is the ac\\xADtual im\\xADple\\xADmen\\xADta\\xADtion of the client logic based on Vert.x Http\\xADClient:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create the client request\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" request = client.getAbs(url, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \") \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Print the response in the shell console\"), \"\\n  response.handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"buffer\"), \") \"), \"{\\n    process.write(buffer.toString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"UTF-8\\\"\"), \"));\\n  });\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// End the command when the response ends\"), \"\\n  response.endHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n    process.end();\\n  });\\n});\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Set a request handler to end the command with error\"), \"\\nrequest.exceptionHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"err\"), \") \"), \"{\\n  process.write(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Error: \\\"\"), \" + err.getMessage());\\n  process.end();\\n});\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// End the http request\"), \"\\nrequest.end();\\n\")), mdx(\"p\", null, \"And we can test the com\\xADmand in the shell:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"% http-client http://vertx.io\\nhttp-client http://vertx.io\\n<!DOCTYPE html><html lang=en><head><title>Vert.x</title>...\\n...\\n/javascripts/sticky_header.js></script></body></html>%\\n\")), mdx(\"h2\", {\n    \"id\": \"finally\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finally\"\n  })), \"Finally\"), mdx(\"p\", null, \"We have seen how easy it is to ex\\xADtend Vert.x with a shell and cre\\xADate an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"http-\\u200Bclient\"), \" cus\\xADtom com\\xADmand, you can get the full source code \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/vietj/51ff223bfb7cfcbc97ce\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"Our com\\xADmand is very sim\\xADple, it only im\\xADple\\xADments the very min\\xADi\\xADmum, in fu\\xADture posts we will im\\xADprove the com\\xADmand with sup\\xADport with more HTTP meth\\xADods, SSL sup\\xADport or header sup\\xADport with the the Vert.x CLI API.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x Shell pro­vides an ex­ten­si­ble com­mand line for Vert.x, ac­ces­si­ble via SSH, Tel­net or a nice Web in­ter­face. Vert.x Shell comes out of the box with plenty of com­mands for Vert.x which makes it very handy for doing sim­ple man­age­ment op­er­a­tions like de­ploy­ing a Ver­ti­cle or get­ting the list of de­ployed Ver­ti­cles. One power fea­ture of Vert.x Shell is its ex­ten­si­bil­ity: one can eas­ily aug­ment Vert.x Shell with its own com­mands. Let’s build an <em>http-​client</em> in JavaScript!</p><h2 id=\"booting-the-shell\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#booting-the-shell\"></a>Booting the Shell</h2><p>Vert.x Shell can be started in a cou­ple of lines de­pend­ing on the con­nec­tors you con­fig­ure. The doc­u­men­ta­tion pro­vides sev­eral ex­am­ples show­ing the <a href=\"/docs/vertx-shell/js/#_programmatic_service\">Shell Ser­vice con­fig­u­ra­tion</a>. For test­ing our com­mand, we will use the Tel­net pro­to­col be­cause it is easy to con­fig­ure and use, so we just need to copy the cor­re­spond­ing sec­tion in <em>vertx-​http-client.js</em>:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> ShellService = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-shell-js/shell_service&quot;</span>);\n<span class=\"hljs-keyword\">var</span> service = ShellService.create(vertx, {\n  <span class=\"hljs-string\">&quot;telnetOptions&quot;</span> : {\n    <span class=\"hljs-string\">&quot;host&quot;</span> : <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n    <span class=\"hljs-string\">&quot;port&quot;</span> : <span class=\"hljs-number\">4000</span>\n  }\n});\nservice.start();\n</code></pre><p>We can run it:</p><pre><code class=\"hljs language-text\">Juliens-MacBook-Pro:java julien$ vertx run vertx-http-client.js\nSucceeded in deploying verticle\n</code></pre><p>And con­nect to the shell:</p><pre><code class=\"hljs language-text\">Juliens-MacBook-Pro:~ julien$ telnet localhost 4000\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is &#x27;^]&#x27;.\n__      __ ______  _____  _______  __   __\n\\ \\    / /|  ____||  _  \\|__   __| \\ \\ / /\n \\ \\  / / | |____ | :_) |   | |     \\   /\n  \\ \\/ /  |  ____||   __/   | |      &gt; /\n   \\  /   | |____ | |\\ \\    | |     / //\\\n    \\/    |______||_| \\_\\   |_| o  /_/ \\_\\\n\n\n%\n</code></pre><p>You can now al­ready use the shell, the <em>help</em> com­mand lists the avail­able com­mands.</p><h2 id=\"creating-a-command\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#creating-a-command\"></a>Creating a command</h2><p>For the sake of sim­plic­ity we will write a sin­gle script that starts the Shell ser­vice and de­ploys our com­mand. In the real world you would prob­a­bly have the com­mand in one file and the de­ploy­ment in an­other.</p><p>The <a href=\"/docs/vertx-shell/js/#_extending_vert_x_shell\">doc­u­men­ta­tion</a> ex­plains how to add a new com­mand to Vert.x shell, we can just copy this sec­tion and ap­pend it to the <em>vertx-​http-client.js</em> script:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> CommandBuilder = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-shell-js/command_builder&quot;</span>);\n<span class=\"hljs-keyword\">var</span> CommandRegistry = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-shell-js/command_registry&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> builder = CommandBuilder.command(<span class=\"hljs-string\">&quot;http-client&quot;</span>);\nbuilder.processHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">process</span>) </span>{\n\n  <span class=\"hljs-comment\">// Write a message to the console</span>\n  process.write(<span class=\"hljs-string\">&quot;Implement the client\\n&quot;</span>);\n\n  <span class=\"hljs-comment\">// End the process</span>\n  process.end();\n});\n\n<span class=\"hljs-comment\">// Register the command</span>\n<span class=\"hljs-keyword\">var</span> registry = CommandRegistry.getShared(vertx);\nregistry.registerCommand(builder.build(vertx));\n</code></pre><p>Now you can use the com­mand just to see it in ac­tion:</p><pre><code class=\"hljs language-bash\">% http-client\nImplement the client\n%\n</code></pre><h2 id=\"checking-arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#checking-arguments\"></a>Checking arguments</h2><p>The <em>http-​client</em> re­quires an <code>url</code> ar­gu­ment, an ar­gu­ment check is per­formed at the be­gin­ning of the process han­dler:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Check the url argument</span>\n<span class=\"hljs-keyword\">if</span> (process.args().length &lt; <span class=\"hljs-number\">1</span>) {\n  process.write(<span class=\"hljs-string\">&quot;Missing URL\\n&quot;</span>).end();\n  <span class=\"hljs-keyword\">return</span>;\n}\n<span class=\"hljs-keyword\">var</span> url = process.args()[<span class=\"hljs-number\">0</span>];\n</code></pre><h2 id=\"implementing-the-command\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementing-the-command\"></a>Implementing the command</h2><p>The final step of this tu­to­r­ial is the ac­tual im­ple­men­ta­tion of the client logic based on Vert.x Http­Client:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Create the client request</span>\n<span class=\"hljs-keyword\">var</span> request = client.getAbs(url, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>) </span>{\n\n  <span class=\"hljs-comment\">// Print the response in the shell console</span>\n  response.handler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">buffer</span>) </span>{\n    process.write(buffer.toString(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>));\n  });\n\n  <span class=\"hljs-comment\">// End the command when the response ends</span>\n  response.endHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    process.end();\n  });\n});\n\n<span class=\"hljs-comment\">// Set a request handler to end the command with error</span>\nrequest.exceptionHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  process.write(<span class=\"hljs-string\">&quot;Error: &quot;</span> + err.getMessage());\n  process.end();\n});\n\n<span class=\"hljs-comment\">// End the http request</span>\nrequest.end();\n</code></pre><p>And we can test the com­mand in the shell:</p><pre><code class=\"hljs language-bash\">% http-client http://vertx.io\nhttp-client http://vertx.io\n&lt;!DOCTYPE html&gt;&lt;html lang=en&gt;&lt;head&gt;&lt;title&gt;Vert.x&lt;/title&gt;...\n...\n/javascripts/sticky_header.js&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;%\n</code></pre><h2 id=\"finally\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finally\"></a>Finally</h2><p>We have seen how easy it is to ex­tend Vert.x with a shell and cre­ate an <em>http-​client</em> cus­tom com­mand, you can get the full source code <a href=\"https://gist.github.com/vietj/51ff223bfb7cfcbc97ce\">here</a>.</p><p>Our com­mand is very sim­ple, it only im­ple­ments the very min­i­mum, in fu­ture posts we will im­prove the com­mand with sup­port with more HTTP meth­ods, SSL sup­port or header sup­port with the the Vert.x CLI API.</p>","scope":{}}},"prevPost":{"meta":{"title":"Vert.x 3.2.1 is released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"We are pleased to announce the release of Vert.x 3.2.1!"},"date":"2016-02-05","slug":"vert-x-3-2-1-is-released"},"nextPost":{"meta":{"title":"Using Hamcrest Matchers with Vert.x Unit","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x Unit is a very elegant library to test asynchronous applications developed with vert.x. However because of this asynchronous aspect, reporting test failures is not natural for JUnit users."},"date":"2016-01-18","slug":"using-hamcrest-matchers-with-vert-x-unit"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}