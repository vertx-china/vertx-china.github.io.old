{"pageProps":{"slug":"3.9.4/vertx-service-factory/java","title":"Vert.x Service Factory","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_service_identifier\">Service identifier</a></li>\n<li><a href=\"#_usage\">Usage</a></li>\n<li><a href=\"#_making_it_available\">Making it available</a></li>\n<li><a href=\"#_service_descriptor\">Service descriptor</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Service Factory</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The vert.x service factory is an implementation of VerticleFactory which deploys a verticle given a service (id)\nname. Notice that this factory is not directly related to\n<a href=\"http://vertx.io/docs/vertx-service-proxy/java\">vert.x service proxies</a>, but is about facilities to deploy\nindividual components.</p>\n</div>\n<div class=\"paragraph\">\n<p>The service name is used to lookup a JSON descriptor file which determines the actual verticle that is to be deployed,\nand can also contain deployment options for the verticle such as whether it should be run as a worker, and default\nconfig for the service.</p>\n</div>\n<div class=\"paragraph\">\n<p>It is useful as it decouples the service user from the actual verticle that is deployed and it allows the service\nto provide default deployment options and configuration.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_service_identifier\"><a class=\"anchor\" href=\"#_service_identifier\"></a>Service identifier</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The service name is simply a string - you can use anything you want, but it&#8217;s a good convention to use a reverse\ndomain name (rather like a Java package name) so not to clash with other similar named services that might be on your\nclasspath. E.g:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Good names: <code>com.mycompany.services.clever-db-service</code>, <code>org.widgets.widget-processor</code></p>\n</li>\n<li>\n<p>Poor names (but they are still valid): <code>accounting-service</code>, <code>foo</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When deploying the service use the prefix <code>service:</code>, this selects the service verticle factory.\nThe verticle can be deployed programmatically e.g.:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">\"service:com.mycompany.clever-db-service\"</span>, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or can be deployed on the command line with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>vertx run service:com.mycompany-clever-db-service</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_making_it_available\"><a class=\"anchor\" href=\"#_making_it_available\"></a>Making it available</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x picks up <code>VerticleFactory</code> implementations from the classpath, so you just need to make sure the\nvertx-service-factory jar file on the classpath. First you need to add the Maven verticle factory to your application&#8217;s\nclasspath. If you are using a fat jar, you can use the following dependencies:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-service-factory<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-service-factory:3.9.4'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also register a <code>VerticleFactory</code> instances programmatically on your <code>vertx</code> instance using the\n<code><a href=\"../../apidocs/io/vertx/core/Vertx.html#registerVerticleFactory-io.vertx.core.spi.VerticleFactory-\">registerVerticleFactory</a></code> method:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.registerVerticleFactory(<span class=\"hljs-keyword\">new</span> ServiceVerticleFactory());</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_service_descriptor\"><a class=\"anchor\" href=\"#_service_descriptor\"></a>Service descriptor</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you ask to deploy a service, the service factory first looks for a descriptor file on the classpath.\nThe descriptor file name is given by the service name concatenated with the <code>.json</code> file extension.</p>\n</div>\n<div class=\"paragraph\">\n<p>E.g. for a service name of <code>com.mycompany.clever-db-service</code> it would like for a descriptor file called\n<code>com.mycompany.clever-db-service.json</code> on the classpath.</p>\n</div>\n<div class=\"paragraph\">\n<p>The descriptor file is simply a text file which must contain a valid JSON object. At minimum the JSON must provide\na <code>main</code> field which determines the actual verticle that will be deployed, e.g:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n\"main\": \"com.mycompany.cleverdb.MainVerticle\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n \"main\": \"app.js\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or you could even redirect to a different verticle factory e.g. the Maven verticle factory to dynamically load the\nservice from Maven at run-time:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n\"main\": \"maven:com.mycompany:clever-db:1,2::clever-db-service\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The JSON can also provide an <code>options</code> field which maps exactly to a <code><a href=\"../../apidocs/io/vertx/core/DeploymentOptions.html\">DeploymentOptions</a></code> object.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n \"main\": \"com.mycompany.cleverdb.MainVerticle\",\n \"options\": {\n   \"config\" : {\n    \"foo\": \"bar\"\n   },\n   \"worker\": true,\n   \"isolationGroup\": \"mygroup\"\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When deploying a service from a service descriptor, any fields that are specified in the descriptor, such as <code>worker</code>,\n<code>isolationGroup</code>, etc cannot be overridden by any deployment options passed in at deployment time.</p>\n</div>\n<div class=\"paragraph\">\n<p>The exception is <code>config</code>. Any configuration passed in at deploy time will override any corresponding fields in any\nconfig present in the descriptor file.</p>\n</div>\n</div>\n</div>","version":"3.9.4"},"__N_SSG":true}