{"pageProps":{"slug":"3.9.0/vertx-shell/scala","title":"Vert.x Shell","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_shell\">Using Vert.x Shell</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_shell_service\">Shell service</a></li>\n<li><a href=\"#_programmatic_service\">Programmatic service</a></li>\n</ul>\n</li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_telnet_term_configuration\">Telnet term configuration</a></li>\n<li><a href=\"#_ssh_term_configuration\">SSH term configuration</a></li>\n<li><a href=\"#_http_term_configuration\">HTTP term configuration</a></li>\n<li><a href=\"#_keymap_configuration\">Keymap configuration</a></li>\n<li><a href=\"#_base_commands\">Base commands</a></li>\n<li><a href=\"#_extending_vert_x_shell\">Extending Vert.x Shell</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_command_arguments\">Command arguments</a></li>\n<li><a href=\"#_terminal_usage\">Terminal usage</a></li>\n<li><a href=\"#_shell_session\">Shell session</a></li>\n<li><a href=\"#_process_termination\">Process termination</a></li>\n<li><a href=\"#_process_events\">Process events</a></li>\n<li><a href=\"#_command_completion\">Command completion</a></li>\n</ul>\n</li>\n<li><a href=\"#_shell_server\">Shell server</a></li>\n<li><a href=\"#_terminal_servers\">Terminal servers</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_ssh_term\">SSH term</a></li>\n<li><a href=\"#_telnet_term\">Telnet term</a></li>\n<li><a href=\"#_http_term\">HTTP term</a></li>\n</ul>\n</li>\n<li><a href=\"#_command_discovery\">Command discovery</a></li>\n<li><a href=\"#_command_pack\">Command pack</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Shell</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Shell is a command line interface for the Vert.x runtime available from regular\nterminals using different protocols.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x Shell provides a variety of commands for interacting live with Vert.x services.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x Shell can be extended with custom commands in any language supported by Vert.x</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_shell\"><a class=\"anchor\" href=\"#_using_vert_x_shell\"></a>Using Vert.x Shell</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Shell is a Vert.x Service and can be started programmatically via the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/ShellService.html\">ShellService</a></code>\nor deployed as a service.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_shell_service\"><a class=\"anchor\" href=\"#_shell_service\"></a>Shell service</h3>\n<div class=\"paragraph\">\n<p>The shell can be started as a service directly either from the command line or as a the Vert.x deployment:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Starting a shell service available via Telnet</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>vertx run -conf '{\"telnetOptions\":{\"port\":5000}}' maven:io.vertx:vertx-shell:${maven.version}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Starting a shell service available via SSH</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code># create a key pair for the SSH server\nkeytool -genkey -keyalg RSA -keystore ssh.jks -keysize 2048 -validity 1095 -dname CN=localhost -keypass secret -storepass secret\n# create the auth config\necho user.admin=password &gt; auth.properties\n# start the shell\nvertx run -conf '{\"sshOptions\":{\"port\":4000,\"keyPairOptions\":{\"path\":\"ssh.jks\",\"password\":\"secret\"},\"authOptions\":{\"provider\":\"shiro\",\"config\":{\"properties_path\":\"file:auth.properties\"}}}}' maven:io.vertx:vertx-shell:${maven.version}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Starting a shell service available via HTTP</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code># create a certificate for the HTTP server\nkeytool -genkey -keyalg RSA -keystore keystore.jks -keysize 2048 -validity 1095 -dname CN=localhost -keypass secret -storepass secret\n# create the auth config\necho user.admin=password &gt; auth.properties\nvertx run -conf '{\"httpOptions\":{\"port\":8080,\"ssl\":true,\"keyStoreOptions\":{\"path\":\"keystore.jks\",\"password\":\"secret\"},\"authOptions\":{\"provider\":\"\"shiro,\"config\":{\"properties_path\":\"file:auth.properties\"}}}}' maven:io.vertx:vertx-shell:${maven.version}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also deploy this service inside your own verticle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:{maven-groupId}:{maven-artifactId}:{maven-version}\"</span>, <span class=\"hljs-type\">DeploymentOptions</span>()\n  .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"telnetOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>).put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">4000</span>)))\n)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:{maven-groupId}:{maven-artifactId}:{maven-version}\"</span>, <span class=\"hljs-type\">DeploymentOptions</span>()\n  .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"sshOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>).put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">5000</span>).put(<span class=\"hljs-string\">\"keyPairOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"src/test/resources/ssh.jks\"</span>).put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"wibble\"</span>)).put(<span class=\"hljs-string\">\"authOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"provider\"</span>, <span class=\"hljs-string\">\"shiro\"</span>).put(<span class=\"hljs-string\">\"config\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"properties_path\"</span>, <span class=\"hljs-string\">\"file:/path/to/my/auth.properties\"</span>)))))\n)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:{maven-groupId}:{maven-artifactId}:{maven-version}\"</span>, <span class=\"hljs-type\">DeploymentOptions</span>()\n  .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"httpOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>).put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">8080</span>).put(<span class=\"hljs-string\">\"ssl\"</span>, <span class=\"hljs-literal\">true</span>).put(<span class=\"hljs-string\">\"keyPairOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"src/test/resources/server-keystore.jks\"</span>).put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"wibble\"</span>)).put(<span class=\"hljs-string\">\"authOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"provider\"</span>, <span class=\"hljs-string\">\"shiro\"</span>).put(<span class=\"hljs-string\">\"config\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"properties_path\"</span>, <span class=\"hljs-string\">\"file:/path/to/my/auth.properties\"</span>)))))\n)</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nwhen Vert.x Shell is already on your classpath you can use <code>service:io.vertx.ext.shell</code> instead\nor <code>maven:io.vertx:vertx-shell:${maven.version}</code>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_programmatic_service\"><a class=\"anchor\" href=\"#_programmatic_service\"></a>Programmatic service</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/ShellService.html\">ShellService</a></code> takes care of starting an instance of Vert.x Shell.</p>\n</div>\n<div class=\"paragraph\">\n<p>Starting a shell service available via SSH:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> service = <span class=\"hljs-type\">ShellService</span>.create(vertx, <span class=\"hljs-type\">ShellServiceOptions</span>()\n  .setSSHOptions(<span class=\"hljs-type\">SSHTermOptions</span>()\n    .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n    .setPort(<span class=\"hljs-number\">5000</span>)\n    .setKeyPairOptions(<span class=\"hljs-type\">JksOptions</span>()\n      .setPath(<span class=\"hljs-string\">\"server-keystore.jks\"</span>)\n      .setPassword(<span class=\"hljs-string\">\"wibble\"</span>)\n    )\n    .setAuthOptions(<span class=\"hljs-type\">ShiroAuthOptions</span>()\n      .setType(<span class=\"hljs-type\">ShiroAuthRealmType</span>.<span class=\"hljs-type\">PROPERTIES</span>)\n      .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"properties_path\"</span>, <span class=\"hljs-string\">\"file:/path/to/my/auth.properties\"</span>))\n    )\n  )\n)\nservice.start()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Starting a shell service available via Telnet:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> service = <span class=\"hljs-type\">ShellService</span>.create(vertx, <span class=\"hljs-type\">ShellServiceOptions</span>()\n  .setTelnetOptions(<span class=\"hljs-type\">TelnetTermOptions</span>()\n    .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n    .setPort(<span class=\"hljs-number\">4000</span>)\n  )\n)\nservice.start()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../dataobjects.html#TelnetTermOptions\">TelnetTermOptions</a></code> extends the Vert.x Core <code>NetServerOptions</code> as the Telnet server\nimplementation is based on a <code>NetServer</code>.</p>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">小心</div>\n</td>\n<td class=\"content\">\nTelnet does not provide any authentication nor encryption at all.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Starting a shell service available via HTTP:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> service = <span class=\"hljs-type\">ShellService</span>.create(vertx, <span class=\"hljs-type\">ShellServiceOptions</span>()\n  .setHttpOptions(<span class=\"hljs-type\">HttpTermOptions</span>()\n    .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n    .setPort(<span class=\"hljs-number\">8080</span>)\n  )\n)\nservice.start()</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The SSH and HTTP connectors provide both authentication built on top of <em>vertx-auth</em> with the following supported\nproviders:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>shiro</em> : provides <code>.properties</code> and <em>LDAP</em> backend as seen in the ShellService presentation</p>\n</li>\n<li>\n<p><em>jdbc</em> : JDBC backend</p>\n</li>\n<li>\n<p><em>mongo</em> : MongoDB backend</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>These options can be created directly using directly <code><a href=\"../../vertx-auth-common/dataobjects.html#AuthOptions\">AuthOptions</a></code>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../vertx-auth-shiro/dataobjects.html#ShiroAuthOptions\">ShiroAuthOptions</a></code> for Shiro</p>\n</li>\n<li>\n<p><code><a href=\"../../vertx-auth-jdbc/dataobjects.html#JDBCAuthOptions\">JDBCAuthOptions</a></code> for JDBC</p>\n</li>\n<li>\n<p><code><a href=\"../../vertx-auth-mongo/dataobjects.html#MongoAuthOptions\">MongoAuthOptions</a></code> for Mongo</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>As for external service configuration in Json, the <code>authOptions</code> uses the <code>provider</code> property to distinguish:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>{\n ...\n \"authOptions\": {\n   \"provider\":\"shiro\",\n   \"config\": {\n     \"properties_path\":\"file:auth.properties\"\n   }\n }\n ...\n}</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_telnet_term_configuration\"><a class=\"anchor\" href=\"#_telnet_term_configuration\"></a>Telnet term configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Telnet terms are configured by <code><a href=\"../dataobjects.html#ShellServiceOptions#setTelnetOptions()\">telnetOptions</a></code>,\nthe <code><a href=\"../dataobjects.html#TelnetTermOptions\">TelnetTermOptions</a></code> extends the <code><a href=\"../../vertx-core/dataobjects.html#NetServerOptions\">NetServerOptions</a></code> so they\nhave the exact same configuration.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ssh_term_configuration\"><a class=\"anchor\" href=\"#_ssh_term_configuration\"></a>SSH term configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>SSH terms are configured by <code><a href=\"../dataobjects.html#ShellServiceOptions#setSSHOptions()\">SSHOptions</a></code>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../dataobjects.html#SSHTermOptions#setPort()\">port</a></code>: port</p>\n</li>\n<li>\n<p><code><a href=\"../dataobjects.html#SSHTermOptions#setHost()\">host</a></code>: host</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Only username/password authentication is supported at the moment, it can be configured with property file\nor LDAP, see Vert.x Auth for more info:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../dataobjects.html#SSHTermOptions#setAuthOptions()\">authOptions</a></code>: configures user authentication</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The server key configuration reuses the key pair store configuration scheme provided by <em>Vert.x Core</em>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../dataobjects.html#SSHTermOptions#setKeyPairOptions()\">keyPairOptions</a></code>: set <code>.jks</code> key pair store</p>\n</li>\n<li>\n<p><code><a href=\"../dataobjects.html#SSHTermOptions#setPfxKeyPairOptions()\">pfxKeyPairOptions</a></code>: set <code>.pfx</code> key pair store</p>\n</li>\n<li>\n<p><code><a href=\"../dataobjects.html#SSHTermOptions#setPemKeyPairOptions()\">pemKeyPairOptions</a></code>: set <code>.pem</code> key pair store</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Deploying the Shell Service on SSH with Mongo authentication</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:{maven-groupId}:{maven-artifactId}:{maven-version}\"</span>, <span class=\"hljs-type\">DeploymentOptions</span>()\n  .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"sshOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>).put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">5000</span>).put(<span class=\"hljs-string\">\"keyPairOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"src/test/resources/ssh.jks\"</span>).put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"wibble\"</span>)).put(<span class=\"hljs-string\">\"authOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"provider\"</span>, <span class=\"hljs-string\">\"mongo\"</span>).put(<span class=\"hljs-string\">\"config\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"connection_string\"</span>, <span class=\"hljs-string\">\"mongodb://localhost:27018\"</span>)))))\n)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Running the Shell Service on SSH with Mongo authentication</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> service = <span class=\"hljs-type\">ShellService</span>.create(vertx, <span class=\"hljs-type\">ShellServiceOptions</span>()\n  .setSSHOptions(<span class=\"hljs-type\">SSHTermOptions</span>()\n    .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n    .setPort(<span class=\"hljs-number\">5000</span>)\n    .setKeyPairOptions(<span class=\"hljs-type\">JksOptions</span>()\n      .setPath(<span class=\"hljs-string\">\"server-keystore.jks\"</span>)\n      .setPassword(<span class=\"hljs-string\">\"wibble\"</span>)\n    )\n    .setAuthOptions(<span class=\"hljs-type\">MongoAuthOptions</span>()\n      .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"connection_string\"</span>, <span class=\"hljs-string\">\"mongodb://localhost:27018\"</span>))\n    )\n  )\n)\nservice.start()</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Deploying the Shell Service on SSH with JDBC authentication</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:{maven-groupId}:{maven-artifactId}:{maven-version}\"</span>, <span class=\"hljs-type\">DeploymentOptions</span>()\n  .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"sshOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>).put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">5000</span>).put(<span class=\"hljs-string\">\"keyPairOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"src/test/resources/ssh.jks\"</span>).put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"wibble\"</span>)).put(<span class=\"hljs-string\">\"authOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"provider\"</span>, <span class=\"hljs-string\">\"jdbc\"</span>).put(<span class=\"hljs-string\">\"config\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"url\"</span>, <span class=\"hljs-string\">\"jdbc:hsqldb:mem:test?shutdown=true\"</span>).put(<span class=\"hljs-string\">\"driver_class\"</span>, <span class=\"hljs-string\">\"org.hsqldb.jdbcDriver\"</span>)))))\n)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Running the Shell Service on SSH with JDBC authentication</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> service = <span class=\"hljs-type\">ShellService</span>.create(vertx, <span class=\"hljs-type\">ShellServiceOptions</span>()\n  .setSSHOptions(<span class=\"hljs-type\">SSHTermOptions</span>()\n    .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n    .setPort(<span class=\"hljs-number\">5000</span>)\n    .setKeyPairOptions(<span class=\"hljs-type\">JksOptions</span>()\n      .setPath(<span class=\"hljs-string\">\"server-keystore.jks\"</span>)\n      .setPassword(<span class=\"hljs-string\">\"wibble\"</span>)\n    )\n    .setAuthOptions(<span class=\"hljs-type\">JDBCAuthOptions</span>()\n      .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"url\"</span>, <span class=\"hljs-string\">\"jdbc:hsqldb:mem:test?shutdown=true\"</span>).put(<span class=\"hljs-string\">\"driver_class\"</span>, <span class=\"hljs-string\">\"org.hsqldb.jdbcDriver\"</span>))\n    )\n  )\n)\nservice.start()</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_http_term_configuration\"><a class=\"anchor\" href=\"#_http_term_configuration\"></a>HTTP term configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>HTTP terms are configured by <code><a href=\"../dataobjects.html#ShellServiceOptions#setHttpOptions()\">httpOptions</a></code>, the http options\nextends the <code><a href=\"../../vertx-core/dataobjects.html#HttpServerOptions\">HttpServerOptions</a></code> so they expose the exact same configuration.</p>\n</div>\n<div class=\"paragraph\">\n<p>In addition there are extra options for configuring an HTTP term:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../dataobjects.html#HttpTermOptions#setAuthOptions()\">authOptions</a></code>: configures user authentication</p>\n</li>\n<li>\n<p><code><a href=\"../dataobjects.html#HttpTermOptions#setSockJSHandlerOptions()\">sockJSHandlerOptions</a></code>: configures SockJS</p>\n</li>\n<li>\n<p><code><a href=\"../dataobjects.html#HttpTermOptions#setSockJSPath()\">sockJSPath</a></code>: the SockJS path in the router</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Deploying the Shell Service on HTTP with Mongo authentication</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:{maven-groupId}:{maven-artifactId}:{maven-version}\"</span>, <span class=\"hljs-type\">DeploymentOptions</span>()\n  .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"httpOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>).put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">8080</span>).put(<span class=\"hljs-string\">\"ssl\"</span>, <span class=\"hljs-literal\">true</span>).put(<span class=\"hljs-string\">\"keyPairOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"src/test/resources/server-keystore.jks\"</span>).put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"wibble\"</span>)).put(<span class=\"hljs-string\">\"authOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"provider\"</span>, <span class=\"hljs-string\">\"mongo\"</span>).put(<span class=\"hljs-string\">\"config\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"connection_string\"</span>, <span class=\"hljs-string\">\"mongodb://localhost:27018\"</span>)))))\n)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Running the Shell Service on HTTP with Mongo authentication</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> service = <span class=\"hljs-type\">ShellService</span>.create(vertx, <span class=\"hljs-type\">ShellServiceOptions</span>()\n  .setHttpOptions(<span class=\"hljs-type\">HttpTermOptions</span>()\n    .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n    .setPort(<span class=\"hljs-number\">8080</span>)\n    .setAuthOptions(<span class=\"hljs-type\">MongoAuthOptions</span>()\n      .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"connection_string\"</span>, <span class=\"hljs-string\">\"mongodb://localhost:27018\"</span>))\n    )\n  )\n)\nservice.start()</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Deploying the Shell Service on HTTP with JDBC authentication</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">vertx.deployVerticle(<span class=\"hljs-string\">\"maven:{maven-groupId}:{maven-artifactId}:{maven-version}\"</span>, <span class=\"hljs-type\">DeploymentOptions</span>()\n  .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"httpOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"host\"</span>, <span class=\"hljs-string\">\"localhost\"</span>).put(<span class=\"hljs-string\">\"port\"</span>, <span class=\"hljs-number\">8080</span>).put(<span class=\"hljs-string\">\"ssl\"</span>, <span class=\"hljs-literal\">true</span>).put(<span class=\"hljs-string\">\"keyPairOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"path\"</span>, <span class=\"hljs-string\">\"src/test/resources/server-keystore.jks\"</span>).put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"wibble\"</span>)).put(<span class=\"hljs-string\">\"authOptions\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"provider\"</span>, <span class=\"hljs-string\">\"jdbc\"</span>).put(<span class=\"hljs-string\">\"config\"</span>, <span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"url\"</span>, <span class=\"hljs-string\">\"jdbc:hsqldb:mem:test?shutdown=true\"</span>).put(<span class=\"hljs-string\">\"driver_class\"</span>, <span class=\"hljs-string\">\"org.hsqldb.jdbcDriver\"</span>)))))\n)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Running the Shell Service on HTTP with JDBC authentication</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> service = <span class=\"hljs-type\">ShellService</span>.create(vertx, <span class=\"hljs-type\">ShellServiceOptions</span>()\n  .setHttpOptions(<span class=\"hljs-type\">HttpTermOptions</span>()\n    .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n    .setPort(<span class=\"hljs-number\">8080</span>)\n    .setAuthOptions(<span class=\"hljs-type\">JDBCAuthOptions</span>()\n      .setConfig(<span class=\"hljs-keyword\">new</span> io.vertx.core.json.<span class=\"hljs-type\">JsonObject</span>().put(<span class=\"hljs-string\">\"url\"</span>, <span class=\"hljs-string\">\"jdbc:hsqldb:mem:test?shutdown=true\"</span>).put(<span class=\"hljs-string\">\"driver_class\"</span>, <span class=\"hljs-string\">\"org.hsqldb.jdbcDriver\"</span>))\n    )\n  )\n)\nservice.start()</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_keymap_configuration\"><a class=\"anchor\" href=\"#_keymap_configuration\"></a>Keymap configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The shell uses a default keymap configuration that can be overriden using the <code>inputrc</code> property of the various\nterm configuration object:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../dataobjects.html#TelnetTermOptions#setIntputrc()\">intputrc</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../dataobjects.html#SSHTermOptions#setIntputrc()\">intputrc</a></code></p>\n</li>\n<li>\n<p><code><a href=\"../dataobjects.html#HttpTermOptions#setIntputrc()\">intputrc</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The <code>inputrc</code> must point to a file available via the classloader or the filesystem.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>inputrc</code> only function bindings and the available functions are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>backward-char</em></p>\n</li>\n<li>\n<p><em>forward-char</em></p>\n</li>\n<li>\n<p><em>next-history</em></p>\n</li>\n<li>\n<p><em>previous-history</em></p>\n</li>\n<li>\n<p><em>backward-delete-char</em></p>\n</li>\n<li>\n<p><em>backward-delete-char</em></p>\n</li>\n<li>\n<p><em>backward-word</em></p>\n</li>\n<li>\n<p><em>end-of-line</em></p>\n</li>\n<li>\n<p><em>beginning-of-line</em></p>\n</li>\n<li>\n<p><em>delete-char</em></p>\n</li>\n<li>\n<p><em>delete-char</em></p>\n</li>\n<li>\n<p><em>complete</em></p>\n</li>\n<li>\n<p><em>accept-line</em></p>\n</li>\n<li>\n<p><em>accept-line</em></p>\n</li>\n<li>\n<p><em>kill-line</em></p>\n</li>\n<li>\n<p><em>backward-word</em></p>\n</li>\n<li>\n<p><em>forward-word</em></p>\n</li>\n<li>\n<p><em>backward-kill-word</em></p>\n</li>\n</ul>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nExtra functions can be added, however this is done by implementing functions of the <code>Term.d</code> project on which\nVert.x Shell is based, for instance the <a href=\"https://github.com/termd/termd/blob/c1629623c8a3add4bde7778640bf8cc233a7c98f/src/examples/java/examples/readlinefunction/ReverseFunction.java\">reverse function</a>\ncan be implemented and then declared in a <code>META-INF/services/io.termd.core.readline.Function</code> to be loaded by the shell.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_base_commands\"><a class=\"anchor\" href=\"#_base_commands\"></a>Base commands</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To find out the available commands you can use the <em>help</em> builtin command:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Verticle commands</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>verticle-ls: list all deployed verticles</p>\n</li>\n<li>\n<p>verticle-undeploy: undeploy a verticle</p>\n</li>\n<li>\n<p>verticle-deploy: deploys a verticle with deployment options as JSON string</p>\n</li>\n<li>\n<p>verticle-factories: list all known verticle factories</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>File system commands</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>ls</p>\n</li>\n<li>\n<p>cd</p>\n</li>\n<li>\n<p>pwd</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Bus commands</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>bus-tail: display all incoming messages on an event bus address</p>\n</li>\n<li>\n<p>bus-send: send a message on the event bus</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Net commands</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>net-ls: list all available net servers, including HTTP servers</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Shared data commands</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>local-map-put</p>\n</li>\n<li>\n<p>local-map-get</p>\n</li>\n<li>\n<p>local-map-rm</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Various commands</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>echo</p>\n</li>\n<li>\n<p>sleep</p>\n</li>\n<li>\n<p>help</p>\n</li>\n<li>\n<p>exit</p>\n</li>\n<li>\n<p>logout</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Job control</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>fg</p>\n</li>\n<li>\n<p>bg</p>\n</li>\n<li>\n<p>jobs</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nthis command list should evolve in next releases of Vert.x Shell. Other Vert.x project may provide commands to extend\nVert.x Shell, for instance Dropwizard Metrics.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_extending_vert_x_shell\"><a class=\"anchor\" href=\"#_extending_vert_x_shell\"></a>Extending Vert.x Shell</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Shell can be extended with custom commands in any of the languages supporting code generation.</p>\n</div>\n<div class=\"paragraph\">\n<p>A command is created by the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandBuilder.html#command()\">CommandBuilder.command</a></code> method: the command process handler is called\nby the shell when the command is executed, this handler can be set with the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandBuilder.html#processHandler()\">processHandler</a></code>\nmethod:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> builder = <span class=\"hljs-type\">CommandBuilder</span>.command(<span class=\"hljs-string\">\"my-command\"</span>)\nbuilder.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n\n  <span class=\"hljs-comment\">// Write a message to the console</span>\n  process.write(<span class=\"hljs-string\">\"Hello World\"</span>)\n\n  <span class=\"hljs-comment\">// End the process</span>\n  process.end()\n})\n\n<span class=\"hljs-comment\">// Register the command</span>\n<span class=\"hljs-keyword\">var</span> registry = <span class=\"hljs-type\">CommandRegistry</span>.getShared(vertx)\nregistry.registerCommand(builder.build(vertx))</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After a command is created, it needs to be registed to a <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandRegistry.html\">CommandRegistry</a></code>. The\ncommand registry holds all the commands for a Vert.x instance.</p>\n</div>\n<div class=\"paragraph\">\n<p>A command is registered until it is unregistered with the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandRegistry.html#unregisterCommand()\">unregisterCommand</a></code>.\nWhen a command is registered from a Verticle, this command is unregistered when this verticle is undeployed.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nCommand callbacks are invoked in the {@literal io.vertx.core.Context} when the command is registered in the\nregistry. Keep this in mind if you maintain state in a command.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html\">CommandProcess</a></code> object can be used for interacting with the shell.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_command_arguments\"><a class=\"anchor\" href=\"#_command_arguments\"></a>Command arguments</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html#args()\">args</a></code> returns the command arguments:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">command.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n\n  process.args().foreach(arg =&gt; {\n    <span class=\"hljs-comment\">// Print each argument on the console</span>\n    process.write(<span class=\"hljs-string\">s\"Argument <span class=\"hljs-subst\">${arg}</span>\"</span>)\n  })\n\n\n  process.end()\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Besides it is also possible to create commands using <code><a href=\"../../scaladocs/io/vertx/scala/core/cli/CLI.html\">Vert.x CLI</a></code>: it makes easier to\nwrite command line argument parsing:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><em>option</em> and <em>argument</em> parsing</p>\n</li>\n<li>\n<p>argument <em>validation</em></p>\n</li>\n<li>\n<p>generation of the command <em>usage</em></p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> cli = <span class=\"hljs-type\">CLI</span>.create(<span class=\"hljs-string\">\"my-command\"</span>).addArgument(<span class=\"hljs-type\">Argument</span>()\n  .setArgName(<span class=\"hljs-string\">\"my-arg\"</span>)\n).addOption(<span class=\"hljs-type\">Option</span>()\n  .setShortName(<span class=\"hljs-string\">\"m\"</span>)\n  .setLongName(<span class=\"hljs-string\">\"my-option\"</span>)\n)\n<span class=\"hljs-keyword\">var</span> command = <span class=\"hljs-type\">CommandBuilder</span>.command(cli)\ncommand.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n\n  <span class=\"hljs-keyword\">var</span> commandLine = process.commandLine()\n\n  <span class=\"hljs-keyword\">var</span> argValue = commandLine.getArgumentValue(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">var</span> optValue = commandLine.getOptionValue(<span class=\"hljs-string\">\"my-option\"</span>)\n  process.write(<span class=\"hljs-string\">s\"The argument is <span class=\"hljs-subst\">${argValue}</span> and the option is <span class=\"hljs-subst\">${optValue}</span>\"</span>)\n\n  process.end()\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When an option named <em>help</em> is added to the CLI object, the shell will take care of generating the command usage\nwhen the option is activated:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> cli = <span class=\"hljs-type\">CLI</span>.create(<span class=\"hljs-string\">\"my-command\"</span>).addArgument(<span class=\"hljs-type\">Argument</span>()\n  .setArgName(<span class=\"hljs-string\">\"my-arg\"</span>)\n).addOption(<span class=\"hljs-type\">Option</span>()\n  .setArgName(<span class=\"hljs-string\">\"help\"</span>)\n  .setShortName(<span class=\"hljs-string\">\"h\"</span>)\n  .setLongName(<span class=\"hljs-string\">\"help\"</span>)\n)\n<span class=\"hljs-keyword\">var</span> command = <span class=\"hljs-type\">CommandBuilder</span>.command(cli)\ncommand.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n  <span class=\"hljs-comment\">// ...</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When the command executes the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html\">process</a></code> is provided for interacting\nwith the shell. A <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html\">CommandProcess</a></code> extends <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html\">Tty</a></code>\nwhich is used for interacting with the terminal.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_terminal_usage\"><a class=\"anchor\" href=\"#_terminal_usage\"></a>Terminal usage</h3>\n<div class=\"sect3\">\n<h4 id=\"_terminal_io\"><a class=\"anchor\" href=\"#_terminal_io\"></a>terminal I/O</h4>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html#stdinHandler()\">stdinHandler</a></code> handler is used to be notified when the terminal\nreceives data, e.g the user uses his keyboard:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">tty.stdinHandler((data: java.lang.<span class=\"hljs-type\">String</span>) =&gt; {\n  println(<span class=\"hljs-string\">s\"Received <span class=\"hljs-subst\">${data}</span>\"</span>)\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>A command can use the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html#write()\">write</a></code> to write to the standard output.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">tty.write(<span class=\"hljs-string\">\"Hello World\"</span>)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_terminal_size\"><a class=\"anchor\" href=\"#_terminal_size\"></a>Terminal size</h4>\n<div class=\"paragraph\">\n<p>The current terminal size can be obtained using <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html#width()\">width</a></code> and\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html#height()\">height</a></code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">tty.write(<span class=\"hljs-string\">s\"Current terminal size: (<span class=\"hljs-subst\">${tty.width()}</span>, <span class=\"hljs-subst\">${tty.height()}</span>)\"</span>)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_resize_event\"><a class=\"anchor\" href=\"#_resize_event\"></a>Resize event</h4>\n<div class=\"paragraph\">\n<p>When the size of the terminal changes the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html#resizehandler()\">resizehandler</a></code>\nis called, the new terminal size can be obtained with <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html#width()\">width</a></code> and\n<code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html#height()\">height</a></code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">tty.resizehandler((v: java.lang.<span class=\"hljs-type\">Void</span>) =&gt; {\n  println(<span class=\"hljs-string\">s\"terminal resized : <span class=\"hljs-subst\">${tty.width()}</span> <span class=\"hljs-subst\">${tty.height()}</span>\"</span>)\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_terminal_type\"><a class=\"anchor\" href=\"#_terminal_type\"></a>Terminal type</h4>\n<div class=\"paragraph\">\n<p>The terminal type is useful for sending escape codes to the remote terminal: <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html#type()\">type</a></code>\nreturns the current terminal type, it can be null if the terminal has not advertised the value.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">println(<span class=\"hljs-string\">s\"terminal type : <span class=\"hljs-subst\">${tty.type()}</span>\"</span>)</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_shell_session\"><a class=\"anchor\" href=\"#_shell_session\"></a>Shell session</h3>\n<div class=\"paragraph\">\n<p>The shell is a connected service that naturally maintains a session with the client, this session can be\nused in commands to scope data. A command can get the session with <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html#session()\">session</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">command.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n\n  <span class=\"hljs-keyword\">var</span> session = process.session()\n\n  <span class=\"hljs-keyword\">if</span> (session.get(<span class=\"hljs-string\">\"my_key\"</span>) == <span class=\"hljs-literal\">null</span>) {\n    session.put(<span class=\"hljs-string\">\"my key\"</span>, <span class=\"hljs-string\">\"my value\"</span>)\n  }\n\n  process.end()\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_process_termination\"><a class=\"anchor\" href=\"#_process_termination\"></a>Process termination</h3>\n<div class=\"paragraph\">\n<p>Calling <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html#end()\">end</a></code> ends the current process. It can be called directly\nin the invocation of the command handler or any time later:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">command.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n  <span class=\"hljs-keyword\">var</span> vertx = process.vertx()\n\n  <span class=\"hljs-comment\">// Set a timer</span>\n  vertx.setTimer(<span class=\"hljs-number\">1000</span>, (id: java.lang.<span class=\"hljs-type\">Long</span>) =&gt; {\n\n    <span class=\"hljs-comment\">// End the command when the timer is fired</span>\n    process.end()\n  })\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_process_events\"><a class=\"anchor\" href=\"#_process_events\"></a>Process events</h3>\n<div class=\"paragraph\">\n<p>A command can subscribe to a few process events.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_interrupt_event\"><a class=\"anchor\" href=\"#_interrupt_event\"></a>Interrupt event</h4>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html#interruptHandler()\">interruptHandler</a></code> is called when the process\nis interrupted, this event is fired when the user press <em>Ctrl+C</em> during the execution of a command. This handler can\nbe used for interrupting commands <em>blocking</em> the CLI and gracefully ending the command process:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">command.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n  <span class=\"hljs-keyword\">var</span> vertx = process.vertx()\n\n  <span class=\"hljs-comment\">// Every second print a message on the console</span>\n  <span class=\"hljs-keyword\">var</span> periodicId = vertx.setPeriodic(<span class=\"hljs-number\">1000</span>, (id: java.lang.<span class=\"hljs-type\">Long</span>) =&gt; {\n    process.write(<span class=\"hljs-string\">\"tick\\n\"</span>)\n  })\n\n  <span class=\"hljs-comment\">// When user press Ctrl+C: cancel the timer and end the process</span>\n  process.interruptHandler((v: java.lang.<span class=\"hljs-type\">Void</span>) =&gt; {\n    vertx.cancelTimer(periodicId)\n    process.end()\n  })\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When no interrupt handler is registered, pressing <em>Ctrl+C</em> will have no effect on the current process and the event\nwill be delayed and will likely be handled by the shell, like printing a new line on the console.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_suspendresume_events\"><a class=\"anchor\" href=\"#_suspendresume_events\"></a>Suspend/resume events</h4>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html#suspendHandler()\">suspendHandler</a></code> is called when the process\nis running and the user press <em>Ctrl+Z</em>, the command is <em>suspended</em>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the command can receive the suspend event when it has registered an handler for this event</p>\n</li>\n<li>\n<p>the command will not receive anymore data from the standard input</p>\n</li>\n<li>\n<p>the shell prompt the user for input</p>\n</li>\n<li>\n<p>the command can receive interrupts event or end events</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html#resumeHandler()\">resumeHandler</a></code> is called when the process\nis resumed, usually when the user types <em>fg</em>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the command can receive the resume event when it has registered an handler for this event</p>\n</li>\n<li>\n<p>the command will receive again data from the standard input when it has registered an stdin handler</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">command.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n\n  <span class=\"hljs-comment\">// Command is suspended</span>\n  process.suspendHandler((v: java.lang.<span class=\"hljs-type\">Void</span>) =&gt; {\n    println(<span class=\"hljs-string\">\"Suspended\"</span>)\n  })\n\n  <span class=\"hljs-comment\">// Command is resumed</span>\n  process.resumeHandler((v: java.lang.<span class=\"hljs-type\">Void</span>) =&gt; {\n    println(<span class=\"hljs-string\">\"Resumed\"</span>)\n  })\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_end_events\"><a class=\"anchor\" href=\"#_end_events\"></a>End events</h4>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html#endHandler()\">endHandler</a></code> (io.vertx.core.Handler)} is\ncalled when the process is running or suspended and the command terminates, for instance the shell session is closed,\nthe command is <em>terminated</em>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\">command.processHandler((process: io.vertx.scala.ext.shell.command.<span class=\"hljs-type\">CommandProcess</span>) =&gt; {\n\n  <span class=\"hljs-comment\">// Command terminates</span>\n  process.endHandler((v: java.lang.<span class=\"hljs-type\">Void</span>) =&gt; {\n    println(<span class=\"hljs-string\">\"Terminated\"</span>)\n  })\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The end handler is called even when the command invokes <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandProcess.html#end()\">end</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This handler is useful for cleaning up resources upon command termination, for instance closing a client or a timer.</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_command_completion\"><a class=\"anchor\" href=\"#_command_completion\"></a>Command completion</h3>\n<div class=\"paragraph\">\n<p>A command can provide a completion handler when it wants to provide contextual command line interface completion.</p>\n</div>\n<div class=\"paragraph\">\n<p>Like the process handler, the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/command/CommandBuilder.html#completionHandler()\">completion\nhandler</a></code> is non blocking because the implementation may use Vert.x services, e.g the file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/cli/Completion.html#lineTokens()\">lineTokens</a></code> returns a list of <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/cli/CliToken.html\">tokens</a></code>\nfrom the beginning of the line to the cursor position. The list can be empty if the cursor when the cursor is at the\nbeginning of the line.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/cli/Completion.html#rawLine()\">rawLine</a></code> returns the current completed from the beginning\nof the line to the cursor position, in raw format, i.e without any char escape performed.</p>\n</div>\n<div class=\"paragraph\">\n<p>Completion ends with a call to <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/cli/Completion.html#complete()\">complete</a></code>.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_shell_server\"><a class=\"anchor\" href=\"#_shell_server\"></a>Shell server</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Shell service is a convenient facade for starting a preconfigured shell either programmatically or as a Vert.x service.\nWhen more flexibility is needed, a <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/ShellServer.html\">ShellServer</a></code> can be used instead of the service.</p>\n</div>\n<div class=\"paragraph\">\n<p>For instance the shell http term can be configured to use an existing router instead of starting its own http server.</p>\n</div>\n<div class=\"paragraph\">\n<p>Using a shell server requires explicit configuration but provides full flexiblity, a shell server is setup in a few\nsteps:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> server = <span class=\"hljs-type\">ShellServer</span>.create(vertx)\n\n<span class=\"hljs-keyword\">var</span> shellRouter = <span class=\"hljs-type\">Router</span>.router(vertx)\nrouter.mountSubRouter(<span class=\"hljs-string\">\"/shell\"</span>, shellRouter)\n<span class=\"hljs-keyword\">var</span> httpTermServer = <span class=\"hljs-type\">TermServer</span>.createHttpTermServer(vertx, router)\n\n<span class=\"hljs-keyword\">var</span> sshTermServer = <span class=\"hljs-type\">TermServer</span>.createSSHTermServer(vertx)\n\nserver.registerTermServer(httpTermServer)\nserver.registerTermServer(sshTermServer)\n\nserver.registerCommandResolver(<span class=\"hljs-type\">CommandResolver</span>.baseCommands(vertx))\n\nserver.listen()</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>create a the shell server</p>\n</li>\n<li>\n<p>create an HTTP term server mounted on an existing router</p>\n</li>\n<li>\n<p>create an SSH term server</p>\n</li>\n<li>\n<p>register term servers</p>\n</li>\n<li>\n<p>register all base commands</p>\n</li>\n<li>\n<p>finally start the shell server</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Besides, the shell server can also be used for creating in process shell session: it provides a programmatic interactive shell.</p>\n</div>\n<div class=\"paragraph\">\n<p>In process shell session can be created with <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/ShellServer.html#createShell()\">createShell</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// Create a shell ession</span>\n<span class=\"hljs-keyword\">var</span> shell = shellServer.createShell()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The main use case is running or testing a command:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-comment\">// Create a shell</span>\n<span class=\"hljs-keyword\">var</span> shell = shellServer.createShell()\n\n<span class=\"hljs-comment\">// Create a job fo the command</span>\n<span class=\"hljs-keyword\">var</span> job = shell.createJob(<span class=\"hljs-string\">\"my-command 1234\"</span>)\n\n<span class=\"hljs-comment\">// Create a pseudo terminal</span>\n<span class=\"hljs-keyword\">var</span> pty = <span class=\"hljs-type\">Pty</span>.create()\npty.stdoutHandler((data: java.lang.<span class=\"hljs-type\">String</span>) =&gt; {\n  println(<span class=\"hljs-string\">s\"Command wrote <span class=\"hljs-subst\">${data}</span>\"</span>)\n})\n\n<span class=\"hljs-comment\">// Run the command</span>\njob.setTty(pty.slave())\njob.statusUpdateHandler((status: io.vertx.scala.ext.shell.system.<span class=\"hljs-type\">ExecStatus</span>) =&gt; {\n  println(<span class=\"hljs-string\">s\"Command terminated with status <span class=\"hljs-subst\">${status}</span>\"</span>)\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Pty.html\">Pty</a></code> pseudo terminal is the main interface for interacting with the command\nwhen it&#8217;s running:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>uses standard input/output for writing or reading strings</p>\n</li>\n<li>\n<p>resize the terminal</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/system/JobController.html#close()\">close</a></code> closes the shell, it will terminate all jobs in the current shell\nsession.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_terminal_servers\"><a class=\"anchor\" href=\"#_terminal_servers\"></a>Terminal servers</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Shell also provides bare terminal servers for those who need to write pure terminal applications.</p>\n</div>\n<div class=\"paragraph\">\n<p>A <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Term.html\">Term</a></code> handler must be set on a term server before starting it. This handler will\nhandle each term when the user connects.</p>\n</div>\n<div class=\"paragraph\">\n<p>An <code><a href=\"../../vertx-auth-common/dataobjects.html#AuthOptions\">AuthOptions</a></code> can be set on <code><a href=\"../dataobjects.html#SSHTermOptions\">SSHTermOptions</a></code> and <code><a href=\"../dataobjects.html#HttpTermOptions\">HttpTermOptions</a></code>.\nAlternatively, an <code><a href=\"../../scaladocs/io/vertx/scala/ext/auth/AuthProvider.html\">AuthProvider</a></code> can be <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/TermServer.html#authProvider()\">set</a></code>\ndirectly on the term server before starting it.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_ssh_term\"><a class=\"anchor\" href=\"#_ssh_term\"></a>SSH term</h3>\n<div class=\"paragraph\">\n<p>The terminal server <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Term.html\">Term</a></code> handler accepts incoming terminal connections.\nWhen a remote terminal connects, the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Term.html\">Term</a></code> can be used to interact with connected\nterminal.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> server = <span class=\"hljs-type\">TermServer</span>.createSSHTermServer(vertx, <span class=\"hljs-type\">SSHTermOptions</span>()\n  .setPort(<span class=\"hljs-number\">5000</span>)\n  .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n)\nserver.termHandler((term: io.vertx.scala.ext.shell.term.<span class=\"hljs-type\">Term</span>) =&gt; {\n  term.stdinHandler((line: java.lang.<span class=\"hljs-type\">String</span>) =&gt; {\n    term.write(line)\n  })\n})\nserver.listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Term.html\">Term</a></code> is also a <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/Tty.html\">Tty</a></code>, this section explains\nhow to use the tty.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_telnet_term\"><a class=\"anchor\" href=\"#_telnet_term\"></a>Telnet term</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> server = <span class=\"hljs-type\">TermServer</span>.createTelnetTermServer(vertx, <span class=\"hljs-type\">TelnetTermOptions</span>()\n  .setPort(<span class=\"hljs-number\">5000</span>)\n  .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n)\nserver.termHandler((term: io.vertx.scala.ext.shell.term.<span class=\"hljs-type\">Term</span>) =&gt; {\n  term.stdinHandler((line: java.lang.<span class=\"hljs-type\">String</span>) =&gt; {\n    term.write(line)\n  })\n})\nserver.listen()</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_term\"><a class=\"anchor\" href=\"#_http_term\"></a>HTTP term</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/term/TermServer.html#createHttpTermServer()\">TermServer.createHttpTermServer</a></code> method creates an HTTP term server, built\non top of Vert.x Web using the SockJS protocol.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> server = <span class=\"hljs-type\">TermServer</span>.createHttpTermServer(vertx, <span class=\"hljs-type\">HttpTermOptions</span>()\n  .setPort(<span class=\"hljs-number\">5000</span>)\n  .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n)\nserver.termHandler((term: io.vertx.scala.ext.shell.term.<span class=\"hljs-type\">Term</span>) =&gt; {\n  term.stdinHandler((line: java.lang.<span class=\"hljs-type\">String</span>) =&gt; {\n    term.write(line)\n  })\n})\nserver.listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>An HTTP term can start its own HTTP server, or it can reuse an existing Vert.x Web <code><a href=\"../../scaladocs/io/vertx/scala/ext/web/Router.html\">Router</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The shell can be found at <code>/shell.html</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-scala\" data-lang=\"scala\"><span class=\"hljs-keyword\">var</span> server = <span class=\"hljs-type\">TermServer</span>.createHttpTermServer(vertx, router, <span class=\"hljs-type\">HttpTermOptions</span>()\n  .setPort(<span class=\"hljs-number\">5000</span>)\n  .setHost(<span class=\"hljs-string\">\"localhost\"</span>)\n)\nserver.termHandler((term: io.vertx.scala.ext.shell.term.<span class=\"hljs-type\">Term</span>) =&gt; {\n  term.stdinHandler((line: java.lang.<span class=\"hljs-type\">String</span>) =&gt; {\n    term.write(line)\n  })\n})\nserver.listen()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The later option is convenient when the HTTP shell is integrated in an existing HTTP server.</p>\n</div>\n<div class=\"paragraph\">\n<p>The HTTP term server by default is configured for serving:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the <code>shell.html</code> page</p>\n</li>\n<li>\n<p>the <code><a href=\"https://github.com/chjj/term.js/\">term.js</a></code> client library</p>\n</li>\n<li>\n<p>the <code>vertxshell.js</code> client library</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The <code>vertxshell.js</code> integrates <code>term.js</code> is the client side part of the HTTP term.</p>\n</div>\n<div class=\"paragraph\">\n<p>It integrates <code>term.js</code> with SockJS and needs the URL of the HTTP term server endpoint:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost/shell'</span>;\n <span class=\"hljs-keyword\">new</span> VertxTerm(url, {\n   <span class=\"hljs-attr\">cols</span>: <span class=\"hljs-number\">80</span>,\n   <span class=\"hljs-attr\">rows</span>: <span class=\"hljs-number\">24</span>\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Straight websockets can also be used, if so, the remote term URL should be suffixed with <code>/websocket</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'ws://localhost/shell/websocket'</span>;\n <span class=\"hljs-keyword\">new</span> VertxTerm(url, {\n   <span class=\"hljs-attr\">cols</span>: <span class=\"hljs-number\">80</span>,\n   <span class=\"hljs-attr\">rows</span>: <span class=\"hljs-number\">24</span>\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For customization purpose these resources can be copied and customized, they are available in the Vert.x Shell\njar under the <code>io.vertx.ext.shell</code> packages.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_command_discovery\"><a class=\"anchor\" href=\"#_command_discovery\"></a>Command discovery</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The command discovery can be used when new commands need to be added to Vert.x without an explicit registration.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, the <em>Dropwizard</em> metrics service, adds specific metrics command to the shell service on the fly.</p>\n</div>\n<div class=\"paragraph\">\n<p>It can be achieved via the <code>java.util.ServiceLoader</code> of a <code>CommandResolverFactory</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomCommands</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">CommandResolverFactory</span> </span>{\n\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">resolver</span><span class=\"hljs-params\">(Vertx vertx, Handler&lt;AsyncResult&lt;CommandResolver&gt;&gt; resolverHandler)</span> </span>{\n   resolverHandler.handler(() -&gt; Arrays.asList(myCommand1, myCommand2));\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>resolver</code> method is async, because the resolver may need to wait some condition before commands\nare resolved.</p>\n</div>\n<div class=\"paragraph\">\n<p>The shell service discovery using the service loader mechanism:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">The service provider file <code>META-INF/services/io.vertx.ext.shell.spi.CommandResolverFactory</code></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>my.CustomCommands</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This is only valid for the <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/ShellService.html\">ShellService</a></code>. <code><a href=\"../../scaladocs/io/vertx/scala/ext/shell/ShellServer.html\">ShellServer</a></code>\ndon&#8217;t use this mechanism.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_command_pack\"><a class=\"anchor\" href=\"#_command_pack\"></a>Command pack</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A command pack is a jar that provides new Vert.x Shell commands.</p>\n</div>\n<div class=\"paragraph\">\n<p>Such jar just need to be present on the classpath and it is discovered by Vertx. Shell.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandPackExample</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">CommandResolverFactory</span> </span>{\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">resolver</span><span class=\"hljs-params\">(Vertx vertx, Handler&lt;AsyncResult&lt;CommandResolver&gt;&gt; resolveHandler)</span> </span>{\n    List&lt;Command&gt; commands = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n\n    <span class=\"hljs-comment\">// Add commands</span>\n    commands.add(Command.create(vertx, JavaCommandExample<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>))</span>;\n\n    <span class=\"hljs-comment\">// Add another command</span>\n    commands.add(CommandBuilder.command(<span class=\"hljs-string\">\"another-command\"</span>).processHandler(process -&gt; {\n      <span class=\"hljs-comment\">// Handle process</span>\n    }).build(vertx));\n\n    <span class=\"hljs-comment\">// Resolve with the commands</span>\n    resolveHandler.handle(Future.succeededFuture(() -&gt; commands));\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The command pack uses command discovery mechanism, so it needs the descriptor:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><code>META-INF/services/io.vertx.ext.shell.spi.CommandResolverFactory</code> descriptor</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>examples.pack.CommandPackExample</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"3.9.0"},"__N_SSG":true}