{"pageProps":{"slug":"4.2.1/vertx-auth-sql-client/java","title":"SQL 客户端权限管理器","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_hashing_strategy\">散列策略</a></li>\n<li><a href=\"#_vertx_auth_sql_client_and_gdpr\">Vertx Auth SQL Client 和 GDPR</a></li>\n<li><a href=\"#_hashing_passwords\">将密码做哈希处理</a></li>\n<li><a href=\"#_authentication\">鉴权/身份验证</a></li>\n<li><a href=\"#_authorisation_permission_role_model\">授权：权限-角色 模型</a></li>\n</ul>\n</div>","contents":"<h1>SQL 客户端权限管理器</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>我们提供了 <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code>\n和 <code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/AuthorizationProvider.html\">AuthorizationProvider</a></code> 的实现类，\n他们使用 <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlClient.html\">SqlClient</a></code> 来对SQL规范的数据库实现鉴权与授权。\n要使用这个项目，请加入如下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在您的 <code>pom.xml</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-sql-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在您的 <code>build.gradle</code> 文件）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-auth-sql-client:4.2.1&#x27;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>要创建一个权限管理器对象，您首先需要一个 <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlClient.html\">SqlClient</a></code> 对象。\n要学习如何创建一个 SqlClient ，请查阅 SQL Client 的文档。</p>\n</div>\n<div class=\"paragraph\">\n<p>当您已拥有一个SqlClient，那么您可以按如下所示来创建 <code><a href=\"../../apidocs/io/vertx/ext/auth/sqlclient/SqlAuthentication.html\">SqlAuthentication</a></code> ：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlAuthenticationOptions options = <span class=\"hljs-keyword\">new</span> SqlAuthenticationOptions();\n<span class=\"hljs-comment\">// SQL Client可以是已知的任何SQL数据库的实现</span>\n<span class=\"hljs-comment\">// *. Postgres</span>\n<span class=\"hljs-comment\">// *. MySQL</span>\n<span class=\"hljs-comment\">// *. etc...</span>\nAuthenticationProvider authenticationProvider =\n  SqlAuthentication.create(sqlClient, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>一旦您获取到了自己的 SqlAuthentication 对象，您就可以用它来做鉴权和授权（犹如任意一个 <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code> 一样）。</p>\n</div>\n<div class=\"paragraph\">\n<p>我们假设开箱即用的配置对于鉴权与授权做出了某种查询，\n如果您想在不同的数据库schema之下来查询，那么您可以用 <code><a href=\"../../apidocs/io/vertx/ext/auth/sqlclient/SqlAuthenticationOptions.html#setAuthenticationQuery-java.lang.String-\">setAuthenticationQuery</a></code>,\n<code><a href=\"../../apidocs/io/vertx/ext/auth/sqlclient/SqlAuthorizationOptions.html#setPermissionsQuery-java.lang.String-\">setPermissionsQuery</a></code> 和\n<code><a href=\"../../apidocs/io/vertx/ext/auth/sqlclient/SqlAuthorizationOptions.html#setRolesQuery-java.lang.String-\">setRolesQuery</a></code> 操作做出变化。</p>\n</div>\n<div class=\"paragraph\">\n<p>基本的数据存储的定义看上去应该类似：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sql\" data-lang=\"sql\"><span class=\"hljs-comment\">--</span>\n<span class=\"hljs-comment\">-- Take this script with a grain of salt and adapt it to your RDBMS</span>\n<span class=\"hljs-comment\">--</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> users (\n username <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,\n password <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>\n);\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> users_roles (\n username <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,\n role <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>\n);\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> roles_perms (\n role <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,\n perm <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>\n);\n\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> users <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> pk_username <span class=\"hljs-keyword\">PRIMARY</span> KEY (username);\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> users_roles <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> pk_users_roles <span class=\"hljs-keyword\">PRIMARY</span> KEY (username, role);\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> roles_perms <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> pk_roles_perms <span class=\"hljs-keyword\">PRIMARY</span> KEY (role, perm);\n\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> users_roles <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> fk_username <span class=\"hljs-keyword\">FOREIGN</span> KEY (username) <span class=\"hljs-keyword\">REFERENCES</span> users(username);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_hashing_strategy\"><a class=\"anchor\" href=\"#_hashing_strategy\"></a>散列策略</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>权限管理器用 <a href=\"https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md\">phc sf spec</a>\n来计算密码的散列值。</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\n如果您已经有了一个正在运行中的旧应用，更换散列策略会影响到您原有的密码。\n新密码的格式并不会与其兼容。为了达到升级的目的，\n那么您需要请用户来重置密码并适当的更新其数据记录。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\n我们也推荐您将密码作为散列值存入数据库表当中，在该表中的数据同时也拥有 <code>salt</code> 作为字段存储。\n您应该使用安全性强的哈希算法。\n强烈不推荐密码明文存入数据库。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_vertx_auth_sql_client_and_gdpr\"><a class=\"anchor\" href=\"#_vertx_auth_sql_client_and_gdpr\"></a>Vertx Auth SQL Client 和 GDPR</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>GDPR是欧盟普通法中的一项法规。它重新定义了成员国的数据保护法或凌驾该法之上，\n并扩展了先前已存在的法令。本节内容绝不是一个法规的概览，\n而是对组件如何遵循要求做的小总结。\n不遵守法规的公司可以按营业额的4％或2000万欧元处以罚款。\n因此我们想要确保的是，您，作为 Vert.x Auth SQL Client 的用户，很好地遵守了该法规。</p>\n</div>\n<div class=\"paragraph\">\n<p>该法规定义如下术语：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Data Subject - 个人数据被使用并处理的人（例如：用户）</p>\n</li>\n<li>\n<p>Personal Data - 一个人的任何信息（可识别的人或已确认的人）</p>\n</li>\n<li>\n<p>Data Processing - 对于个人信息（即 Personal Data）的任何操作（手动或自动）</p>\n</li>\n<li>\n<p>Controller - 请求和使用数据的实体（公司）</p>\n</li>\n<li>\n<p>Processors - 代表Controller处理数据的任何实体（例如：云服务供应商）</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>GDPR 定义如下的功能：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>\"Forget me\" - 清除数据的权利</p>\n</li>\n<li>\n<p>将 <code>概览（profile）</code> 标记为受限资源 - 限制数据处理的权利</p>\n</li>\n<li>\n<p>导出数据 - 数据的可移植权利</p>\n</li>\n<li>\n<p>允许编辑 <code>概览</code> - 重新授权的权利</p>\n</li>\n<li>\n<p>查看自己的所有信息 - 访问权利</p>\n</li>\n<li>\n<p>选中复选框</p>\n</li>\n<li>\n<p>年龄检查</p>\n</li>\n<li>\n<p>资料销毁 - 数据最小化原则</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>本模块遵循GDPR法律，它不存储任何数据对象的可识别信息。\n唯一的标识就是不关联任何私人信息的用户名（username）。</p>\n</div>\n<div class=\"paragraph\">\n<p>为了在您的应用中加入个人信息，您应该创建您自己的数据表，并关联用户名字段，\n这里提示一下，您应该有一个布尔类型的字段来标识个人信息是否访问受限，\n以此来遵循处理数据时的法律限制：例如，向邮件列表中的邮箱批量发送邮件，\n当某个邮箱用户的限制标识为true时，便不允许向他发送邮件。</p>\n</div>\n<div class=\"paragraph\">\n<p>删除数据的权利并不代表您必须清除您应用中所有的数据，\n例如：在银行当中，这个权利不能用来清除贷款和债务信息。您可以保留应用中的数据，但是必须清除个人数据。\n对于 Vert.x Auth SQL 场景，您应该删除您的表，\n只要不将用户名和个人信息关联起来，那么您依旧可以保留对用户名的外键引用，</p>\n</div>\n<div class=\"paragraph\">\n<p>重要说明：这必须在备份中保留下来！作为提示，您应该备份数据，并保证数据备份在不同的数据库当中，\n所以他们才能够独立地回滚。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_hashing_passwords\"><a class=\"anchor\" href=\"#_hashing_passwords\"></a>将密码做哈希处理</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>类似于其他任何应用，您总有一天要将新用户的信息存到数据库当中。\n正如您之前学到的那样，密码不是明文存到数据库中，而是按哈希策略做了哈希处理之后才存入数据库。\n在新密码被存入数据库之前，必须要经过相同的哈希策略处理。这只需要3个步骤：</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>生成 <code>salt</code> 字符串</p>\n</li>\n<li>\n<p>密码中加入salt并计算散列值</p>\n</li>\n<li>\n<p>将计算结果存入数据库</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String hash = sqlAuth.hash(\n  <span class=\"hljs-string\">&quot;pbkdf2&quot;</span>, <span class=\"hljs-comment\">// hashing algorithm (OWASP recommended)</span>\n  VertxContextPRNG.current().nextString(<span class=\"hljs-number\">32</span>), <span class=\"hljs-comment\">// secure random salt</span>\n  <span class=\"hljs-string\">&quot;sausages&quot;</span> <span class=\"hljs-comment\">// password</span>\n);\n\n<span class=\"hljs-comment\">// save to the database</span>\nsqlClient\n  .preparedQuery(<span class=\"hljs-string\">&quot;INSERT INTO users (username, password) VALUES ($1, $2)&quot;</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">&quot;tim&quot;</span>, hash))\n  .onSuccess(rowset -&gt; {\n    <span class=\"hljs-comment\">// password updated</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>鉴权/身份验证</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>使用此实现进行身份验证时，\n假定身份验证信息中存在 <code>用户名（username）</code> 和 <code>密码（password）</code> 字段：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject authInfo = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">&quot;username&quot;</span>, <span class=\"hljs-string\">&quot;tim&quot;</span>)\n  .put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;sausages&quot;</span>);\n\nauthProvider.authenticate(authInfo)\n  .onSuccess(user -&gt; System.out.println(<span class=\"hljs-string\">&quot;User: &quot;</span> + user.principal()))\n  .onFailure(err -&gt; {\n    <span class=\"hljs-comment\">// Failed!</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authorisation_permission_role_model\"><a class=\"anchor\" href=\"#_authorisation_permission_role_model\"></a>授权：权限-角色 模型</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x auth 自身不对任何权限（一些晦涩的字符串）的模型进行授权，\n这个实现假设了一个常见的 用户/角色/权限 的模型，一个用户可以没有角色，也可以有多个角色，\n一个角色可以没有权限，也可以有多个权限。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果要鉴别一个用户是否有某权限，那么就按如下将用户权限和所给权限做对比：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">sqlAuthZ.getAuthorizations(user)\n  .onSuccess(v -&gt; {\n    <span class=\"hljs-keyword\">if</span> (PermissionBasedAuthorization.create(<span class=\"hljs-string\">&quot;commit_code&quot;</span>).match(user)) {\n      <span class=\"hljs-comment\">// Has permission!</span>\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.2.1"},"__N_SSG":true}