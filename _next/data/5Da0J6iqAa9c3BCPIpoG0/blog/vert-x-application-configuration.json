{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Vert.x Application Configuration","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"In our previous post, we developed a very simple Vert.x 3 application, and saw how this application can be tested, packaged and executed. That was nice, wasn’t it?"},"date":"2015-07-20","slug":"vert-x-application-configuration","readingTime":{"text":"5 min read","minutes":4.165,"time":249900,"words":833},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In \", mdx(Link, {\n    href: \"/blog/my-first-vert-x-3-application/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"our pre\\xADvi\\xADous post\")), \", we de\\xADvel\\xADoped a very sim\\xADple Vert.x 3 ap\\xADpli\\xADca\\xADtion, and saw how this ap\\xADpli\\xADca\\xADtion can be tested, pack\\xADaged and ex\\xADe\\xADcuted. That was nice, wasn\\u2019t it? Well, ok, that was only the be\\xADgin\\xADning. In this post, we are going to en\\xADhance our ap\\xADpli\\xADca\\xADtion to sup\\xADport \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ex\\xADter\\xADnal\"), \" con\\xADfig\\xADu\\xADra\\xADtion.\"), mdx(\"p\", null, \"So just to re\\xADmind you, we have an ap\\xADpli\\xADca\\xADtion start\\xADing a HTTP server on the port 8080 and re\\xADply\\xADing a po\\xADlite \\u201CHello\\u201D mes\\xADsage to all HTTP re\\xADquests. The pre\\xADvi\\xADous code is avail\\xADable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-1\"\n  }), \"here\"), \". The code de\\xADvel\\xADoped in this post is in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-2\"\n  }), \"post-2 branch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"so-why-do-we-need-configuration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#so-why-do-we-need-configuration\"\n  })), \"So, why do we need configuration?\"), mdx(\"p\", null, \"That\\u2019s a good ques\\xADtion. The ap\\xADpli\\xADca\\xADtion works right now, but well, let\\u2019s say you want to de\\xADploy it on a ma\\xADchine where the port 8080 is al\\xADready taken. We would need to change the port in the ap\\xADpli\\xADca\\xADtion code and in the test, just for this ma\\xADchine. That would be sad. For\\xADtu\\xADnately, Vert.x ap\\xADpli\\xADca\\xADtions are con\\xADfig\\xADurable.\"), mdx(\"p\", null, \"Vert.x con\\xADfig\\xADu\\xADra\\xADtions are using the JSON for\\xADmat, so don\\u2019t ex\\xADpect any\\xADthing com\\xADpli\\xADcated. They can be passed to ver\\xADti\\xADcle ei\\xADther from the com\\xADmand line, or using an API. Let\\u2019s have a look.\"), mdx(\"h2\", {\n    \"id\": \"no-8080-anymore\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#no-8080-anymore\"\n  })), \"No \\u20188080\\u2019 anymore\"), mdx(\"p\", null, \"The first step is to mod\\xADify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.blog.first.MyFirstVerticle\"), \" class to not bind to the port 8080, but to read it from the con\\xADfig\\xADu\\xADra\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Future<Void> fut)\"), \" \"), \"{\\n  vertx\\n      .createHttpServer()\\n      .requestHandler(r -> {\\n        r.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Hello from my first \\\"\"), \" +\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Vert.x 3 application</h1>\\\"\"), \");\\n      })\\n      .listen(\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Retrieve the port from the configuration,\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// default to 8080.\"), \"\\n          config().getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \"),\\n          result -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.succeeded()) {\\n              fut.complete();\\n            } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n              fut.fail(result.cause());\\n            }\\n          }\\n      );\\n}\\n\")), mdx(\"p\", null, \"So, the only dif\\xADfer\\xADence with the pre\\xADvi\\xADous ver\\xADsion is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config().getInteger(\\\"http.port\\\", 8080)\"), \". Here, our code is now re\\xADquest\\xADing the con\\xADfig\\xADu\\xADra\\xADtion and check whether the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"http.port\"), \" prop\\xADerty is set. If not, the port 8080 is used as fall-\\u200Bback. The re\\xADtrieved con\\xADfig\\xADu\\xADra\\xADtion is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \".\"), mdx(\"p\", null, \"As we are using the port 8080 by de\\xADfault, you can still pack\\xADage our ap\\xADpli\\xADca\\xADtion and run it as be\\xADfore:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\")), mdx(\"p\", null, \"Sim\\xADple right ?\"), mdx(\"h2\", {\n    \"id\": \"api-based-configuration---random-port-for-the-tests\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#api-based-configuration---random-port-for-the-tests\"\n  })), \"API-based configuration - Random port for the tests\"), mdx(\"p\", null, \"Now that the ap\\xADpli\\xADca\\xADtion is con\\xADfig\\xADurable, let\\u2019s try to pro\\xADvide a con\\xADfig\\xADu\\xADra\\xADtion. In our test, we are going to con\\xADfig\\xADure our ap\\xADpli\\xADca\\xADtion to use the port 8081. So, pre\\xADvi\\xADously we were de\\xADploy\\xADing our ver\\xADti\\xADcle with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"vertx.deployVerticle(MyFirstVerticle.class.getName(), context.asyncAssertSuccess());\\n\")), mdx(\"p\", null, \"Let\\u2019s now pass some \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"de\\xADploy\\xADment op\\xADtions\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"port = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8081\"), \";\\nDeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n    .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port));\\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DeploymentOptions\"), \" ob\\xADject lets us cus\\xADtomize var\\xADi\\xADous pa\\xADra\\xADme\\xADters. In par\\xADtic\\xADu\\xADlar, it lets us in\\xADject the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \" re\\xADtrieved by the ver\\xADti\\xADcle when using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config()\"), \" method.\"), mdx(\"p\", null, \"Ob\\xADvi\\xADously, the test con\\xADnect\\xADing to the server needs to be slightly mod\\xADi\\xADfied to use the right port (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"port\"), \" is a field):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"vertx.createHttpClient().getNow(port, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \", response -> {\\n  response.handler(body -> {\\n    context.assertTrue(body.toString().contains(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello\\\"\"), \"));\\n    async.complete();\\n  });\\n});\\n\")), mdx(\"p\", null, \"Ok, well, this does not re\\xADally fix our issue. What hap\\xADpens when the port 8081 is used too. Let\\u2019s now pick a ran\\xADdom port:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ServerSocket socket = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ServerSocket(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \");\\nport = socket.getLocalPort();\\nsocket.close();\\n\\nDeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n    .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port));\\n\\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\\n\")), mdx(\"p\", null, \"So, the idea is very sim\\xADple. We open a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"server socket\"), \" that would pick a ran\\xADdom port (that\\u2019s why we put 0 as pa\\xADra\\xADme\\xADter). We re\\xADtrieve the used port and close the socket. Be aware that this method is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" per\\xADfect and may fail if the picked port be\\xADcomes used be\\xADtween the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"close\"), \" method and the start of our HTTP server. How\\xADever, it would work fine in the very high ma\\xADjor\\xADity of the case.\"), mdx(\"p\", null, \"With this in place, our test is now using a ran\\xADdom port. Ex\\xADe\\xADcute them with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"test\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"external-configuration---lets-run-on-another-port\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#external-configuration---lets-run-on-another-port\"\n  })), \"External configuration - Let\\u2019s run on another port\"), mdx(\"p\", null, \"Ok, well ran\\xADdom port is not what we want in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pro\\xADduc\\xADtion\"), \". Could you imag\\xADine the face of your pro\\xADduc\\xADtion team if you tell them that your ap\\xADpli\\xADca\\xADtion is pick\\xADing a ran\\xADdom port. It can ac\\xADtu\\xADally be funny, but we should never mess with the pro\\xADduc\\xADtion team.\"), mdx(\"p\", null, \"So for the ac\\xADtual ex\\xADe\\xADcu\\xADtion of your ap\\xADpli\\xADca\\xADtion, let\\u2019s pass the con\\xADfig\\xADu\\xADra\\xADtion in an ex\\xADter\\xADnal file. The con\\xADfig\\xADu\\xADra\\xADtion is stored in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"json\"), \" file.\"), mdx(\"p\", null, \"Cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/conf/my-application-conf.json\"), \" with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8082\"), \"\\n}\\n\")), mdx(\"p\", null, \"And now, to use this con\\xADfig\\xADu\\xADra\\xADtion just launch your ap\\xADpli\\xADca\\xADtion with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json\\n\")), mdx(\"p\", null, \"Open a browser on http://lo\\xADcal\\xADhost:8082, here it is !\"), mdx(\"p\", null, \"How does that work ? Re\\xADmem\\xADber, our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \" is using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Starter\"), \" class (pro\\xADvided by Vert.x) to launch our ap\\xADpli\\xADca\\xADtion. This class is read\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-conf\"), \" pa\\xADra\\xADme\\xADter and cre\\xADate the cor\\xADre\\xADspond\\xADing de\\xADploy\\xADment op\\xADtions when de\\xADploy\\xADing our ver\\xADti\\xADcle.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"After hav\\xADing de\\xADvel\\xADoped your first Vert.x ap\\xADpli\\xADca\\xADtion, we have seen how this ap\\xADpli\\xADca\\xADtion is con\\xADfig\\xADurable, and this with\\xADout adding any com\\xADplex\\xADity to our ap\\xADpli\\xADca\\xADtion. \", mdx(Link, {\n    href: \"/blog/some-rest-with-vert-x/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"In the next post\")), \", we are going to see how we can use vertx-\\u200Bweb to de\\xADvelop a small ap\\xADpli\\xADca\\xADtion serv\\xADing sta\\xADtic pages and a REST API. A bit more fancy, but still very sim\\xADple.\"), mdx(\"p\", null, \"Happy Cod\\xADing and \", \"&\", \" Stay Tuned!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>In <a href=\"/blog/my-first-vert-x-3-application/\">our pre­vi­ous post</a>, we de­vel­oped a very sim­ple Vert.x 3 ap­pli­ca­tion, and saw how this ap­pli­ca­tion can be tested, pack­aged and ex­e­cuted. That was nice, wasn’t it? Well, ok, that was only the be­gin­ning. In this post, we are going to en­hance our ap­pli­ca­tion to sup­port <em>ex­ter­nal</em> con­fig­u­ra­tion.</p><p>So just to re­mind you, we have an ap­pli­ca­tion start­ing a HTTP server on the port 8080 and re­ply­ing a po­lite “Hello” mes­sage to all HTTP re­quests. The pre­vi­ous code is avail­able <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-1\">here</a>. The code de­vel­oped in this post is in the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-2\">post-2 branch</a>.</p><h2 id=\"so-why-do-we-need-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#so-why-do-we-need-configuration\"></a>So, why do we need configuration?</h2><p>That’s a good ques­tion. The ap­pli­ca­tion works right now, but well, let’s say you want to de­ploy it on a ma­chine where the port 8080 is al­ready taken. We would need to change the port in the ap­pli­ca­tion code and in the test, just for this ma­chine. That would be sad. For­tu­nately, Vert.x ap­pli­ca­tions are con­fig­urable.</p><p>Vert.x con­fig­u­ra­tions are using the JSON for­mat, so don’t ex­pect any­thing com­pli­cated. They can be passed to ver­ti­cle ei­ther from the com­mand line, or using an API. Let’s have a look.</p><h2 id=\"no-8080-anymore\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#no-8080-anymore\"></a>No ‘8080’ anymore</h2><p>The first step is to mod­ify the <code>io.vertx.blog.first.MyFirstVerticle</code> class to not bind to the port 8080, but to read it from the con­fig­u­ra­tion:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(Future&lt;Void&gt; fut)</span> </span>{\n  vertx\n      .createHttpServer()\n      .requestHandler(r -&gt; {\n        r.response().end(<span class=\"hljs-string\">&quot;&lt;h1&gt;Hello from my first &quot;</span> +\n            <span class=\"hljs-string\">&quot;Vert.x 3 application&lt;/h1&gt;&quot;</span>);\n      })\n      .listen(\n          <span class=\"hljs-comment\">// Retrieve the port from the configuration,</span>\n          <span class=\"hljs-comment\">// default to 8080.</span>\n          config().getInteger(<span class=\"hljs-string\">&quot;http.port&quot;</span>, <span class=\"hljs-number\">8080</span>),\n          result -&gt; {\n            <span class=\"hljs-keyword\">if</span> (result.succeeded()) {\n              fut.complete();\n            } <span class=\"hljs-keyword\">else</span> {\n              fut.fail(result.cause());\n            }\n          }\n      );\n}\n</code></pre><p>So, the only dif­fer­ence with the pre­vi­ous ver­sion is <code>config().getInteger(&quot;http.port&quot;, 8080)</code>. Here, our code is now re­quest­ing the con­fig­u­ra­tion and check whether the <em>http.port</em> prop­erty is set. If not, the port 8080 is used as fall-​back. The re­trieved con­fig­u­ra­tion is a <code>JsonObject</code>.</p><p>As we are using the port 8080 by de­fault, you can still pack­age our ap­pli­ca­tion and run it as be­fore:</p><pre><code class=\"hljs language-bash\">mvn clean package\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\n</code></pre><p>Sim­ple right ?</p><h2 id=\"api-based-configuration---random-port-for-the-tests\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#api-based-configuration---random-port-for-the-tests\"></a>API-based configuration - Random port for the tests</h2><p>Now that the ap­pli­ca­tion is con­fig­urable, let’s try to pro­vide a con­fig­u­ra­tion. In our test, we are going to con­fig­ure our ap­pli­ca­tion to use the port 8081. So, pre­vi­ously we were de­ploy­ing our ver­ti­cle with:</p><pre><code class=\"hljs language-java\">vertx.deployVerticle(MyFirstVerticle.class.getName(), context.asyncAssertSuccess());\n</code></pre><p>Let’s now pass some <em>de­ploy­ment op­tions</em>:</p><pre><code class=\"hljs language-java\">port = <span class=\"hljs-number\">8081</span>;\nDeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port));\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\n</code></pre><p>The <code>DeploymentOptions</code> ob­ject lets us cus­tomize var­i­ous pa­ra­me­ters. In par­tic­u­lar, it lets us in­ject the <code>JsonObject</code> re­trieved by the ver­ti­cle when using the <code>config()</code> method.</p><p>Ob­vi­ously, the test con­nect­ing to the server needs to be slightly mod­i­fied to use the right port (<code>port</code> is a field):</p><pre><code class=\"hljs language-java\">vertx.createHttpClient().getNow(port, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>, response -&gt; {\n  response.handler(body -&gt; {\n    context.assertTrue(body.toString().contains(<span class=\"hljs-string\">&quot;Hello&quot;</span>));\n    async.complete();\n  });\n});\n</code></pre><p>Ok, well, this does not re­ally fix our issue. What hap­pens when the port 8081 is used too. Let’s now pick a ran­dom port:</p><pre><code class=\"hljs language-java\">ServerSocket socket = <span class=\"hljs-keyword\">new</span> ServerSocket(<span class=\"hljs-number\">0</span>);\nport = socket.getLocalPort();\nsocket.close();\n\nDeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port));\n\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\n</code></pre><p>So, the idea is very sim­ple. We open a <em>server socket</em> that would pick a ran­dom port (that’s why we put 0 as pa­ra­me­ter). We re­trieve the used port and close the socket. Be aware that this method is <strong>not</strong> per­fect and may fail if the picked port be­comes used be­tween the <code>close</code> method and the start of our HTTP server. How­ever, it would work fine in the very high ma­jor­ity of the case.</p><p>With this in place, our test is now using a ran­dom port. Ex­e­cute them with:</p><pre><code class=\"hljs language-bash\">mvn clean <span class=\"hljs-built_in\">test</span>\n</code></pre><h2 id=\"external-configuration---lets-run-on-another-port\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#external-configuration---lets-run-on-another-port\"></a>External configuration - Let’s run on another port</h2><p>Ok, well ran­dom port is not what we want in <em>pro­duc­tion</em>. Could you imag­ine the face of your pro­duc­tion team if you tell them that your ap­pli­ca­tion is pick­ing a ran­dom port. It can ac­tu­ally be funny, but we should never mess with the pro­duc­tion team.</p><p>So for the ac­tual ex­e­cu­tion of your ap­pli­ca­tion, let’s pass the con­fig­u­ra­tion in an ex­ter­nal file. The con­fig­u­ra­tion is stored in a <em>json</em> file.</p><p>Cre­ate the <code>src/main/conf/my-application-conf.json</code> with the fol­low­ing con­tent:</p><pre><code class=\"hljs language-javascript\">{\n  <span class=\"hljs-string\">&quot;http.port&quot;</span> : <span class=\"hljs-number\">8082</span>\n}\n</code></pre><p>And now, to use this con­fig­u­ra­tion just launch your ap­pli­ca­tion with:</p><pre><code class=\"hljs language-bash\">java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json\n</code></pre><p>Open a browser on http://lo­cal­host:8082, here it is !</p><p>How does that work ? Re­mem­ber, our <em>fat jar</em> is using the <code>Starter</code> class (pro­vided by Vert.x) to launch our ap­pli­ca­tion. This class is read­ing the <code>-conf</code> pa­ra­me­ter and cre­ate the cor­re­spond­ing de­ploy­ment op­tions when de­ploy­ing our ver­ti­cle.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>After hav­ing de­vel­oped your first Vert.x ap­pli­ca­tion, we have seen how this ap­pli­ca­tion is con­fig­urable, and this with­out adding any com­plex­ity to our ap­pli­ca­tion. <a href=\"/blog/some-rest-with-vert-x/\">In the next post</a>, we are going to see how we can use vertx-​web to de­velop a small ap­pli­ca­tion serv­ing sta­tic pages and a REST API. A bit more fancy, but still very sim­ple.</p><p>Happy Cod­ing and <!-- -->&amp;<!-- --> Stay Tuned!</p>","scope":{}}},"prevPost":{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},"nextPost":{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"}]},"__N_SSG":true}