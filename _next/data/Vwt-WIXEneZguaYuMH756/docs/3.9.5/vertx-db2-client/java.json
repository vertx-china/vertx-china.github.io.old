{"pageProps":{"slug":"3.9.5/vertx-db2-client/java","title":"Reactive DB2 Client","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">Usage</a></li>\n<li><a href=\"#_getting_started\">Getting started</a></li>\n<li><a href=\"#_connecting_to_db2\">Connecting to DB2</a></li>\n<li><a href=\"#_configuration\">Configuration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_object\">data object</a></li>\n<li><a href=\"#_connection_uri\">connection uri</a></li>\n</ul>\n</li>\n<li><a href=\"#_running_queries\">Running queries</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_prepared_queries\">Prepared queries</a></li>\n<li><a href=\"#_batches\">Batches</a></li>\n</ul>\n</li>\n<li><a href=\"#_using_connections\">Using connections</a></li>\n<li><a href=\"#_using_transactions\">Using transactions</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_transactions_with_connections\">Transactions with connections</a></li>\n<li><a href=\"#_simplified_transaction_api\">Simplified transaction API</a></li>\n</ul>\n</li>\n<li><a href=\"#_cursors_and_streaming\">Cursors and streaming</a></li>\n<li><a href=\"#_db2_type_mapping\">DB2 type mapping</a></li>\n<li><a href=\"#_using_java_enum_types\">Using Java enum types</a></li>\n<li><a href=\"#_collector_queries\">Collector queries</a></li>\n<li><a href=\"#_using_ssltls\">Using SSL/TLS</a></li>\n<li><a href=\"#_using_a_proxy\">Using a proxy</a></li>\n</ul>\n</div>","contents":"<h1>Reactive DB2 Client</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Reactive DB2 Client is a client for DB2 with a straightforward API focusing on\nscalability and low overhead.</p>\n</div>\n<div class=\"paragraph\">\n<p>The client is reactive and non blocking, allowing to handle many database connections with a single thread.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Features</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Support for DB2 on Linux, Unix, and Windows</p>\n</li>\n<li>\n<p>Limited support for DB2 on z/OS</p>\n</li>\n<li>\n<p>Event driven</p>\n</li>\n<li>\n<p>Lightweight</p>\n</li>\n<li>\n<p>Built-in connection pooling</p>\n</li>\n<li>\n<p>Prepared queries caching</p>\n</li>\n<li>\n<p>Batch and cursor</p>\n</li>\n<li>\n<p>Row streaming</p>\n</li>\n<li>\n<p>RxJava 1 and RxJava 2</p>\n</li>\n<li>\n<p>Direct memory to object without unnecessary copies</p>\n</li>\n<li>\n<p>Java 8 Date and Time</p>\n</li>\n<li>\n<p>SSL/TLS</p>\n</li>\n<li>\n<p>HTTP/1.x CONNECT, SOCKS4a or SOCKS5 proxy support</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><strong>Current limitations</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>No stored procedures support</p>\n</li>\n<li>\n<p>Some column types (e.g. BLOB and CLOB) are not supported</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Reactive DB2 Client add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-db2-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'io.vertx:vertx-db2-client:3.9.5'</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Here is the simplest way to connect, query and disconnect</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the client pool</span>\nDB2Pool client = DB2Pool.pool(connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// A simple query</span>\nclient\n  .query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; result = ar.result();\n    System.out.println(<span class=\"hljs-string\">\"Got \"</span> + result.size() + <span class=\"hljs-string\">\" rows \"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n\n  <span class=\"hljs-comment\">// Now close the pool</span>\n  client.close();\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connecting_to_db2\"><a class=\"anchor\" href=\"#_connecting_to_db2\"></a>Connecting to DB2</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Most of the time you will use a pool to connect to DB2:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\nDB2Pool client = DB2Pool.pool(connectOptions, poolOptions);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The pooled client uses a connection pool and any operation will borrow a connection from the pool\nto execute the operation and release it to the pool.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are running with Vert.x you can pass it your Vertx instance:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-comment\">// Create the pooled client</span>\nDB2Pool client = DB2Pool.pool(vertx, connectOptions, poolOptions);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You need to release the pool when you don&#8217;t need it anymore:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.close();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you need to execute several operations on the same connection, you need to use a client\n<code><a href=\"../../apidocs/io/vertx/db2client/DB2Connection.html\">connection</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can easily get one from the pool:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\nDB2Pool client = DB2Pool.pool(vertx, connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// Get a connection from the pool</span>\nclient.getConnection(ar1 -&gt; {\n\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n\n    System.out.println(<span class=\"hljs-string\">\"Connected\"</span>);\n\n    <span class=\"hljs-comment\">// Obtain our connection</span>\n    SqlConnection conn = ar1.result();\n\n    <span class=\"hljs-comment\">// All operations execute on the same connection</span>\n    conn\n      .query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>)\n      .execute(ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n        conn\n          .query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='emad'\"</span>)\n          .execute(ar3 -&gt; {\n          <span class=\"hljs-comment\">// Release the connection to the pool</span>\n          conn.close();\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Release the connection to the pool</span>\n        conn.close();\n      }\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Could not connect: \"</span> + ar1.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you are done with the connection you must close it to release it to the pool, so it can be reused.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuration\"><a class=\"anchor\" href=\"#_configuration\"></a>Configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are several alternatives for you to configure the client.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_object\"><a class=\"anchor\" href=\"#_data_object\"></a>data object</h3>\n<div class=\"paragraph\">\n<p>A simple way to configure the client is to specify a <code>DB2ConnectOptions</code> data object.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool Options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions().setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pool from the data object</span>\nDB2Pool pool = DB2Pool.pool(vertx, connectOptions, poolOptions);\n\npool.getConnection(ar -&gt; {\n  <span class=\"hljs-comment\">// Handling your connection</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also configure the generic properties with the <code>setProperties</code> or <code>addProperty</code> methods. Note <code>setProperties</code> will override the default client properties.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_connection_uri\"><a class=\"anchor\" href=\"#_connection_uri\"></a>connection uri</h3>\n<div class=\"paragraph\">\n<p>Apart from configuring with a <code>DB2ConnectOptions</code> data object, We also provide you an alternative way to connect when you want to configure with a connection URI:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String connectionUri = <span class=\"hljs-string\">\"db2://dbuser:secretpassword@database.server.com:50000/mydb\"</span>;\n\n<span class=\"hljs-comment\">// Create the pool from the connection URI</span>\nDB2Pool pool = DB2Pool.pool(connectionUri);\n\n<span class=\"hljs-comment\">// Create the connection from the connection URI</span>\nDB2Connection.connect(vertx, connectionUri, res -&gt; {\n  <span class=\"hljs-comment\">// Handling your connection</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The URI format for a connection string is:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>db2://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;HOSTNAME&gt;:&lt;PORT&gt;/&lt;DBNAME&gt;</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Currently the client supports the following parameter key words in connection uri</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>host</p>\n</li>\n<li>\n<p>port</p>\n</li>\n<li>\n<p>user</p>\n</li>\n<li>\n<p>password</p>\n</li>\n<li>\n<p>dbname</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Note: configuring properties in connection URI will override the default properties.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_running_queries\"><a class=\"anchor\" href=\"#_running_queries\"></a>Running queries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you don&#8217;t need a transaction or run single queries, you can run queries directly on the pool; the pool\nwill use one of its connection to run the query and return the result to you.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is how to run simple queries:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='andy'\"</span>)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; result = ar.result();\n    System.out.println(<span class=\"hljs-string\">\"Got \"</span> + result.size() + <span class=\"hljs-string\">\" rows \"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_prepared_queries\"><a class=\"anchor\" href=\"#_prepared_queries\"></a>Prepared queries</h3>\n<div class=\"paragraph\">\n<p>You can do the same with prepared queries.</p>\n</div>\n<div class=\"paragraph\">\n<p>The SQL string can refer to parameters by position, using the database syntax `?`​</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .preparedQuery(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id=$1\"</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">\"andy\"</span>), ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    System.out.println(<span class=\"hljs-string\">\"Got \"</span> + rows.size() + <span class=\"hljs-string\">\" rows \"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Query methods provides an asynchronous <code><a href=\"../../apidocs/io/vertx/sqlclient/RowSet.html\">RowSet</a></code> instance that works for <em>SELECT</em> queries</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .preparedQuery(<span class=\"hljs-string\">\"SELECT first_name, last_name FROM users\"</span>)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    <span class=\"hljs-keyword\">for</span> (Row row : rows) {\n      System.out.println(<span class=\"hljs-string\">\"User \"</span> + row.getString(<span class=\"hljs-number\">0</span>) + <span class=\"hljs-string\">\" \"</span> + row.getString(<span class=\"hljs-number\">1</span>));\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or <em>UPDATE</em>/<em>INSERT</em> queries:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .preparedQuery(<span class=\"hljs-string\">\"INSERT INTO users (first_name, last_name) VALUES ($1, $2)\"</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">\"Andy\"</span>, <span class=\"hljs-string\">\"Guibert\"</span>),  ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    System.out.println(rows.rowCount());\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> gives you access to your data by index</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">System.out.println(<span class=\"hljs-string\">\"User \"</span> + row.getString(<span class=\"hljs-number\">0</span>) + <span class=\"hljs-string\">\" \"</span> + row.getString(<span class=\"hljs-number\">1</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or by name</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">System.out.println(<span class=\"hljs-string\">\"User \"</span> + row.getString(<span class=\"hljs-string\">\"first_name\"</span>) + <span class=\"hljs-string\">\" \"</span> + row.getString(<span class=\"hljs-string\">\"last_name\"</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The client will not do any magic here and the column name is identified with the name in the table regardless of how your SQL text is.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can access a wide variety of of types</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String firstName = row.getString(<span class=\"hljs-string\">\"first_name\"</span>);\nBoolean male = row.getBoolean(<span class=\"hljs-string\">\"male\"</span>);\nInteger age = row.getInteger(<span class=\"hljs-string\">\"age\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can use cached prepared statements to execute one-shot prepared queries:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connectOptions.setCachePreparedStatements(<span class=\"hljs-keyword\">true</span>);\nclient\n  .preparedQuery(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id = ?\"</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">\"julien\"</span>), ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      RowSet&lt;Row&gt; rows = ar.result();\n      System.out.println(<span class=\"hljs-string\">\"Got \"</span> + rows.size() + <span class=\"hljs-string\">\" rows \"</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can create a <code>PreparedStatement</code> and manage the lifecycle by yourself.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">sqlConnection\n  .prepare(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id= ?\"</span>, ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      PreparedStatement preparedStatement = ar.result();\n      preparedStatement.query()\n        .execute(Tuple.of(<span class=\"hljs-string\">\"julien\"</span>), ar2 -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n            RowSet&lt;Row&gt; rows = ar2.result();\n            System.out.println(<span class=\"hljs-string\">\"Got \"</span> + rows.size() + <span class=\"hljs-string\">\" rows \"</span>);\n            preparedStatement.close();\n          } <span class=\"hljs-keyword\">else</span> {\n            System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar2.cause().getMessage());\n          }\n        });\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_batches\"><a class=\"anchor\" href=\"#_batches\"></a>Batches</h3>\n<div class=\"paragraph\">\n<p>You can execute prepared batch</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">List&lt;Tuple&gt; batch = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\nbatch.add(Tuple.of(<span class=\"hljs-string\">\"julien\"</span>, <span class=\"hljs-string\">\"Julient Viet\"</span>));\nbatch.add(Tuple.of(<span class=\"hljs-string\">\"emad\"</span>, <span class=\"hljs-string\">\"Emad Alblueshi\"</span>));\nbatch.add(Tuple.of(<span class=\"hljs-string\">\"andy\"</span>, <span class=\"hljs-string\">\"Andy Guibert\"</span>));\n\n<span class=\"hljs-comment\">// Execute the prepared batch</span>\nclient\n  .preparedQuery(<span class=\"hljs-string\">\"INSERT INTO USERS (id, name) VALUES ($1, $2)\"</span>)\n  .executeBatch(batch, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n\n    <span class=\"hljs-comment\">// Process rows</span>\n    RowSet&lt;Row&gt; rows = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Batch failed \"</span> + res.cause());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can fetch generated keys by wrapping your query in <code>SELECT &lt;COLUMNS&gt; FROM FINAL TABLE ( &lt;SQL&gt; )</code>, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .preparedQuery(<span class=\"hljs-string\">\"SELECT color_id FROM FINAL TABLE ( INSERT INTO color (color_name) VALUES (?), (?), (?) )\"</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>), ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    System.out.println(<span class=\"hljs-string\">\"Inserted \"</span> + rows.rowCount() + <span class=\"hljs-string\">\" new rows.\"</span>);\n    <span class=\"hljs-keyword\">for</span> (Row row : rows) {\n      System.out.println(<span class=\"hljs-string\">\"generated key: \"</span> + row.getInteger(<span class=\"hljs-string\">\"color_id\"</span>));\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_connections\"><a class=\"anchor\" href=\"#_using_connections\"></a>Using connections</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you need to execute sequential queries (without a transaction), you can create a new connection\nor borrow one from the pool:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.getConnection(ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    SqlConnection connection = ar1.result();\n\n    connection\n      .query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='andy'\"</span>)\n      .execute(ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n        connection\n          .query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>)\n          .execute(ar3 -&gt; {\n          <span class=\"hljs-comment\">// Do something with rows and return the connection to the pool</span>\n          connection.close();\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Return the connection to the pool</span>\n        connection.close();\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Prepared queries can be created:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">\"SELECT * FROM users WHERE first_name LIKE $1\"</span>, ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    PreparedStatement pq = ar1.result();\n    pq.query().execute(Tuple.of(<span class=\"hljs-string\">\"andy\"</span>), ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n        <span class=\"hljs-comment\">// All rows</span>\n        RowSet&lt;Row&gt; rows = ar2.result();\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_transactions\"><a class=\"anchor\" href=\"#_using_transactions\"></a>Using transactions</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_transactions_with_connections\"><a class=\"anchor\" href=\"#_transactions_with_connections\"></a>Transactions with connections</h3>\n<div class=\"paragraph\">\n<p>You can execute transaction using SQL <code>BEGIN</code>/<code>COMMIT</code>/<code>ROLLBACK</code>, if you do so you must use\na <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnection.html\">SqlConnection</a></code> and manage it yourself.</p>\n</div>\n<div class=\"paragraph\">\n<p>Or you can use the transaction API of <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnection.html\">SqlConnection</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.getConnection(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n\n    <span class=\"hljs-comment\">// Transaction must use a connection</span>\n    SqlConnection conn = res.result();\n\n    <span class=\"hljs-comment\">// Begin the transaction</span>\n    Transaction tx = conn.begin();\n\n    <span class=\"hljs-comment\">// Various statements</span>\n    conn\n      .query(<span class=\"hljs-string\">\"INSERT INTO Users (first_name,last_name) VALUES ('Julien','Viet')\"</span>)\n      .execute(ar1 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n        conn\n          .query(<span class=\"hljs-string\">\"INSERT INTO Users (first_name,last_name) VALUES ('Emad','Alblueshi')\"</span>)\n          .execute(ar2 -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n            <span class=\"hljs-comment\">// Commit the transaction</span>\n            tx.commit(ar3 -&gt; {\n              <span class=\"hljs-keyword\">if</span> (ar3.succeeded()) {\n                System.out.println(<span class=\"hljs-string\">\"Transaction succeeded\"</span>);\n              } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">\"Transaction failed \"</span> + ar3.cause().getMessage());\n              }\n              <span class=\"hljs-comment\">// Return the connection to the pool</span>\n              conn.close();\n            });\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Return the connection to the pool</span>\n            conn.close();\n          }\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Return the connection to the pool</span>\n        conn.close();\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When the database server reports the current transaction is failed (e.g the infamous <em>current transaction is aborted, commands ignored until\nend of transaction block</em>), the transaction is rollbacked and the <code><a href=\"../../apidocs/io/vertx/sqlclient/Transaction.html#abortHandler-io.vertx.core.Handler-\">abortHandler</a></code>\nis called:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">tx.abortHandler(v -&gt; {\n  System.out.println(<span class=\"hljs-string\">\"Transaction failed =&gt; rollbacked\"</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_simplified_transaction_api\"><a class=\"anchor\" href=\"#_simplified_transaction_api\"></a>Simplified transaction API</h3>\n<div class=\"paragraph\">\n<p>When you use a pool, you can start a transaction directly on the pool.</p>\n</div>\n<div class=\"paragraph\">\n<p>It borrows a connection from the pool, begins the transaction and releases the connection to the pool when the transaction ends.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.begin(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n\n    <span class=\"hljs-comment\">// Get the transaction</span>\n    Transaction tx = res.result();\n\n    <span class=\"hljs-comment\">// Various statements</span>\n    tx.query(<span class=\"hljs-string\">\"INSERT INTO Users (first_name,last_name) VALUES ('Julien','Viet')\"</span>)\n      .execute(ar1 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n        tx.query(<span class=\"hljs-string\">\"INSERT INTO Users (first_name,last_name) VALUES ('Emad','Alblueshi')\"</span>)\n          .execute(ar2 -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n            <span class=\"hljs-comment\">// Commit the transaction</span>\n            <span class=\"hljs-comment\">// the connection will automatically return to the pool</span>\n            tx.commit(ar3 -&gt; {\n              <span class=\"hljs-keyword\">if</span> (ar3.succeeded()) {\n                System.out.println(<span class=\"hljs-string\">\"Transaction succeeded\"</span>);\n              } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">\"Transaction failed \"</span> + ar3.cause().getMessage());\n              }\n            });\n          }\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// No need to close connection as transaction will abort and be returned to the pool</span>\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nthis code will not close the connection because it will always be released back to the pool when the transaction\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cursors_and_streaming\"><a class=\"anchor\" href=\"#_cursors_and_streaming\"></a>Cursors and streaming</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>By default prepared query execution fetches all rows, you can use a\n<code><a href=\"../../apidocs/io/vertx/sqlclient/Cursor.html\">Cursor</a></code> to control the amount of rows you want to read:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">\"SELECT * FROM users WHERE age &gt; ?\"</span>, ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    PreparedStatement pq = ar1.result();\n\n    <span class=\"hljs-comment\">// Create a cursor</span>\n    Cursor cursor = pq.cursor(Tuple.of(<span class=\"hljs-number\">18</span>));\n\n    <span class=\"hljs-comment\">// Read 50 rows</span>\n    cursor.read(<span class=\"hljs-number\">50</span>, ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n        RowSet&lt;Row&gt; rows = ar2.result();\n\n        <span class=\"hljs-comment\">// Check for more ?</span>\n        <span class=\"hljs-keyword\">if</span> (cursor.hasMore()) {\n          <span class=\"hljs-comment\">// Repeat the process...</span>\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-comment\">// No more rows - close the cursor</span>\n          cursor.close();\n        }\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Cursors shall be closed when they are released prematurely:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">cursor.read(<span class=\"hljs-number\">50</span>, ar2 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n    <span class=\"hljs-comment\">// Close the cursor</span>\n    cursor.close();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>A stream API is also available for cursors, which can be more convenient, specially with the Rxified version.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">\"SELECT * FROM users WHERE age &gt; ?\"</span>, ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    PreparedStatement pq = ar1.result();\n\n    <span class=\"hljs-comment\">// Fetch 50 rows at a time</span>\n    RowStream&lt;Row&gt; stream = pq.createStream(<span class=\"hljs-number\">50</span>, Tuple.of(<span class=\"hljs-number\">18</span>));\n\n    <span class=\"hljs-comment\">// Use the stream</span>\n    stream.exceptionHandler(err -&gt; {\n      System.out.println(<span class=\"hljs-string\">\"Error: \"</span> + err.getMessage());\n    });\n    stream.endHandler(v -&gt; {\n      System.out.println(<span class=\"hljs-string\">\"End of stream\"</span>);\n    });\n    stream.handler(row -&gt; {\n      System.out.println(<span class=\"hljs-string\">\"User: \"</span> + row.getString(<span class=\"hljs-string\">\"last_name\"</span>));\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The stream read the rows by batch of <code>50</code> and stream them, when the rows have been passed to the handler,\na new batch of <code>50</code> is read and so on.</p>\n</div>\n<div class=\"paragraph\">\n<p>The stream can be resumed or paused, the loaded rows will remain in memory until they are delivered and the cursor\nwill stop iterating.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_db2_type_mapping\"><a class=\"anchor\" href=\"#_db2_type_mapping\"></a>DB2 type mapping</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Currently the client supports the following DB2 types</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>BOOLEAN (<code>java.lang.Boolean</code>) (DB2 LUW only)</p>\n</li>\n<li>\n<p>SMALLINT (<code>java.lang.Short</code>)</p>\n</li>\n<li>\n<p>INTEGER (<code>java.lang.Integer</code>)</p>\n</li>\n<li>\n<p>BIGINT (<code>java.lang.Long</code>)</p>\n</li>\n<li>\n<p>REAL (<code>java.lang.Float</code>)</p>\n</li>\n<li>\n<p>DOUBLE (<code>java.lang.Double</code>)</p>\n</li>\n<li>\n<p>DECIMAL (<code>io.vertx.sqlclient.data.Numeric</code>)</p>\n</li>\n<li>\n<p>CHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>VARCHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>ENUM (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>DATE (<code>java.time.LocalDate</code>)</p>\n</li>\n<li>\n<p>TIME (<code>java.time.LocalTime</code>)</p>\n</li>\n<li>\n<p>TIMESTAMP (<code>java.time.LocalDateTime</code>)</p>\n</li>\n<li>\n<p>BINARY (<code>byte[]</code>)</p>\n</li>\n<li>\n<p>VARBINARY (<code>byte[]</code>)</p>\n</li>\n<li>\n<p>ROWID (<code>io.vertx.db2client.impl.drda.DB2RowId</code> or <code>java.sql.RowId</code>) (DB2 z/OS only)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Some types that are currently NOT supported are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>XML</p>\n</li>\n<li>\n<p>BLOB</p>\n</li>\n<li>\n<p>CLOB</p>\n</li>\n<li>\n<p>DBCLOB</p>\n</li>\n<li>\n<p>GRAPHIC / VARGRAPHIC</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>For a further documentation on DB2 data types, see the following resources:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://www.ibm.com/support/knowledgecenter/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008483.html\">DB2 for LUW 11.5 data types</a></p>\n</li>\n<li>\n<p><a href=\"https://www.ibm.com/support/knowledgecenter/SSEPEK_12.0.0/sqlref/src/tpc/db2z_datatypesintro.html\">DB2 for z/OS 12.0 data types</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Tuple decoding uses the above types when storing values, it also performs on the fly conversion of the actual value when possible:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool\n  .query(<span class=\"hljs-string\">\"SELECT an_int_column FROM exampleTable\"</span>)\n  .execute(ar -&gt; {\n  RowSet&lt;Row&gt; rowSet = ar.result();\n  Row row = rowSet.iterator().next();\n\n  <span class=\"hljs-comment\">// Stored as INTEGER column type and represented as java.lang.Integer</span>\n  Object value = row.getValue(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-comment\">// Convert to java.lang.Long</span>\n  Long longValue = row.getLong(<span class=\"hljs-number\">0</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_java_enum_types\"><a class=\"anchor\" href=\"#_using_java_enum_types\"></a>Using Java enum types</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can map Java <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">enum types</a> to these column\ntypes:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Strings (VARCHAR, TEXT)</p>\n</li>\n<li>\n<p>Numbers (SMALLINT, INTEGER, BIGINT)</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.preparedQuery(<span class=\"hljs-string\">\"SELECT day_name FROM FINAL TABLE ( INSERT INTO days (day_name) VALUES (?), (?), (?) )\"</span>)\n.execute(Tuple.of(Days.FRIDAY, Days.SATURDAY, Days.SUNDAY), ar -&gt; {\n <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n  RowSet&lt;Row&gt; rows = ar.result();\n  System.out.println(<span class=\"hljs-string\">\"Inserted \"</span> + rows.rowCount() + <span class=\"hljs-string\">\" new rows\"</span>);\n  <span class=\"hljs-keyword\">for</span> (Row row : rows) {\n\t  System.out.println(<span class=\"hljs-string\">\"Day: \"</span> + row.getValues(Days<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">row</span>.<span class=\"hljs-title\">getColumnIndex</span>(\"<span class=\"hljs-title\">day_name</span>\")))</span>;\n  }\n } <span class=\"hljs-keyword\">else</span> {\n  System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n }\n});\nclient.preparedQuery(<span class=\"hljs-string\">\"SELECT day_num FROM FINAL TABLE ( INSERT INTO days (day_num) VALUES (?), (?), (?) )\"</span>)\n.execute(Tuple.of(Days.FRIDAY.ordinal(), Days.SATURDAY.ordinal(), Days.SUNDAY.ordinal()), ar -&gt; {\n <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n  RowSet&lt;Row&gt; rows = ar.result();\n  System.out.println(<span class=\"hljs-string\">\"Inserted \"</span> + rows.rowCount() + <span class=\"hljs-string\">\" new rows\"</span>);\n  <span class=\"hljs-keyword\">for</span> (Row row : rows) {\n\t  System.out.println(<span class=\"hljs-string\">\"Day: \"</span> + row.getValues(Days<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">row</span>.<span class=\"hljs-title\">getColumnIndex</span>(\"<span class=\"hljs-title\">day_num</span>\")))</span>;\n  }\n } <span class=\"hljs-keyword\">else</span> {\n  System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The String type is matched with the Java enum&#8217;s name returned by the <code>name()</code> method.</p>\n</div>\n<div class=\"paragraph\">\n<p>Number types are matched with the Java enum&#8217;s ordinal returned by the <code>ordinal()</code> method and the row.get() method returns the corresponding enum&#8217;s <code>name()</code> value at the ordinal position of the integer value retrieved.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_collector_queries\"><a class=\"anchor\" href=\"#_collector_queries\"></a>Collector queries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can use Java collectors with the query API:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Collector&lt;Row, ?, Map&lt;Long, String&gt;&gt; collector = Collectors.toMap(\n  row -&gt; row.getLong(<span class=\"hljs-string\">\"id\"</span>),\n  row -&gt; row.getString(<span class=\"hljs-string\">\"last_name\"</span>));\n\n<span class=\"hljs-comment\">// Run the query with the collector</span>\nclient.query(<span class=\"hljs-string\">\"SELECT * FROM users\"</span>)\n  .collecting(collector)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    SqlResult&lt;Map&lt;Long, String&gt;&gt; result = ar.result();\n\n    <span class=\"hljs-comment\">// Get the map created by the collector</span>\n    Map&lt;Long, String&gt; map = result.value();\n    System.out.println(<span class=\"hljs-string\">\"Got \"</span> + map);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The collector processing must not keep a reference on the <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> as\nthere is a single row used for processing the entire set.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Java <code>Collectors</code> provides many interesting predefined collectors, for example you can\ncreate easily create a string directly from the row set:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Collector&lt;Row, ?, String&gt; collector = Collectors.mapping(\n  row -&gt; row.getString(<span class=\"hljs-string\">\"last_name\"</span>),\n  Collectors.joining(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\"(\"</span>, <span class=\"hljs-string\">\")\"</span>)\n);\n\n<span class=\"hljs-comment\">// Run the query with the collector</span>\nclient.query(<span class=\"hljs-string\">\"SELECT * FROM users\"</span>).collecting(collector).execute(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      SqlResult&lt;String&gt; result = ar.result();\n\n      <span class=\"hljs-comment\">// Get the string created by the collector</span>\n      String list = result.value();\n      System.out.println(<span class=\"hljs-string\">\"Got \"</span> + list);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_ssltls\"><a class=\"anchor\" href=\"#_using_ssltls\"></a>Using SSL/TLS</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To configure the client to use SSL connection, you can configure the <code><a href=\"../../apidocs/io/vertx/db2client/DB2ConnectOptions.html\">DB2ConnectOptions</a></code>\nlike a Vert.x <code>NetClient</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions options = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50001</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>)\n  .setSsl(<span class=\"hljs-keyword\">true</span>)\n  .setTrustStoreOptions(<span class=\"hljs-keyword\">new</span> JksOptions()\n      .setPath(<span class=\"hljs-string\">\"/path/to/keystore.p12\"</span>)\n      .setPassword(<span class=\"hljs-string\">\"keystoreSecret\"</span>));\n\nDB2Connection.connect(vertx, options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// Connected with SSL</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Could not connect \"</span> + res.cause());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the <a href=\"http://vertx.io/docs/vertx-core/java/#ssl\">Vert.x documentation</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_a_proxy\"><a class=\"anchor\" href=\"#_using_a_proxy\"></a>Using a proxy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can also configure the client to use an HTTP/1.x CONNECT, SOCKS4a or SOCKS5 proxy.</p>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the <a href=\"http://vertx.io/docs/vertx-core/java/#_using_a_proxy_for_client_connections\">Vert.x documentation</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::override/rxjava2.adoc[]</p>\n</div>\n</div>\n</div>","version":"3.9.5"},"__N_SSG":true}