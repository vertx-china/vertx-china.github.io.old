{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Dynamic database pool configuration with Vert.x SQL Client","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"You will learn how to achieve dynamic database configuration of the Vert.x SQL Client pool"},"date":"2021-08-11","slug":"dynamic-db-pool-config-with-sql-client","readingTime":{"text":"2 min read","minutes":1.13,"time":67800,"words":226},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\"\n    }, props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Since Vert.x 4.1.1, the SQL Client pro­vides con­nec­tion cre­ation load bal­anc­ing.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You can cre­ate a pool with a list of con­nect op­tions that the pool uses with a round robin pol­icy when it needs to cre­ate a con­nec­tion.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"List<PgConnectOptions> servers = getListOfServers();\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"PgPool\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"pool\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" PgPool.create(vertx, servers);\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Load bal­anc­ing is ac­tu­ally a helper in front of a more pow­er­ful fea­ture:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"interface\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"Pool\"\n          }), \" {\\n  ....\\n  Pool \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"connectionProvider\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Function<Context, Future<SqlConnection>> provider)\"\n          }), \";\\n  ....\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"connectionProvider\"\n        }), \" is called by the pool when it needs to cre­ate a new con­nec­tion. Here is a triv­ial ex­am­ple:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ConnectionFactory\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"factory\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"PgDriver\"\n          }), \"().connectionFactory(vertx, connectOptions);\\npool.connectionProvider(ctx -> {\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" factory.connect(ctx);\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Since the provider is asyn­chro­nous, it can be used to pro­vide dy­namic pool con­fig­u­ra­tion.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"pool.connectionProvider(ctx -> {\\n  Future<PgConnectOptions> fut = retrieveOptions();\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" fut.compose(connectOptions -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Do not forget to close later\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ConnectionFactory\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"factory\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"PgDriver\"\n          }), \"().connectionFactory(vertx, connectOptions);\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" factory.connect(ctx);\\n  });\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Im­por­tant caveat: when the con­nec­tion fac­tory be­comes use­less (e.g be­cause of a new con­fig­u­ra­tion) it must be closed\\nto re­lease its re­sources.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The SQL client does not pro­vide this fea­ture out of the box be­cause of this caveat. It is dif­fi­cult to de­ter­mine when\\nthe fac­to­ries need to be dis­posed. In­stead, we ex­pose the \", _jsx(_components.code, {\n          children: \"connectionProvider\"\n        }), \" to allow ap­pli­ca­tions to im­ple­ment it triv­ially since each\\nap­pli­ca­tion knows best how and when to re­lease the re­sources.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"},"prevPost":{"meta":{"title":"Eclipse Vert.x 4.2.0.Beta1 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"The first beta of the upcoming Vert.x 4.2 has just been released. We\n  consider it feature complete and invite the community to test it."},"date":"2021-08-25","slug":"eclipse-vertx-4-2-Beta1-released"},"nextPost":{"meta":{"title":"Eclipse Vert.x 4.1.2 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Eclipse Vert.x version 4.1.2 has just been released. It fixes quite a few bugs that have been reported by the community and provides a couple of features"},"date":"2021-07-20","slug":"eclipse-vert-x-4-1-2"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"},{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"}]},"__N_SSG":true}