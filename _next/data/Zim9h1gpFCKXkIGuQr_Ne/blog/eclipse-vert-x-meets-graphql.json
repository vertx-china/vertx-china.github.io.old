{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Eclipse Vert.x meets GraphQL","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"In this blog post, we will look at an example application written in Vert.x that uses the new GraphQL API of Gentics Mesh."},"date":"2017-11-14","slug":"eclipse-vert-x-meets-graphql","readingTime":{"text":"7 min read","minutes":6.31,"time":378600,"words":1262},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      h3: \"h3\"\n    }, props.components), {Alert} = _components;\n    if (!Alert) _missingMdxReference(\"Alert\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"I re­cently added GraphQL sup­port to \", _jsx(_components.a, {\n          href: \"https://github.com/gentics/mesh\",\n          children: \"Gen­tics Mesh\"\n        }), \" and I thought it would be a good idea to boil down the essence of my im­ple­men­ta­tion in ex­am­ple so that I could share it in a sim­pler form.\\nThe ex­am­ple I’m about to show will not cover all as­pects that I have added to the \", _jsx(_components.a, {\n          href: \"https://getmesh.io/docs/beta/graphql.html\",\n          children: \"Gen­tics Mesh API\"\n        }), \" (e.g. pag­ing, search and error han­dling) but it will give you a basic overview of the parts that I put to­gether.\\nGraphQL does not re­quire a GraphDB even if the name might sug­gest it.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Using a graphdb in com­bi­na­tion with GraphQL does nev­er­the­less pro­vide you with some ad­van­tages which I will high­light later on.\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"what-is-graphql-what-is-it-good-for\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#what-is-graphql-what-is-it-good-for\"\n        }), \"What is GraphQL? What is it good for?\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"GraphQL as the name sug­gests is a new query lan­guage which can be used to load ex­actly the amount of data which you ask for.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The query is de­fined in way that the query fields cor­re­late to the JSON data that is being re­trieved.\\nIn our Star­Wars Demo do­main model this query will load the name of human 1001 which is Darth Vader.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-css\",\n          children: [\"{\\n  vader: \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"human\"\n          }), \"(id: \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1001\"\n          }), \") {\\n    name\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Would re­sult in:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-json\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"data\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"{\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"vader\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"{\"\n          }), \"\\n      \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"name\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Darth Vader\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"}\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"}\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"the-demo-app\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#the-demo-app\"\n        }), \"The Demo App\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The demo ap­pli­ca­tion I build makes use of the \", _jsx(_components.a, {\n          href: \"https://github.com/graphql-java/graphql-java\",\n          children: \"graphql-​java\"\n        }), \" li­brary. The data is being stored in a graph data­base.\\nI use \", _jsx(_components.a, {\n          href: \"http://orientdb.com/orientdb/\",\n          children: \"Ori­entDB\"\n        }), \" in com­bi­na­tion with the \", _jsx(_components.a, {\n          href: \"https://github.com/Syncleus/Ferma\",\n          children: \"OGM Ferma\"\n        }), \" to pro­vide a data ac­cess layer.\\nGraphQL does not nec­es­sar­ily re­quire a graph data­base but in this ex­am­ple I will make use of one and high­light the ben­e­fits of using a GraphDB for my use­case.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can find the sources here: \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graphql-example\",\n          children: \"https://github.com/Jotschi/vertx-​graphql-example\"\n        })]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"data\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#data\"\n        }), \"Data\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/data/StarWarsData.java\",\n          children: \"Star­Wars­Data\"\n        }), \" class cre­ates a Graph which con­tains the Star Wars Movies and Char­ac­ters, Plan­ets and their re­la­tions.\\nThe model is fairly sim­ple. There is a sin­gle Star­Wars­Root ver­tex which acts as a start el­e­ment for var­i­ous ag­gre­ga­tion ver­tices: Movies are stored in Movie­Root, Plan­ets in Plan­et­s­Root, Char­ac­ters are stored in Hu­man­s­Root and Droid­s­Root.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The model classes are used for wrap­pers of the spe­cific graph ver­tices. The \", _jsx(_components.a, {\n          href: \"http://syncleus.com/Ferma/\",\n          children: \"Ferma OGM\"\n        }), \" is used to pro­vide these wrap­pers. Each class con­tains meth­ods which can be used to tra­verse the graph to lo­cate the needed ver­tices.\\nThe found ver­tices are in turn again wrapped and can be used to lo­cate other graph el­e­ments.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"schema\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#schema\"\n        }), \"Schema\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The next thing we need is the GraphQL schema. The schema de­scribes each el­e­ment which can be re­trieved. It also de­scribes the prop­er­ties and re­la­tion­ships for these el­e­ments.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The graphql-​java li­brary pro­vides an API to cre­ate the ob­ject types and schema in­for­ma­tion.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-scss\",\n          children: [\"private GraphQLObjectType \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"createMovieType\"\n          }), \"() {\\n  return \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"newObject\"\n          }), \"()\", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".name\"\n          }), \"(\\\"Movie\\\")\\n    \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".description\"\n          }), \"(\\\"One of the films in the Star Wars universe.\\\")\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// .title\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".field\"\n          }), \"(newFieldDefinition()\", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".name\"\n          }), \"(\\\"title\\\")\\n        \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".description\"\n          }), \"(\\\"Title of the episode.\\\")\\n        \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".type\"\n          }), \"(GraphQLString)\\n        \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".dataFetcher\"\n          }), \"((env) -> {\\n          Movie movie = env\", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".getSource\"\n          }), \"();\\n          return movie\", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".getName\"\n          }), \"();\\n        }))\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// .description\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".field\"\n          }), \"(newFieldDefinition()\", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".name\"\n          }), \"(\\\"description\\\")\\n        \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".description\"\n          }), \"(\\\"Description of the episode.\\\")\\n        \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".type\"\n          }), \"(GraphQLString))\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-selector-class\",\n            children: \".build\"\n          }), \"();\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A type can be ref­er­enced via a \", _jsx(_components.code, {\n          children: \"GraphQLTypeReference\"\n        }), \" once it has been cre­ated and added to the schema. This is es­pe­cially im­por­tant if you need to add fields which ref­er­ence other types.\\nData fetch­ers are used to ac­cess the con­text, tra­verse the graph and re­trieve prop­er­ties from graph el­e­ments.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"An­other great source to learn more about the schema op­tions is the \", _jsx(_components.a, {\n          href: \"https://github.com/graphql-java/graphql-java/blob/master/src/test/groovy/graphql/GarfieldSchema.java\",\n          children: \"Garfield­Schema\"\n        }), \" ex­am­ple.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Fi­nally all the cre­ated types must be ref­er­enced by a cen­tral ob­ject type \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/data/StarWarsSchema.java#L204\",\n          children: \"Query­Type\"\n        }), \".\\nThe query type ob­ject is ba­si­cally the root ob­ject for the query.\\nIt de­fines what query op­tions are ini­tially pos­si­ble. In our case it is pos­si­ble to load the hero of the sage, spe­cific movies, hu­mans or droids.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"verticle\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#verticle\"\n        }), \"Verticle\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/GraphQLVerticle.java\",\n          children: \"GraphQLVer­ti­cle\"\n        }), \" is used to ac­cept the GraphQL re­quest and process it.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The ver­ti­cle also con­tains a Sta­ticHan­dler to pro­vide the Graphiql Browser web in­ter­face. This in­ter­face will allow you to quickly dis­cover and ex­per­i­ment with GraphQL.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/GraphQLVerticle.java#L77\",\n          children: \"query han­dler\"\n        }), \" ac­cepts the query JSON data.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"An Ori­entDB trans­ac­tion is being opened and the query is ex­e­cuted:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"demoData.getGraph().asyncTx((tx) -> {\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Invoke the query and handle the resulting JSON\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"GraphQL\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"graphQL\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" newGraphQL(schema).build();\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ExecutionInput\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"input\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"ExecutionInput\"\n          }), \"(query, \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \", queryJson, demoData.getRoot(), extractVariables(queryJson));\\n  tx.complete(graphQL.execute(input));\\n}, (AsyncResult<ExecutionResult> rh) -> {\\n  ...\\n});\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The ex­e­cute method ini­tially needs a con­text vari­able. This con­text passed along with the query.\\nIn our case the con­text is the root el­e­ment of the graph \", _jsx(_components.code, {\n          children: \"demoData.getRoot()\"\n        }), \".\\nThis con­text el­e­ment also serves as the ini­tial source for our data fetch­ers.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\".dataFetcher((env) -> {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"StarWarsRoot\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"root\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" env.getSource();\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" root.getHero();\\n}))\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The data fetch­ers for the hero type on the other hand will be able to ac­cess the hero el­e­ment since the fetcher above re­turned the el­e­ment.\\nUsing this mech­a­nism it is pos­si­ble to tra­verse the graph. It is im­por­tant to note that each in­vo­ca­tion on the do­main model meth­ods will di­rectly ac­cess the graph data­base.\\nThis way it is pos­si­ble to in­flu­ence the graph data­base query down to the low­est level. When omit­ting a prop­erty from the graphql query it will not be loaded from the graph.\\nThus there is no need to write an ad­di­tional data ac­cess layer. All op­er­a­tions are di­rectly mapped to graph data­base.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"StarWarsRoot\"\n        }), \" Ferma class \", _jsx(_components.code, {\n          children: \"getHero()\"\n        }), \" method in turn de­fines a \", _jsx(_components.a, {\n          href: \"http://tinkerpop.apache.org/docs/3.3.0/tutorials/getting-started/#_graph_traversal_staying_simple\",\n          children: \"Tin­ker­Pop Grem­lin tra­ver­sal\"\n        }), \" which is used to load the Ver­tex which rep­re­sents the hero of the Star Wars saga.\"]\n      }), \"\\n\", _jsx(Alert, {\n        info: true,\n        children: _jsxs(_components.p, {\n          children: [_jsx(_components.a, {\n            href: \"http://tinkerpop.apache.org/\",\n            children: \"Apache Tin­ker­Pop\"\n          }), \" is an open source, vendor-​agnostic, graph frame­work / API which is sup­ported by many graph data­base ven­dors.\\nOne part of Tin­ker­Pop is the Grem­lin tra­ver­sal lan­guage which is great to query graph data­bases.\"]\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"...\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" Droid \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getHero\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Follow the HAS_ROOT edge and return the first found Vertex which could be found. \"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Wrap the Vertex explicitly in the Droid Ferma class.  \"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" traverse((g) -> g.out(HAS_HERO)).nextOrDefaultExplicit(Droid.class, \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \");\\n}\\n...\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Once the query has been ex­e­cuted the re­sult han­dler is being in­voked. It con­tains some code to process the re­sult data and po­ten­tial er­rors.\\nIt is im­por­tant to note that a GraphQL query will al­ways be an­swered with a 2xx HTTP sta­tus code.\\nIf an el­e­ment which is being ref­er­enced in the query can’t be loaded an error will be added to the re­sponse JSON ob­ject.\"\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"testing\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#testing\"\n        }), \"Testing\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Test­ing is fairly straight for­ward. Al­though there are mul­ti­ple ap­proaches. One ap­proach is to use unit test­ing di­rectly on the GraphQL types.\\nAn­other op­tion is to run queries against the end­point.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/test/java/de/jotschi/vertx/GraphQLTest.java\",\n          children: \"GraphQL­Test class\"\n        }), \" I wrote will run mul­ti­ple queries against the end­point.\\nA Pa­ra­me­ter­ized JUnit test is used it­er­ate over the queries.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.a, {\n          href: \"https://github.com/Jotschi/vertx-graphql-example/blob/master/src/test/resources/graphql/full-query\",\n          children: \"typ­i­cal query\"\n        }), \" does not only con­tain the query data.\\nThe as­ser­tions on the re­sponse JSON are di­rectly in­cluded in query using plain com­ments.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I build an \", _jsx(_components.a, {\n          href: \"http://joel-costigliola.github.io/assertj/\",\n          children: \"As­sertJ\"\n        }), \" as­ser­tion to check the com­ments of a query and ver­ify that the as­ser­tion matches the re­sponse.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-java\",\n          children: \"  assertThat(response).compliesToAssertions(queryName);\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"run-the-example\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#run-the-example\"\n        }), \"Run the example\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can run the ex­am­ple by ex­e­cut­ing the \", _jsx(_components.code, {\n          children: \"GraphQLServer\"\n        }), \" class and ac­cess the \", _jsx(_components.a, {\n          href: \"http://localhost:3000/browser/?query=%7B%0A%20%20movies%20%7B%0A%20%20%20%20title%0A%20%20%7D%0A%20%20hero%20%7B%0A%20%20%20%20name%0A%20%20%7D%0A%7D%0A\",\n          children: \"Graphiql browser on http://lo­cal­host:3000/browser/\"\n        })]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"where-to-go-from-here\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#where-to-go-from-here\"\n        }), \"Where to go from here?\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The ex­am­ple is read-​only. GraphQL also sup­ports data mu­ta­tion which can be used to ac­tu­ally mod­ify and store data.\\nI have not yet ex­plored that part of GraphQL but I as­sume it might not be that hard to add mu­ta­tion sup­port to the ex­am­ple.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ad­di­tion­ally it does not cover how to ac­tu­ally make use of such API. I re­cently \", _jsx(_components.a, {\n          href: \"https://github.com/gentics/mesh-vertx-example/\",\n          children: \"up­dated my Vert.x ex­am­ple\"\n        }), \" which shows how to use Vert.x tem­plate han­dlers to build a small server which ren­ders some pages using data which was loaded via GraphQL.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Thanks for read­ing. If you have any fur­ther ques­tions or feed­back don’t hes­i­tate to send me a tweet to \", _jsx(_components.a, {\n          href: \"https://twitter.com/Jotschi/\",\n          children: \"@Jotschi\"\n        }), \" or \", _jsx(_components.a, {\n          href: \"https://twitter.com/genticsmesh/\",\n          children: \"@gen­tic­smesh\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"TCP Client using Eclipse Vert.x, Kotlin and Gradle build","category":"guides","authors":[{"name":"Usman Saleem","github_id":"usmansaleem"}],"summary":"In this blog post, I demonstrate how to write a very simple TCP client that keeps a connection open to a custom-written server in cloud."},"date":"2017-12-20","slug":"tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build"},"nextPost":{"meta":{"title":"Eclipse Vert.x 3.5.0 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"The Vert.x team is pleased to announce the release of Eclipse Vert.x 3.5.0."},"date":"2017-10-20","slug":"eclipse-vert-x-3-5-0-released"},"relatedPosts":[{"meta":{"title":"An Introduction to the Vert.x Context Object","category":"guides","authors":[{"name":"Jez Prime","github_id":"millross"}],"summary":"Under the hood, the vert.x Context class plays a critical part in maintaining the thread-safety guarantees of verticles. Most of the time, vert.x coders don't need to make use of Context objects directly."},"date":"2017-01-31","slug":"an-introduction-to-the-vert-x-context-object"},{"meta":{"title":"JWT Authorization for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn about JWT foundations, protect routes with JWT Authorization, JWT encoded tokens, and RBAC with Keycloak"},"date":"2020-10-01","slug":"jwt-authorization-for-vert-x-with-keycloak"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}