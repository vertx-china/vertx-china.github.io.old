{"pageProps":{"slug":"4.1.1/vertx-mqtt/java","title":"Vert.x MQTT","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_mqtt\">使用 Vert.x MQTT</a></li>\n<li><a href=\"#_vert_x_mqtt_server\">Vert.x MQTT 服务端</a>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_getting_started\">开始</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_handling_client_connectiondisconnection\">处理客户端连接/断开</a></li>\n<li><a href=\"#_handling_client_connectiondisconnection_with_ssltls_support\">支持使用SSL / TLS 处理客户端连接/断开连接</a></li>\n<li><a href=\"#_handling_client_connections_via_websocket\">通过 WebSocket 处理客户端的连接</a></li>\n<li><a href=\"#_handling_client_subscriptionunsubscription_request\">处理客户端 订阅/退订 请求</a></li>\n<li><a href=\"#_handling_client_published_message\">处理客户端发布的消息</a></li>\n<li><a href=\"#_publish_message_to_the_client\">发布消息到客户端</a></li>\n<li><a href=\"#_be_notified_by_client_keep_alive\">客户端保活通知</a></li>\n<li><a href=\"#_closing_the_server\">关闭服务端</a></li>\n<li><a href=\"#_automatic_clean_up_in_verticles\">在 verticles 中自动清理</a></li>\n<li><a href=\"#_scaling_sharing_mqtt_servers\">扩展：共享 MQTT 服务器</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#_vert_x_mqtt_client\">Vert.x MQTT 客户端</a>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_getting_started_2\">开始</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_connectdisconnect\">连接建立/连接断开</a></li>\n<li><a href=\"#_subscribe_to_a_topic\">订阅主题消息</a></li>\n<li><a href=\"#_publishing_message_to_a_topic\">发布主题消息</a></li>\n<li><a href=\"#_keep_connection_with_server_alive\">与服务端保持连接</a></li>\n<li><a href=\"#_be_notified_when\">通知时机</a></li>\n<li><a href=\"#_use_proxy_protocol\">使用代理协议</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x MQTT</h1>\n\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_mqtt\"><a class=\"anchor\" href=\"#_using_vert_x_mqtt\"></a>使用 Vert.x MQTT</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>这个组件已经在 Vertx 栈中正式发布了，现在只需要在构建描述符中添加如下内容即可使用：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在 <code>pom.xml</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-mqtt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile io.<span class=\"hljs-attr\">vertx:</span>vertx-<span class=\"hljs-attr\">mqtt:</span><span class=\"hljs-number\">4.1</span><span class=\"hljs-number\">.1</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<h1 id=\"_vert_x_mqtt_server\" class=\"sect0\"><a class=\"anchor\" href=\"#_vert_x_mqtt_server\"></a>Vert.x MQTT 服务端</h1>\n<div class=\"paragraph\">\n<p>这个组件提供了一个服务，它能处理远程 <a href=\"http://mqtt.org/\">MQTT</a> 连接，通信和信息交换。\n它的API提供了一系列接收客户端原生协议消息的事件，并且提供了一些发送信息到客户端的功能。</p>\n</div>\n<div class=\"paragraph\">\n<p>它不是一个功能齐全的 MQTT broker，但可以用来建立类似的东西或者进行协议转换</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\n这个模块还处于技术预览阶段,这意味着它的API在接下来的版本中可能会改变\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>开始</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_handling_client_connectiondisconnection\"><a class=\"anchor\" href=\"#_handling_client_connectiondisconnection\"></a>处理客户端连接/断开</h3>\n<div class=\"paragraph\">\n<p>这个例子展示了如何处理一个来自远程 MQTT 客户端的请求，首先，它会创建一个 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttServer.html\">MqttServer</a></code> 实例，\n然后使用 endpointHandler 方法指定一个处理器来处理远程客户端发送的CONNECT信息，一个 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html\">MqttEndpoint</a></code>\n实例会作为 handler 的参数传入，它携带了所有与CONNECT消息相关联的主要信息，例如客户端标识符，用户名/密码，\"will\"信息，session 清除标志，协议版本和保活超时等。\n在 handler 内, <em>endpoint</em> 实例提供 accept 方法以相应的 CONNACK 消息响应远程客户端，通过这种方式，成功建立连接。\n最后，通过 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttServer.html#listen-io.vertx.core.Handler-\">listen</a></code> 方法启动一个默认的服务端（运行在 localhost 上并且默认 MQTT 端口为 1883），\n这个方法同样允许指定一个 handler 来检查是否服务器是否已经正常启动。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">MqttServer</span> <span class=\"hljs-variable\">mqttServer</span> <span class=\"hljs-operator\">=</span> MqttServer.create(vertx);\nmqttServer.endpointHandler(endpoint -&gt; {\n\n  <span class=\"hljs-comment\">// shows main connect info</span>\n  System.out.println(<span class=\"hljs-string\">&quot;MQTT client [&quot;</span> + endpoint.clientIdentifier() + <span class=\"hljs-string\">&quot;] request to connect, clean session = &quot;</span> + endpoint.isCleanSession());\n\n  <span class=\"hljs-keyword\">if</span> (endpoint.auth() != <span class=\"hljs-literal\">null</span>) {\n    System.out.println(<span class=\"hljs-string\">&quot;[username = &quot;</span> + endpoint.auth().getUsername() + <span class=\"hljs-string\">&quot;, password = &quot;</span> + endpoint.auth().getPassword() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (endpoint.will() != <span class=\"hljs-literal\">null</span>) {\n    System.out.println(<span class=\"hljs-string\">&quot;[will topic = &quot;</span> + endpoint.will().getWillTopic() + <span class=\"hljs-string\">&quot; msg = &quot;</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(endpoint.will().getWillMessageBytes()) +\n      <span class=\"hljs-string\">&quot; QoS = &quot;</span> + endpoint.will().getWillQos() + <span class=\"hljs-string\">&quot; isRetain = &quot;</span> + endpoint.will().isWillRetain() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n  }\n\n  System.out.println(<span class=\"hljs-string\">&quot;[keep alive timeout = &quot;</span> + endpoint.keepAliveTimeSeconds() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n\n  <span class=\"hljs-comment\">// accept connection from the remote client</span>\n  endpoint.accept(<span class=\"hljs-literal\">false</span>);\n\n})\n  .listen(ar -&gt; {\n\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n      System.out.println(<span class=\"hljs-string\">&quot;MQTT server is listening on port &quot;</span> + ar.result().actualPort());\n    } <span class=\"hljs-keyword\">else</span> {\n\n      System.out.println(<span class=\"hljs-string\">&quot;Error on starting the server&quot;</span>);\n      ar.cause().printStackTrace();\n    }\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当远程客户端发送一个 DISCONNECT 消息来主动断开与服务端的连接，这个 <em>endpoint</em> 实例提供了一个 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#disconnectHandler-io.vertx.core.Handler-\">disconnectHandler</a></code> 方法来指定 handler 进行处理，\n该 handler 没有参数</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">endpoint.disconnectHandler(v -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;Received disconnect from client&quot;</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_client_connectiondisconnection_with_ssltls_support\"><a class=\"anchor\" href=\"#_handling_client_connectiondisconnection_with_ssltls_support\"></a>支持使用SSL / TLS 处理客户端连接/断开连接</h3>\n<div class=\"paragraph\">\n<p>服务端支持通过 SSL/TLS 方式来授权和加密客户端的连接请求，为了做到这一点，<code><a href=\"../../apidocs/io/vertx/mqtt/MqttServerOptions.html\">MqttServerOptions</a></code> 类提供了 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttServerOptions.html#setSsl-boolean-\">setSsl</a></code>\n方法来启用 SSL/TLS(值设为 true)，以及一些其他有用的方法来配置服务端证书和相关私钥（作为 java 键存储引用，PEM 或 PFX 格式），在下面的例子中，<code><a href=\"../../apidocs/io/vertx/mqtt/MqttServerOptions.html#setKeyCertOptions-io.vertx.core.net.KeyCertOptions-\">setKeyCertOptions</a></code> 方法可以用来配置PEM格式的证书，\n这个方法需要一个 <code><a href=\"../../apidocs/io/vertx/core/net/KeyCertOptions.html\">KeyCertOptions</a></code> 接口的实例作为参数传入。与此同时，<code><a href=\"../../apidocs/io/vertx/core/net/PemKeyCertOptions.html\">PemKeyCertOptions</a></code> 类提供了\n<code><a href=\"../../apidocs/io/vertx/core/net/PemKeyCertOptions.html#setCertPath-java.lang.String-\">setCertPath</a></code> 和 <code><a href=\"../../apidocs/io/vertx/core/net/PemKeyCertOptions.html#setKeyPath-java.lang.String-\">setKeyPath</a></code> 来分别设置 服务端的证书和私钥的路径。\nMQTT 服务端需要一个 Vert.x 实例和一个上面提到的 MQTT 配置实例作为参数来启动。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">MqttServerOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MqttServerOptions</span>()\n  .setPort(<span class=\"hljs-number\">8883</span>)\n  .setKeyCertOptions(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PemKeyCertOptions</span>()\n    .setKeyPath(<span class=\"hljs-string\">&quot;./src/test/resources/tls/server-key.pem&quot;</span>)\n    .setCertPath(<span class=\"hljs-string\">&quot;./src/test/resources/tls/server-cert.pem&quot;</span>))\n  .setSsl(<span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-type\">MqttServer</span> <span class=\"hljs-variable\">mqttServer</span> <span class=\"hljs-operator\">=</span> MqttServer.create(vertx, options);\nmqttServer.endpointHandler(endpoint -&gt; {\n\n  <span class=\"hljs-comment\">// shows main connect info</span>\n  System.out.println(<span class=\"hljs-string\">&quot;MQTT client [&quot;</span> + endpoint.clientIdentifier() + <span class=\"hljs-string\">&quot;] request to connect, clean session = &quot;</span> + endpoint.isCleanSession());\n\n  <span class=\"hljs-keyword\">if</span> (endpoint.auth() != <span class=\"hljs-literal\">null</span>) {\n    System.out.println(<span class=\"hljs-string\">&quot;[username = &quot;</span> + endpoint.auth().getUsername() + <span class=\"hljs-string\">&quot;, password = &quot;</span> + endpoint.auth().getPassword() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (endpoint.will() != <span class=\"hljs-literal\">null</span>) {\n    System.out.println(<span class=\"hljs-string\">&quot;[will topic = &quot;</span> + endpoint.will().getWillTopic() + <span class=\"hljs-string\">&quot; msg = &quot;</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(endpoint.will().getWillMessageBytes()) +\n      <span class=\"hljs-string\">&quot; QoS = &quot;</span> + endpoint.will().getWillQos() + <span class=\"hljs-string\">&quot; isRetain = &quot;</span> + endpoint.will().isWillRetain() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n  }\n\n  System.out.println(<span class=\"hljs-string\">&quot;[keep alive timeout = &quot;</span> + endpoint.keepAliveTimeSeconds() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n\n  <span class=\"hljs-comment\">// accept connection from the remote client</span>\n  endpoint.accept(<span class=\"hljs-literal\">false</span>);\n\n})\n  .listen(ar -&gt; {\n\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n      System.out.println(<span class=\"hljs-string\">&quot;MQTT server is listening on port &quot;</span> + ar.result().actualPort());\n    } <span class=\"hljs-keyword\">else</span> {\n\n      System.out.println(<span class=\"hljs-string\">&quot;Error on starting the server&quot;</span>);\n      ar.cause().printStackTrace();\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_client_connections_via_websocket\"><a class=\"anchor\" href=\"#_handling_client_connections_via_websocket\"></a>通过 WebSocket 处理客户端的连接</h3>\n<div class=\"paragraph\">\n<p>如果您想要通过 WebSocket 来进行连接，可以通过 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttServerOptions.html\">MqttServerOptions</a></code> 将其启用，\n调用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttServerOptions.html#setUseWebSocket-boolean-\">setUseWebSocket</a></code> 方法并设置参数为 <code>true</code> ，\n它将会监听 <code>/mqtt</code> 路径上所有的 websocket 连接。</p>\n</div>\n<div class=\"paragraph\">\n<p>与其他连接的配置方式一样，这种方式下 endpoint 的连接创建以及连接断开与常规的连接管理方式相同。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">DeploymentOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setInstances(<span class=\"hljs-number\">10</span>);\nvertx.deployVerticle(<span class=\"hljs-string\">&quot;com.mycompany.MyVerticle&quot;</span>, options);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_client_subscriptionunsubscription_request\"><a class=\"anchor\" href=\"#_handling_client_subscriptionunsubscription_request\"></a>处理客户端 订阅/退订 请求</h3>\n<div class=\"paragraph\">\n<p>在客户端和服务端的连接建立后，客户端可以发送 SUBSCRIBE 消息以订阅主题。 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html\">MqttEndpoint</a></code> 允许使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#subscribeHandler-io.vertx.core.Handler-\">subscribeHandler</a></code>\n方法来指定一个 handler 处理到来的订阅请求，这个 handler 接收一个 <code><a href=\"../../apidocs/io/vertx/mqtt/messages/MqttSubscribeMessage.html\">MqttSubscribeMessage</a></code> 类型的实例，该实例携带了主题列表以及客户端指定的 QoS 等级。\n最后，这个 endpoint 实例提供了 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#subscribeAcknowledge-int-java.util.List-\">subscribeAcknowledge</a></code> 方法来回复一个包含相关许可 QoS 等级的 SUBACK 消息给客户端。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">endpoint.subscribeHandler(subscribe -&gt; {\n\n  List&lt;MqttQoS&gt; grantedQosLevels = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n  <span class=\"hljs-keyword\">for</span> (MqttTopicSubscription s: subscribe.topicSubscriptions()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Subscription for &quot;</span> + s.topicName() + <span class=\"hljs-string\">&quot; with QoS &quot;</span> + s.qualityOfService());\n    grantedQosLevels.add(s.qualityOfService());\n  }\n  <span class=\"hljs-comment\">// ack the subscriptions request</span>\n  endpoint.subscribeAcknowledge(subscribe.messageId(), grantedQosLevels);\n\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>相应的，也可以使用 endpoint 上的 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#unsubscribeHandler-io.vertx.core.Handler-\">unsubscribeHandler</a></code> 方法来指定一个 handler 来处理客户端的UNSUBSCRIBE消息，\n这个 handler 接收一个携带退订主题列表的 <code><a href=\"../../apidocs/io/vertx/mqtt/messages/MqttUnsubscribeMessage.html\">MqttUnsubscribeMessage</a></code> 类型实例作为参数。\n最后，这个 endpoint 实例提供了 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#unsubscribeAcknowledge-int-\">unsubscribeAcknowledge</a></code> 方法来回复客户端相关的UNSUBACK消息。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">endpoint.unsubscribeHandler(unsubscribe -&gt; {\n\n  <span class=\"hljs-keyword\">for</span> (String t: unsubscribe.topics()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Unsubscription for &quot;</span> + t);\n  }\n  <span class=\"hljs-comment\">// ack the subscriptions request</span>\n  endpoint.unsubscribeAcknowledge(unsubscribe.messageId());\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_client_published_message\"><a class=\"anchor\" href=\"#_handling_client_published_message\"></a>处理客户端发布的消息</h3>\n<div class=\"paragraph\">\n<p>为了处理远程客户端发布的消息，<code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html\">MqttEndpoint</a></code> 接口提供了\n<code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishHandler-io.vertx.core.Handler-\">publishHandler</a></code> 方法来指定一个 handler,\n这个handler接收一个 <code><a href=\"../../apidocs/io/vertx/mqtt/messages/MqttPublishMessage.html\">MqttPublishMessage</a></code> 类型的实例作为参数，该实例\n包含了载荷信息，QoS 等级以及复制和保留标识。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果 QoS 等级是 0（AT_MOST_ONCE），endpoint 就没有必要回复客户端了。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果 QoS 等级是 1（AT_LEAST_ONCE），endpoint 需要使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishAcknowledge-int-\">publishAcknowledge</a></code> 方法回复一个 PUBACK 消息给客户端</p>\n</div>\n<div class=\"paragraph\">\n<p>如果 QoS 等级是 2（EXACTLY_ONCE），endpoint 需要使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishReceived-int-\">publishReceived</a></code> 方法回复一个PUBREC消息给客户端。\n在这种情况下，这个 endpoint 同时也要通过 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishReleaseHandler-io.vertx.core.Handler-\">publishReleaseHandler</a></code> 指定一个 handler 来处理来自客户端的PUBREL（远程客户端接收到 endpoint 发送的 PUBREC 后发送的）消息\n为了结束 QoS 等级为2的消息的传递，endpoint 可以使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishComplete-int-\">publishComplete</a></code> 方法发送一个 PUBCOMP 消息给客户端。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">endpoint.publishHandler(message -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;Just received message [&quot;</span> + message.payload().toString(Charset.defaultCharset()) + <span class=\"hljs-string\">&quot;] with QoS [&quot;</span> + message.qosLevel() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n\n  <span class=\"hljs-keyword\">if</span> (message.qosLevel() == MqttQoS.AT_LEAST_ONCE) {\n    endpoint.publishAcknowledge(message.messageId());\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (message.qosLevel() == MqttQoS.EXACTLY_ONCE) {\n    endpoint.publishReceived(message.messageId());\n  }\n\n}).publishReleaseHandler(messageId -&gt; {\n\n  endpoint.publishComplete(messageId);\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish_message_to_the_client\"><a class=\"anchor\" href=\"#_publish_message_to_the_client\"></a>发布消息到客户端</h3>\n<div class=\"paragraph\">\n<p>可以使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publish-java.lang.String-io.vertx.core.buffer.Buffer-io.netty.handler.codec.mqtt.MqttQoS-boolean-boolean-\">publish</a></code> 方法发布一个消息到远程客户端，该方法需要补充一下参数：\n发布主题，消息载荷，QoS 等级，复制和保留标识。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果 QoS 等级是 0（AT_MOST_ONCE），endpoint 就不会收到任何客户端的响应</p>\n</div>\n<div class=\"paragraph\">\n<p>如果 QoS 等级是 1（AT_LEAST_ONCE），endpoint 需要处理客户端的PUBACK消息,为了收到最后的确认消息，需要使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishAcknowledgeHandler-io.vertx.core.Handler-\">publishAcknowledgeHandler</a></code> 指定一个handler来接收。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果 QoS 等级是 2（EXACTLY_ONCE），endpoint 需要处理客户端的PUBREC消息，可以通过 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishReceivedHandler-io.vertx.core.Handler-\">publishReceivedHandler</a></code> 方法指定一个handler来实现。\n在这个handler内，endpoint 可以使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishRelease-int-\">publishRelease</a></code> 方法回复客户端 PUBREL 消息。最后一步是处理来自客户端的PUBCOMP消息作为已发布消息的最终确认。\n这可以使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#publishCompletionHandler-io.vertx.core.Handler-\">publishCompletionHandler</a></code> 方法指定一个handler来处理最终接收到的 PUBCOMP 消息。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">endpoint.publish(<span class=\"hljs-string\">&quot;my_topic&quot;</span>,\n  Buffer.buffer(<span class=\"hljs-string\">&quot;Hello from the Vert.x MQTT server&quot;</span>),\n  MqttQoS.EXACTLY_ONCE,\n  <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-literal\">false</span>);\n\n<span class=\"hljs-comment\">// specifing handlers for handling QoS 1 and 2</span>\nendpoint.publishAcknowledgeHandler(messageId -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;Received ack for message = &quot;</span> +  messageId);\n\n}).publishReceivedHandler(messageId -&gt; {\n\n  endpoint.publishRelease(messageId);\n\n}).publishCompletionHandler(messageId -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;Received ack for message = &quot;</span> +  messageId);\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_be_notified_by_client_keep_alive\"><a class=\"anchor\" href=\"#_be_notified_by_client_keep_alive\"></a>客户端保活通知</h3>\n<div class=\"paragraph\">\n<p>MQTT 底层的保活机制是由服务端内部处理的。当接收到CONNECT消息，服务端解析消息中指定的保活超时时间以便于检查客户端在这段时间内是否有发送消息，\n与此同时，没收到一个 PINGREQ 消息，服务端都会回复一个相关的 PINGRESP 消息。\n尽管上层应用不需要处理这些，<code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html\">MqttEndpoint</a></code> 依然提供了 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttEndpoint.html#pingHandler-io.vertx.core.Handler-\">pingHandler</a></code> 方法来选定一个handler\n来自客户端的 PINGREQ 消息。对于应用程序来说这只是一个通知，客户端只会发送一个用于检测保活的没有任何意义的 ping 消息。无论如何，PINGRESP 都会被服务端内部自动发送。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">endpoint.pingHandler(v -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;Ping received from client&quot;</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_closing_the_server\"><a class=\"anchor\" href=\"#_closing_the_server\"></a>关闭服务端</h3>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/mqtt/MqttServer.html\">MqttServer</a></code> 提供了 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttServer.html#close-io.vertx.core.Handler-\">close</a></code> 方法来关闭服务。\n他会停止监听到来的连接以及关闭所有已经建立的连接，该方法是一个异步方法，并且可以指定一个成功回调 handler，这个 handler 会在服务端完全关闭后被调用</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mqttServer.close(v -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;MQTT server closed&quot;</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_automatic_clean_up_in_verticles\"><a class=\"anchor\" href=\"#_automatic_clean_up_in_verticles\"></a>在 verticles 中自动清理</h3>\n<div class=\"paragraph\">\n<p>如果您是在 verticles 内部创建的 MQTT 服务端，当 verticle 卸载时这些服务端会被自动关闭。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_scaling_sharing_mqtt_servers\"><a class=\"anchor\" href=\"#_scaling_sharing_mqtt_servers\"></a>扩展：共享 MQTT 服务器</h3>\n<div class=\"paragraph\">\n<p>与MQTT服务器相关的 handler 总是在同一个 event loop 线程中执行。这意味着在一个多核系统中，仅有一个实例被部署，一个核被使用。\n为了使用更多的核，可以部署更多的 MQTT 服务端实例\n可以通过编程方式实现：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n\n  <span class=\"hljs-type\">MqttServer</span> <span class=\"hljs-variable\">mqttServer</span> <span class=\"hljs-operator\">=</span> MqttServer.create(vertx);\n  mqttServer.endpointHandler(endpoint -&gt; {\n    <span class=\"hljs-comment\">// handling endpoint</span>\n  })\n    .listen(ar -&gt; {\n\n      <span class=\"hljs-comment\">// handling start listening</span>\n    });\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者使用一个 verticle 指定实例的数量：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">DeploymentOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeploymentOptions</span>().setInstances(<span class=\"hljs-number\">10</span>);\nvertx.deployVerticle(<span class=\"hljs-string\">&quot;com.mycompany.MyVerticle&quot;</span>, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>实际上，尽管仅有一个MQTT服务器被部署，\n但是当传入的连接到达时，会被 Vert.x 使用轮转算法分发到不同的核上运行的处理器（handlers）上。</p>\n</div>\n</div>\n</div>\n</div>\n<h1 id=\"_vert_x_mqtt_client\" class=\"sect0\"><a class=\"anchor\" href=\"#_vert_x_mqtt_client\"></a>Vert.x MQTT 客户端</h1>\n<div class=\"paragraph\">\n<p>这个组件提供了一个符合3.1.1版本规范的 <a href=\"http://mqtt.org/\">MQTT</a> 客户端，它的 API 提供了一系列方法来处理连接建立/断开，发布消息（完整支持3种不同等级的 QoS）以及主题订阅</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\n这个模块还处于技术预览阶段，这意味着它的API在接下来的版本中可能会改变\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started_2\"><a class=\"anchor\" href=\"#_getting_started_2\"></a>开始</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_connectdisconnect\"><a class=\"anchor\" href=\"#_connectdisconnect\"></a>连接建立/连接断开</h3>\n<div class=\"paragraph\">\n<p>这个客户端让您可以与服务端建立连接或者断开连接。\n相应的，您可以通过构造函数的方式传入一个 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClientOptions.html\">MqttClientOptions</a></code> 类型的实例\n来指定想要建立连接的服务端的地址和端口号。</p>\n</div>\n<div class=\"paragraph\">\n<p>正如下面这个例子所展示的，您可以使用 Vert.x MQTT 客户端实例，分别调用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#connect-int-java.lang.String-io.vertx.core.Handler-\">connect</a></code> 和 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#disconnect--\">disconnect</a></code> 方法\n来完成与服务端的连接建立或者断开。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">MqttClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> MqttClient.create(vertx);\n\nclient.connect(<span class=\"hljs-number\">1883</span>, <span class=\"hljs-string\">&quot;mqtt.eclipse.org&quot;</span>, s -&gt; {\n  client.disconnect();\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n如果您在使用 SSL/TSL，服务端 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClientOptions.html\">MqttClientOptions</a></code> 提供的默认的地址是 localhost:1883 和 localhost:8883 。\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_subscribe_to_a_topic\"><a class=\"anchor\" href=\"#_subscribe_to_a_topic\"></a>订阅主题消息</h3>\n<div class=\"paragraph\">\n<p>现在，让我们再仔细看一下这个示例：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.publishHandler(s -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;There are new message in topic: &quot;</span> + s.topicName());\n  System.out.println(<span class=\"hljs-string\">&quot;Content(as string) of the message: &quot;</span> + s.payload().toString());\n  System.out.println(<span class=\"hljs-string\">&quot;QoS: &quot;</span> + s.qosLevel());\n})\n  .subscribe(<span class=\"hljs-string\">&quot;rpi2/temp&quot;</span>, <span class=\"hljs-number\">2</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>这里我们有一个使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#subscribe-java.lang.String-int-\">subscribe</a></code> 方法的例子， 为了接收到主题为 rpi2/temp 的消息，\n我们调用了 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#subscribe-java.lang.String-int-\">subscribe</a></code> 方法， 因此，为了能接收到的服务端的消息，您需要提供一个 handler，每当您订阅的主题有新的消息传来，这个 handler 就会被调用。\n正如这个实例描述的，您需要通过 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#publishHandler-io.vertx.core.Handler-\">publishHandler</a></code> 方法来指定 handler。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publishing_message_to_a_topic\"><a class=\"anchor\" href=\"#_publishing_message_to_a_topic\"></a>发布主题消息</h3>\n<div class=\"paragraph\">\n<p>如果您想要发布消息到主题上去就需要使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#publish-java.lang.String-io.vertx.core.buffer.Buffer-io.netty.handler.codec.mqtt.MqttQoS-boolean-boolean-\">publish</a></code> 方法。\n让我们来看下面这个示例：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.publish(<span class=\"hljs-string\">&quot;temperature&quot;</span>,\n  Buffer.buffer(<span class=\"hljs-string\">&quot;hello&quot;</span>),\n  MqttQoS.AT_LEAST_ONCE,\n  <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-literal\">false</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>在这个示例中我们发布了消息到名称为 “temperature” 的主题上去。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_keep_connection_with_server_alive\"><a class=\"anchor\" href=\"#_keep_connection_with_server_alive\"></a>与服务端保持连接</h3>\n<div class=\"paragraph\">\n<p>为了保持与服务端的连接，您需要时不时地发送一些数据到服务端，否则服务端可能会断开连接。\n使用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#ping--\">ping</a></code> 方法来保持连接是一个不错的选择。</p>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\n您的客户端默认情况下会自动保持与服务端的连接，这也意味着您不需要调用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#ping--\">ping</a></code> 方法来保活，因为 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html\">MqttClient</a></code> 已经帮您做了这些事。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>如果您不想要这个特性，您需要调用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClientOptions.html#setAutoKeepAlive-boolean-\">setAutoKeepAlive</a></code> 方法，设置参数为 <code>false</code> 即可。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">options.setAutoKeepAlive(<span class=\"hljs-literal\">false</span>);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_be_notified_when\"><a class=\"anchor\" href=\"#_be_notified_when\"></a>通知时机</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>发布完成</p>\n<div class=\"paragraph\">\n<p>您需要调用 <code><a href=\"../../apidocs/io/vertx/mqtt/MqttClient.html#publishCompletionHandler-io.vertx.core.Handler-\">publishCompletionHandler</a></code> 来指定一个handler，这个handler每次发布完成都会被调用。\n这一步是非常有用的，因为您可以看到 PUBACK 或者 PUBCOMP 数据包的 packetId。</p>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>client.publishCompletionHandler(id -&gt; {\n  System.out.println(\"Id of just received PUBACK or PUBCOMP packet is \" + id);\n});\n  // The line of code below will trigger publishCompletionHandler (QoS 2)\nclient.publish(\"hello\", Buffer.buffer(\"hello\"), MqttQoS.EXACTLY_ONCE, false, false);\n  // The line of code below will trigger publishCompletionHandler (QoS is 1)\nclient.publish(\"hello\", Buffer.buffer(\"hello\"), MqttQoS.AT_LEAST_ONCE, false, false);\n  // The line of code below does not trigger because QoS value is 0\nclient.publish(\"hello\", Buffer.buffer(\"hello\"), MqttQoS.AT_LEAST_ONCE, false, false);</pre>\n</div>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\n如果设置发布消息的 QoS=0，这个 handler 就不会被调用。\n</td>\n</tr>\n</table>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>订阅完成</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.subscribeCompletionHandler(mqttSubAckMessage -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;Id of just received SUBACK packet is &quot;</span> + mqttSubAckMessage.messageId());\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> s : mqttSubAckMessage.grantedQoSLevels()) {\n    <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">0x80</span>) {\n      System.out.println(<span class=\"hljs-string\">&quot;Failure&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Success. Maximum QoS is &quot;</span> + s);\n    }\n  }\n});\nclient.subscribe(<span class=\"hljs-string\">&quot;temp&quot;</span>, <span class=\"hljs-number\">1</span>);\nclient.subscribe(<span class=\"hljs-string\">&quot;temp2&quot;</span>, <span class=\"hljs-number\">2</span>);</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>退订完成</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .unsubscribeCompletionHandler(id -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;Id of just received UNSUBACK packet is &quot;</span> + id);\n  });\nclient.subscribe(<span class=\"hljs-string\">&quot;temp&quot;</span>, <span class=\"hljs-number\">1</span>);\nclient.unsubscribe(<span class=\"hljs-string\">&quot;temp&quot;</span>);</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>退订发布</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.subscribe(<span class=\"hljs-string\">&quot;temp&quot;</span>, <span class=\"hljs-number\">1</span>);\nclient.unsubscribe(<span class=\"hljs-string\">&quot;temp&quot;</span>, id -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;Id of just sent UNSUBSCRIBE packet is &quot;</span> + id);\n  });</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>接收 PINGRESP</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.pingResponseHandler(s -&gt; {\n  <span class=\"hljs-comment\">//The handler will be called time to time by default</span>\n  System.out.println(<span class=\"hljs-string\">&quot;We have just received PINGRESP packet&quot;</span>);\n});</code></pre>\n</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_use_proxy_protocol\"><a class=\"anchor\" href=\"#_use_proxy_protocol\"></a>使用代理协议</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">MqttServer</span> <span class=\"hljs-variable\">mqttServer</span> <span class=\"hljs-operator\">=</span> MqttServer\n  .create(vertx, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MqttServerOptions</span>()\n    <span class=\"hljs-comment\">// 设置是否使用代理为 true</span>\n    .setUseProxyProtocol(<span class=\"hljs-literal\">true</span>));\nmqttServer.endpointHandler(endpoint -&gt; {\n  <span class=\"hljs-comment\">// 此处设置的远程地址为真实的 MQTT 服务器地址，而不是代理地址</span>\n  System.out.println(endpoint.remoteAddress());\n  endpoint.accept(<span class=\"hljs-literal\">false</span>);\n\n})\n  .listen(ar -&gt; {\n\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n      System.out.println(<span class=\"hljs-string\">&quot;MQTT server is listening on port &quot;</span> + ar.result().actualPort());\n    } <span class=\"hljs-keyword\">else</span> {\n\n      System.out.println(<span class=\"hljs-string\">&quot;Error on starting the server&quot;</span>);\n      ar.cause().printStackTrace();\n    }\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果您的服务器位于 haproxy 或 nginx 之后，并且您希望获取到 MQTT 客户端真实的 ip 和端口，那么您需要将 <code>setUseProxyProtocol</code> 选项设置为 <code>true</code></p>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\n为了使用该特性， 您需要添加 <code>netty-codec-haproxy</code> 依赖项。 但是默认情况下该依赖不会被引入，因此您需要手动添加\n</td>\n</tr>\n</table>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code> 中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.netty<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>netty-codec-haproxy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile io.<span class=\"hljs-attr\">netty:</span>netty-codec-<span class=\"hljs-attr\">haproxy:</span><span class=\"hljs-number\">4.1</span><span class=\"hljs-number\">.1</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"4.1.1"},"__N_SSG":true}