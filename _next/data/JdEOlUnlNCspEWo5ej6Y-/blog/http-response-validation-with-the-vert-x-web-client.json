{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"HTTP response validation with the Vert.x Web Client","category":"guides","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"Learn how to use response predicates from the Vert.x Web module to validate HTTP responses and to automatically generate error messages."},"date":"2018-12-10","slug":"http-response-validation-with-the-vert-x-web-client","readingTime":{"text":"4 min read","minutes":3.09,"time":185399.99999999997,"words":618},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"By de\\xADfault, a \", mdx(Link, {\n    href: \"/docs/vertx-web-client/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x Web Client\")), \" re\\xADquest ends with an error only if some\\xADthing wrong hap\\xADpens at the net\\xADwork level.\\nIn other words, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"404 Not Found\"), \" re\\xADsponse, or a re\\xADsponse with the wrong con\\xADtent type, are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" con\\xADsid\\xADered as fail\\xADures.\"), mdx(\"p\", null, \"Hence, you would usu\\xADally per\\xADform san\\xADity checks man\\xADu\\xADally after the re\\xADsponse is re\\xADceived:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      HttpResponse<Buffer> response = ar.result()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"response.statusCode\"), \"() == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \" && response.getHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \").equals(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")) {\\n        // Decode the body as a json object\\n        JsonObject body = response.bodyAsJsonObject()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      } else {\\n        System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + response.statusCode())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      }\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Start\\xADing with \", mdx(Link, {\n    href: \"/blog/eclipse-vert-x-3-6-0-released/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x 3.6\")), \", you can can trade flex\\xADi\\xADbil\\xADity for clar\\xADity and con\\xADcise\\xADness using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADsponse pred\\xADi\\xADcates\"), \".\"), mdx(\"h2\", {\n    \"id\": \"response-predicates\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#response-predicates\"\n  })), \"Response predicates\"), mdx(\"p\", null, mdx(Link, {\n    href: \"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Re\\xADsponse pred\\xADi\\xADcates\")), \" can fail a re\\xADquest when the re\\xADsponse does not match cri\\xADte\\xADrion.\"), mdx(\"p\", null, \"The Web Client mod\\xADule comes with a set of ready-\\u200Bto-use pred\\xADi\\xADcates:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.SC_SUCCESS\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.JSON\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      HttpResponse<Buffer> response = ar.result()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      // Safely decode the body as a json object\\n      JsonObject body = response.bodyAsJsonObject()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\\n\")), mdx(\"p\", null, \"The web is full of HTTP/JSON end\\xADpoints, so there is no doubt the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ResponsePredicate.SC_SUCCESS\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ResponsePredicate.JSON\"), \" can be handy.\"), mdx(\"p\", null, \"Nev\\xADer\\xADthe\\xADless, you might also need to check that the sta\\xADtus code is whithin a spe\\xADcific range:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-scheme\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.status\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"200\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"202\"), \"))\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    // ....\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Or that the con\\xADtent is of a spe\\xADcific type: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.contentType\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"some/content-type\\\"\"), \"))\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    // ....\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Please refer to the \", mdx(Link, {\n    href: \"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ResponsePredicate\"), \" doc\\xADu\\xADmen\\xADta\\xADtion\")), \" for a full list of pre\\xADde\\xADfined pred\\xADi\\xADcates.\"), mdx(\"h3\", {\n    \"id\": \"custom-predicates\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#custom-predicates\"\n  })), \"Custom predicates\"), mdx(\"p\", null, \"Even\\xADtu\\xADally, pred\\xADi\\xADcates were not de\\xADsigned for sta\\xADtus code and con\\xADtent type check\\xADing only, so feel free to cre\\xADate your own val\\xADi\\xADda\\xADtion code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"// Check CORS header allowing to do POST\\nFunction<HttpResponse<Void>, ResponsePredicateResult> methodsPredicate = resp -> {\\n  String methods = resp.getHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Access-Control-Allow-Methods\\\"\"), \")\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n  if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methods\"), \" != null) {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methods.contains\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"POST\\\"\"), \")) {\\n      return ResponsePredicateResult.success()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  }\\n  return ResponsePredicateResult.failure(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Does not work\\\"\"), \")\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n}\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\\n// Send pre-flight CORS request\\nclient\\n  .request(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"HttpMethod.OPTIONS\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Origin\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server-b.com\\\"\"), \")\\n  .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Access-Control-Request-Method\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"POST\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methodsPredicate\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      // Process the POST request now\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Note that re\\xADsponse pred\\xADi\\xADcates are eval\\xADu\\xADated \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"be\\xADfore\"), \" the re\\xADsponse body is re\\xADceived.\\nThere\\xADfore \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you can\\u2019t in\\xADspect the re\\xADsponse body\"), \" in a pred\\xADi\\xADcate test func\\xADtion, only sta\\xADtus code, sta\\xADtus mes\\xADsage and re\\xADsponse head\\xADers.\"), mdx(\"h2\", {\n    \"id\": \"dealing-with-failures\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#dealing-with-failures\"\n  })), \"Dealing with failures\"), mdx(\"p\", null, \"By de\\xADfault, re\\xADsponse pred\\xADi\\xADcates (in\\xADclud\\xADing the pre\\xADde\\xADfined ones) use a generic error con\\xADverter which dis\\xADcards the re\\xADsponse body and con\\xADveys a sim\\xADple mes\\xADsage.\\nYou can cus\\xADtomize the ex\\xADcep\\xADtion class by chang\\xADing the error con\\xADverter:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"ResponsePredicate predicate = ResponsePredicate.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.SC_SUCCESS\"), \", result -> {\\n  return new MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"result.message\"), \"())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n})\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Be\\xADware that cre\\xADat\\xADing ex\\xADcep\\xADtions in Java comes with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"per\\xADfor\\xADmance cost\"), \" of cap\\xADtur\\xADing the call stack.\\nThe generic error con\\xADverter gen\\xADer\\xADates ex\\xADcep\\xADtions that do not cap\\xADture it.\"), mdx(\"h3\", {\n    \"id\": \"reading-details-in-error-responses\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#reading-details-in-error-responses\"\n  })), \"Reading details in error responses\"), mdx(\"p\", null, \"Many web APIs pro\\xADvide de\\xADtails in error re\\xADsponses.\\nFor ex\\xADam\\xADple, the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.marvel.com/docs\"\n  }), \"Mar\\xADvel API\"), \" uses this JSON ob\\xADject for\\xADmat:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"code\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"InvalidCredentials\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"message\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"The passed API key is invalid.\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"To avoid los\\xADing this in\\xADfor\\xADma\\xADtion, it is pos\\xADsi\\xADble to wait for the re\\xADsponse body to be fully re\\xADceived be\\xADfore the error con\\xADverter is called:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-reasonml\"\n  }), \"ErrorConverter converter = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"ErrorConverter\"), \".\")), \"create\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"FullBody(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> {\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), \" Invoked \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"after\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"the\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"body\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"is\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"fully\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"received\"), \"\\n  HttpResponse<Buffer> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \" = \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \"()\"), \";\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (response.get\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Header(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \")\"), \".equals(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Error body is JSON data\"), \"\\n    JsonObject body = response.body\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"AsJsonObject()\"), \";\\n    return \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"body\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"getString\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"code\\\"\"), \")\"), \", body.get\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"String(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"message\\\"\"), \")\"), \");\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Fallback to defaut message\"), \"\\n  return \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"message\"), \"()\"), \");\\n});\\n\\nResponsePredicate predicate = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"ResponsePredicate\"), \".\")), \"create(ResponsePredicate.SC_SUCCESS, converter);\\n\")), mdx(\"p\", null, \"That\\u2019s it! Feel free to com\\xADment here or ask ques\\xADtions on our \", mdx(Link, {\n    href: \"/community\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"com\\xADmu\\xADnity chan\\xADnels\")), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>By de­fault, a <a href=\"/docs/vertx-web-client/java/\">Vert.x Web Client</a> re­quest ends with an error only if some­thing wrong hap­pens at the net­work level.\nIn other words, a <code>404 Not Found</code> re­sponse, or a re­sponse with the wrong con­tent type, are <strong>not</strong> con­sid­ered as fail­ures.</p><p>Hence, you would usu­ally per­form san­ity checks man­u­ally after the re­sponse is re­ceived:</p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      HttpResponse&lt;Buffer&gt; response = ar.result()<span class=\"hljs-comment\">;</span>\n      if (<span class=\"hljs-name\">response.statusCode</span>() == <span class=\"hljs-number\">200</span> &amp;&amp; response.getHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>).equals(<span class=\"hljs-string\">&quot;application/json&quot;</span>)) {\n        // Decode the body as a json object\n        JsonObject body = response.bodyAsJsonObject()<span class=\"hljs-comment\">;</span>\n      } else {\n        System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + response.statusCode())<span class=\"hljs-comment\">;</span>\n      }\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Start­ing with <a href=\"/blog/eclipse-vert-x-3-6-0-released/\">Vert.x 3.6</a>, you can can trade flex­i­bil­ity for clar­ity and con­cise­ness using <em>re­sponse pred­i­cates</em>.</p><h2 id=\"response-predicates\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#response-predicates\"></a>Response predicates</h2><p><a href=\"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\">Re­sponse pred­i­cates</a> can fail a re­quest when the re­sponse does not match cri­te­rion.</p><p>The Web Client mod­ule comes with a set of ready-​to-use pred­i­cates:</p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.SC_SUCCESS</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.JSON</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      HttpResponse&lt;Buffer&gt; response = ar.result()<span class=\"hljs-comment\">;</span>\n      // Safely decode the body as a json object\n      JsonObject body = response.bodyAsJsonObject()<span class=\"hljs-comment\">;</span>\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n\n</code></pre><p>The web is full of HTTP/JSON end­points, so there is no doubt the <code>ResponsePredicate.SC_SUCCESS</code> and <code>ResponsePredicate.JSON</code> can be handy.</p><p>Nev­er­the­less, you might also need to check that the sta­tus code is whithin a spe­cific range:</p><pre><code class=\"hljs language-scheme\">client\n  .get(<span class=\"hljs-name\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.status</span>(<span class=\"hljs-name\">200</span>, <span class=\"hljs-number\">202</span>))\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    // ....\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Or that the con­tent is of a spe­cific type: </p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.contentType</span>(<span class=\"hljs-string\">&quot;some/content-type&quot;</span>))\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    // ....\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Please refer to the <a href=\"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\"><code>ResponsePredicate</code> doc­u­men­ta­tion</a> for a full list of pre­de­fined pred­i­cates.</p><h3 id=\"custom-predicates\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#custom-predicates\"></a>Custom predicates</h3><p>Even­tu­ally, pred­i­cates were not de­signed for sta­tus code and con­tent type check­ing only, so feel free to cre­ate your own val­i­da­tion code:</p><pre><code class=\"hljs language-clojure\">// Check CORS header allowing to do POST\nFunction&lt;HttpResponse&lt;Void&gt;, ResponsePredicateResult&gt; methodsPredicate = resp -&gt; {\n  String methods = resp.getHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>)<span class=\"hljs-comment\">;</span>\n  if (<span class=\"hljs-name\">methods</span> != null) {\n    if (<span class=\"hljs-name\">methods.contains</span>(<span class=\"hljs-string\">&quot;POST&quot;</span>)) {\n      return ResponsePredicateResult.success()<span class=\"hljs-comment\">;</span>\n    }\n  }\n  return ResponsePredicateResult.failure(<span class=\"hljs-string\">&quot;Does not work&quot;</span>)<span class=\"hljs-comment\">;</span>\n}<span class=\"hljs-comment\">;</span>\n\n// Send pre-flight CORS request\nclient\n  .request(<span class=\"hljs-name\">HttpMethod.OPTIONS</span>, <span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .putHeader(<span class=\"hljs-string\">&quot;Origin&quot;</span>, <span class=\"hljs-string\">&quot;Server-b.com&quot;</span>)\n  .putHeader(<span class=\"hljs-string\">&quot;Access-Control-Request-Method&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>)\n  .expect(<span class=\"hljs-name\">methodsPredicate</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      // Process the POST request now\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Note that re­sponse pred­i­cates are eval­u­ated <em>be­fore</em> the re­sponse body is re­ceived.\nThere­fore <strong>you can’t in­spect the re­sponse body</strong> in a pred­i­cate test func­tion, only sta­tus code, sta­tus mes­sage and re­sponse head­ers.</p><h2 id=\"dealing-with-failures\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#dealing-with-failures\"></a>Dealing with failures</h2><p>By de­fault, re­sponse pred­i­cates (in­clud­ing the pre­de­fined ones) use a generic error con­verter which dis­cards the re­sponse body and con­veys a sim­ple mes­sage.\nYou can cus­tomize the ex­cep­tion class by chang­ing the error con­verter:</p><pre><code class=\"hljs language-clojure\">ResponsePredicate predicate = ResponsePredicate.create(<span class=\"hljs-name\">ResponsePredicate.SC_SUCCESS</span>, result -&gt; {\n  return new MyCustomException(<span class=\"hljs-name\">result.message</span>())<span class=\"hljs-comment\">;</span>\n})<span class=\"hljs-comment\">;</span>\n</code></pre><p>Be­ware that cre­at­ing ex­cep­tions in Java comes with the <strong>per­for­mance cost</strong> of cap­tur­ing the call stack.\nThe generic error con­verter gen­er­ates ex­cep­tions that do not cap­ture it.</p><h3 id=\"reading-details-in-error-responses\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#reading-details-in-error-responses\"></a>Reading details in error responses</h3><p>Many web APIs pro­vide de­tails in error re­sponses.\nFor ex­am­ple, the <a href=\"https://developer.marvel.com/docs\">Mar­vel API</a> uses this JSON ob­ject for­mat:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;InvalidCredentials&quot;</span>,\n  <span class=\"hljs-attr\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;The passed API key is invalid.&quot;</span>\n}\n</code></pre><p>To avoid los­ing this in­for­ma­tion, it is pos­si­ble to wait for the re­sponse body to be fully re­ceived be­fore the error con­verter is called:</p><pre><code class=\"hljs language-reasonml\">ErrorConverter converter = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorConverter</span>.</span></span>create<span class=\"hljs-constructor\">FullBody(<span class=\"hljs-params\">result</span> -&gt; {\n\n  <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> Invoked <span class=\"hljs-params\">after</span> <span class=\"hljs-params\">the</span> <span class=\"hljs-params\">response</span> <span class=\"hljs-params\">body</span> <span class=\"hljs-params\">is</span> <span class=\"hljs-params\">fully</span> <span class=\"hljs-params\">received</span>\n  HttpResponse&lt;Buffer&gt; <span class=\"hljs-params\">response</span> = <span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">response</span>()</span>;\n\n  <span class=\"hljs-keyword\">if</span> (response.get<span class=\"hljs-constructor\">Header(<span class=\"hljs-string\">&quot;content-type&quot;</span>)</span>.equals(<span class=\"hljs-string\">&quot;application/json&quot;</span>)) {\n    <span class=\"hljs-comment\">// Error body is JSON data</span>\n    JsonObject body = response.body<span class=\"hljs-constructor\">AsJsonObject()</span>;\n    return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">MyCustomException(<span class=\"hljs-params\">body</span>.<span class=\"hljs-params\">getString</span>(<span class=\"hljs-string\">&quot;code&quot;</span>)</span>, body.get<span class=\"hljs-constructor\">String(<span class=\"hljs-string\">&quot;message&quot;</span>)</span>);\n  }\n\n  <span class=\"hljs-comment\">// Fallback to defaut message</span>\n  return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">MyCustomException(<span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">message</span>()</span>);\n});\n\nResponsePredicate predicate = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ResponsePredicate</span>.</span></span>create(ResponsePredicate.SC_SUCCESS, converter);\n</code></pre><p>That’s it! Feel free to com­ment here or ask ques­tions on our <a href=\"/community/\">com­mu­nity chan­nels</a>.</p>","scope":{}}},"prevPost":{"meta":{"title":"Vert.x Web API Service Introduction","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"This blog post teaches you how to use the new module vertx-web-api-service to combine the Web Router and the OpenAPI Router Factory with service proxies."},"date":"2018-12-13","slug":"vert-x-web-api-service-introduction"},"nextPost":{"meta":{"title":"The RSS reader tutorial (Step 3)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"This is the third installment of our Vert.x Cassandra Client tutorial. We will implement the last RSS endpoint serving a list of articles related to a specific channel."},"date":"2018-12-06","slug":"the-rss-reader-tutorial-step-3"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"}]},"__N_SSG":true}