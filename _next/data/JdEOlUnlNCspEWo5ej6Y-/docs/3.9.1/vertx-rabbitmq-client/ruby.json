{"pageProps":{"slug":"3.9.1/vertx-rabbitmq-client/ruby","title":"RabbitMQ Client for Vert.x","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_getting_started\">Getting Started</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_maven\">Maven</a></li>\n<li><a href=\"#_gradle\">Gradle</a></li>\n<li><a href=\"#_create_a_client\">Create a client</a></li>\n<li><a href=\"#_declare_exchange_with_additional_config\">Declare exchange with additional config</a></li>\n<li><a href=\"#_declare_queue_with_additional_config\">Declare queue with additional config</a></li>\n</ul>\n</li>\n<li><a href=\"#_operations\">Operations</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_publish\">Publish</a></li>\n<li><a href=\"#_publish_with_confirm\">Publish with confirm</a></li>\n<li><a href=\"#_consume\">Consume</a></li>\n<li><a href=\"#_get\">Get</a></li>\n<li><a href=\"#_consume_messages_without_auto_ack\">Consume messages without auto-ack</a></li>\n</ul>\n</li>\n<li><a href=\"#_running_the_tests\">Running the tests</a></li>\n</ul>\n</div>","contents":"<h1>RabbitMQ Client for Vert.x</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A Vert.x client allowing applications to interact with a RabbitMQ broker (AMQP 0.9.1)</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>This service is experimental and the APIs are likely to change before settling down.</strong></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting Started</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_maven\"><a class=\"anchor\" href=\"#_maven\"></a>Maven</h3>\n<div class=\"paragraph\">\n<p>Add the following dependency to your maven project</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-rabbitmq-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_gradle\"><a class=\"anchor\" href=\"#_gradle\"></a>Gradle</h3>\n<div class=\"paragraph\">\n<p>Add the following dependency to your gradle project</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'io.vertx:vertx-rabbitmq-client:3.9.1'</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_create_a_client\"><a class=\"anchor\" href=\"#_create_a_client\"></a>Create a client</h3>\n<div class=\"paragraph\">\n<p>You can create a client instance as follows using a full amqp uri:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-rabbitmq/rabbit_mq_client'</span>\nconfig = {\n}\n<span class=\"hljs-comment\"># full amqp uri</span>\nconfig[<span class=\"hljs-string\">'uri'</span>] = <span class=\"hljs-string\">\"amqp://xvjvsrrc:VbuL1atClKt7zVNQha0bnnScbNvGiqgb@moose.rmq.cloudamqp.com/xvjvsrrc\"</span>\nclient = VertxRabbitmq::RabbitMQClient.create(vertx, config)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or you can also specify individual parameters manually:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-rabbitmq/rabbit_mq_client'</span>\nconfig = {\n}\n<span class=\"hljs-comment\"># Each parameter is optional</span>\n<span class=\"hljs-comment\"># The default parameter with be used if the parameter is not set</span>\nconfig[<span class=\"hljs-string\">'user'</span>] = <span class=\"hljs-string\">\"user1\"</span>\nconfig[<span class=\"hljs-string\">'password'</span>] = <span class=\"hljs-string\">\"password1\"</span>\nconfig[<span class=\"hljs-string\">'host'</span>] = <span class=\"hljs-string\">\"localhost\"</span>\nconfig[<span class=\"hljs-string\">'port'</span>] = <span class=\"hljs-number\">5672</span>\nconfig[<span class=\"hljs-string\">'virtualHost'</span>] = <span class=\"hljs-string\">\"vhost1\"</span>\nconfig[<span class=\"hljs-string\">'connectionTimeout'</span>] = <span class=\"hljs-number\">6000</span>\nconfig[<span class=\"hljs-string\">'requestedHeartbeat'</span>] = <span class=\"hljs-number\">60</span>\nconfig[<span class=\"hljs-string\">'handshakeTimeout'</span>] = <span class=\"hljs-number\">6000</span>\nconfig[<span class=\"hljs-string\">'requestedChannelMax'</span>] = <span class=\"hljs-number\">5</span>\nconfig[<span class=\"hljs-string\">'networkRecoveryInterval'</span>] = <span class=\"hljs-number\">500</span>\nconfig[<span class=\"hljs-string\">'automaticRecoveryEnabled'</span>] = <span class=\"hljs-literal\">true</span>\n\nclient = VertxRabbitmq::RabbitMQClient.create(vertx, config)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can set multiples addresses to connect to a cluster;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-rabbitmq/rabbit_mq_client'</span>\nconfig = {\n}\nconfig[<span class=\"hljs-string\">'user'</span>] = <span class=\"hljs-string\">\"user1\"</span>\nconfig[<span class=\"hljs-string\">'password'</span>] = <span class=\"hljs-string\">\"password1\"</span>\nconfig[<span class=\"hljs-string\">'virtualHost'</span>] = <span class=\"hljs-string\">\"vhost1\"</span>\n\nconfig[<span class=\"hljs-string\">'addresses'</span>] = [Java::ComRabbitmqClient::Address.parse_addresses(<span class=\"hljs-string\">\"firstHost,secondHost:5672\"</span>)]\n\nclient = VertxRabbitmq::RabbitMQClient.create(vertx, config)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_declare_exchange_with_additional_config\"><a class=\"anchor\" href=\"#_declare_exchange_with_additional_config\"></a>Declare exchange with additional config</h3>\n<div class=\"paragraph\">\n<p>You can pass additional config parameters to RabbitMQ&#8217;s exchangeDeclare method</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">config = {\n}\n\nconfig[<span class=\"hljs-string\">'x-dead-letter-exchange'</span>] = <span class=\"hljs-string\">\"my.deadletter.exchange\"</span>\nconfig[<span class=\"hljs-string\">'alternate-exchange'</span>] = <span class=\"hljs-string\">\"my.alternate.exchange\"</span>\n<span class=\"hljs-comment\"># ...</span>\nclient.exchange_declare(<span class=\"hljs-string\">\"my.exchange\"</span>, <span class=\"hljs-string\">\"fanout\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, config) { <span class=\"hljs-params\">|onResult_err,onResult|</span>\n  <span class=\"hljs-keyword\">if</span> (onResult_err == <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Exchange successfully declared with config\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    onResult_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_declare_queue_with_additional_config\"><a class=\"anchor\" href=\"#_declare_queue_with_additional_config\"></a>Declare queue with additional config</h3>\n<div class=\"paragraph\">\n<p>You can pass additional config parameters to RabbitMQs queueDeclare method</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">config = {\n}\nconfig[<span class=\"hljs-string\">'x-message-ttl'</span>] = <span class=\"hljs-number\">10000</span>\n\nclient.queue_declare(<span class=\"hljs-string\">\"my-queue\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, config) { <span class=\"hljs-params\">|queueResult_err,queueResult|</span>\n  <span class=\"hljs-keyword\">if</span> (queueResult_err == <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Queue declared!\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    STDERR.puts <span class=\"hljs-string\">\"Queue failed to be declared!\"</span>\n    queueResult_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_operations\"><a class=\"anchor\" href=\"#_operations\"></a>Operations</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following are some examples of the operations supported by the RabbitMQService API.\nConsult the javadoc/documentation for detailed information on all API methods.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish\"><a class=\"anchor\" href=\"#_publish\"></a>Publish</h3>\n<div class=\"paragraph\">\n<p>Publish a message to a queue</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">message = {\n  <span class=\"hljs-string\">'body'</span> =&gt; <span class=\"hljs-string\">\"Hello RabbitMQ, from Vert.x !\"</span>\n}\nclient.basic_publish(<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"my.queue\"</span>, message) { <span class=\"hljs-params\">|pubResult_err,pubResult|</span>\n  <span class=\"hljs-keyword\">if</span> (pubResult_err == <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Message published !\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    pubResult_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish_with_confirm\"><a class=\"anchor\" href=\"#_publish_with_confirm\"></a>Publish with confirm</h3>\n<div class=\"paragraph\">\n<p>Publish a message to a queue and confirm the broker acknowledged it.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">message = {\n  <span class=\"hljs-string\">'body'</span> =&gt; <span class=\"hljs-string\">\"Hello RabbitMQ, from Vert.x !\"</span>\n}\n\n<span class=\"hljs-comment\"># Put the channel in confirm mode. This can be done once at init.</span>\nclient.confirm_select() { <span class=\"hljs-params\">|confirmResult_err,confirmResult|</span>\n  <span class=\"hljs-keyword\">if</span> (confirmResult_err == <span class=\"hljs-literal\">nil</span>)\n    client.basic_publish(<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"my.queue\"</span>, message) { <span class=\"hljs-params\">|pubResult_err,pubResult|</span>\n      <span class=\"hljs-keyword\">if</span> (pubResult_err == <span class=\"hljs-literal\">nil</span>)\n        <span class=\"hljs-comment\"># Check the message got confirmed by the broker.</span>\n        client.wait_for_confirms() { <span class=\"hljs-params\">|waitResult_err,waitResult|</span>\n          <span class=\"hljs-keyword\">if</span> (waitResult_err == <span class=\"hljs-literal\">nil</span>)\n            puts <span class=\"hljs-string\">\"Message published !\"</span><span class=\"hljs-keyword\">else</span>\n            waitResult_err.print_stack_trace()<span class=\"hljs-keyword\">end</span>\n        }\n      <span class=\"hljs-keyword\">else</span>\n        pubResult_err.print_stack_trace()\n      <span class=\"hljs-keyword\">end</span>\n    }\n  <span class=\"hljs-keyword\">else</span>\n    confirmResult_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consume\"><a class=\"anchor\" href=\"#_consume\"></a>Consume</h3>\n<div class=\"paragraph\">\n<p>Consume messages from a queue.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">/<span class=\"hljs-regexp\">/ Create a stream of messages from a queue\nclient.basic_consumer(\"my.queue\") { |rabbitMQConsumerAsyncResult_err,rabbitMQConsumerAsyncResult|\n  if (rabbitMQConsumerAsyncResult_err == nil)\n    puts \"RabbitMQ consumer created !\"\n    mqConsumer = rabbitMQConsumerAsyncResult\n    mqConsumer.handler() { |message|\n      puts \"Got message: <span class=\"hljs-subst\">#{message.body().to_string()}</span>\"\n    }\n  else\n    rabbitMQConsumerAsyncResult_err.print_stack_trace()\n  end\n}\n</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>At any moment of time you can pause or resume the stream. When stream is paused you won&#8217;t receive any message.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">consumer.pause()\nconsumer.resume()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>There are actually a set of options to specify when creating a consumption stream.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>QueueOptions</code> lets you specify:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The size of internal queue with <code>setMaxInternalQueueSize</code></p>\n</li>\n<li>\n<p>Should the stream keep more recent messages when queue size is exceed with <code>setKeepMostRecent</code></p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">options = {\n  <span class=\"hljs-string\">'maxInternalQueueSize'</span> =&gt; <span class=\"hljs-number\">1000</span>,\n  <span class=\"hljs-string\">'keepMostRecent'</span> =&gt; <span class=\"hljs-literal\">true</span>\n}\n\nclient.basic_consumer(<span class=\"hljs-string\">\"my.queue\"</span>, options) { <span class=\"hljs-params\">|rabbitMQConsumerAsyncResult_err,rabbitMQConsumerAsyncResult|</span>\n  <span class=\"hljs-keyword\">if</span> (rabbitMQConsumerAsyncResult_err == <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"RabbitMQ consumer created !\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    rabbitMQConsumerAsyncResult_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you want to stop consuming message from a queue, you can do:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">rabbitMQConsumer.cancel() { <span class=\"hljs-params\">|cancelResult_err,cancelResult|</span>\n  <span class=\"hljs-keyword\">if</span> (cancelResult_err == <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"Consumption successfully stopped\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    puts <span class=\"hljs-string\">\"Tired in attempt to stop consumption\"</span>\n    cancelResult_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can get notified by the end handler when the queue won&#8217;t process any more messages:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">rabbitMQConsumer.end_handler() { <span class=\"hljs-params\">|v|</span>\n  puts <span class=\"hljs-string\">\"It is the end of the stream\"</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can set the exception handler to be notified of any error that may occur when a message is processed:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">consumer.exception_handler() { <span class=\"hljs-params\">|e|</span>\n  puts <span class=\"hljs-string\">\"An exception occurred in the process of message handling\"</span>\n  e.print_stack_trace()\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And finally, you may want to retrive a related to the consumer tag:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">consumerTag = consumer.consumer_tag()\nputs <span class=\"hljs-string\">\"Consumer tag is: <span class=\"hljs-subst\">#{consumerTag}</span>\"</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_get\"><a class=\"anchor\" href=\"#_get\"></a>Get</h3>\n<div class=\"paragraph\">\n<p>Will get a message from a queue</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">client.basic_get(<span class=\"hljs-string\">\"my.queue\"</span>, <span class=\"hljs-literal\">true</span>) { <span class=\"hljs-params\">|getResult_err,getResult|</span>\n  <span class=\"hljs-keyword\">if</span> (getResult_err == <span class=\"hljs-literal\">nil</span>)\n    msg = getResult\n    puts <span class=\"hljs-string\">\"Got message: <span class=\"hljs-subst\">#{msg[<span class=\"hljs-string\">'body'</span>]}</span>\"</span>\n  <span class=\"hljs-keyword\">else</span>\n    getResult_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consume_messages_without_auto_ack\"><a class=\"anchor\" href=\"#_consume_messages_without_auto_ack\"></a>Consume messages without auto-ack</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-comment\"># Setup the rabbitmq consumer</span>\nclient.basic_consumer(<span class=\"hljs-string\">\"my.queue\"</span>, {\n  <span class=\"hljs-string\">'autoAck'</span> =&gt; <span class=\"hljs-literal\">false</span>\n}) { <span class=\"hljs-params\">|consumeResult_err,consumeResult|</span>\n  <span class=\"hljs-keyword\">if</span> (consumeResult_err == <span class=\"hljs-literal\">nil</span>)\n    puts <span class=\"hljs-string\">\"RabbitMQ consumer created !\"</span>\n    consumer = consumeResult\n\n    <span class=\"hljs-comment\"># Set the handler which messages will be sent to</span>\n    consumer.handler() { <span class=\"hljs-params\">|msg|</span>\n      json = msg.body()\n      puts <span class=\"hljs-string\">\"Got message: <span class=\"hljs-subst\">#{json[<span class=\"hljs-string\">'body'</span>]}</span>\"</span>\n      <span class=\"hljs-comment\"># ack</span>\n      client.basic_ack(json[<span class=\"hljs-string\">'deliveryTag'</span>], <span class=\"hljs-literal\">false</span>) { <span class=\"hljs-params\">|asyncResult_err,asyncResult|</span>\n      }\n    }\n  <span class=\"hljs-keyword\">else</span>\n    consumeResult_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_running_the_tests\"><a class=\"anchor\" href=\"#_running_the_tests\"></a>Running the tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You will need to have RabbitMQ installed and running with default ports on localhost for this to work.</p>\n</div>\n</div>\n</div>","version":"3.9.1"},"__N_SSG":true}