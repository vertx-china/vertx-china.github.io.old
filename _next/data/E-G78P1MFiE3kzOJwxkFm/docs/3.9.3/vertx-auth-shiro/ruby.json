{"pageProps":{"slug":"3.9.3/vertx-auth-shiro/ruby","title":"The Apache Shiro Auth provider implementation","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_the_apache_shiro_auth_provider_implementation\">The Apache Shiro Auth provider implementation</a></li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_authorisation_permission_role_model\">Authorisation - Permission-Role Model</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_the_shiro_properties_auth_provider\">The Shiro properties auth provider</a></li>\n<li><a href=\"#_the_shiro_ldap_auth_provider\">The Shiro LDAP auth provider</a></li>\n<li><a href=\"#_using_another_shiro_realm\">Using another Shiro Realm</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"\n<div class=\"sect1\">\n<h2 id=\"_the_apache_shiro_auth_provider_implementation\"><a class=\"anchor\" href=\"#_the_apache_shiro_auth_provider_implementation\"></a>The Apache Shiro Auth provider implementation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This is an auth provider implementation that uses <a href=\"http://shiro.apache.org/\">Apache Shiro</a>.  To use this\nproject, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-auth-shiro:3.9.3'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We provide out of the box support for properties and LDAP based auth using Shiro, and you can also plugin in any\nother Shiro Realm which expects username and password for credentials.</p>\n</div>\n<div class=\"paragraph\">\n<p>To create an instance of the provider you use <code><a href=\"../../yardoc/VertxAuthShiro/ShiroAuth.html\">ShiroAuth</a></code>. You specify the type of\nShiro auth provider that you want with <code><a href=\"../enums.html#ShiroAuthRealmType\">ShiroAuthRealmType</a></code>, and you specify the\nconfiguration in a JSON object.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of creating a Shiro auth provider by specifying the type:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">require <span class=\"hljs-string\">'vertx-auth-shiro/shiro_auth'</span>\n\nconfig = {\n  <span class=\"hljs-string\">'properties_path'</span> =&gt; <span class=\"hljs-string\">\"classpath:test-auth.properties\"</span>\n}\n\nprovider = VertxAuthShiro::ShiroAuth.create(vertx, {\n  <span class=\"hljs-string\">'type'</span> =&gt; <span class=\"hljs-string\">\"PROPERTIES\"</span>,\n  <span class=\"hljs-string\">'config'</span> =&gt; config\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When authenticating using this implementation, it assumes <code>username</code> and <code>password</code> fields are present in the\nauthentication info:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">authInfo = {\n  <span class=\"hljs-string\">'username'</span> =&gt; <span class=\"hljs-string\">\"tim\"</span>,\n  <span class=\"hljs-string\">'password'</span> =&gt; <span class=\"hljs-string\">\"sausages\"</span>\n}\n\nauthProvider.authenticate(authInfo) { |res_err,res|\n  <span class=\"hljs-keyword\">if</span> (res_err == nil)\n    user = res\n  <span class=\"hljs-keyword\">else</span>\n    # Failed!\n  end\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authorisation_permission_role_model\"><a class=\"anchor\" href=\"#_authorisation_permission_role_model\"></a>Authorisation - Permission-Role Model</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Although Vert.x auth itself does not mandate any specific model of permissions (they are just opaque strings), this\nimplementation uses a familiar user/role/permission model, where a user can have zero or more roles and a role\ncan have zero or more permissions.</p>\n</div>\n<div class=\"paragraph\">\n<p>If validating if a user has a particular permission simply pass the permission into.\n<code><a href=\"../../yardoc/VertxAuthCommon/User.html#is_authorised-instance_method\">isAuthorised</a></code> as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">user.is_authorized(<span class=\"hljs-string\">\"newsletter:edit:13\"</span>) { |res_err,res|\n  <span class=\"hljs-keyword\">if</span> (res_err == nil)\n    hasPermission = res\n  <span class=\"hljs-keyword\">else</span>\n    # Failed to\n  end\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If validating that a user has a particular <em>role</em> then you should prefix the argument with the role prefix.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">user.is_authorized(<span class=\"hljs-string\">\"role:manager\"</span>) { |res_err,res|\n  <span class=\"hljs-keyword\">if</span> (res_err == nil)\n    hasRole = res\n  <span class=\"hljs-keyword\">else</span>\n    # Failed to\n  end\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The default role prefix is <code>role:</code>. You can change this with <code><a href=\"../../yardoc/VertxAuthShiro/ShiroAuth.html#set_role_prefix-instance_method\">setRolePrefix</a></code>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_the_shiro_properties_auth_provider\"><a class=\"anchor\" href=\"#_the_shiro_properties_auth_provider\"></a>The Shiro properties auth provider</h3>\n<div class=\"paragraph\">\n<p>This auth provider implementation uses Apache Shiro to get user/role/permission information from a properties file.</p>\n</div>\n<div class=\"paragraph\">\n<p>Note that roles are not available directly on the API due to the fact that vertx-auth tries to be as portable as\npossible. However one can run assertions on role by using the prefix <code>role:</code> or by specifying the prefered prefix\nwith <code><a href=\"../../yardoc/VertxAuthShiro/ShiroAuth.html#set_role_prefix-instance_method\">setRolePrefix</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The implementation will, by default, look for a file called <code>vertx-users.properties</code> on the classpath.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to change this, you can use the <code>properties_path</code> configuration element to define how the properties\nfile is found.</p>\n</div>\n<div class=\"paragraph\">\n<p>The default value is <code>classpath:vertx-users.properties</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the value is prefixed with <code>classpath:</code> then the classpath will be searched for a properties file of that name.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the value is prefixed with <code>file:</code> then it specifies a file on the file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the value is prefixed with <code>url:</code> then it specifies a URL from where to load the properties.</p>\n</div>\n<div class=\"paragraph\">\n<p>The properties file should have the following structure:</p>\n</div>\n<div class=\"paragraph\">\n<p>Each line should either contain the username, password and roles for a user or the permissions in a role.</p>\n</div>\n<div class=\"paragraph\">\n<p>For a user line it should be of the form:</p>\n</div>\n<div class=\"paragraph\">\n<p>user.{username}={password},{roleName1},{roleName2},&#8230;&#8203;,{roleNameN}</p>\n</div>\n<div class=\"paragraph\">\n<p>For a role line it should be of the form:</p>\n</div>\n<div class=\"paragraph\">\n<p>role.{roleName}={permissionName1},{permissionName2},&#8230;&#8203;,{permissionNameN}</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>user.tim = mypassword,administrator,developer\nuser.bob = hispassword,developer\nuser.joe = anotherpassword,manager\nrole.administrator=*\nrole.manager=play_golf,say_buzzwords\nrole.developer=do_actual_work</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When describing roles a wildcard <code>*</code> can be used to indicate that the role has all permissions.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_the_shiro_ldap_auth_provider\"><a class=\"anchor\" href=\"#_the_shiro_ldap_auth_provider\"></a>The Shiro LDAP auth provider</h3>\n<div class=\"paragraph\">\n<p>The LDAP auth realm gets user/role/permission information from an LDAP server.</p>\n</div>\n<div class=\"paragraph\">\n<p>The following configuration properties are used to configure the LDAP realm:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>ldap_user_dn_template</code></dt>\n<dd>\n<p>this is used to determine the actual lookup to use when looking up a user with a particular\nid. An example is <code>uid={0},ou=users,dc=foo,dc=com</code> - the element <code>{0}</code> is substituted with the user id to create the\nactual lookup. This setting is mandatory.</p>\n</dd>\n<dt class=\"hdlist1\"><code>ldap_url</code></dt>\n<dd>\n<p>the url to the LDAP server. The url must start with <code>ldap://</code> and a port must be specified.\nAn example is <code>ldap://myldapserver.mycompany.com:10389</code></p>\n</dd>\n<dt class=\"hdlist1\"><code>ldap_authentication_mechanism</code></dt>\n<dd>\n<p>Sets the type of LDAP authentication mechanism to use when connecting to the LDAP server.</p>\n</dd>\n<dt class=\"hdlist1\"><code>ldap_context_factory_class_name</code></dt>\n<dd>\n<p>The name of the ContextFactory class to use. This defaults to the SUN LDAP JNDI implementation\nbut can be overridden to use custom LDAP factories.</p>\n</dd>\n<dt class=\"hdlist1\"><code>ldap_pooling_enabled</code></dt>\n<dd>\n<p>Sets whether or not connection pooling should be used when possible and appropriate.</p>\n</dd>\n<dt class=\"hdlist1\"><code>ldap_referral</code></dt>\n<dd>\n<p>Sets the LDAP referral behavior when creating a connection.  Defaults to <code>follow</code>.  See the Sun/Oracle LDAP\nreferral documentation for more: <a href=\"http://java.sun.com/products/jndi/tutorial/ldap/referral/jndi.html\" class=\"bare\">http://java.sun.com/products/jndi/tutorial/ldap/referral/jndi.html</a></p>\n</dd>\n<dt class=\"hdlist1\"><code>ldap_system_username</code></dt>\n<dd>\n<p>Sets the system username that will be used when creating an LDAP connection used for authorization\nqueries. The user must have the ability to query for authorization data for any application user.\nNote that setting this property is not required if the calling LDAP Realm does not perform authorization checks.</p>\n</dd>\n<dt class=\"hdlist1\"><code>ldap_system_password</code></dt>\n<dd>\n<p>Sets the password of the  that will be used when\ncreating an LDAP connection used for authorization queries.\nNote that setting this property is not required if the calling LDAP Realm does not perform authorization checks.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>For more information, refer to the documentation of org.apache.shiro.realm.ldap.JndiLdapContextFactory.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_another_shiro_realm\"><a class=\"anchor\" href=\"#_using_another_shiro_realm\"></a>Using another Shiro Realm</h3>\n<div class=\"paragraph\">\n<p>It&#8217;s also possible to create an auth provider instance using a pre-created Apache Shiro Realm object.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is done as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">require <span class=\"hljs-string\">'vertx-auth-shiro/shiro_auth'</span>\n\nprovider = VertxAuthShiro::ShiroAuth.create(vertx, realm)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The implementation currently assumes that user/password based authentication is used.</p>\n</div>\n</div>\n</div>\n</div>","version":"3.9.3"},"__N_SSG":true}