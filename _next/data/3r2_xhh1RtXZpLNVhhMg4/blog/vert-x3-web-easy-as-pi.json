{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Vert.x 3 Web easy as Pi","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"Vert.x Web distinguishes itself from traditional application servers like JavaEE by just being a simple extension toolkit to Vert.x, which makes it quite lightweight and small but nevertheless very powerful."},"date":"2015-07-01","slug":"vert-x3-web-easy-as-pi","readingTime":{"text":"4 min read","minutes":3.12,"time":187200.00000000003,"words":624},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(Link, {\n    href: \"/docs/#web\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x Web\")), \" dis\\xADtin\\xADguishes it\\xADself from tra\\xADdi\\xADtional ap\\xADpli\\xADca\\xADtion servers like JavaEE by just\\nbeing a sim\\xADple ex\\xADten\\xADsion toolkit to \", mdx(Link, {\n    href: \"/docs/#core\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x\")), \", which makes it quite light\\xADweight and small but\\nnev\\xADer\\xADthe\\xADless very pow\\xADer\\xADful.\"), mdx(\"p\", null, \"One can cre\\xADate sim\\xADple ap\\xADpli\\xADca\\xADtions tar\\xADget\\xADing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"small\"), \" de\\xADvices such as Rasp\\xADberry Pi with\\xADout hav\\xADing to write much code but\\nstill very fast as it is ex\\xADpected from any Vert.x ap\\xADpli\\xADca\\xADtion.\"), mdx(\"p\", null, \"Let\\u2019s for ex\\xADam\\xADple think of mak\\xADing a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/archive/experiments/rpi-cpuload.zip\"\n  }), \"re\\xADal\\xADtime cpu load vi\\xADsu\\xADal\\xADiza\\xADtion web app\"), \".\\nFor this ex\\xADam\\xADple we need a few things:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://docs.oracle.com/javase/7/docs/api/java/lang/management/OperatingSystemMXBean.html\"\n  }), \"MXBean\"), \" to col\\xADlect CPU load\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a \", mdx(Link, {\n    href: \"/docs/vertx-core/java/#_writing_http_servers_and_clients\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"HTTP server\")), \" (to serve the sta\\xADtic re\\xADsources and host our app)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a \", mdx(Link, {\n    href: \"/docs/vertx-web/java/#_sockjs\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"SockJS server\")), \" to pro\\xADvide re\\xADal\\xADtime up\\xADdates\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a SockJS to \", mdx(Link, {\n    href: \"/docs/vertx-web/java/#_sockjs_event_bus_bridge\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"Event\\xADBus bridge\")), \" to pass mes\\xADsages around\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"some \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://d3js.org/\"\n  }), \"vi\\xADsu\\xADal\\xADiza\\xADtion\"), \" JS li\\xADbrary\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a bit of cod\\xADing\")), mdx(\"p\", null, \"To boot\\xADstrap this project we start by cre\\xADat\\xADing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/pom.xml\"\n  }), \"pom.xml\"), \"\\nfile. A good start is al\\xADways to con\\xADsult the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples\"\n  }), \"ex\\xADam\\xADples\"), \",\\nand you should end up with some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), \"...\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx.blog\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"rpi\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependencies\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-core\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-web\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependencies\"), \">\"), \"\\n...\\n\")), mdx(\"p\", null, \"At this mo\\xADment you can start cod\\xADing the ap\\xADpli\\xADca\\xADtion using the stan\\xADdard maven source \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/java\"), \" and re\\xADsource\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/resouces\"), \" lo\\xADca\\xADtions. And add a the class \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/java/io/vertx/blog/RPiVerticle.java\"\n  }), \"io.vertx.blog.RpiVer\\xADti\\xADcle\"), \"\\nto the project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"RPiVerticle\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" OperatingSystemMXBean osMBean;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"try\"), \" {\\n      osMBean = ManagementFactory.newPlatformMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\\n          ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME, OperatingSystemMXBean.class);\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"catch\"), \" (IOException e) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throw\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RuntimeException(e);\\n    }\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n\\n    Router router = Router.router(vertx);\\n\\n    router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/eventbus/*\\\"\"), \").handler(SockJSHandler.create(vertx)\\n        .bridge(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" BridgeOptions().addOutboundPermitted(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" PermittedOptions().setAddress(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"load\\\"\"), \"))));\\n\\n    router.route().handler(StaticHandler.create());\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\\n    vertx.setPeriodic(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\"), \", t -> vertx.eventBus().publish(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"load\\\"\"), \",\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n            .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"creatTime\\\"\"), \", System.currentTimeMillis())\\n            .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"cpuTime\\\"\"), \", osMBean.getSystemLoadAverage())));\\n  }\\n}\\n\")), mdx(\"p\", null, \"So let\\u2019s go through the code, first in the sta\\xADtic con\\xADstruc\\xADtor we ini\\xADtial\\xADize the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MXBean\"), \" that will allow us to col\\xADlect\\nthe cur\\xADrent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System Load Average\"), \", then on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method we cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vert.x Web Router\"), \" and de\\xADfine that for all\\nre\\xADquests start\\xADing with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/eventbus\"), \" should be han\\xADdled by the SockJS server, which we then bridge to the Vert.x\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EventBus\"), \" and allow out\\xADbound mes\\xADsages ad\\xADdressed to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" ad\\xADdress.\"), mdx(\"p\", null, \"Since our ap\\xADpli\\xADca\\xADtion is a web ap\\xADpli\\xADca\\xADtion we will also server some sta\\xADtic con\\xADtent with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StaticHandler\"), \" and we\\nfi\\xADnally start a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTP server\"), \" lis\\xADten\\xADing on port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8080\"), \".\"), mdx(\"p\", null, \"So now all we are miss\\xADing is a way to push real time data to the client so we end up cre\\xADat\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Periodic\"), \" task that\\nre\\xADpeats every 1000 mil\\xADlisec\\xADonds and sends some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON\"), \" pay\\xADload to the ad\\xADdress \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"load\\\"\"), \".\"), mdx(\"p\", null, \"If you run this ap\\xADpli\\xADca\\xADtion right now you won\\u2019t see much since there is no fron\\xADtend yet, so let\\u2019s build a very basic\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/resources/webroot/index.html\"\n  }), \"index.html\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), \"...\\nvar eb = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" vertx.EventBus(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"window\"), \".location + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"eventbus\\\"\"), \");\\n\\neb.onopen = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n  eb.registerHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"load\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"msg\"), \") \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (data.length === \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"25\"), \") {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// when length of data equal 25 then pop data[0]\"), \"\\n      data.shift();\\n    }\\n    data.push({\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"creatTime\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"Date\"), \"(msg.creatTime),\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"cpuTime\\\"\"), \": msg.cpuTime\\n    });\\n    render();\\n  });\\n};\\n...\\n\")), mdx(\"p\", null, \"Let\\u2019s walk again the code, we start by open\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EventBus\"), \" bridge over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJS\"), \" and reg\\xADis\\xADter a han\\xADdler \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" to con\\xADsume\\nmes\\xADsages sent to that ad\\xADdress. Once such a mes\\xADsage ar\\xADrives we do some house keep\\xADing to avoid fill\\xADing our browser mem\\xADory\\nand then add the in\\xADcom\\xADing mes\\xADsage to the data queue and triger a ren\\xADder\\xADing of the data. There is how\\xADever one in\\xADter\\xADest\\xADing\\nissue here, since the mes\\xADsage pay\\xADload is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON\"), \" there is no na\\xADtive sup\\xADport for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Date\"), \" ob\\xADjects so we need to do some\\npars\\xADing from what ar\\xADrives from the server. In this case the server sends a sim\\xADple time since epoch num\\xADber, but one can\\nchoose any for\\xADmat he likes.\"), mdx(\"p\", null, \"At this mo\\xADment you can build and pack\\xADage your app like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mvn clean package\"), \", then de\\xADploy it to your rasp\\xADber\\xADrypi like:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scp target/rpi-1.0-fat.jar pi@raspberrypi:~/\"), \" and fi\\xADnally run it: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -jar rpi-1.0-fat.jar\"), \".\"), mdx(\"p\", null, \"Open a browser to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://raspberrypi:8080\"\n  }), \"see\"), \" the re\\xADal\\xADtime graph!\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx3-web-easy-as-pi/rpi.png\",\n    \"alt\": \"Screenshot\"\n  }))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><a href=\"/docs/#web\">Vert.x Web</a> dis­tin­guishes it­self from tra­di­tional ap­pli­ca­tion servers like JavaEE by just\nbeing a sim­ple ex­ten­sion toolkit to <a href=\"/docs/#core\">Vert.x</a>, which makes it quite light­weight and small but\nnev­er­the­less very pow­er­ful.</p><p>One can cre­ate sim­ple ap­pli­ca­tions tar­get­ing <em>small</em> de­vices such as Rasp­berry Pi with­out hav­ing to write much code but\nstill very fast as it is ex­pected from any Vert.x ap­pli­ca­tion.</p><p>Let’s for ex­am­ple think of mak­ing a <a href=\"https://github.com/pmlopes/vert-x3-experiments/archive/experiments/rpi-cpuload.zip\">re­al­time cpu load vi­su­al­iza­tion web app</a>.\nFor this ex­am­ple we need a few things:</p><ul><li>a <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/management/OperatingSystemMXBean.html\">MXBean</a> to col­lect CPU load</li><li>a <a href=\"/docs/vertx-core/java/#_writing_http_servers_and_clients\">HTTP server</a> (to serve the sta­tic re­sources and host our app)</li><li>a <a href=\"/docs/vertx-web/java/#_sockjs\">SockJS server</a> to pro­vide re­al­time up­dates</li><li>a SockJS to <a href=\"/docs/vertx-web/java/#_sockjs_event_bus_bridge\">Event­Bus bridge</a> to pass mes­sages around</li><li>some <a href=\"http://d3js.org/\">vi­su­al­iza­tion</a> JS li­brary</li><li>a bit of cod­ing</li></ul><p>To boot­strap this project we start by cre­at­ing the <a href=\"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/pom.xml\">pom.xml</a>\nfile. A good start is al­ways to con­sult the <a href=\"https://github.com/vert-x3/vertx-examples\">ex­am­ples</a>,\nand you should end up with some­thing like:</p><pre><code class=\"hljs language-xml\">...\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx.blog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>rpi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n...\n</code></pre><p>At this mo­ment you can start cod­ing the ap­pli­ca­tion using the stan­dard maven source <code>src/main/java</code> and re­source\n<code>src/main/resouces</code> lo­ca­tions. And add a the class <a href=\"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/java/io/vertx/blog/RPiVerticle.java\">io.vertx.blog.RpiVer­ti­cle</a>\nto the project:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RPiVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> OperatingSystemMXBean osMBean;\n\n  <span class=\"hljs-keyword\">static</span> {\n    <span class=\"hljs-keyword\">try</span> {\n      osMBean = ManagementFactory.newPlatformMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\n          ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME, OperatingSystemMXBean.class);\n    } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(e);\n    }\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n\n    Router router = Router.router(vertx);\n\n    router.route(<span class=\"hljs-string\">&quot;/eventbus/*&quot;</span>).handler(SockJSHandler.create(vertx)\n        .bridge(<span class=\"hljs-keyword\">new</span> BridgeOptions().addOutboundPermitted(<span class=\"hljs-keyword\">new</span> PermittedOptions().setAddress(<span class=\"hljs-string\">&quot;load&quot;</span>))));\n\n    router.route().handler(StaticHandler.create());\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n\n    vertx.setPeriodic(<span class=\"hljs-number\">1000</span>, t -&gt; vertx.eventBus().publish(<span class=\"hljs-string\">&quot;load&quot;</span>,\n        <span class=\"hljs-keyword\">new</span> JsonObject()\n            .put(<span class=\"hljs-string\">&quot;creatTime&quot;</span>, System.currentTimeMillis())\n            .put(<span class=\"hljs-string\">&quot;cpuTime&quot;</span>, osMBean.getSystemLoadAverage())));\n  }\n}\n</code></pre><p>So let’s go through the code, first in the sta­tic con­struc­tor we ini­tial­ize the <code>MXBean</code> that will allow us to col­lect\nthe cur­rent <code>System Load Average</code>, then on the <code>start</code> method we cre­ate a <code>Vert.x Web Router</code> and de­fine that for all\nre­quests start­ing with <code>/eventbus</code> should be han­dled by the SockJS server, which we then bridge to the Vert.x\n<code>EventBus</code> and allow out­bound mes­sages ad­dressed to the <code>load</code> ad­dress.</p><p>Since our ap­pli­ca­tion is a web ap­pli­ca­tion we will also server some sta­tic con­tent with the <code>StaticHandler</code> and we\nfi­nally start a <code>HTTP server</code> lis­ten­ing on port <code>8080</code>.</p><p>So now all we are miss­ing is a way to push real time data to the client so we end up cre­at­ing a <code>Periodic</code> task that\nre­peats every 1000 mil­lisec­onds and sends some <code>JSON</code> pay­load to the ad­dress <code>&quot;load&quot;</code>.</p><p>If you run this ap­pli­ca­tion right now you won’t see much since there is no fron­tend yet, so let’s build a very basic\n<a href=\"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/resources/webroot/index.html\">index.html</a>:</p><pre><code class=\"hljs language-javascript\">...\nvar eb = <span class=\"hljs-keyword\">new</span> vertx.EventBus(<span class=\"hljs-built_in\">window</span>.location + <span class=\"hljs-string\">&quot;eventbus&quot;</span>);\n\neb.onopen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  eb.registerHandler(<span class=\"hljs-string\">&quot;load&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">msg</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (data.length === <span class=\"hljs-number\">25</span>) {\n      <span class=\"hljs-comment\">// when length of data equal 25 then pop data[0]</span>\n      data.shift();\n    }\n    data.push({\n      <span class=\"hljs-string\">&quot;creatTime&quot;</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(msg.creatTime),\n      <span class=\"hljs-string\">&quot;cpuTime&quot;</span>: msg.cpuTime\n    });\n    render();\n  });\n};\n...\n</code></pre><p>Let’s walk again the code, we start by open­ing a <code>EventBus</code> bridge over <code>SockJS</code> and reg­is­ter a han­dler <code>data</code> to con­sume\nmes­sages sent to that ad­dress. Once such a mes­sage ar­rives we do some house keep­ing to avoid fill­ing our browser mem­ory\nand then add the in­com­ing mes­sage to the data queue and triger a ren­der­ing of the data. There is how­ever one in­ter­est­ing\nissue here, since the mes­sage pay­load is <code>JSON</code> there is no na­tive sup­port for <code>Date</code> ob­jects so we need to do some\npars­ing from what ar­rives from the server. In this case the server sends a sim­ple time since epoch num­ber, but one can\nchoose any for­mat he likes.</p><p>At this mo­ment you can build and pack­age your app like <code>mvn clean package</code>, then de­ploy it to your rasp­ber­rypi like:\n<code>scp target/rpi-1.0-fat.jar pi@raspberrypi:~/</code> and fi­nally run it: <code>java -jar rpi-1.0-fat.jar</code>.</p><p>Open a browser to <a href=\"http://raspberrypi:8080\">see</a> the re­al­time graph!</p><p><img src=\"/images/blog/vertx3-web-easy-as-pi/rpi.png\" alt=\"Screenshot\"/></p>","scope":{}}},"prevPost":{"meta":{"title":"Vert.x 3 init.d Script","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say you have a Vert.x 3 application you want to install on a Linux server. But you want the old school way (I mean not the Docker way)."},"date":"2015-07-02","slug":"vert-x-3-init-d-script"},"nextPost":{"meta":{"title":"Vert.x 2.1.6 released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"The Vert.x team is pleased to announce the release of Vert.x 2.1.6"},"date":"2015-06-30","slug":"vert-x-2-1-6-released"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"}]},"__N_SSG":true}