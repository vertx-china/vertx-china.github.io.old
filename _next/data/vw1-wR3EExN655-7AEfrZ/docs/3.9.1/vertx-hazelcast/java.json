{"pageProps":{"slug":"3.9.1/vertx-hazelcast/java","title":"Hazelcast Cluster Manager","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_this_cluster_manager\">Using this cluster manager</a></li>\n<li><a href=\"#configcluster\">Configuring this cluster manager</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_configuring_with_xml\">Configuring with XML</a></li>\n<li><a href=\"#_configuring_programmatically\">Configuring programmatically</a></li>\n<li><a href=\"#_discovery_options\">Discovery options</a></li>\n</ul>\n</li>\n<li><a href=\"#_using_an_existing_hazelcast_cluster\">Using an existing Hazelcast cluster</a></li>\n<li><a href=\"#_changing_timeout_for_failed_nodes\">Changing timeout for failed nodes</a></li>\n<li><a href=\"#_using_hazelcast_async_methods\">Using Hazelcast async methods</a></li>\n<li><a href=\"#_trouble_shooting_clustering\">Trouble shooting clustering</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_multicast_not_enabled_on_the_machine\">Multicast not enabled on the machine.</a></li>\n<li><a href=\"#_using_wrong_network_interface\">Using wrong network interface</a></li>\n<li><a href=\"#_using_a_vpn\">Using a VPN</a></li>\n<li><a href=\"#_when_multicast_is_not_available\">When multicast is not available</a></li>\n<li><a href=\"#_enabling_logging\">Enabling logging</a></li>\n</ul>\n</li>\n<li><a href=\"#_hazelcast_logging\">Hazelcast logging</a></li>\n<li><a href=\"#_using_a_different_hazelcast_version\">Using a different Hazelcast version</a></li>\n<li><a href=\"#_configuring_for_kubernetes\">Configuring for Kubernetes</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_rolling_updates\">Rolling updates</a></li>\n</ul>\n</li>\n<li><a href=\"#_cluster_administration\">Cluster administration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_partitioning\">Data partitioning</a></li>\n<li><a href=\"#_split_brain_syndrome\">Split-brain syndrome</a></li>\n<li><a href=\"#_recommendations\">Recommendations</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Hazelcast Cluster Manager</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This is a cluster manager implementation for Vert.x that uses <a href=\"http://hazelcast.com\">Hazelcast</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>It is the default cluster manager used in the Vert.x distribution, but it can be replaced with another implementation as Vert.x\ncluster managers are pluggable.  This implementation is packaged inside:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-hazelcast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In Vert.x a cluster manager is used for various functions including:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Discovery and group membership of Vert.x nodes in a cluster</p>\n</li>\n<li>\n<p>Maintaining cluster wide topic subscriber lists (so we know which nodes are interested in which event bus addresses)</p>\n</li>\n<li>\n<p>Distributed Map support</p>\n</li>\n<li>\n<p>Distributed Locks</p>\n</li>\n<li>\n<p>Distributed Counters</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Cluster managersdo not* handle the event bus inter-node transport, this is done directly by Vert.x with TCP connections.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_this_cluster_manager\"><a class=\"anchor\" href=\"#_using_this_cluster_manager\"></a>Using this cluster manager</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are using Vert.x from the command line, the jar corresponding to this cluster manager (it will be named <code>vertx-hazelcast-3.9.1.jar</code>\nshould be in the <code>lib</code> directory of the Vert.x installation.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want clustering with this cluster manager in your Vert.x Maven or Gradle project then just add a dependency to\nthe artifact: <code>io.vertx:vertx-hazelcast:3.9.1</code> in your project.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the jar is on your classpath as above then Vert.x will automatically detect this and use it as the cluster manager.\nPlease make sure you don&#8217;t have any other cluster managers on your classpath or Vert.x might\nchoose the wrong one.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can also specify the cluster manager programmatically if you are embedding Vert.x by specifying it on the options\nwhen you are creating your Vert.x instance, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ClusterManager mgr = <span class=\"hljs-keyword\">new</span> HazelcastClusterManager();\n\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\n\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"configcluster\"><a class=\"anchor\" href=\"#configcluster\"></a>Configuring this cluster manager</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_configuring_with_xml\"><a class=\"anchor\" href=\"#_configuring_with_xml\"></a>Configuring with XML</h3>\n<div class=\"paragraph\">\n<p>Usually the cluster manager is configured by a file\n<a href=\"https://github.com/vert-x3/vertx-hazelcast/blob/master/src/main/resources/default-cluster.xml\"><code>default-cluster.xml</code></a>\nwhich is packaged inside the jar.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to override this configuration you can provide a file called <code>cluster.xml</code> on your classpath and this\nwill be used instead. If you want to embed the <code>cluster.xml</code> file in a fat jar, it must be located at the root of the\nfat jar. If it&#8217;s an external file, the <strong>directory</strong> containing the file must be added to the classpath. For\nexample, if you are using the <em>launcher</em> class from Vert.x, the classpath enhancement can be done as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code># If the cluster.xml is in the current directory:\njava -jar ... -cp . -cluster\nvertx run MyVerticle -cp . -cluster\n\n# If the cluster.xml is in the conf directory\njava -jar ... -cp conf -cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Another way to override the configuration is by providing the system property <code>vertx.hazelcast.config</code> with a\nlocation:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code># Use a cluster configuration located in an external file\njava -Dvertx.hazelcast.config=./config/my-cluster-config.xml -jar ... -cluster\n\n# Or use a custom configuration from the classpath\njava -Dvertx.hazelcast.config=classpath:my/package/config/my-cluster-config.xml -jar ... -cluster</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>vertx.hazelcast.config</code> system property, when present, overrides any <code>cluster.xml</code> on the classpath, but if\nloading\nfrom this system property fails, then loading falls back to either <code>cluster.xml</code> or the Hazelcast default configuration.</p>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">小心</div>\n</td>\n<td class=\"content\">\nConfiguration of Hazelcast the <code>-Dhazelcast.config</code> system property is not supported by Vert.x and should\nnot be used.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>The xml file is a Hazelcast configuration file and is described in detail in the documentation on the Hazelcast\nweb-site.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuring_programmatically\"><a class=\"anchor\" href=\"#_configuring_programmatically\"></a>Configuring programmatically</h3>\n<div class=\"paragraph\">\n<p>You can specify configuration programmatically if embedding:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Config hazelcastConfig = <span class=\"hljs-keyword\">new</span> Config();\n\n<span class=\"hljs-comment\">// Now set some stuff on the config (omitted)</span>\n\nClusterManager mgr = <span class=\"hljs-keyword\">new</span> HazelcastClusterManager(hazelcastConfig);\n\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\n\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It might also be useful to customize an existing XML configuration.\nFor example, you might want to change the cluster group name and password:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Config hazelcastConfig = ConfigUtil.loadConfig();\n\nhazelcastConfig.getGroupConfig()\n  .setName(<span class=\"hljs-string\">\"my-cluster-name\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"passwd\"</span>);\n\nClusterManager mgr = <span class=\"hljs-keyword\">new</span> HazelcastClusterManager(hazelcastConfig);\n\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\n\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>ConfigUtil#loadConfig</code> loads Hazelcast config XML and transform it into a <code>Config</code> object.\nThe content is read from:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>the location denoted by the <code>vertx.hazelcast.config</code> sysprop, if present, or</p>\n</li>\n<li>\n<p>the <code>cluster.xml</code> file on the classpath, if present, or</p>\n</li>\n<li>\n<p>the default config file</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_discovery_options\"><a class=\"anchor\" href=\"#_discovery_options\"></a>Discovery options</h3>\n<div class=\"paragraph\">\n<p>Hazelcast supports several different discovery options.\nThe default configuration uses multicast so you must have multicast enabled on your network for this to work.</p>\n</div>\n<div class=\"paragraph\">\n<p>For full documentation on how to configure discovery differently please consult the Hazelcast documentation.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_an_existing_hazelcast_cluster\"><a class=\"anchor\" href=\"#_using_an_existing_hazelcast_cluster\"></a>Using an existing Hazelcast cluster</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can pass an existing <code>HazelcastInstance</code> in the cluster manager to reuse an existing cluster:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ClusterManager mgr = <span class=\"hljs-keyword\">new</span> HazelcastClusterManager(hazelcastInstance);\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this case, vert.x is not the cluster owner and so do not shutdown the cluster on close.</p>\n</div>\n<div class=\"paragraph\">\n<p>Notice that the custom Hazelcast instance need to be configured with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"hazelcast.shutdownhook.enabled\"</span>&gt;</span>false<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">multimap</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"__vertx.subs\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">backup-count</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">backup-count</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">multimap</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"__vertx.haInfo\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">time-to-live-seconds</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">time-to-live-seconds</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">max-idle-seconds</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">max-idle-seconds</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">eviction-policy</span>&gt;</span>NONE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">eviction-policy</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">max-size</span> <span class=\"hljs-attr\">policy</span>=<span class=\"hljs-string\">\"PER_NODE\"</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">max-size</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">eviction-percentage</span>&gt;</span>25<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">eviction-percentage</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">merge-policy</span>&gt;</span>com.hazelcast.map.merge.LatestUpdateMapMergePolicy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">merge-policy</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">semaphore</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"__vertx.*\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">initial-permits</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">initial-permits</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">semaphore</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\nHazelcast clients or smart clients are not supported.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\nMake sure Hazelcast is started before and shut down after Vert.x.\nAlso, the Hazelcast shutdown hook should be disabled (see xml example, or via system property).\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_changing_timeout_for_failed_nodes\"><a class=\"anchor\" href=\"#_changing_timeout_for_failed_nodes\"></a>Changing timeout for failed nodes</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>By default a node will be removed from the cluster if Hazelcast didn&#8217;t receive a heartbeat for 300 seconds. To change\nthis value <code>hazelcast.max.no.heartbeat.seconds</code> system property such as in:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>-Dhazelcast.max.no.heartbeat.seconds=5</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Afterwards a node will be removed from the cluster after 5 seconds without a heartbeat.</p>\n</div>\n<div class=\"paragraph\">\n<p>See <a href=\"http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#system-properties\">Hazelcast\nsystem-properties</a> and\n<a href=\"http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#configuring-with-system-properties\">configuring Hazelcast\nwith system properties</a> for the other properties you can configure.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_hazelcast_async_methods\"><a class=\"anchor\" href=\"#_using_hazelcast_async_methods\"></a>Using Hazelcast async methods</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Hazelcast&#8217;s <code>IMap</code> and <code>IAtomicLong</code> interfaces can be used with async methods returning <code>ICompletableFuture&lt;V&gt;</code>, a natural fit for Vert.x threading model.</p>\n</div>\n<div class=\"paragraph\">\n<p>Supplying the option <code>-Dvertx.hazelcast.async-api=true</code> on JVM startup, will indicate that the async Hazelcast API methods will be used to communicate with the hazelcast cluster.\nEffectively, this means that when this option is enabled, execution of all <code>Counter</code> operations and <code>AsyncMap.get</code>,<code>AsyncMap.put</code> and <code>AsyncMap.remove</code> operations will occur in the calling thread (the event loop), instead of a worker thread with <code>vertx.executeBlocking</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_trouble_shooting_clustering\"><a class=\"anchor\" href=\"#_trouble_shooting_clustering\"></a>Trouble shooting clustering</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If the default multicast configuration is not working here are some common causes:</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_multicast_not_enabled_on_the_machine\"><a class=\"anchor\" href=\"#_multicast_not_enabled_on_the_machine\"></a>Multicast not enabled on the machine.</h3>\n<div class=\"paragraph\">\n<p>It is quite common in particular on OSX machines for multicast to be disabled by default. Please google for\ninformation on how to enable this.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_wrong_network_interface\"><a class=\"anchor\" href=\"#_using_wrong_network_interface\"></a>Using wrong network interface</h3>\n<div class=\"paragraph\">\n<p>If you have more than one network interface on your machine (and this can also be the case if you are running\nVPN software on your machine), then Hazelcast may be using the wrong one.</p>\n</div>\n<div class=\"paragraph\">\n<p>To tell Hazelcast to use a specific interface you can provide the IP address of the interface in the <code>interfaces</code>\nelement of the configuration. Make sure you set the <code>enabled</code> attribute to <code>true</code>. For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>&lt;interfaces enabled=\"true\"&gt;\n &lt;interface&gt;192.168.1.20&lt;/interface&gt;\n&lt;/interfaces&gt;</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When running Vert.x is in clustered mode, you should also make sure that Vert.x knows about the correct interface.\nWhen running at the command line this is done by specifying the <code>cluster-host</code> option:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>vertx run myverticle.js -cluster -cluster-host your-ip-address</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Where <code>your-ip-address</code> is the same IP address you specified in the Hazelcast configuration.</p>\n</div>\n<div class=\"paragraph\">\n<p>If using Vert.x programmatically you can specify this using\n<code><a href=\"../../apidocs/io/vertx/core/VertxOptions.html#setClusterHost-java.lang.String-\">setClusterHost</a></code>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_using_a_vpn\"><a class=\"anchor\" href=\"#_using_a_vpn\"></a>Using a VPN</h3>\n<div class=\"paragraph\">\n<p>This is a variation of the above case. VPN software often works by creating a virtual network interface which often\ndoesn&#8217;t support multicast. If you have a VPN running and you do not specify the correct interface to use in both the\nhazelcast configuration and to Vert.x then the VPN interface may be chosen instead of the correct interface.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, if you have a VPN running you may have to configure both the Hazelcast and Vert.x to use the correct interface as\ndescribed in the previous section.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_when_multicast_is_not_available\"><a class=\"anchor\" href=\"#_when_multicast_is_not_available\"></a>When multicast is not available</h3>\n<div class=\"paragraph\">\n<p>In some cases you may not be able to use multicast as it might not be available in your environment. In that case\nyou should configure another transport, e.g. TCP  to use TCP sockets, or AWS when running on Amazon EC2.</p>\n</div>\n<div class=\"paragraph\">\n<p>For more information on available Hazelcast transports and how to configure them please consult the Hazelcast\ndocumentation.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_enabling_logging\"><a class=\"anchor\" href=\"#_enabling_logging\"></a>Enabling logging</h3>\n<div class=\"paragraph\">\n<p>When trouble-shooting clustering issues with Hazelcast it&#8217;s often useful to get some logging output from Hazelcast\nto see if it&#8217;s forming a cluster properly. You can do this (when using the default JUL logging) by adding a file\ncalled <code>vertx-default-jul-logging.properties</code> on your classpath. This is a standard java.util.logging (JUL)\nconfiguration file. Inside it set:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>com.hazelcast.level=INFO</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>and also</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>java.util.logging.ConsoleHandler.level=INFO\njava.util.logging.FileHandler.level=INFO</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_hazelcast_logging\"><a class=\"anchor\" href=\"#_hazelcast_logging\"></a>Hazelcast logging</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The logging backend used by Hazelcast is <code>jdk</code> by default (understand JUL). If you want to redirect the logging to\nanother library, you need to set the <code>hazelcast.logging.type</code> system property such as in:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>-Dhazelcast.logging.type=slf4j</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>See the <a href=\"http://docs.hazelcast.org/docs/3.6.1/manual/html-single/index.html#logging-configuration\">hazelcast documentation</a> for more details.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_a_different_hazelcast_version\"><a class=\"anchor\" href=\"#_using_a_different_hazelcast_version\"></a>Using a different Hazelcast version</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You may want to use a different version of Hazelcast. The default version is <code>3.12.2</code>. To do so, you\nneed to:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>put the version you want in the application classpath</p>\n</li>\n<li>\n<p>if you are running a fat jar, configure your build manager to use the right version</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>In this later case, you would need in Maven:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hazelcast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hazelcast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>ENTER_YOUR_VERSION_HERE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-hazelcast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Depending on the version, you may need to exclude some transitive dependencies.</p>\n</div>\n<div class=\"paragraph\">\n<p>On Gradle, you can achieve the same overloading using:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>dependencies {\ncompile (\"io.vertx:vertx-hazelcast:3.9.1\"){\n  exclude group: 'com.hazelcast', module: 'hazelcast'\n}\ncompile \"com.hazelcast:hazelcast:ENTER_YOUR_VERSION_HERE\"\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_for_kubernetes\"><a class=\"anchor\" href=\"#_configuring_for_kubernetes\"></a>Configuring for Kubernetes</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>On Kubernetes, Hazelcast should be configured to use the <a href=\"https://github.com/hazelcast/hazelcast-kubernetes\">Hazelcast Kubernetes</a> plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, add the <code>io.vertx:vertx-hazelcast:${vertx.version}</code> and <code>com.hazelcast:hazelcast-kubernetes:${hazelcast-kubernetes.version}</code> dependencies to your project.\nWith Maven it looks like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-hazelcast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${vertx.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.hazelcast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hazelcast-kubernetes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${hazelcast-kubernetes.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nIf you use a different version of the Hazelcast core library, make sure to use a compatible version of the Kubernetes discovery plugin.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>The second step is to configure the discovery plugin inside of your Hazelcast configuration, by either providing a custom <code>cluster.xml</code> file or programmatically, as described in <a href=\"#configcluster\">Configuring this cluster manager</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin provides two <a href=\"https://github.com/hazelcast/hazelcast-kubernetes#understanding-discovery-modes\">discovery modes</a>: <em>Kubernetes API</em> and <em>DNS Lookup</em>.\nPlease refer to the plugin project page for pros and cons of both modes.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this document, we will use <em>DNS Lookup</em> discovery. The following properties have to be changed / added:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hazelcast</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"hazelcast.discovery.enabled\"</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span> <b class=\"conum\">(1)</b>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">network</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">join</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">multicast</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"false\"</span>/&gt;</span> <b class=\"conum\">(2)</b>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tcp-ip</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"false\"</span> /&gt;</span>\n\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">discovery-strategies</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">discovery-strategy</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"true\"</span> <b class=\"conum\">(3)</b>\n           <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.hazelcast.kubernetes.HazelcastKubernetesDiscoveryStrategy\"</span>&gt;</span>\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service-dns\"</span>&gt;</span>MY-SERVICE-DNS-NAME<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span> <b class=\"conum\">(4)</b>\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">discovery-strategy</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">discovery-strategies</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">join</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">network</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hazelcast</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Activate Discovery SPI</p>\n</li>\n<li>\n<p>Deactivate other discoveries</p>\n</li>\n<li>\n<p>Activate the Kubernetes plugin</p>\n</li>\n<li>\n<p>Service DNS, usually in the form of <code>MY-SERVICE-NAME.MY-NAMESPACE.svc.cluster.local</code> but depends on the Kubernetes distribution</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>The <code>MY-SERVICE-DNS-NAME</code> value must be a <strong>headless</strong> Kubernetes service name that will be used by Hazelcast to identify all cluster members.\nA headless service can be created with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">MY-NAMESPACE</span>\n <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">MY-SERVICE-NAME</span>\n<span class=\"hljs-attr\">spec:</span>\n <span class=\"hljs-attr\">selector:</span>\n   <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">MY-SERVICE-NAME</span> <b class=\"conum\">(1)</b>\n <span class=\"hljs-attr\">clusterIP:</span> <span class=\"hljs-string\">None</span>\n <span class=\"hljs-attr\">ports:</span>\n <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hz-port-name</span>\n   <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">5701</span>\n   <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Cluster members selected by label</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Eventually, attach the <code>component</code> label to all deployments that should be part of the cluster:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">extensions/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">MY-NAMESPACE</span>\n<span class=\"hljs-attr\">spec:</span>\n <span class=\"hljs-attr\">template:</span>\n   <span class=\"hljs-attr\">metadata:</span>\n     <span class=\"hljs-attr\">labels:</span>\n       <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">MY-SERVICE-NAME</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Further configuration details are available on the <a href=\"https://github.com/hazelcast/hazelcast-kubernetes\">Hazelcast Kubernetes Plugin page</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_rolling_updates\"><a class=\"anchor\" href=\"#_rolling_updates\"></a>Rolling updates</h3>\n<div class=\"paragraph\">\n<p>During rolling updates, it is recommended to replace pods one by one.</p>\n</div>\n<div class=\"paragraph\">\n<p>To do so, we must configure Kubernetes to:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>never start more than one new pod at once</p>\n</li>\n<li>\n<p>forbid more than one unavailable pod during the process</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-attr\">spec:</span>\n <span class=\"hljs-attr\">strategy:</span>\n   <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">Rolling</span>\n   <span class=\"hljs-attr\">rollingParams:</span>\n     <span class=\"hljs-attr\">updatePeriodSeconds:</span> <span class=\"hljs-number\">10</span>\n     <span class=\"hljs-attr\">intervalSeconds:</span> <span class=\"hljs-number\">20</span>\n     <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">600</span>\n     <span class=\"hljs-attr\">maxUnavailable:</span> <span class=\"hljs-number\">1</span> <b class=\"conum\">(1)</b>\n     <span class=\"hljs-attr\">maxSurge:</span> <span class=\"hljs-number\">1</span> <b class=\"conum\">(2)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>the maximum number of pods that can be unavailable during the update process</p>\n</li>\n<li>\n<p>the maximum number of pods that can be created over the desired number of pods</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Also, the pod readiness probe must take the cluster state into account.\nPlease refer to the <a href=\"#one-by-one\">cluster administration</a> section for details on how to implement a readiness probe with <a href=\"../../vertx-health-check/java/\">Vert.x Health Checks</a>.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cluster_administration\"><a class=\"anchor\" href=\"#_cluster_administration\"></a>Cluster administration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Hazelcast cluster manager works by turning Vert.x nodes into members of a Hazelcast cluster.\nAs a consequence, Vert.x cluster manager administration should follow the Hazelcast management guidelines.</p>\n</div>\n<div class=\"paragraph\">\n<p>First, let&#8217;s take a step back and introduce data partitioning and split-brain syndrome.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_partitioning\"><a class=\"anchor\" href=\"#_data_partitioning\"></a>Data partitioning</h3>\n<div class=\"paragraph\">\n<p>Each Vert.x node holds pieces of the clustering data: eventbus subscriptions, async map entries, clustered counters&#8230;&#8203; etc.</p>\n</div>\n<div class=\"paragraph\">\n<p>When a member joins or leaves the cluster, Hazelcast migrates data partitions.\nIn other words, it moves data around to accomodate the new cluster topology.\nThis process may take some time, depending on the amount of clustered data and number of nodes.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_split_brain_syndrome\"><a class=\"anchor\" href=\"#_split_brain_syndrome\"></a>Split-brain syndrome</h3>\n<div class=\"paragraph\">\n<p>In a perfect world, there would be no network equipment failures.\nReality is, though, that sooner or later your cluster will be divided into smaller groups, unable to see each others.</p>\n</div>\n<div class=\"paragraph\">\n<p>Hazelcast is capable of merging the nodes back into a single cluster.\nBut just as with data partition migrations, this process may take some time.\nBefore the cluster is fully functional again, some eventbus consumers might not be able to get messages.\nOr high-availability may not be able to redeploy a failing verticle.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>It is difficult (if possible at all) to make a difference between a network partition and:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>long GC pauses (leading to missed heartbeats checks),</p>\n</li>\n<li>\n<p>many nodes being killed forcefully, at-once, because you are deploying a new version of your application</p>\n</li>\n</ul>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_recommendations\"><a class=\"anchor\" href=\"#_recommendations\"></a>Recommendations</h3>\n<div class=\"paragraph\">\n<p>Considering the common clustering issues discussed above, it is recommended to stick to the following good practices.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_graceful_shutdown\"><a class=\"anchor\" href=\"#_graceful_shutdown\"></a>Graceful shutdown</h4>\n<div class=\"paragraph\">\n<p>Avoid stopping members forcefully (e.g, <code>kill -9</code> a node).</p>\n</div>\n<div class=\"paragraph\">\n<p>Of course process crashes are inevitable, but a graceful shutdown helps to get the remaining nodes in a stable state faster.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"one-by-one\"><a class=\"anchor\" href=\"#one-by-one\"></a>One node after the other</h4>\n<div class=\"paragraph\">\n<p>When rolling a new version of your app, scaling-up or down your cluster, add or remove nodes one after the other.</p>\n</div>\n<div class=\"paragraph\">\n<p>Stopping nodes one by one prevents the cluster from thinking a network partition occured.\nAdding them one by one allows for clean, incremental data partition migrations.</p>\n</div>\n<div class=\"paragraph\">\n<p>The cluster safety can be verified with <a href=\"../../vertx-health-check/java/\">Vert.x Health Checks</a>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Handler&lt;Promise&lt;Status&gt;&gt; procedure = ClusterHealthCheck.createProcedure(vertx);\nHealthChecks checks = HealthChecks.create(vertx).register(<span class=\"hljs-string\">\"cluster-health\"</span>, procedure);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After creation, the health check can be exposed over HTTP with a <a href=\"../../vertx-web/java/\">Vert.x Web</a> router handler:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Router router = Router.router(vertx);\nrouter.get(<span class=\"hljs-string\">\"/readiness\"</span>).handler(HealthCheckHandler.createWithHealthChecks(checks));</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_using_lite_members\"><a class=\"anchor\" href=\"#_using_lite_members\"></a>Using Lite Members</h4>\n<div class=\"paragraph\">\n<p>To minimize the time a Vert.x cluster spends accomodating a new topology, you may use external data nodes and mark Vert.x nodes as <a href=\"https://docs.hazelcast.org/docs/latest/manual/html-single/#enabling-lite-members\"><em>Lite Members</em></a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><em>Lite Members</em> participate in a Hazelcast cluster like regular members, but they do not own any data partition.\nTherefore, Hazelcast does not need to migrate partitions when such members are added or removed.</p>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\nYou must start the external data nodes beforehand as Hazelcast won&#8217;t create a cluster with <em>Lite Members</em> only.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>To start an external node, you can use the Hazelcast distribution start script, or proceed programmatically.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x nodes can be marked as <em>Lite Members</em> in the XML configuration:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">lite-member</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also do it programmatically:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Config hazelcastConfig = ConfigUtil.loadConfig()\n  .setLiteMember(<span class=\"hljs-keyword\">true</span>);\n\nClusterManager mgr = <span class=\"hljs-keyword\">new</span> HazelcastClusterManager(hazelcastConfig);\n\nVertxOptions options = <span class=\"hljs-keyword\">new</span> VertxOptions().setClusterManager(mgr);\n\nVertx.clusteredVertx(options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    Vertx vertx = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// failed!</span>\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"3.9.1"},"__N_SSG":true}