{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Eclipse Vert.x RabbitMQ client gets a new consumer API!","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this blog post, we present the new consumer API of the RabbitMQ client that will be released with Eclipse Vert.x 3.6.0."},"date":"2018-04-23","slug":"eclipse-vert-x-rabbitmq-client-gets-a-new-consumer-api","readingTime":{"text":"3 min read","minutes":2.245,"time":134700,"words":449},"content":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var p=(a,n,s)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[n]=s,e=(a,n)=>{for(var s in n||(n={}))o.call(n,s)&&p(a,s,n[s]);if(i)for(var s of i(n))r.call(n,s)&&p(a,s,n[s]);return a},l=(a,n)=>d(a,h(n));var m=(a,n)=>{var s={};for(var t in a)o.call(a,t)&&n.indexOf(t)<0&&(s[t]=a[t]);if(a!=null&&i)for(var t of i(a))n.indexOf(t)<0&&r.call(a,t)&&(s[t]=a[t]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var t=s,{components:a}=t,n=m(t,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`In Eclipse Vert.x 3.6.0, the Rab\\xADbitMQ client will get a new con\\xADsumer API. In this post we are going to show\nthe im\\xADprove\\xADments since the pre\\xADvi\\xADous API and how easy it is to use now.`),mdx(\"p\",null,\"Be\\xADfore dig\\xADging into the new API let\\u2019s find out what were the lim\\xADi\\xADta\\xADtions of the ac\\xADtual one:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"The API uses the event bus in such lim\\xADit\\xADing the con\\xADtrol of the con\\xADsumer over the Rab\\xADbitMQ queue.\"),mdx(\"li\",{parentName:\"ol\"},\"The mes\\xADsage API is based on \",mdx(\"inlineCode\",{parentName:\"li\"},\"JsonObject\"),\" which does not pro\\xADvide a typed API\")),mdx(\"h2\",e({},{id:\"the-new-api-at-a-glance\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#the-new-api-at-a-glance\"})),\"The new API at a glance\"),mdx(\"p\",null,\"Here is how sim\\xADple queue con\\xADsump\\xADtion looks like with the new API:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),\"RabbitMQClient client = RabbitMQClient.create(vertx, \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` RabbitMQOptions());\n\nclient.basicConsumer(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"my.queue\"'),`, res -> {\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"if\"),` (res.succeeded()) {\n    System.out.println(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"RabbitMQ consumer created !\"'),`);\n    RabbitMQConsumer mqConsumer = res.result();\n    mqConsumer.handler((RabbitMQMessage message) -> {\n        System.out.println(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Got message: \"'),` + message.body().toString());\n    });\n  } `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"else\"),` {\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\"// Oups something went wrong\"),`\n    res.cause().printStackTrace();\n  }\n});\n`)),mdx(\"p\",null,\"Now to cre\\xADate a queue you sim\\xADply call the \",mdx(\"inlineCode\",{parentName:\"p\"},\"basicConsumer\"),` method and you ob\\xADtain asyn\\xADchro\\xADnously\na `,mdx(\"inlineCode\",{parentName:\"p\"},\"RabbitMQConsumer\"),\".\"),mdx(\"p\",null,\"Then you need to pro\\xADvide a han\\xADdler called for each mes\\xADsage con\\xADsumed via \",mdx(\"em\",{parentName:\"p\"},\"Rab\\xADbit\\xADMQ\\xADCon\\xADsumer#han\\xADdler\"),` which\nis the id\\xADiomatic way to con\\xADsumer stream in Vert.x`),mdx(\"p\",null,\"You may also note that when we a mes\\xADsage ar\\xADrives, it has the type of \",mdx(\"inlineCode\",{parentName:\"p\"},\"RabbitMQMessage\"),`, this is a typed\nmes\\xADsage rep\\xADre\\xADsen\\xADta\\xADtion.`),mdx(\"p\",null,\"Since \",mdx(\"inlineCode\",{parentName:\"p\"},\"RabbitMQConsumer\"),\" is a stream, you also al\\xADlowed to \",mdx(\"inlineCode\",{parentName:\"p\"},\"pause\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"resume\"),` the stream, sub\\xADscribe to the\nend event, get no\\xADti\\xADfied when an ex\\xADcep\\xADtion oc\\xADcurs.`),mdx(\"p\",null,\"In ad\\xADdi\\xADtion, you can can\\xADcel the sub\\xADscrip\\xADtion by call\\xADing \",mdx(\"inlineCode\",{parentName:\"p\"},\"RabbitMQConsumer#cancel\"),\" method.\"),mdx(\"h2\",e({},{id:\"backpressure\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#backpressure\"})),\"Backpressure\"),mdx(\"p\",null,\"Some\\xADtimes you can have more in\\xADcom\\xADing mes\\xADsages than you can han\\xADdle.\"),mdx(\"p\",null,`The new con\\xADsumer API al\\xADlows you to con\\xADtrol this and lets you store ar\\xADrived mes\\xADsages in the in\\xADter\\xADnal queue\nbe\\xADfore they are de\\xADliv\\xADered to the ap\\xADpli\\xADca\\xADtion. In\\xADdeed, you can con\\xADfig\\xADure the queue size.`),mdx(\"p\",null,\"Here is how you can limit the in\\xADter\\xADnal queue size:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\"// Limit to max 300 messages\"),`\nQueueOptions options = `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` QueueOptions()\n  .setMaxInternalQueueSize(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"300\"),`);\n\nRabbitMQClient client = RabbitMQClient.create(vertx, `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` RabbitMQOptions());\n\nclient.basicConsumer(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"my.queue\"'),`, options, res -> {\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"if\"),` (res.succeeded()) {\n    System.out.println(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"RabbitMQ consumer created !\"'),`);\n    RabbitMQConsumer mqConsumer = res.result();\n    mqConsumer.handler((RabbitMQMessage message) -> {\n      System.out.println(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Got message: \"'),` + message.body().toString());\n    });\n  } `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"else\"),` {\n    res.cause().printStackTrace();\n  }\n});\n`)),mdx(\"p\",null,\"When the in\\xADten\\xADral queue queue ca\\xADpac\\xADity is ex\\xADceeded, the new mes\\xADsage will be sim\\xADply dropped.\"),mdx(\"p\",null,\"An al\\xADter\\xADna\\xADtive op\\xADtion is to drop the old\\xADest mes\\xADsage in the queue.\"),mdx(\"p\",null,\"In order to achieve this, you should spec\\xADify the be\\xADhav\\xADior by call\\xADing \",mdx(\"inlineCode\",{parentName:\"p\"},\"QueueOptions#setKeepMostRecent\"),\" method.\"),mdx(\"h2\",e({},{id:\"finally\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#finally\"})),\"Finally\"),mdx(\"p\",null,\"The new Vert.x Rab\\xADbitMQ client con\\xADsumer API is way more id\\xADiomatic and mod\\xADern way to con\\xADsume mes\\xADsages from a queue.\"),mdx(\"p\",null,\"This API is going to pro\\xADvided in the 3.6.0 re\\xADlease, while the old will be dep\\xADre\\xADcated.\"),mdx(\"p\",null,\"I hope you en\\xADjoyed read\\xADing this ar\\xADti\\xADcle. See you soon on our \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://gitter.im/eclipse-vertx/vertx-users\"}),\"Git\\xADter chan\\xADnel\"),\"!\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"prevPost":{"meta":{"title":"Eclipse Vert.x goes Native","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"This blog post introduces native image generation of Vert.x applications with GraalVM. Generated executables can be run without a JVM."},"date":"2018-06-04","slug":"eclipse-vert-x-goes-native"},"nextPost":{"meta":{"title":"New community channels","category":"news","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"In order to better support the community, we (the core team and module maintainers) now also provide help on Stack Overflow and Gitter."},"date":"2018-04-13","slug":"new-community-channels"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}