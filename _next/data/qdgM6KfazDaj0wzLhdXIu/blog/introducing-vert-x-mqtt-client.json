{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Introducing Vert.x MQTT client","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this article, we will see how to set up the new Vert.x MQTT client. An example project is available on GitHub."},"date":"2017-08-21","slug":"introducing-vert-x-mqtt-client","readingTime":{"text":"2 min read","minutes":1.72,"time":103200,"words":344},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this ar\\xADti\\xADcle, we will see how to set up the new Vert.x MQTT client. Ac\\xADtu\\xADally, I have a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Sammers21/vertx-mqtt-client-example\"\n  }), \"real ex\\xADam\\xADple\"), \" so you can try it quickly.\"), mdx(\"p\", null, \"If you are using Maven or Gra\\xADdle, add the fol\\xADlow\\xADing de\\xADpen\\xADdency to the de\\xADpen\\xADden\\xADcies sec\\xADtion of your project de\\xADscrip\\xADtor to ac\\xADcess the Vert.x MQTT client:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Maven (in your pom.xml):\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-mqtt\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.5.0.Beta1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gra\\xADdle (in your build.gra\\xADdle file):\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-groovy\"\n  }), \"dependencies {\\n  compile \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'io.vertx:vertx-mqtt:3.5.0.Beta1'\"), \"\\n}\\n\")), mdx(\"p\", null, \"Now that you\\u2019ve set up your project, you can cre\\xADate a sim\\xADple ap\\xADpli\\xADca\\xADtion which will re\\xADceive all mes\\xADsages from all bro\\xADker chan\\xADnels:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.AbstractVerticle;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.mqtt.MqttClient;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.mqtt.MqttClientOptions;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" java.io.UnsupportedEncodingException;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"MainVerticle\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n     MqttClientOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MqttClientOptions();\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// specify broker host\"), \"\\n      options.setHost(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"iot.eclipse.org\\\"\"), \");\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// specify max size of message in bytes\"), \"\\n      options.setMaxMessageSize(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100_000_000\"), \");\\n\\n    MqttClient client = MqttClient.create(vertx, options);\\n\\n    client.publishHandler(s -> {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"try\"), \" {\\n        String message = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" String(s.payload().getBytes(), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"UTF-8\\\"\"), \");\\n        System.out.println(String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Receive message with content: \\\\\\\"%s\\\\\\\" from topic \\\\\\\"%s\\\\\\\"\\\"\"), \", message, s.topicName()));\\n      } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"catch\"), \" (UnsupportedEncodingException e) {\\n        e.printStackTrace();\\n      }\\n    });\\n\\n    client.connect(s -> {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// subscribe to all subtopics\"), \"\\n      client.subscribe(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"#\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \");\\n    });\\n  }\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pub\\xADlish\\xADHan\\xADdler\"), \" is the han\\xADdler called each time the bro\\xADker, lo\\xADcated at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iot.eclipse.org:1883\"), \", sends a mes\\xADsage to you, from the top\\xADics you are sub\\xADscrib\\xADing for.\"), mdx(\"p\", null, \"But only pro\\xADvid\\xADing a han\\xADdler is not enough, you should also con\\xADnect to the bro\\xADker and sub\\xADscribe to some top\\xADics. For this rea\\xADson, you should use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"con\\xADnect\"), \" method and then call \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sub\\xADscribe\"), \" when the con\\xADnec\\xADtion es\\xADtab\\xADlished. \"), mdx(\"p\", null, \"To de\\xADploy this ver\\xADti\\xADcle from an ap\\xADpli\\xADca\\xADtion you should have in your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main\"), \" method some\\xADthing like that:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Vertx vertx = Vertx.vertx();\\nvertx.deployVerticle(MainVerticle.class.getCanonicalName());\\n\")), mdx(\"p\", null, \"When you have com\\xADpleted all steps cor\\xADrectly the re\\xADsult should look like that:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://i.imgur.com/b4yYQJE.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"As the al\\xADter\\xADna\\xADtive and rec\\xADom\\xADmended way to boot\\xADstrap Vert.x ap\\xADpli\\xADca\\xADtions you can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-maven-starter\"\n  }), \"vertx-\\u200Bmaven-starter\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-gradle-starter\"\n  }), \"vertx-\\u200Bgradle-starter\"), \". For com\\xADplet\\xADing this guide I have used the first one. The final source code avail\\xADable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Sammers21/vertx-mqtt-client-example\"\n  }), \"here\"), \". If you would like to learn more about Vert.x MQTT client API then check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-mqtt-client/blob/initial-work/src/main/asciidoc/java/index.adoc\"\n  }), \"full doc\\xADu\\xADmen\\xADta\\xADtion\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1/mqtt-examples\"\n  }), \"more ex\\xADam\\xADples\"), \". \"), mdx(\"p\", null, \"Thank you for read\\xADing!\"), mdx(\"p\", null, \"Cheers!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>In this ar­ti­cle, we will see how to set up the new Vert.x MQTT client. Ac­tu­ally, I have a <a href=\"https://github.com/Sammers21/vertx-mqtt-client-example\">real ex­am­ple</a> so you can try it quickly.</p><p>If you are using Maven or Gra­dle, add the fol­low­ing de­pen­dency to the de­pen­den­cies sec­tion of your project de­scrip­tor to ac­cess the Vert.x MQTT client:</p><ul><li>Maven (in your pom.xml):</li></ul><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-mqtt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.0.Beta1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><ul><li>Gra­dle (in your build.gra­dle file):</li></ul><pre><code class=\"hljs language-groovy\">dependencies {\n  compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-mqtt:3.5.0.Beta1&#x27;</span>\n}\n</code></pre><p>Now that you’ve set up your project, you can cre­ate a sim­ple ap­pli­ca­tion which will re­ceive all mes­sages from all bro­ker chan­nels:</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle;\n<span class=\"hljs-keyword\">import</span> io.vertx.mqtt.MqttClient;\n<span class=\"hljs-keyword\">import</span> io.vertx.mqtt.MqttClientOptions;\n\n<span class=\"hljs-keyword\">import</span> java.io.UnsupportedEncodingException;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n     MqttClientOptions options = <span class=\"hljs-keyword\">new</span> MqttClientOptions();\n      <span class=\"hljs-comment\">// specify broker host</span>\n      options.setHost(<span class=\"hljs-string\">&quot;iot.eclipse.org&quot;</span>);\n      <span class=\"hljs-comment\">// specify max size of message in bytes</span>\n      options.setMaxMessageSize(<span class=\"hljs-number\">100_000_000</span>);\n\n    MqttClient client = MqttClient.create(vertx, options);\n\n    client.publishHandler(s -&gt; {\n      <span class=\"hljs-keyword\">try</span> {\n        String message = <span class=\"hljs-keyword\">new</span> String(s.payload().getBytes(), <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);\n        System.out.println(String.format(<span class=\"hljs-string\">&quot;Receive message with content: \\&quot;%s\\&quot; from topic \\&quot;%s\\&quot;&quot;</span>, message, s.topicName()));\n      } <span class=\"hljs-keyword\">catch</span> (UnsupportedEncodingException e) {\n        e.printStackTrace();\n      }\n    });\n\n    client.connect(s -&gt; {\n      <span class=\"hljs-comment\">// subscribe to all subtopics</span>\n      client.subscribe(<span class=\"hljs-string\">&quot;#&quot;</span>, <span class=\"hljs-number\">0</span>);\n    });\n  }\n}\n</code></pre><p>The <strong>pub­lish­Han­dler</strong> is the han­dler called each time the bro­ker, lo­cated at <code>iot.eclipse.org:1883</code>, sends a mes­sage to you, from the top­ics you are sub­scrib­ing for.</p><p>But only pro­vid­ing a han­dler is not enough, you should also con­nect to the bro­ker and sub­scribe to some top­ics. For this rea­son, you should use the <strong>con­nect</strong> method and then call <strong>sub­scribe</strong> when the con­nec­tion es­tab­lished. </p><p>To de­ploy this ver­ti­cle from an ap­pli­ca­tion you should have in your <strong>main</strong> method some­thing like that:</p><pre><code class=\"hljs language-java\">Vertx vertx = Vertx.vertx();\nvertx.deployVerticle(MainVerticle.class.getCanonicalName());\n</code></pre><p>When you have com­pleted all steps cor­rectly the re­sult should look like that:</p><p><img src=\"http://i.imgur.com/b4yYQJE.gif\"/></p><p>As the al­ter­na­tive and rec­om­mended way to boot­strap Vert.x ap­pli­ca­tions you can use <a href=\"https://github.com/vert-x3/vertx-maven-starter\">vertx-​maven-starter</a> or <a href=\"https://github.com/vert-x3/vertx-gradle-starter\">vertx-​gradle-starter</a>. For com­plet­ing this guide I have used the first one. The final source code avail­able <a href=\"https://github.com/Sammers21/vertx-mqtt-client-example\">here</a>. If you would like to learn more about Vert.x MQTT client API then check out the <a href=\"https://github.com/vert-x3/vertx-mqtt-client/blob/initial-work/src/main/asciidoc/java/index.adoc\">full doc­u­men­ta­tion</a> and <a href=\"https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1/mqtt-examples\">more ex­am­ples</a>. </p><p>Thank you for read­ing!</p><p>Cheers!</p>","scope":{}}},"prevPost":{"meta":{"title":"An Eclipse Vert.x Gradle Plugin","category":"news","authors":[{"name":"Julien Ponge","github_id":"jponge"}],"summary":"The new Vert.x Gradle plugin offers an opinionated plugin for building Vert.x applications with Gradle."},"date":"2017-09-28","slug":"an-eclipse-vert-x-gradle-plugin"},"nextPost":{"meta":{"title":"Vert.x 3.5.0.Beta1","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"It's summer time and we have just released Vert.x 3.5.0.Beta1!"},"date":"2017-08-10","slug":"vert-x-3-5-0-beta1"},"relatedPosts":[{"meta":{"title":"TCP Client using Eclipse Vert.x, Kotlin and Gradle build","category":"guides","authors":[{"name":"Usman Saleem","github_id":"usmansaleem"}],"summary":"In this blog post, I demonstrate how to write a very simple TCP client that keeps a connection open to a custom-written server in cloud."},"date":"2017-12-20","slug":"tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Checklist for Migrating from Vert.x 2.1.x to Vert.x 3 - Part One","category":"guides","authors":[{"name":"Mark Spritzler","github_id":"bytor99999"}],"summary":"So while upgrading our application, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major upgrade from the previous version, with so many changes."},"date":"2015-07-06","slug":"checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one"}]},"__N_SSG":true}