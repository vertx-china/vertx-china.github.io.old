{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"TCP Client using Eclipse Vert.x, Kotlin and Gradle build","category":"guides","authors":[{"name":"Usman Saleem","github_id":"usmansaleem"}],"summary":"In this blog post, I demonstrate how to write a very simple TCP client that keeps a connection open to a custom-written server in cloud."},"date":"2017-12-20","slug":"tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build","readingTime":{"text":"5 min read","minutes":4.185,"time":251100,"words":837},"content":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var s=(a,n,i)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):a[n]=i,e=(a,n)=>{for(var i in n||(n={}))o.call(n,i)&&s(a,i,n[i]);if(t)for(var i of t(n))l.call(n,i)&&s(a,i,n[i]);return a},d=(a,n)=>m(a,h(n));var p=(a,n)=>{var i={};for(var r in a)o.call(a,r)&&n.indexOf(r)<0&&(i[r]=a[r]);if(a!=null&&t)for(var r of t(a))n.indexOf(r)<0&&l.call(a,r)&&(i[r]=a[r]);return i};const makeShortcode=a=>function(i){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},i))},Gist=makeShortcode(\"Gist\"),Alert=makeShortcode(\"Alert\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var r=i,{components:a}=r,n=p(r,[\"components\"]);return mdx(MDXLayout,d(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"As part of my hobby project to con\\xADtrol Rasp\\xADber\\xADryPi using Google Home Mini and/or Alexa, I wanted to write a very sim\\xADple TCP client that keeps a con\\xADnec\\xADtion open to one of my cus\\xADtom writ\\xADten server in cloud (I will write an\\xADother blog post to cover the server side on a later date). The re\\xADquire\\xADment of the client is to send a shared se\\xADcret upon con\\xADnect\\xADing and then keep wait\\xADing for mes\\xADsage from server. Vert.x, Kotlin and Gra\\xADdle allow rapid de\\xADvel\\xADop\\xADment of such project. The gen\\xADer\\xADated jar can be ex\\xADe\\xADcuted on Rasp\\xADberry Pi. These steps out\\xADline the project setup and re\\xADlated source code to show\\xADcase a Vert.x and Kotlin project with Gra\\xADdle.\"),mdx(\"h2\",e({},{id:\"project-directory-structure\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#project-directory-structure\"})),\"Project Directory Structure\"),mdx(\"p\",null,\"From com\\xADmand line (or via Win\\xADdows Ex\\xADplorer, what\\xADever you pre\\xADfer to use) cre\\xADate a di\\xADrec\\xADtory for project,for in\\xADstance \",mdx(\"inlineCode\",{parentName:\"p\"},\"vertx-net-client\"),\". Since we are using Kotlin, we will place all Kotlin files in \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/main/kotlin\"),\" folder. The \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/main/resources\"),\" folder will con\\xADtain our log\\xADging con\\xADfig\\xADu\\xADra\\xADtion re\\xADlated files.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-css\"}),`cd vertx-net-client\nmkdir -`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-selector-tag\"}),\"p\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-attribute\"}),\"src\"),\"/\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-selector-tag\"}),\"main\"),`/kotlin\nmkdir -`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-selector-tag\"}),\"p\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-attribute\"}),\"src\"),\"/\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-selector-tag\"}),\"main\"),`/resources\n`)),mdx(\"h3\",e({},{id:\"project-files\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#project-files\"})),\"Project Files\"),mdx(\"p\",null,\"We need to add fol\\xADlow\\xADing files in the project\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\".gitignore\"),`\nIf you want to check your project into git, you may con\\xADsider adding fol\\xADlow\\xADing `,mdx(\"inlineCode\",{parentName:\"li\"},\".gitignore\"),\" file at root of your project\")),mdx(Gist,{url:\"https://gist.github.com/usmansaleem/b5838484a20cb8b08f236f2265ad7a8e\",mdxType:\"Gist\"}),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"logback.xml\"),`\nThis ex\\xADam\\xADple is using slf4j and log\\xADback for log\\xADging. If you de\\xADcide to use it in your project, you may also add fol\\xADlow\\xADing log\\xADback.xml file in `,mdx(\"inlineCode\",{parentName:\"li\"},\"src/main/resources\"),`. Mod\\xADify it as per your re\\xADquire\\xADments. This ex\\xADam\\xADple will\nlog on con\\xADsole.`)),mdx(Gist,{url:\"https://gist.github.com/usmansaleem/750c6d1cad0721b52be2ff00f758fb9f\",mdxType:\"Gist\"}),mdx(\"h2\",e({},{id:\"gradle-setup\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#gradle-setup\"})),\"Gradle Setup\"),mdx(\"p\",null,\"We will use Gra\\xADdle build sys\\xADtem for this project. If you don\\u2019t al\\xADready have Gra\\xADdle avail\\xADable on your sys\\xADtem, down\\xADload and unzip gra\\xADdle in a di\\xADrec\\xADtory of your choice (\",mdx(\"inlineCode\",{parentName:\"p\"},\"$GRADLE_HOME\"),\" is used here to rep\\xADre\\xADsent this di\\xADrec\\xADtory). This gra\\xADdle dis\\xADtri\\xADb\\xADu\\xADtion will be used as a start\\xADing point to cre\\xADate Gra\\xADdle wrap\\xADper scripts for our project. These scripts will allow our project to down\\xADload and use cor\\xADrect ver\\xADsion of gra\\xADdle dis\\xADtri\\xADb\\xADu\\xADtion au\\xADto\\xADmat\\xADi\\xADcally with\\xADout mess\\xADing up sys\\xADtem. Re\\xADally use\\xADful when build\\xADing your project on CI tool or on any other de\\xADvel\\xADoper\\u2019s ma\\xADchine.\"),mdx(\"p\",null,\"Run fol\\xADlow\\xADing com\\xADmand in project\\u2019s di\\xADrec\\xADtory\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-bash\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-variable\"}),\"$GRADLE_HOME\"),`/bin/gradle wrapper\n`)),mdx(\"p\",null,\"The above com\\xADmands will gen\\xADer\\xADate fol\\xADlow\\xADing files and di\\xADrec\\xADto\\xADries.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-bash\"}),`gradle/  gradlew  gradlew.bat\n`)),mdx(\"h3\",e({},{id:\"gradle-build-file-buildgradle\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#gradle-build-file-buildgradle\"})),\"Gradle build file \",mdx(\"inlineCode\",{parentName:\"h3\"},\"build.gradle\")),mdx(\"p\",null,\"Cre\\xADate (and/or copy and mod\\xADify) fol\\xADlow\\xADing \",mdx(\"inlineCode\",{parentName:\"p\"},\"build.gradle\"),\" in your project\\u2019s root di\\xADrec\\xADtory. Our ex\\xADam\\xADple gra\\xADdle build file is using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/jponge/vertx-gradle-plugin/\"}),\"vertx-\\u200Bgradle-plugin\"),\".\"),mdx(Gist,{url:\"https://gist.github.com/usmansaleem/e723f25b827e0a925eaef2957a80132d\",mdxType:\"Gist\"}),mdx(\"p\",null,\"In the project di\\xADrec\\xADtory, run fol\\xADlow\\xADing com\\xADmand to down\\xADload local gra\\xADdle dis\\xADtri\\xADb\\xADu\\xADtion:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-bash\"}),`./gradlew\n`)),mdx(\"p\",null,\"(or \",mdx(\"inlineCode\",{parentName:\"p\"},\".\\\\gradlew.bat\"),\" if in Win\\xADdows)\"),mdx(\"p\",null,\"At this stage we should have fol\\xADlow\\xADing file struc\\xADture. This is also a good time to com\\xADmit changes if you are work\\xADing with git.\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\".gitignore\"),\"                              \"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"build.gradle\"),\"                            \"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"gradle/wrapper/gradle-wrapper.jar\"),\"       \"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"gradle/wrapper/gradle-wrapper.properties\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"gradlew\"),\"                                 \"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"gradlew.bat\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"src/main/resources/logback.xml\"))),mdx(\"p\",null,\"Now that our project struc\\xADture is ready, time to add the meat of the project. You may use any IDE of your choice. My pref\\xADer\\xADence is In\\xADtel\\xADliJ IDEA.\"),mdx(\"p\",null,\"Cre\\xADate a new pack\\xADage under \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/main/kotlin\"),\". The pack\\xADage name should be adapted from the fol\\xADlow\\xADing sec\\xADtion of \",mdx(\"inlineCode\",{parentName:\"p\"},\"build.gradle\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-ebnf\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-attribute\"}),\"vertx\"),` {\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-attribute\"}),\"    mainVerticle\"),\" = \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"info.usmans.blog.vertx.NetClientVerticle\"'),`\n}\n`)),mdx(\"p\",null,\"From the above ex\\xADam\\xADple, the pack\\xADage name is \",mdx(\"inlineCode\",{parentName:\"p\"},\"info.usmans.blog.vertx\")),mdx(\"p\",null,\"Add a new Kotlin Class/file in \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/main/kotlin/info/usmans/blog/vertx\"),\" as \",mdx(\"inlineCode\",{parentName:\"p\"},\"NetClientVerticle.kt\")),mdx(\"p\",null,\"The con\\xADtents of this class is as fol\\xADlows\"),mdx(Gist,{url:\"https://gist.github.com/usmansaleem/2a176a7b752fcb72f7f31964809696fe\",mdxType:\"Gist\"}),mdx(\"h2\",e({},{id:\"explaining-the-code\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#explaining-the-code\"})),\"Explaining the Code\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"fun main(args: Array<String>)\"),\" is not strictly re\\xADquired, it quickly al\\xADlows run\\xADning the Vert.x ver\\xADti\\xADcle from within IDE. You will also no\\xADtice a small hack in the method for set\\xADting sys\\xADtem prop\\xADerty \",mdx(\"inlineCode\",{parentName:\"p\"},\"vertx.disableDnsResolver\"),\" which is to avoid a Netty bug that I ob\\xADserved when run\\xADning on Win\\xADdows ma\\xADchine and re\\xADmote server is down. Of course, since we are using vertx-\\u200Bgradle-plugin, we can also use \",mdx(\"inlineCode\",{parentName:\"p\"},\"gradle vertxRun\"),\" to run our ver\\xADti\\xADcle. In this case the \",mdx(\"inlineCode\",{parentName:\"p\"},\"main\"),\" method will not get called.\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"override fun start()\"),\" method calls \",mdx(\"inlineCode\",{parentName:\"p\"},\"fireReconnectTimer\"),\" which in turn calls \",mdx(\"inlineCode\",{parentName:\"p\"},\"reconnect\"),\" method. \",mdx(\"inlineCode\",{parentName:\"p\"},\"reconnect\"),\" method con\\xADtains the con\\xADnec\\xADtion logic to server as well as it calls \",mdx(\"inlineCode\",{parentName:\"p\"},\"fireReconnectTimer\"),\" if it is un\\xADable to con\\xADnect to server or dis\\xADcon\\xADnects from server. In \",mdx(\"inlineCode\",{parentName:\"p\"},\"reconnect\"),\" method the \",mdx(\"inlineCode\",{parentName:\"p\"},\"socket.handler\"),\" gets called when server send mes\\xADsage to client.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-xl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"socket\"),\".handler({ \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"data\"),\" ->\"),`\n                        logger.info(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"Data received: ${data}\"'),`)\n                        `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\"//\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-doctag\"}),\"TODO:\"),\" Do the work here ...\"),`\n               })\n`)),mdx(\"h2\",e({},{id:\"distributing-the-project\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#distributing-the-project\"})),\"Distributing the project\"),mdx(\"p\",null,\"To cre\\xADate re\\xADdis\\xADtrib\\xADutable jar, use \",mdx(\"inlineCode\",{parentName:\"p\"},\"./gradlew shadowJar\"),\" com\\xADmand. Or if using In\\xADtel\\xADliJ: from Gra\\xADdle projects, Tasks, shadow, shad\\xADow\\xADJar (right click run). This com\\xADmand will gen\\xADer\\xADate \",mdx(\"inlineCode\",{parentName:\"p\"},\"./build/libs/vertx-net-client-fat.jar\"),\".\"),mdx(\"h3\",e({},{id:\"executing-the-client\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#executing-the-client\"})),\"Executing the client\"),mdx(\"p\",null,\"The client jar can be ex\\xADe\\xADcuted using fol\\xADlow\\xADing com\\xADmand:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-bash\"}),\" java -DserverHost=127.0.0.1 -DserverPort=8888 -DconnectMessage=\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"hello\"'),` -jar vertx-net-client-full.jar\n`)),mdx(\"p\",null,\"If you wish to use SLF4J for Vert.x in\\xADter\\xADnal log\\xADging, you need to pass sys\\xADtem prop\\xADerty \",mdx(\"inlineCode\",{parentName:\"p\"},\"vertx.logger-delegate-factory-class-name\"),\" with value of \",mdx(\"inlineCode\",{parentName:\"p\"},\"io.vertx.core.logging.SLF4JLogDelegateFactory\"),\". The final com\\xADmand would look like:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-bash\"}),\"java -DserverHost=127.0.0.1 -DserverPort=8888 -DconnectMessage=\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"hello\"'),\" -Dvertx.logger-delegate-factory-class-name=\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"io.vertx.core.logging.SLF4JLogDelegateFactory\"'),` -jar vertx-net-client-full.jar\n`)),mdx(\"p\",null,\"You can con\\xADfig\\xADure Vert.x log\\xADging lev\\xADels in log\\xADback.xml file if re\\xADquired.\"),mdx(\"h2\",e({},{id:\"conclusion\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#conclusion\"})),\"Conclusion\"),mdx(\"p\",null,\"This post de\\xADscribes how easy it is to cre\\xADate a sim\\xADple TCP client using Vert.x, Kotlin and Gra\\xADdle build sys\\xADtem. Hope\\xADfully the tech\\xADniques shown here will serve as a start\\xADing point for your next DIY project.\"),mdx(Alert,{info:!0,mdxType:\"Alert\"},mdx(\"p\",null,\"This post is adapted and re\\xADpro\\xADduced from \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://usmans.info/view/blog/tcp_client_using_vertx_kotlin_gradle\"}),\"au\\xADthor\\u2019s blog post\"))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"prevPost":{"meta":{"title":"Eclipse Vert.x based Framework URL Shortener Backend","category":"guides","authors":[{"name":"Lazar Bulić","github_id":"pendula95"}],"summary":"We combine Vert.x with the serverless framework to write a microservice that runs on AWS Lambda."},"date":"2017-12-21","slug":"eclipse-vert-x-based-framework-url-shortener-backend"},"nextPost":{"meta":{"title":"Eclipse Vert.x meets GraphQL","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"In this blog post, we will look at an example application written in Vert.x that uses the new GraphQL API of Gentics Mesh."},"date":"2017-11-14","slug":"eclipse-vert-x-meets-graphql"},"relatedPosts":[{"meta":{"title":"Centralized logging for Vert.x applications using the ELK stack","category":"guides","authors":[{"name":"Ricardo Hernandez","github_id":"ricardohmon"}],"summary":"This post entry describes a solution to achieve centralized logging of Vert.x applications using the ELK stack (Logstash, Elasticsearch, and Kibana)."},"date":"2016-09-08","slug":"centralized-logging-for-vert-x-applications-using-the-elk-stack"},{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}