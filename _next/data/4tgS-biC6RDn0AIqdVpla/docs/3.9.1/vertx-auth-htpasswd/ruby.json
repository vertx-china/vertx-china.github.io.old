{"pageProps":{"slug":"3.9.1/vertx-auth-htpasswd/ruby","title":"htpasswd Auth Provider implementation","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_htpasswd_auth_provider_implementation\">htpasswd Auth Provider implementation</a></li>\n</ul>\n</div>","contents":"\n<div class=\"sect1\">\n<h2 id=\"_htpasswd_auth_provider_implementation\"><a class=\"anchor\" href=\"#_htpasswd_auth_provider_implementation\"></a>htpasswd Auth Provider implementation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>&lt;p&gt;\nWe provide an implementation of <code><a href=\"../../yardoc/VertxAuthCommon/AuthProvider.html\">AuthProvider</a></code> which uses the Apache htpasswd file format\nto perform authentication. The provider will not watch for updates to the file after loading. If you need dynamic\nuser management it would be more convenient to use dynamic providers such as jdbc or mongo providers.\n&lt;p&gt;\nTo use this project, add the following\ndependency to the <em>dependencies</em> section of your build descriptor:\n&lt;p&gt;\n* Maven (in your <code>pom.xml</code>):\n&lt;p&gt;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-htpasswd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>&lt;p&gt;\n* Gradle (in your <code>build.gradle</code> file):\n&lt;p&gt;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-auth-htpasswd:3.9.1'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>&lt;p&gt;\nTo create an instance you first need an htpasswd file. This file is created using the apache htpasswd tool.\n&lt;p&gt;\nOnce you&#8217;ve got one of these you can create a <code><a href=\"../../yardoc/VertxAuthHtpasswd/HtpasswdAuth.html\">HtpasswdAuth</a></code> instance as follows:\n&lt;p&gt;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-auth-htpasswd/htpasswd_auth'</span>\nauthProvider = VertxAuthHtpasswd::HtpasswdAuth.create(vertx, {\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>&lt;p&gt;\nOnce you&#8217;ve got your instance you can authenticate with it just like any <code><a href=\"../../yardoc/VertxAuthCommon/AuthProvider.html\">AuthProvider</a></code>.\n&lt;p&gt;\nThe out of the box config assumes the usage of the file htpasswd in the root of the project.\n&lt;p&gt;\n== Provider internal behavior\n&lt;p&gt;\nThe provider will load the specified htpasswd file at start time and will not watch for modifications. If you\nrequire dynamic reloads, you will need to restart the provider.\n&lt;p&gt;\nThe implementation does not have any other state than the htpasswd file itself.\n&lt;p&gt;\n== Authentication\n&lt;p&gt;\nWhen authenticating using this implementation, it assumes that the username and password are parsed as a JSON\nobject which we refer from now on as authentication info:\n&lt;p&gt;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">authInfo = {\n  <span class=\"hljs-string\">'username'</span> =&gt; <span class=\"hljs-string\">\"someUser\"</span>,\n  <span class=\"hljs-string\">'password'</span> =&gt; <span class=\"hljs-string\">\"somePassword\"</span>\n}\n\nauthProvider.authenticate(authInfo) { <span class=\"hljs-params\">|res_err,res|</span>\n  <span class=\"hljs-keyword\">if</span> (res_err == <span class=\"hljs-literal\">nil</span>)\n    user = res\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-comment\"># Failed!</span>\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>&lt;p&gt;\n== Autorization\n&lt;p&gt;\nApache htpasswd file is a pure authentication mechanism and not authorization. This means that permission checks will always be <code>false</code>.</p>\n</div>\n</div>\n</div>","version":"3.9.1"},"__N_SSG":true}