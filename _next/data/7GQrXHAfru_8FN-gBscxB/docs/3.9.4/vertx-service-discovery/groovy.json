{"pageProps":{"slug":"3.9.4/vertx-service-discovery/groovy","title":"Vert.x Service Discovery","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_the_service_discovery\">Using the service discovery</a></li>\n<li><a href=\"#_overall_concepts\">Overall concepts</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_service_records\">Service records</a></li>\n<li><a href=\"#_service_provider_and_publisher\">Service Provider and publisher</a></li>\n<li><a href=\"#_service_consumer\">Service Consumer</a></li>\n<li><a href=\"#_service_object\">Service object</a></li>\n<li><a href=\"#_service_types\">Service types</a></li>\n<li><a href=\"#_service_events\">Service events</a></li>\n<li><a href=\"#_backend\">Backend</a></li>\n</ul>\n</li>\n<li><a href=\"#_creating_a_service_discovery_instance\">Creating a service discovery instance</a></li>\n<li><a href=\"#_publishing_services\">Publishing services</a></li>\n<li><a href=\"#_withdrawing_services\">Withdrawing services</a></li>\n<li><a href=\"#_looking_for_services\">Looking for services</a></li>\n<li><a href=\"#_retrieving_a_service_reference\">Retrieving a service reference</a></li>\n<li><a href=\"#_types_of_services\">Types of services</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_services_with_no_type\">Services with no type</a></li>\n<li><a href=\"#_http_endpoints\">HTTP endpoints</a></li>\n<li><a href=\"#_event_bus_services\">Event bus services</a></li>\n<li><a href=\"#_message_source\">Message source</a></li>\n<li><a href=\"#_jdbc_data_source\">JDBC Data source</a></li>\n<li><a href=\"#_redis_data_source\">Redis Data source</a></li>\n<li><a href=\"#_mongo_data_source\">Mongo Data source</a></li>\n</ul>\n</li>\n<li><a href=\"#_listening_for_service_arrivals_and_departures\">Listening for service arrivals and departures</a></li>\n<li><a href=\"#_listening_for_service_usage\">Listening for service usage</a></li>\n<li><a href=\"#_service_discovery_bridges\">Service discovery bridges</a></li>\n<li><a href=\"#_additional_bridges\">Additional bridges</a></li>\n<li><a href=\"#_additional_backends\">Additional backends</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Service Discovery</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This component provides an infrastructure to publish and discover various resources, such as service\nproxies, HTTP endpoints, data sources&#8230;&#8203; These resources are called <code>services</code>. A <code>service</code> is a discoverable\nfunctionality. It can be qualified by its type, metadata, and location. So a <code>service</code> can be a database, a\nservice proxy, a HTTP endpoint and any other resource you can imagine as soon as you can describe it, discover it\nand interact with it. It does not have to be a vert.x entity, but can be anything. Each service is described by a\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The service discovery implements the interactions defined in service-oriented computing. And to some extent,\nalso provides the dynamic service-oriented computing interactions. So, applications can react to arrival and\ndeparture of services.</p>\n</div>\n<div class=\"paragraph\">\n<p>A service provider can:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>publish a service record</p>\n</li>\n<li>\n<p>un-publish a published record</p>\n</li>\n<li>\n<p>update the status of a published service (down, out of service&#8230;&#8203;)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>A service consumer can:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>lookup services</p>\n</li>\n<li>\n<p>bind to a selected service (it gets a <code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceReference.html\">ServiceReference</a></code>) and use it</p>\n</li>\n<li>\n<p>release the service once the consumer is done with it</p>\n</li>\n<li>\n<p>listen for arrival, departure and modification of services.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Consumer would 1) lookup a service record matching their need, 2) retrieve the\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceReference.html\">ServiceReference</a></code> that give access to the service, 3) get a service object to access\nthe service, 4) release the service object once done.</p>\n</div>\n<div class=\"paragraph\">\n<p>The process can be simplified using <em>service type</em> where you can directly retrieve the service object if you know\nfrom which type it is (JDBC client, Http client&#8230;&#8203;).</p>\n</div>\n<div class=\"paragraph\">\n<p>As stated above, the central piece of information shared by the providers and consumers are\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">records</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Providers and consumers must create their own <code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscovery.html\">ServiceDiscovery</a></code> instance. These\ninstances are collaborating in the background (distributed structure) to keep the set of services in sync.</p>\n</div>\n<div class=\"paragraph\">\n<p>The service discovery supports bridges to import and export services from / to other discovery technologies.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_service_discovery\"><a class=\"anchor\" href=\"#_using_the_service_discovery\"></a>Using the service discovery</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Vert.x service discovery, add the following dependency to the <em>dependencies</em> section of your build\ndescriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-service-discovery<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-service-discovery:3.9.4'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_overall_concepts\"><a class=\"anchor\" href=\"#_overall_concepts\"></a>Overall concepts</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The discovery mechanism is based on a few concepts explained in this section.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_records\"><a class=\"anchor\" href=\"#_service_records\"></a>Service records</h3>\n<div class=\"paragraph\">\n<p>A service <code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code> is an object that describes a service published by a service\nprovider. It contains a name, some metadata, a location object (describing where is the service). This record is\nthe only object shared by the provider (having published it) and the consumer (retrieve it when doing a lookup).</p>\n</div>\n<div class=\"paragraph\">\n<p>The metadata and even the location format depend on the <code>service type</code> (see below).</p>\n</div>\n<div class=\"paragraph\">\n<p>A record is published when the provider is ready to be used, and withdrawn when the service provider is stopping.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_provider_and_publisher\"><a class=\"anchor\" href=\"#_service_provider_and_publisher\"></a>Service Provider and publisher</h3>\n<div class=\"paragraph\">\n<p>A service provider is an entity providing a <em>service</em>. The publisher is responsible for publishing a record\ndescribing the provider. It may be a single entity (a provider publishing itself) or a different entity.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_consumer\"><a class=\"anchor\" href=\"#_service_consumer\"></a>Service Consumer</h3>\n<div class=\"paragraph\">\n<p>Service consumers search for services in the service discovery. Each lookup retrieves <code>0..n</code>\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code>. From these records, a consumer can retrieve a\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceReference.html\">ServiceReference</a></code>, representing the binding between the consumer and the provider.\nThis reference allows the consumer to retrieve the <em>service object</em> (to use the service),  and release the service.</p>\n</div>\n<div class=\"paragraph\">\n<p>It is important to release service references to cleanup the objects and update the service usages.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_object\"><a class=\"anchor\" href=\"#_service_object\"></a>Service object</h3>\n<div class=\"paragraph\">\n<p>The service object is the object that gives access to a service. It can come in various forms, such as a proxy, a client,\nand may even be non-existent for some service types. The nature of the service object depends on the service type.</p>\n</div>\n<div class=\"paragraph\">\n<p>Notice that because of the polyglot nature of Vert.x, the service object can differ if you retrieve it from Java,\nGroovy or another language.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_types\"><a class=\"anchor\" href=\"#_service_types\"></a>Service types</h3>\n<div class=\"paragraph\">\n<p>Services are just resources, and there are a lot of different kinds of services. They can be functional services,\ndatabases, REST APIs, and so on. The Vert.x service discovery has the concept of service types to handle this\nheterogeneity. Each type defines:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>how the service is located (URI, event bus address, IP / DNS&#8230;&#8203;) - <em>location</em></p>\n</li>\n<li>\n<p>the nature of the service object (service proxy, HTTP client, message consumer&#8230;&#8203;) - <em>client</em></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Some service types are implemented and provided by the service discovery component, but you can add\nyour own.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_events\"><a class=\"anchor\" href=\"#_service_events\"></a>Service events</h3>\n<div class=\"paragraph\">\n<p>Every time a service provider is published or withdrawn, an event is fired on the event bus. This event contains\nthe record that has been modified.</p>\n</div>\n<div class=\"paragraph\">\n<p>In addition, in order to track who is using who, every time a reference is retrieved with\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscovery.html#getReference-io.vertx.servicediscovery.Record-\">getReference</a></code> or released with\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceReference.html#release--\">release</a></code>, events are emitted on the event bus to track the\nservice usages.</p>\n</div>\n<div class=\"paragraph\">\n<p>More details on these events below.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_backend\"><a class=\"anchor\" href=\"#_backend\"></a>Backend</h3>\n<div class=\"paragraph\">\n<p>The service discovery uses a Vert.x distributed data structure to store the records. So, all members of the cluster\nhave access to all the records. This is the default backend implementation. You can implement your own by\nimplementing the <code><a href=\"../../apidocs/io/vertx/servicediscovery/spi/ServiceDiscoveryBackend.html\">ServiceDiscoveryBackend</a></code> SPI. For instance, we provide an\nimplementation based on Redis.</p>\n</div>\n<div class=\"paragraph\">\n<p>Notice that the discovery does not require Vert.x clustering. In single-node mode, the structure is local. It can\nbe populated with <code><a href=\"../../apidocs/io/vertx/servicediscovery/spi/ServiceImporter.html\">ServiceImporter</a>`s. Since 3.5.0, you can use a local\nstructure even in clustered mode by setting the system property `vertx-service-discovery-backend-local</code> to <code>true</code> (or\nthe environment variable <code>VERTX-SERVICE-DISCOVERY-BACKEND-LOCAL</code> to <code>true</code>).</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_service_discovery_instance\"><a class=\"anchor\" href=\"#_creating_a_service_discovery_instance\"></a>Creating a service discovery instance</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Publishers and consumers must create their own <code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscovery.html\">ServiceDiscovery</a></code>\ninstance to use the discovery infrastructure:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Use default configuration</span>\n<span class=\"hljs-keyword\">def</span> discovery = ServiceDiscovery.create(vertx)\n\n<span class=\"hljs-comment\">// Customize the configuration</span>\ndiscovery = ServiceDiscovery.create(vertx, [\n<span class=\"hljs-symbol\">  announceAddress:</span><span class=\"hljs-string\">\"service-announce\"</span>,\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"my-name\"</span>\n])\n\n<span class=\"hljs-comment\">// Do something...</span>\n\ndiscovery.close()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>By default, the announce address (the event bus address on which service events are sent is: <code>vertx.discovery\n.announce</code>. You can also configure a name used for the service usage (see section about service usage).</p>\n</div>\n<div class=\"paragraph\">\n<p>When you don&#8217;t need the service discovery object anymore, don&#8217;t forget to close it. It closes the different\ndiscovery importers and exporters you have configured and releases the service references.</p>\n</div>\n<div class=\"paragraph\">\n<p>You should avoid sharing the service discovery instance, so service usage would represent the right \"usages\".</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_publishing_services\"><a class=\"anchor\" href=\"#_publishing_services\"></a>Publishing services</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once you have a service discovery instance, you can publish services. The process is the following:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>create a record for a specific service provider</p>\n</li>\n<li>\n<p>publish this record</p>\n</li>\n<li>\n<p>keep the published record that is used to un-publish a service or modify it.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>To create records, you can either use the <code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code> class, or use convenient methods\nfrom the service types.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Manual record creation</span>\n<span class=\"hljs-keyword\">def</span> record = [\n<span class=\"hljs-symbol\">  type:</span><span class=\"hljs-string\">\"eventbus-service-proxy\"</span>,\n<span class=\"hljs-symbol\">  location:</span>[\n<span class=\"hljs-symbol\">    endpoint:</span><span class=\"hljs-string\">\"the-service-address\"</span>\n  ],\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"my-service\"</span>,\n<span class=\"hljs-symbol\">  metadata:</span>[\n    <span class=\"hljs-string\">'some-label'</span>:<span class=\"hljs-string\">\"some-value\"</span>\n  ]\n]\n\ndiscovery.publish(record, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-comment\">// publication succeeded</span>\n    <span class=\"hljs-keyword\">def</span> publishedRecord = ar.result()\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// publication failed</span>\n  }\n})\n\n<span class=\"hljs-comment\">// Record creation from a type</span>\nrecord = HttpEndpoint.createRecord(<span class=\"hljs-string\">\"some-rest-api\"</span>, <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">\"/api\"</span>)\ndiscovery.publish(record, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-comment\">// publication succeeded</span>\n    <span class=\"hljs-keyword\">def</span> publishedRecord = ar.result()\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// publication failed</span>\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It is important to keep a reference on the returned records, as this record has been extended by a <code>registration id</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_withdrawing_services\"><a class=\"anchor\" href=\"#_withdrawing_services\"></a>Withdrawing services</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To withdraw (un-publish) a record, use:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">discovery.unpublish(record.registration, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-comment\">// Ok</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// cannot un-publish the service, may have already been removed, or the record is not published</span>\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_looking_for_services\"><a class=\"anchor\" href=\"#_looking_for_services\"></a>Looking for services</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>This section explains the low-level process to retrieve services, each service type provide convenient method to\naggregates the different steps.</em></p>\n</div>\n<div class=\"paragraph\">\n<p>On the consumer side, the first thing to do is to lookup for records. You can search for a single record or all\nthe matching ones. In the first case, the first matching record is returned.</p>\n</div>\n<div class=\"paragraph\">\n<p>Consumer can pass a filter to select the service. There are two ways to describe the filter:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>A function taking a <code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code> as parameter and returning a boolean (it&#8217;s a\npredicate)</p>\n</li>\n<li>\n<p>This filter is a JSON object. Each entry of the given filter is checked against the record. All entries must\nexactly match the record. The entry can use the special <code>*</code> value to denote a requirement on the key, but not on\nthe value.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s see an example of a JSON filter:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>{ \"name\" = \"a\" } =&gt; matches records with name set to \"a\"\n{ \"color\" = \"*\" } =&gt; matches records with \"color\" set\n{ \"color\" = \"red\" } =&gt; only matches records with \"color\" set to \"red\"\n{ \"color\" = \"red\", \"name\" = \"a\"} =&gt; only matches records with name set to \"a\", and color set to \"red\"</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If the JSON filter is not set (<code>null</code> or empty), it accepts all records. When using functions, to accept all\nrecords, you must return <em>true</em> regardless the record.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here are some examples:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Get any record</span>\ndiscovery.getRecord({ r -&gt;\n  <span class=\"hljs-literal\">true</span>\n}, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">if</span> (ar.result() != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-comment\">// we have a record</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// the lookup succeeded, but no matching service</span>\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// lookup failed</span>\n  }\n})\n\ndiscovery.getRecord(<span class=\"hljs-literal\">null</span>, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">if</span> (ar.result() != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-comment\">// we have a record</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// the lookup succeeded, but no matching service</span>\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// lookup failed</span>\n  }\n})\n\n\n<span class=\"hljs-comment\">// Get a record by name</span>\ndiscovery.getRecord({ r -&gt;\n  r.name == <span class=\"hljs-string\">\"some-name\"</span>\n}, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">if</span> (ar.result() != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-comment\">// we have a record</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// the lookup succeeded, but no matching service</span>\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// lookup failed</span>\n  }\n})\n\ndiscovery.getRecord([\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">if</span> (ar.result() != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-comment\">// we have a record</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// the lookup succeeded, but no matching service</span>\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// lookup failed</span>\n  }\n})\n\n<span class=\"hljs-comment\">// Get all records matching the filter</span>\ndiscovery.getRecords({ r -&gt;\n  <span class=\"hljs-string\">\"some-value\"</span> == r.metadata.some-label\n}, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> results = ar.result()\n    <span class=\"hljs-comment\">// If the list is not empty, we have matching record</span>\n    <span class=\"hljs-comment\">// Else, the lookup succeeded, but no matching service</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// lookup failed</span>\n  }\n})\n\n\ndiscovery.getRecords([\n  <span class=\"hljs-string\">'some-label'</span>:<span class=\"hljs-string\">\"some-value\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> results = ar.result()\n    <span class=\"hljs-comment\">// If the list is not empty, we have matching record</span>\n    <span class=\"hljs-comment\">// Else, the lookup succeeded, but no matching service</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// lookup failed</span>\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can retrieve a single record or all matching records with\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscovery.html#getRecords-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">getRecords</a></code>.\nBy default, record lookup does include only records with a <code>status</code> set to <code>UP</code>. This can be overridden:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>when using JSON filter, just set <code>status</code> to the value you want (or <code>*</code> to accept all status)</p>\n</li>\n<li>\n<p>when using function, set the <code>includeOutOfService</code> parameter to <code>true</code> in\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscovery.html#getRecords-java.util.function.Function-boolean-io.vertx.core.Handler-\">getRecords</a></code>\n.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_retrieving_a_service_reference\"><a class=\"anchor\" href=\"#_retrieving_a_service_reference\"></a>Retrieving a service reference</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once you have chosen the <code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code>, you can retrieve a\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceReference.html\">ServiceReference</a></code> and then the service object:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> reference1 = discovery.getReference(record1)\n<span class=\"hljs-keyword\">def</span> reference2 = discovery.getReference(record2)\n\n<span class=\"hljs-comment\">// Then, gets the service object, the returned type depends on the service type:</span>\n<span class=\"hljs-comment\">// For http endpoint:</span>\n<span class=\"hljs-keyword\">def</span> client = reference1.getAs(HttpClient<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n// <span class=\"hljs-title\">For</span> <span class=\"hljs-title\">message</span> <span class=\"hljs-title\">source</span>\n<span class=\"hljs-title\">def</span> <span class=\"hljs-title\">consumer</span> = <span class=\"hljs-title\">reference2</span>.<span class=\"hljs-title\">getAs</span>(<span class=\"hljs-title\">MessageConsumer</span>.<span class=\"hljs-title\">class</span>)\n\n// <span class=\"hljs-title\">When</span> <span class=\"hljs-title\">done</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">service</span>\n<span class=\"hljs-title\">reference1</span>.<span class=\"hljs-title\">release</span>()\n<span class=\"hljs-title\">reference2</span>.<span class=\"hljs-title\">release</span>()\n</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Don&#8217;t forget to release the reference once done.</p>\n</div>\n<div class=\"paragraph\">\n<p>The service reference represents a binding with the service provider.</p>\n</div>\n<div class=\"paragraph\">\n<p>When retrieving a service reference you can pass a <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> used to configure the\nservice object. It can contain various data about the service object. Some service types do not need additional\nconfiguration, some require configuration (as data sources):</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> reference = discovery.getReferenceWithConfiguration(record, conf)\n\n<span class=\"hljs-comment\">// Then, gets the service object, the returned type depends on the service type:</span>\n<span class=\"hljs-comment\">// For http endpoint:</span>\n<span class=\"hljs-keyword\">def</span> client = reference.getAs(JDBCClient<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n\n// <span class=\"hljs-title\">Do</span> <span class=\"hljs-title\">something</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">client</span>...\n\n// <span class=\"hljs-title\">When</span> <span class=\"hljs-title\">done</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">service</span>\n<span class=\"hljs-title\">reference</span>.<span class=\"hljs-title\">release</span>()\n</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the previous examples, the code uses\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceReference.html#getAs-java.lang.Class-\">getAs</a></code>. The parameter is the type of\nobject you expect to get. If you are using Java, you can use\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceReference.html#get--\">get</a></code>. However in the other language you must pass the expected\ntype.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_types_of_services\"><a class=\"anchor\" href=\"#_types_of_services\"></a>Types of services</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A said above, the service discovery has the service type concept to manage the heterogeneity of the\ndifferent services.</p>\n</div>\n<div class=\"paragraph\">\n<p>These types are provided by default:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/servicediscovery/types/HttpEndpoint.html\">HttpEndpoint</a></code> - for REST API&#8217;s, the service object is a\n<code><a href=\"../../apidocs/io/vertx/core/http/HttpClient.html\">HttpClient</a></code> configured on the host and port (the location is the url).</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/servicediscovery/types/EventBusService.html\">EventBusService</a></code> - for service proxies, the service object is a proxy. Its\ntype is the proxies interface (the location is the address).</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/servicediscovery/types/MessageSource.html\">MessageSource</a></code> - for message sources (publisher), the service object is a\n<code><a href=\"../../apidocs/io/vertx/core/eventbus/MessageConsumer.html\">MessageConsumer</a></code> (the location is the address).</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/servicediscovery/types/JDBCDataSource.html\">JDBCDataSource</a></code> - for JDBC data sources, the service object is a\n<code><a href=\"../../apidocs/io/vertx/ext/jdbc/JDBCClient.html\">JDBCClient</a></code> (the configuration of the client is computed from the location, metadata and\nconsumer configuration).</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/servicediscovery/types/RedisDataSource.html\">RedisDataSource</a></code> - for Redis data sources, the service object is a\n<code><a href=\"../../apidocs/io/vertx/redis/RedisClient.html\">RedisClient</a></code> (the configuration of the client is computed from the location, metadata and\nconsumer configuration).</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/servicediscovery/types/MongoDataSource.html\">MongoDataSource</a></code> - for Mongo data sources, the service object is a\n<code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html\">MongoClient</a></code> (the configuration of the client is computed from the location, metadata and\nconsumer configuration).</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This section gives details about service types in general and describes how to use the default service types.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_services_with_no_type\"><a class=\"anchor\" href=\"#_services_with_no_type\"></a>Services with no type</h3>\n<div class=\"paragraph\">\n<p>Some records may have no type (<code><a href=\"../../apidocs/io/vertx/servicediscovery/spi/ServiceType.html#UNKNOWN\">ServiceType.UNKNOWN</a></code>). It is not possible to\nretrieve a reference for these records, but you can build the connection details from the <code>location</code> and\n<code>metadata</code> of the <code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Using these services does not fire service usage events.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_endpoints\"><a class=\"anchor\" href=\"#_http_endpoints\"></a>HTTP endpoints</h3>\n<div class=\"paragraph\">\n<p>A HTTP endpoint represents a REST API or a service accessible using HTTP requests. The HTTP endpoint service\nobjects are <code><a href=\"../../apidocs/io/vertx/core/http/HttpClient.html\">HttpClient</a></code> configured with the host, port and ssl.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_publishing_a_http_endpoint\"><a class=\"anchor\" href=\"#_publishing_a_http_endpoint\"></a>Publishing a HTTP endpoint</h4>\n<div class=\"paragraph\">\n<p>To publish a HTTP endpoint, you need a <code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code>. You can create the record using\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/types/HttpEndpoint.html#createRecord-java.lang.String-java.lang.String-int-java.lang.String-io.vertx.core.json.JsonObject-\">HttpEndpoint.createRecord</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The next snippet illustrates hot to create a <code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code> from\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/types/HttpEndpoint.html\">HttpEndpoint</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> record1 = HttpEndpoint.createRecord(<span class=\"hljs-string\">\"some-http-service\"</span>, <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-number\">8433</span>, <span class=\"hljs-string\">\"/api\"</span>)\n\ndiscovery.publish(record1, { ar -&gt;\n  <span class=\"hljs-comment\">// ...</span>\n})\n\n<span class=\"hljs-keyword\">def</span> record2 = HttpEndpoint.createRecord(<span class=\"hljs-string\">\"some-other-name\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">\"localhost\"</span>, <span class=\"hljs-number\">8433</span>, <span class=\"hljs-string\">\"/api\"</span>, [\n  <span class=\"hljs-string\">'some-metadata'</span>:<span class=\"hljs-string\">\"some value\"</span>\n])</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you run your service in a container or on the cloud, it may not know its public IP and public port, so the\npublication must be done by another entity having this info. Generally it&#8217;s a bridge.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_consuming_a_http_endpoint\"><a class=\"anchor\" href=\"#_consuming_a_http_endpoint\"></a>Consuming a HTTP endpoint</h4>\n<div class=\"paragraph\">\n<p>Once a HTTP endpoint is published, a consumer can retrieve it. The service object is a\n<code><a href=\"../../apidocs/io/vertx/core/http/HttpClient.html\">HttpClient</a></code> with a port and host configured:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Get the record</span>\ndiscovery.getRecord([\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-http-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded() &amp;&amp; ar.result() != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// Retrieve the service reference</span>\n    <span class=\"hljs-keyword\">def</span> reference = discovery.getReference(ar.result())\n    <span class=\"hljs-comment\">// Retrieve the service object</span>\n    <span class=\"hljs-keyword\">def</span> client = reference.getAs(HttpClient<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n\n    // <span class=\"hljs-title\">You</span> <span class=\"hljs-title\">need</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">path</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">complete</span> <span class=\"hljs-title\">path</span>\n    <span class=\"hljs-title\">client</span>.<span class=\"hljs-title\">getNow</span>(\"/<span class=\"hljs-title\">api</span>/<span class=\"hljs-title\">persons</span>\", {</span> response -&gt;\n\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-comment\">// Dont' forget to release the service</span>\n      reference.release()\n\n    })\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also use the\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/types/HttpEndpoint.html#getClient-io.vertx.servicediscovery.ServiceDiscovery-io.vertx.core.json.JsonObject-io.vertx.core.Handler-\">HttpEndpoint.getClient</a></code>\nmethod to combine lookup and service retrieval in one call:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">HttpEndpoint.getClient(discovery, [\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-http-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> client = ar.result()\n\n    <span class=\"hljs-comment\">// You need to path the complete path</span>\n    client.getNow(<span class=\"hljs-string\">\"/api/persons\"</span>, { response -&gt;\n\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-comment\">// Dont' forget to release the service</span>\n      ServiceDiscovery.releaseServiceObject(discovery, client)\n\n    })\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this second version, the service object is released using\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscovery.html#releaseServiceObject-io.vertx.servicediscovery.ServiceDiscovery-java.lang.Object-\">ServiceDiscovery.releaseServiceObject</a></code>,\nso you don&#8217;t need to keep the service reference.</p>\n</div>\n<div class=\"paragraph\">\n<p>Since Vert.x 3.4.0, another client has been provided. This higher-level client, named <code><a href=\"../../apidocs/io/vertx/ext/web/client/WebClient.html\">WebClient</a></code>\ntends to be easier to use. You can retrieve a <code><a href=\"../../apidocs/io/vertx/ext/web/client/WebClient.html\">WebClient</a></code> instances using:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Get the record</span>\ndiscovery.getRecord([\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-http-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded() &amp;&amp; ar.result() != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// Retrieve the service reference</span>\n    <span class=\"hljs-keyword\">def</span> reference = discovery.getReference(ar.result())\n    <span class=\"hljs-comment\">// Retrieve the service object</span>\n    <span class=\"hljs-keyword\">def</span> client = reference.getAs(WebClient<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n\n    // <span class=\"hljs-title\">You</span> <span class=\"hljs-title\">need</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">path</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">complete</span> <span class=\"hljs-title\">path</span>\n    <span class=\"hljs-title\">client</span>.<span class=\"hljs-title\">get</span>(\"/<span class=\"hljs-title\">api</span>/<span class=\"hljs-title\">persons</span>\").<span class=\"hljs-title\">send</span>({</span> response -&gt;\n\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-comment\">// Dont' forget to release the service</span>\n      reference.release()\n\n    })\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And, if you prefer the approach using the service type:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">HttpEndpoint.getWebClient(discovery, [\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-http-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> client = ar.result()\n\n    <span class=\"hljs-comment\">// You need to path the complete path</span>\n    client.get(<span class=\"hljs-string\">\"/api/persons\"</span>).send({ response -&gt;\n\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-comment\">// Dont' forget to release the service</span>\n      ServiceDiscovery.releaseServiceObject(discovery, client)\n\n    })\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_event_bus_services\"><a class=\"anchor\" href=\"#_event_bus_services\"></a>Event bus services</h3>\n<div class=\"paragraph\">\n<p>Event bus services are service proxies. They implement async-RPC services on top of the event bus. When retrieving\na service object from an event bus service, you get a service proxy of the right type. You can access helper\nmethods from <code><a href=\"../../apidocs/io/vertx/servicediscovery/types/EventBusService.html\">EventBusService</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Notice that service proxies (service implementations and service interfaces) are developed in Java.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_publishing_an_event_bus_service\"><a class=\"anchor\" href=\"#_publishing_an_event_bus_service\"></a>Publishing an event bus service</h4>\n<div class=\"paragraph\">\n<p>To publish an event bus service, you need to create a <code><a href=\"../../apidocs/io/vertx/servicediscovery/Record.html\">Record</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> record = EventBusService.createRecord(<span class=\"hljs-string\">\"some-eventbus-service\"</span>, <span class=\"hljs-string\">\"address\"</span>, <span class=\"hljs-string\">\"examples.MyService\"</span>, [\n  <span class=\"hljs-string\">'some-metadata'</span>:<span class=\"hljs-string\">\"some value\"</span>\n])\n\ndiscovery.publish(record, { ar -&gt;\n  <span class=\"hljs-comment\">// ...</span>\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_consuming_an_event_bus_service\"><a class=\"anchor\" href=\"#_consuming_an_event_bus_service\"></a>Consuming an event bus service</h4>\n<div class=\"paragraph\">\n<p>To consume an event bus service you can either retrieve the record and then get the reference, or use the\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/types/EventBusService.html\">EventBusService</a></code> interface that combines the two operations in one call.</p>\n</div>\n<div class=\"paragraph\">\n<p>However, as the service is searched by (Java) interface, you need to specify the type of client you expect.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">EventBusService.getServiceProxyWithJsonFilter(discovery, [\n<span class=\"hljs-string\">'service.interface'</span>:<span class=\"hljs-string\">\"org.acme.MyService\"</span>\n], examples.MyService<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, {</span> ar -&gt;\n<span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n<span class=\"hljs-keyword\">def</span> service = ar.result()\n\n<span class=\"hljs-comment\">// Dont' forget to release the service</span>\nServiceDiscovery.releaseServiceObject(discovery, service)\n}\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_message_source\"><a class=\"anchor\" href=\"#_message_source\"></a>Message source</h3>\n<div class=\"paragraph\">\n<p>A message source is a component sending messages on the event bus on a specific address. Message source clients are\n<code><a href=\"../../apidocs/io/vertx/core/eventbus/MessageConsumer.html\">MessageConsumer</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <em>location</em> or a message source service is the event bus address on which messages are sent.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_publishing_a_message_source\"><a class=\"anchor\" href=\"#_publishing_a_message_source\"></a>Publishing a message source</h4>\n<div class=\"paragraph\">\n<p>As for the other service types, publishing a message source is a 2-step process:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>create a record, using <code><a href=\"../../apidocs/io/vertx/servicediscovery/types/MessageSource.html\">MessageSource</a></code></p>\n</li>\n<li>\n<p>publish the record</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> record = MessageSource.createRecord(<span class=\"hljs-string\">\"some-message-source-service\"</span>, <span class=\"hljs-string\">\"some-address\"</span>)\n\ndiscovery.publish(record, { ar -&gt;\n  <span class=\"hljs-comment\">// ...</span>\n})\n\nrecord = MessageSource.createRecord(<span class=\"hljs-string\">\"some-other-message-source-service\"</span>, <span class=\"hljs-string\">\"some-address\"</span>, <span class=\"hljs-string\">\"examples.MyData\"</span>)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In the second record, the type of payload is also indicated. This information is optional.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_consuming_a_message_source\"><a class=\"anchor\" href=\"#_consuming_a_message_source\"></a>Consuming a message source</h4>\n<div class=\"paragraph\">\n<p>On the consumer side, you can retrieve the record and the reference, or use the\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/types/MessageSource.html\">MessageSource</a></code> class to retrieve the service is one call.</p>\n</div>\n<div class=\"paragraph\">\n<p>With the first approach, the code is the following:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Get the record</span>\ndiscovery.getRecord([\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-message-source-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded() &amp;&amp; ar.result() != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// Retrieve the service reference</span>\n    <span class=\"hljs-keyword\">def</span> reference = discovery.getReference(ar.result())\n    <span class=\"hljs-comment\">// Retrieve the service object</span>\n    <span class=\"hljs-keyword\">def</span> consumer = reference.getAs(MessageConsumer<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n\n    // <span class=\"hljs-title\">Attach</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\">message</span> <span class=\"hljs-title\">handler</span> <span class=\"hljs-title\">on</span> <span class=\"hljs-title\">it</span>\n    <span class=\"hljs-title\">consumer</span>.<span class=\"hljs-title\">handler</span>({</span> message -&gt;\n      <span class=\"hljs-comment\">// message handler</span>\n      <span class=\"hljs-keyword\">def</span> payload = message.body()\n    })\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When, using <code><a href=\"../../apidocs/io/vertx/servicediscovery/types/MessageSource.html\">MessageSource</a></code>, it becomes:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">MessageSource.getConsumer(discovery, [\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-message-source-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> consumer = ar.result()\n\n    <span class=\"hljs-comment\">// Attach a message handler on it</span>\n    consumer.handler({ message -&gt;\n      <span class=\"hljs-comment\">// message handler</span>\n      <span class=\"hljs-keyword\">def</span> payload = message.body()\n    })\n    <span class=\"hljs-comment\">// ...</span>\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_jdbc_data_source\"><a class=\"anchor\" href=\"#_jdbc_data_source\"></a>JDBC Data source</h3>\n<div class=\"paragraph\">\n<p>Data sources represents databases or data stores. JDBC data sources are a specialization for databases accessible\nusing a JDBC driver. The client of a JDBC data source service is a <code><a href=\"../../apidocs/io/vertx/ext/jdbc/JDBCClient.html\">JDBCClient</a></code>.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_publishing_a_jdbc_service\"><a class=\"anchor\" href=\"#_publishing_a_jdbc_service\"></a>Publishing a JDBC service</h4>\n<div class=\"paragraph\">\n<p>As for the other service types, publishing a JDBC data source is a 2-step process:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>create a record, using <code><a href=\"../../apidocs/io/vertx/servicediscovery/types/JDBCDataSource.html\">JDBCDataSource</a></code></p>\n</li>\n<li>\n<p>publish the record</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> record = JDBCDataSource.createRecord(<span class=\"hljs-string\">\"some-data-source-service\"</span>, [\n<span class=\"hljs-symbol\">  url:</span><span class=\"hljs-string\">\"some jdbc url\"</span>\n], [\n  <span class=\"hljs-string\">'some-metadata'</span>:<span class=\"hljs-string\">\"some-value\"</span>\n])\n\ndiscovery.publish(record, { ar -&gt;\n  <span class=\"hljs-comment\">// ...</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As JDBC data sources can represent a high variety of databases, and their access is often different, the record is\nrather unstructured. The <code>location</code> is a simple JSON object that should provide the fields to access the data\nsource (JDBC url, username&#8230;&#8203;). The set of fields may depend on the database but also on the connection pool used\nin front.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_consuming_a_jdbc_service\"><a class=\"anchor\" href=\"#_consuming_a_jdbc_service\"></a>Consuming a JDBC service</h4>\n<div class=\"paragraph\">\n<p>As stated in the previous section, how to access a data source depends on the data source itself. To build the\n<code><a href=\"../../apidocs/io/vertx/ext/jdbc/JDBCClient.html\">JDBCClient</a></code>, you can merge configuration: the record location, the metadata and a json object provided by\nthe consumer:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Get the record</span>\ndiscovery.getRecord([\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-data-source-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded() &amp;&amp; ar.result() != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// Retrieve the service reference</span>\n    <span class=\"hljs-keyword\">def</span> reference = discovery.getReferenceWithConfiguration(ar.result(), [\n<span class=\"hljs-symbol\">      username:</span><span class=\"hljs-string\">\"clement\"</span>,\n<span class=\"hljs-symbol\">      password:</span><span class=\"hljs-string\">\"*****\"</span>\n    ])\n\n    <span class=\"hljs-comment\">// Retrieve the service object</span>\n    <span class=\"hljs-keyword\">def</span> client = reference.getAs(JDBCClient<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n\n    // ...\n\n    // <span class=\"hljs-title\">when</span> <span class=\"hljs-title\">done</span>\n    <span class=\"hljs-title\">reference</span>.<span class=\"hljs-title\">release</span>()\n  }\n})\n</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also use the <code><a href=\"../../apidocs/io/vertx/ext/jdbc/JDBCClient.html\">JDBCClient</a></code> class to the lookup and retrieval in one call:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">JDBCDataSource.getJDBCClient(discovery, [\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-data-source-service\"</span>\n], [\n<span class=\"hljs-symbol\">  username:</span><span class=\"hljs-string\">\"clement\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"*****\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> client = ar.result()\n\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-comment\">// Dont' forget to release the service</span>\n    ServiceDiscovery.releaseServiceObject(discovery, client)\n\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_redis_data_source\"><a class=\"anchor\" href=\"#_redis_data_source\"></a>Redis Data source</h3>\n<div class=\"paragraph\">\n<p>Redis data sources are a specialization for Redis persistence databases.\nThe client of a Redis data source service is a <code><a href=\"../../apidocs/io/vertx/redis/RedisClient.html\">RedisClient</a></code>.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_publishing_a_redis_service\"><a class=\"anchor\" href=\"#_publishing_a_redis_service\"></a>Publishing a Redis service</h4>\n<div class=\"paragraph\">\n<p>Publishing a Redis data source is a 2-step process:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>create a record, using <code><a href=\"../../apidocs/io/vertx/servicediscovery/types/RedisDataSource.html\">RedisDataSource</a></code></p>\n</li>\n<li>\n<p>publish the record</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> record = RedisDataSource.createRecord(<span class=\"hljs-string\">\"some-redis-data-source-service\"</span>, [\n<span class=\"hljs-symbol\">  url:</span><span class=\"hljs-string\">\"localhost\"</span>\n], [\n  <span class=\"hljs-string\">'some-metadata'</span>:<span class=\"hljs-string\">\"some-value\"</span>\n])\n\ndiscovery.publish(record, { ar -&gt;\n  <span class=\"hljs-comment\">// ...</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>location</code> is a simple JSON object that should provide the fields to access the Redis data\nsource (url, port&#8230;&#8203;).</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_consuming_a_redis_service\"><a class=\"anchor\" href=\"#_consuming_a_redis_service\"></a>Consuming a Redis service</h4>\n<div class=\"paragraph\">\n<p>As stated in the previous section, how to access a data source depends on the data source itself. To build the\n<code><a href=\"../../apidocs/io/vertx/redis/RedisClient.html\">RedisClient</a></code>, you can merge configuration: the record location, the metadata and a json object provided by\nthe consumer:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Get the record</span>\ndiscovery.getRecord([\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-redis-data-source-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded() &amp;&amp; ar.result() != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// Retrieve the service reference</span>\n    <span class=\"hljs-keyword\">def</span> reference = discovery.getReference(ar.result())\n\n    <span class=\"hljs-comment\">// Retrieve the service instance</span>\n    <span class=\"hljs-keyword\">def</span> client = reference.getAs(RedisClient<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n\n    // ...\n\n    // <span class=\"hljs-title\">when</span> <span class=\"hljs-title\">done</span>\n    <span class=\"hljs-title\">reference</span>.<span class=\"hljs-title\">release</span>()\n  }\n})\n</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also use the <code><a href=\"../../apidocs/io/vertx/servicediscovery/types/RedisDataSource.html\">RedisDataSource</a></code> class to the lookup and retrieval in one call:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">RedisDataSource.getRedisClient(discovery, [\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-redis-data-source-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> client = ar.result()\n\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-comment\">// Dont' forget to release the service</span>\n    ServiceDiscovery.releaseServiceObject(discovery, client)\n\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_mongo_data_source\"><a class=\"anchor\" href=\"#_mongo_data_source\"></a>Mongo Data source</h3>\n<div class=\"paragraph\">\n<p>Mongo data sources are a specialization for MongoDB databases.\nThe client of a Mongo data source service is a <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html\">MongoClient</a></code>.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_publishing_a_mongo_service\"><a class=\"anchor\" href=\"#_publishing_a_mongo_service\"></a>Publishing a Mongo service</h4>\n<div class=\"paragraph\">\n<p>Publishing a Mongo data source is a 2-step process:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>create a record, using <code><a href=\"../../apidocs/io/vertx/servicediscovery/types/MongoDataSource.html\">MongoDataSource</a></code></p>\n</li>\n<li>\n<p>publish the record</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> record = MongoDataSource.createRecord(<span class=\"hljs-string\">\"some-data-source-service\"</span>, [\n<span class=\"hljs-symbol\">  connection_string:</span><span class=\"hljs-string\">\"some mongo connection\"</span>\n], [\n  <span class=\"hljs-string\">'some-metadata'</span>:<span class=\"hljs-string\">\"some-value\"</span>\n])\n\ndiscovery.publish(record, { ar -&gt;\n  <span class=\"hljs-comment\">// ...</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>location</code> is a simple JSON object that should provide the fields to access the Redis data\nsource (url, port&#8230;&#8203;).</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_consuming_a_mongo_service\"><a class=\"anchor\" href=\"#_consuming_a_mongo_service\"></a>Consuming a Mongo service</h4>\n<div class=\"paragraph\">\n<p>As stated in the previous section, how to access a data source depends on the data source itself. To build the\n<code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html\">MongoClient</a></code>, you can merge configuration: the record location, the metadata and a json object\nprovided by the consumer:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Get the record</span>\ndiscovery.getRecord([\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-data-source-service\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded() &amp;&amp; ar.result() != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// Retrieve the service reference</span>\n    <span class=\"hljs-keyword\">def</span> reference = discovery.getReferenceWithConfiguration(ar.result(), [\n<span class=\"hljs-symbol\">      username:</span><span class=\"hljs-string\">\"clement\"</span>,\n<span class=\"hljs-symbol\">      password:</span><span class=\"hljs-string\">\"*****\"</span>\n    ])\n\n    <span class=\"hljs-comment\">// Retrieve the service object</span>\n    <span class=\"hljs-keyword\">def</span> client = reference.get()\n\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-comment\">// when done</span>\n    reference.release()\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also use the <code><a href=\"../../apidocs/io/vertx/servicediscovery/types/MongoDataSource.html\">MongoDataSource</a></code> class to the lookup and retrieval in one call:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">MongoDataSource.getMongoClient(discovery, [\n<span class=\"hljs-symbol\">  name:</span><span class=\"hljs-string\">\"some-data-source-service\"</span>\n], [\n<span class=\"hljs-symbol\">  username:</span><span class=\"hljs-string\">\"clement\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"*****\"</span>\n], { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> client = ar.result()\n\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-comment\">// Dont' forget to release the service</span>\n    ServiceDiscovery.releaseServiceObject(discovery, client)\n\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_listening_for_service_arrivals_and_departures\"><a class=\"anchor\" href=\"#_listening_for_service_arrivals_and_departures\"></a>Listening for service arrivals and departures</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Every time a provider is published or removed, an event is published on the <em>vertx.discovery.announce</em> address.\nThis address is configurable from the <code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscoveryOptions.html\">ServiceDiscoveryOptions</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The received record has a <code>status</code> field indicating the new state of the record:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>UP</code> : the service is available, you can start using it</p>\n</li>\n<li>\n<p><code>DOWN</code> : the service is not available anymore, you should not use it anymore</p>\n</li>\n<li>\n<p><code>OUT_OF_SERVICE</code> : the service is not running, you should not use it anymore, but it may come back later.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_listening_for_service_usage\"><a class=\"anchor\" href=\"#_listening_for_service_usage\"></a>Listening for service usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Every time a service reference is retrieved (<code>bind</code>) or released (<code>release</code>), an event is published on the <em>vertx\n.discovery.usage</em> address. This address is configurable from the <code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscoveryOptions.html\">ServiceDiscoveryOptions</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>It lets you listen for service usage and map the service bindings.</p>\n</div>\n<div class=\"paragraph\">\n<p>The received message is a <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> containing:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the record in the <code>record</code> field</p>\n</li>\n<li>\n<p>the type of event in the <code>type</code> field. It&#8217;s either <code>bind</code> or <code>release</code></p>\n</li>\n<li>\n<p>the id of the service discovery (either its name or the node id) in the <code>id</code> field</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This <code>id</code> is configurable from the <code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscoveryOptions.html\">ServiceDiscoveryOptions</a></code>. By default it&#8217;s \"localhost\" on\nsingle node configuration and the id of the node in clustered mode.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can disable the service usage support by setting the usage address to <code>null</code> with\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscoveryOptions.html#setUsageAddress-java.lang.String-\">setUsageAddress</a></code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_service_discovery_bridges\"><a class=\"anchor\" href=\"#_service_discovery_bridges\"></a>Service discovery bridges</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Bridges let you import and export services from / to other discovery mechanism such as Docker, Kubernetes, Consul&#8230;&#8203;\nEach bridge decides how the services are imported and exported. It does not have to be bi-directional.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can provide your own bridge by implementing the <code><a href=\"../../apidocs/io/vertx/servicediscovery/spi/ServiceImporter.html\">ServiceImporter</a></code> interface and\nregister it using\n<code><a href=\"../../apidocs/io/vertx/servicediscovery/ServiceDiscovery.html#registerServiceImporter-io.vertx.servicediscovery.spi.ServiceImporter-io.vertx.core.json.JsonObject-\">registerServiceImporter</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The second parameter can provide an optional configuration for the bridge.</p>\n</div>\n<div class=\"paragraph\">\n<p>When the bridge is registered the <code><a href=\"../../apidocs/io/vertx/servicediscovery/spi/ServiceImporter.html#start-io.vertx.core.Vertx-io.vertx.servicediscovery.spi.ServicePublisher-io.vertx.core.json.JsonObject-io.vertx.core.Promise-\">start</a></code> method is called.\nIt lets you configure the bridge. When the bridge is configured, ready and has imported / exported the initial services, it must complete the given <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code>.\nIf the bridge starts method is blocking, it must use an <code><a href=\"../../apidocs/io/vertx/core/Vertx.html#executeBlocking-io.vertx.core.Handler-boolean-io.vertx.core.Handler-\">executeBlocking</a></code> construct, and complete the given future object.</p>\n</div>\n<div class=\"paragraph\">\n<p>When the service discovery is stopped, the bridge is stopped.\nThe <code><a href=\"../../apidocs/io/vertx/servicediscovery/spi/ServiceImporter.html#close-io.vertx.core.Handler-\">close</a></code> method is called that provides the opportunity to cleanup resources, removed imported / exported services&#8230;&#8203;\nThis method must complete the given <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code> to notify the caller of the completion.</p>\n</div>\n<div class=\"paragraph\">\n<p>Notice than in a cluster, only one member needs to register the bridge as the records are accessible by all members.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_additional_bridges\"><a class=\"anchor\" href=\"#_additional_bridges\"></a>Additional bridges</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In addition of the bridges supported by this library, Vert.x Service Discovery provides additional\nbridges you can use in your application.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::consul-bridge.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::kubernetes-bridge.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::zookeeper-bridge.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::docker-links-bridge.adoc[]</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_additional_backends\"><a class=\"anchor\" href=\"#_additional_backends\"></a>Additional backends</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In addition of the backend supported by this library, Vert.x Service Discovery provides additional\nbackends you can use in your application.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::redis-backend.adoc[]</p>\n</div>\n</div>\n</div>","version":"3.9.4"},"__N_SSG":true}