{"pageProps":{"slug":"3.9.1/vertx-health-check/js","title":"Vert.x Health Checks","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_health_checks\">Using Vert.x Health Checks</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_creating_the_health_check_object\">Creating the health check object.</a></li>\n<li><a href=\"#_registering_the_vert_x_web_handler\">Registering the Vert.x Web handler</a></li>\n</ul>\n</li>\n<li><a href=\"#_procedures\">Procedures</a></li>\n<li><a href=\"#_http_responses_and_json_output\">HTTP responses and JSON Output</a></li>\n<li><a href=\"#_examples_of_procedures\">Examples of procedures</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_jdbc\">JDBC</a></li>\n<li><a href=\"#_service_availability\">Service availability</a></li>\n<li><a href=\"#_event_bus\">Event bus</a></li>\n</ul>\n</li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_exposing_health_checks_on_the_event_bus\">Exposing health checks on the event bus</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Health Checks</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This component provides a simple way to expose health checks. Health checks are used to express the current state\nof the application in very simple terms: <em>UP</em> or <em>DOWN</em>. The health checks can be used individually, or in\ncombination to Vert.x Web or the event bus.</p>\n</div>\n<div class=\"paragraph\">\n<p>This component provides a Vert.x Web handler on which you\ncan register procedure testing the health of the application. The handler computes the final state and returns the\nresult as JSON.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_health_checks\"><a class=\"anchor\" href=\"#_using_vert_x_health_checks\"></a>Using Vert.x Health Checks</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Notice that you generally need Vert.x Web to use this component. In addition add the following dependency:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-health-check<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-health-check:3.9.1'</span></code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_creating_the_health_check_object\"><a class=\"anchor\" href=\"#_creating_the_health_check_object\"></a>Creating the health check object.</h3>\n<div class=\"paragraph\">\n<p>The central object is <code><a href=\"../../jsdoc/module-vertx-health-checks-js_health_checks-HealthChecks.html\">HealthChecks</a></code>. You can create a new instance using:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you have created this object you can register and unregister procedures. See more about this below.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_registering_the_vert_x_web_handler\"><a class=\"anchor\" href=\"#_registering_the_vert_x_web_handler\"></a>Registering the Vert.x Web handler</h3>\n<div class=\"paragraph\">\n<p>To create the Vert.x Web handler managing your health check you can either:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>using an existing instance of <code><a href=\"../../jsdoc/module-vertx-health-checks-js_health_checks-HealthChecks.html\">HealthChecks</a></code></p>\n</li>\n<li>\n<p>let the handler create one instance for you.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> HealthCheckHandler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-health-checks-js/health_check_handler\"</span>);\n<span class=\"hljs-keyword\">var</span> HealthChecks = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-health-checks-js/health_checks\"</span>);\n<span class=\"hljs-keyword\">var</span> Router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-web-js/router\"</span>);\n<span class=\"hljs-keyword\">var</span> healthCheckHandler1 = HealthCheckHandler.create(vertx);\n<span class=\"hljs-keyword\">var</span> healthCheckHandler2 = HealthCheckHandler.createWithHealthChecks(HealthChecks.create(vertx));\n\n<span class=\"hljs-keyword\">var</span> router = Router.router(vertx);\n<span class=\"hljs-comment\">// Populate the router with routes...</span>\n<span class=\"hljs-comment\">// Register the health check handler</span>\nrouter.get(<span class=\"hljs-string\">\"/health*\"</span>).handler(healthCheckHandler1.handle);\n<span class=\"hljs-comment\">// Or</span>\nrouter.get(<span class=\"hljs-string\">\"/ping*\"</span>).handler(healthCheckHandler2.handle);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Procedure registration can be directly made on the <code><a href=\"../../jsdoc/module-vertx-health-checks-js_health_check_handler-HealthCheckHandler.html\">HealthCheckHandler</a></code>\ninstance. Alternatively, if you have created the <code><a href=\"../../jsdoc/module-vertx-health-checks-js_health_checks-HealthChecks.html\">HealthChecks</a></code> instance\nbeforehand, you can register the procedure on this object directly. Registrations and unregistrations can be done at\nanytime, even after the route registration:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_procedures\"><a class=\"anchor\" href=\"#_procedures\"></a>Procedures</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A procedure is a function checking some aspect of the system to deduce the current health. It reports a\n<code><a href=\"../dataobjects.html#Status\">Status</a></code> indicating whether or not the test has passed or failed. This function\nmust not block and report to the given <code><a href=\"../../jsdoc/module-vertx-js_future-Future.html\">Future</a></code> whether or not it succeed.</p>\n</div>\n<div class=\"paragraph\">\n<p>When you register a procedure, you give a name, and the function (handler) executing the check.</p>\n</div>\n<div class=\"paragraph\">\n<p>Rules deducing the status are the following</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>if the future is mark as failed, the check is considered as <em>KO</em></p>\n</li>\n<li>\n<p>if the future is completed successfully but without a <code><a href=\"../dataobjects.html#Status\">Status</a></code>, the check\nis considered as <em>OK</em>.</p>\n</li>\n<li>\n<p>if the future is completed successfully with a <code><a href=\"../dataobjects.html#Status\">Status</a></code> marked as <em>OK</em>,\nthe check is considered as <em>OK</em>.</p>\n</li>\n<li>\n<p>if the future is completed successfully with a <code><a href=\"../dataobjects.html#Status\">Status</a></code> marked as <em>KO</em>,\nthe check is considered as <em>KO</em>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../dataobjects.html#Status\">Status</a></code> can also provide additional data:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Procedures can be organised by groups. The procedure name indicates the group. The procedures are organized as a\ntree and the structure is mapped to HTTP urls (see below).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> HealthCheckHandler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vertx-health-checks-js/health_check_handler\"</span>);\n<span class=\"hljs-keyword\">var</span> healthCheckHandler = HealthCheckHandler.create(vertx);\n\n<span class=\"hljs-comment\">// Register procedures</span>\n<span class=\"hljs-comment\">// Procedure can be grouped. The group is deduced using a name with \"/\".</span>\n<span class=\"hljs-comment\">// Groups can contains other group</span>\nhealthCheckHandler.register(<span class=\"hljs-string\">\"a-group/my-procedure-name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">future</span>) </span>{\n  <span class=\"hljs-comment\">//....</span>\n});\nhealthCheckHandler.register(<span class=\"hljs-string\">\"a-group/a-second-group/my-second-procedure-name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">future</span>) </span>{\n  <span class=\"hljs-comment\">//....</span>\n});\n\nrouter.get(<span class=\"hljs-string\">\"/health\"</span>).handler(healthCheckHandler.handle);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_http_responses_and_json_output\"><a class=\"anchor\" href=\"#_http_responses_and_json_output\"></a>HTTP responses and JSON Output</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When using the Vert.x web handler, the overall health check is retrieved using a HTTP GET or POST (depending on\nthe route you registered) on the route given when exposing the\n<code><a href=\"../../jsdoc/module-vertx-health-checks-js_health_check_handler-HealthCheckHandler.html\">HealthCheckHandler</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If no procedure are registered, the response is <code>204 - NO CONTENT</code>, indicating that the system is <em>UP</em> but no\nprocedures has been executed. The response does not contain a payload.</p>\n</div>\n<div class=\"paragraph\">\n<p>If there is at least one procedure registered, this procedure is executed and the outcome status is computed. The\nresponse would use the following status code:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>200</code> : Everything is fine</p>\n</li>\n<li>\n<p><code>503</code> : At least one procedure has reported a non-healthy state</p>\n</li>\n<li>\n<p><code>500</code> : One procedure has thrown an error or has not reported a status in time</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The content is a JSON document indicating the overall result (<code>outcome</code>). It&#8217;s either <code>UP</code> or <code>DOWN</code>. A <code>checks</code>\narray is also given indicating the result of the different executed procedures. If the procedure has reported\nadditional data, the data is also given:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n\"checks\" : [\n{\n  \"id\" : \"A\",\n  \"status\" : \"UP\"\n},\n{\n  \"id\" : \"B\",\n  \"status\" : \"DOWN\",\n  \"data\" : {\n    \"some-data\" : \"some-value\"\n  }\n}\n],\n\"outcome\" : \"DOWN\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In case of groups/ hierarchy, the <code>checks</code> array depicts this structure:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n\"checks\" : [\n{\n  \"id\" : \"my-group\",\n  \"status\" : \"UP\",\n  \"checks\" : [\n  {\n    \"id\" : \"check-2\",\n    \"status\" : \"UP\",\n  },\n  {\n    \"id\" : \"check-1\",\n    \"status\" : \"UP\"\n  }]\n}],\n\"outcome\" : \"UP\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If a procedure throws an error, reports a failure (exception), the JSON document provides the <code>cause</code> in the\n<code>data</code> section. If a procedure does not report back before a timeout, the indicated cause is <code>Timeout</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_examples_of_procedures\"><a class=\"anchor\" href=\"#_examples_of_procedures\"></a>Examples of procedures</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This section provides example of common health checks.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_jdbc\"><a class=\"anchor\" href=\"#_jdbc\"></a>JDBC</h3>\n<div class=\"paragraph\">\n<p>This check reports whether or not a connection to the database can be established:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_availability\"><a class=\"anchor\" href=\"#_service_availability\"></a>Service availability</h3>\n<div class=\"paragraph\">\n<p>This check reports whether or not a service (here a HTTP endpoint) is available in the service discovery:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_event_bus\"><a class=\"anchor\" href=\"#_event_bus\"></a>Event bus</h3>\n<div class=\"paragraph\">\n<p>This check reports whether a consumer is ready on the event bus. The protocol, in this example, is a simple\nping/pong, but it can be more sophisticated. This check can be used to check whether or not a verticle is ready\nif it&#8217;s listening on a specific event address.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When using the Vert.x web handler, you can pass a <code><a href=\"../../jsdoc/module-vertx-auth-common-js_auth_provider-AuthProvider.html\">AuthProvider</a></code> use to authenticate the\nrequest. Check &lt;a href=\"http://vertx.io/docs/#authentication_and_authorisation\"&gt;Vert.x Auth&lt;/a&gt; for more details\nabout available authentication providers.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Vert.x Web handler creates a JSON object containing:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>the request headers</p>\n</li>\n<li>\n<p>the request params</p>\n</li>\n<li>\n<p>the form param if any</p>\n</li>\n<li>\n<p>the content as JSON if any and if the request set the content type to <code>application/json</code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The resulting object is passed to the auth provider to authenticate the request. If the authentication failed, it\nreturns a <code>403 - FORBIDDEN</code> response.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_exposing_health_checks_on_the_event_bus\"><a class=\"anchor\" href=\"#_exposing_health_checks_on_the_event_bus\"></a>Exposing health checks on the event bus</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>While exposing the health checks using HTTP with the Vert.x web handler is convenient, it can be useful\nto expose the data differently. This section gives an example to expose the data on the event bus:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">vertx.eventBus().consumer(<span class=\"hljs-string\">\"health\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">message</span>) </span>{\n  healthChecks.invoke(message.reply);\n});</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"3.9.1"},"__N_SSG":true}