{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"JWT Authorization for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn about JWT foundations, protect routes with JWT Authorization, JWT encoded tokens, and RBAC with Keycloak"},"date":"2020-10-01","slug":"jwt-authorization-for-vert-x-with-keycloak","readingTime":{"text":"11 min read","minutes":10.075,"time":604500,"words":2015},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TL;DR:\")), mdx(\"p\", null, \"In this blog post you\\u2019ll learn:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JWT foun\\xADda\\xADtions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to pro\\xADtect routes with a JWT Au\\xADtho\\xADriza\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to ex\\xADtract claims from a JWT en\\xADcoded token\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to apply RBAC with Key\\xADcloak Realm roles\")), mdx(\"h2\", {\n    \"id\": \"hello-again\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#hello-again\"\n  })), \"Hello again\"), mdx(\"p\", null, \"Hi there! In my last blog post \", mdx(Link, {\n    href: \"/blog/easy-sso-for-vert-x-with-keycloak/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Easy SSO for Vert.x with Key\\xADcloak\")), \", we learned how to con\\xADfig\\xADure sin\\xADgle sign-\\u200Bon for a Vert.x web ap\\xADpli\\xADca\\xADtion with Key\\xADcloak and OpenID con\\xADnect. This time, we\\u2019ll see how we can pro\\xADtect an ap\\xADpli\\xADca\\xADtion with Vert.x\\u2019s \", mdx(Link, {\n    href: \"/docs/vertx-web/java/#_jwt_authorisation\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"JWT Au\\xADtho\\xADriza\\xADtion\")), \" sup\\xADport and Key\\xADcloak.\"), mdx(\"h2\", {\n    \"id\": \"keycloak-setup\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#keycloak-setup\"\n  })), \"Keycloak Setup\"), mdx(\"p\", null, \"To se\\xADcure our Vert.x app, we need to use a Key\\xADcloak server for ob\\xADtain\\xADing JWT to\\xADkens. Al\\xADthough \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.keycloak.org/docs/latest/getting_started/\"\n  }), \"Key\\xADcloak has a great get\\xADting started guide\"), \" I wanted to make it a bit eas\\xADier to put every\\xADthing to\\xADgether, there\\xADfore I pre\\xADpared a local Key\\xADcloak docker con\\xADtainer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx#start-keycloak-with-the-vertx-realm\"\n  }), \"as de\\xADscribed here\"), \", which comes with all the re\\xADquired con\\xADfig\\xADu\\xADra\\xADtion in place, that you can start eas\\xADily.\"), mdx(\"p\", null, \"The pre\\xADcon\\xADfig\\xADured Key\\xADcloak realm \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx\"), \" con\\xADtains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-service\"), \" OpenID con\\xADnect client for our Vert.x app and a set\\nof users for test\\xADing. To ease test\\xADing, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-service\"), \" is con\\xADfig\\xADured with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Direct Access Grant\"), \" en\\xADabled in Key\\xADcloak, which\\nen\\xADables sup\\xADport for the OAuth2 re\\xADsource owner pass\\xADword cre\\xADden\\xADtials grant (ROPC) flow.\"), mdx(\"p\", null, \"To start Key\\xADcloak with the pre\\xADcon\\xADfig\\xADured realm, just start the docker con\\xADtainer with the fol\\xADlow\\xADing com\\xADmand:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"docker run \\\\\\n  -it \\\\\\n  --name vertx-keycloak \\\\\\n  --rm \\\\\\n  -e KEYCLOAK_USER=admin \\\\\\n  -e KEYCLOAK_PASSWORD=admin \\\\\\n  -e KEYCLOAK_IMPORT=/tmp/vertx-realm.json \\\\\\n  -v \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$PWD\"), \"/vertx-realm.json:/tmp/vertx-realm.json \\\\\\n  -v \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$PWD\"), \"/data:/opt/jboss/keycloak/standalone/data \\\\\\n  -p 8080:8080 \\\\\\n  quay.io/keycloak/keycloak:11.0.2\\n\")), mdx(\"h2\", {\n    \"id\": \"vertx-app\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-app\"\n  })), \"Vert.x App\"), mdx(\"p\", null, \"The ex\\xADam\\xADple app con\\xADsists of a sin\\xADgle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Verticle\"), \", that runs on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3000\"), \" and pro\\xADvides a few routes with pro\\xADtected re\\xADsources. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx/src/main/java/demo/MainVerticle.java\"\n  }), \"You can find the com\\xADplete ex\\xADam\\xADple here\"), \".\"), mdx(\"p\", null, \"Our web app con\\xADtains the fol\\xADlow\\xADing pro\\xADtected routes with han\\xADdlers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/api/greet\"), \" - The greet\\xADing re\\xADsource, which re\\xADturns a greet\\xADing mes\\xADsage, only au\\xADthen\\xADti\\xADcated users can ac\\xADcess this re\\xADsource.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/api/user\"), \" - The user re\\xADsource, which re\\xADturns some in\\xADfor\\xADma\\xADtion about the user, only users with role \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"user\"), \" can ac\\xADcess this re\\xADsource.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/api/admin\"), \" - The user re\\xADsource, which re\\xADturns some in\\xADfor\\xADma\\xADtion about the admin, only users with role \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"admin\"), \" can ac\\xADcess this re\\xADsource.\")), mdx(\"p\", null, \"This ex\\xADam\\xADple is built with Vert.x ver\\xADsion 3.9.3.\"), mdx(\"h3\", {\n    \"id\": \"running-the-app-in-the-console\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#running-the-app-in-the-console\"\n  })), \"Running the app in the console\"), mdx(\"p\", null, \"To run the app, we need to build it first:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"cd\"), \" jwt-service-vertx\\nmvn clean package\\n\")), mdx(\"p\", null, \"This cre\\xADates a jar, which we can run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"java -jar target/*.jar\\n\")), mdx(\"p\", null, \"Note, that we need to start Key\\xADcloak first, since our app fetches the con\\xADfig\\xADu\\xADra\\xADtion from Key\\xADcloak on startup.\"), mdx(\"h3\", {\n    \"id\": \"running-the-app-in-the-ide\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#running-the-app-in-the-ide\"\n  })), \"Running the app in the IDE\"), mdx(\"p\", null, \"We can also run the app di\\xADrectly from your favourite IDE like In\\xADtel\\xADliJ Idea or Eclipse.\\nTo run the app from an IDE, we need to cre\\xADate a launch con\\xADfig\\xADu\\xADra\\xADtion and use the main class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.core.Launcher\"), \". Then set the the pro\\xADgram ar\\xADgu\\xADments to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run demo.MainVerticle\"), \" and use the class\\xADpath of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jwt-service-vertx\"), \" mod\\xADule.\\nWith that in place we should be able to run the app.\"), mdx(\"h2\", {\n    \"id\": \"jwt-authorization\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#jwt-authorization\"\n  })), \"JWT Authorization\"), mdx(\"h3\", {\n    \"id\": \"jwt-foundations\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#jwt-foundations\"\n  })), \"JWT Foundations\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tools.ietf.org/html/rfc7519\"\n  }), \"JSON Web Token (JWT)\"), \" is an open stan\\xADdard to se\\xADcurely ex\\xADchange in\\xADfor\\xADma\\xADtion be\\xADtween two par\\xADties in the form\\nof \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://base64.guru/standards/base64url\"\n  }), \"Base64URL\"), \" en\\xADcoded JSON ob\\xADjects.\\nA stan\\xADdard JWT is just a string which com\\xADprises three base64url en\\xADcoded parts header, pay\\xADload and a sig\\xADna\\xADture, which are sep\\xADa\\xADrated by a \\u201D\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".\"), \"\\u201D char\\xADac\\xADter.\\nThere are other vari\\xADants of JWT that can have more parts.\"), mdx(\"p\", null, \"An ex\\xADam\\xADple JWT can look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjN00xX2hkWjAtWDNyZTl1dmZLSFRDUWRxYXJQYnBMblVJMHltdkF0U1RzIn0.eyJleHAiOjE2MDEzMTg0MjIsImlhdCI6MTYwMTMxODEyMiwianRpIjoiNzYzNWY1YTEtZjFkNy00NTdkLWI4NjktYWQ0OTIzNTJmNGQyIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3ZlcnR4IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjI3YjNmYWMwLTlhZWMtNDQyMS04MWNmLWQ0YjAyNDI4ZjkwMSIsInR5cCI6IkJlYXJlciIsImF6cCI6InZlcnR4LXNlcnZpY2UiLCJzZXNzaW9uX3N0YXRlIjoiNjg3MDgyMTMtNDBiNy00NThhLWFlZTEtMzlkNmY5ZGEwN2FkIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwidXNlciJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiVGhlbyBUZXN0ZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0ZXIiLCJnaXZlbl9uYW1lIjoiVGhlbyIsImZhbWlseV9uYW1lIjoiVGVzdGVyIiwiZW1haWwiOiJ0b20rdGVzdGVyQGxvY2FsaG9zdCJ9.NN1ZGE3f3LHE0u7T6Vfq5yPMKoZ6SmrUxoFopAXZm5wVgMOsJHB8BgHQTDm7u0oTVU0ZHlKH2-o11RKK7Mz0mLqMy2EPdkGY9Bqtj5LZ8oTp8FaVqY1g5Fr5veXYpOMbc2fke-e2hG8sAfSjWz1Mq9BUhJ7HdK7TTIte12pub2nbUs4APYystJWx49cYmUwZ-5c9X295V-NX9UksuMSzFItZ4cACVKi68m9lkR4RuNQKFTuLvWsorz9yRx884e4cnoT_JmfSfYBIl31FfnQzUtCjluUzuD9jVXc_vgC7num_0AreOZiUzpglb8UjKXjswTHF-v_nEIaq7YmM5WKpeg\\n\")), mdx(\"p\", null, \"The header and pay\\xADload sec\\xADtions con\\xADtain in\\xADfor\\xADma\\xADtion as a JSON ob\\xADject, whereas the sig\\xADna\\xADture is just a plain string. JSON ob\\xADjects con\\xADtain key value pairs which are called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"claims\"), \".\"), mdx(\"p\", null, \"The claims in\\xADfor\\xADma\\xADtion can be ver\\xADi\\xADfied and trusted be\\xADcause it is dig\\xADi\\xADtally signed with the pri\\xADvate key from a pub\\xADlic/pri\\xADvate key-\\u200Bpair.\\nThe sig\\xADna\\xADture can later be ver\\xADi\\xADfied with a cor\\xADre\\xADspond\\xADing pub\\xADlic key. The iden\\xADti\\xADfier of the pub\\xADlic/pri\\xADvate key-\\u200Bpair used to sign a JWT can be\\ncon\\xADtained in a spe\\xADcial claim called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kid\"), \" (key iden\\xADti\\xADfier) in the header sec\\xADtion of the JWT.\"), mdx(\"p\", null, \"An ex\\xADam\\xADple for a JWT header that ref\\xADer\\xADences a pub\\xADlic/pri\\xADvate key-\\u200Bpair looks like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"alg\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"RS256\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"typ\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"JWT\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"kid\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"It is quite com\\xADmon to use JWTs to con\\xADvey in\\xADfor\\xADma\\xADtion about au\\xADthen\\xADti\\xADca\\xADtion (user iden\\xADtity) and au\\xADtho\\xADriza\\xADtion (scopes, user roles, per\\xADmis\\xADsions and other claims).\\nOpenID providers such as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.keycloak.org/\"\n  }), \"Key\\xADcloak\"), \" sup\\xADport is\\xADsu\\xADing OAuth2 ac\\xADcess to\\xADkens after au\\xADthen\\xADti\\xADca\\xADtion for users to clients in the form of JWTs.\\nAn ac\\xADcess token can then be used to ac\\xADcess other ser\\xADvices or APIs on be\\xADhalf of the user. The server pro\\xADvid\\xADing those ser\\xADvices or APIs is often called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource server\"), \".\"), mdx(\"p\", null, \"An ex\\xADam\\xADple JWT pay\\xADload gen\\xADer\\xADated by Key\\xADcloak looks like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"exp\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1601318422\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"iat\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1601318122\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"jti\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"7635f5a1-f1d7-457d-b869-ad492352f4d2\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"iss\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://localhost:8080/auth/realms/vertx\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"aud\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"account\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"sub\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"27b3fac0-9aec-4421-81cf-d4b02428f901\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"typ\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bearer\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"azp\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-service\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"session_state\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"68708213-40b7-458a-aee1-39d6f9da07ad\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"acr\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"1\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"realm_access\\\"\"), \": {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"roles\\\"\"), \": [\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"offline_access\\\"\"), \",\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"uma_authorization\\\"\"), \",\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user\\\"\"), \"\\n    ]\\n  },\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"scope\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"email profile\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"email_verified\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Theo Tester\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"preferred_username\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"tester\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"given_name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Theo\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"family_name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Tester\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"email\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"tom+tester@localhost\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"If a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource server\"), \" re\\xADceives a re\\xADquest with such an ac\\xADcess token, it needs to ver\\xADify and in\\xADspect the token be\\xADfore it can trust its con\\xADtent.\\nTo ver\\xADify the token, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource server\"), \" needs to ob\\xADtain the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public key\"), \" to check the token sig\\xADna\\xADture.\\nThis \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public key\"), \" can ei\\xADther be con\\xADfig\\xADured sta\\xADt\\xADi\\xADcally or fetched dy\\xADnam\\xADi\\xADcally from the OpenID Provider by lever\\xADag\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kid\"), \" in\\xADfor\\xADma\\xADtion from the JWT header sec\\xADtion.\\nNote that most \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenID providers\"), \", such as Key\\xADcloak, pro\\xADvide a ded\\xADi\\xADcated end\\xADpoint for dy\\xADnamic pub\\xADlic key lookups, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080/auth/realms/vertx/protocol/openid-connect/certs\"), \".\\nA stan\\xADdard for pro\\xADvid\\xADing pub\\xADlic key in\\xADfor\\xADma\\xADtion is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tools.ietf.org/html/rfc7517\"\n  }), \"JSON Web Key Set (JWKS)\"), \".\\nThe JWKS in\\xADfor\\xADma\\xADtion is usu\\xADally cached by the re\\xADsource server to avoid the over\\xADhead of fetch\\xADing JWKS for every re\\xADquest.\"), mdx(\"p\", null, \"An ex\\xADam\\xADple re\\xADsponse for Key\\xADcloak\\u2019s JWKS end\\xADpoint looks like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n   \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"keys\\\"\"), \":[\\n      {\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"kid\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs\\\"\"), \",\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"kty\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"RSA\\\"\"), \",\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"alg\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"RS256\\\"\"), \",\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"use\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"sig\\\"\"), \",\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"n\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"iFuX2bAXA99Yrv6YEvpV9tjS52krP5UJ7lFL02Zl83PPV6PiLIWKTqF71bfTKnVDxO421xAsBw9f6dlgoyxxY1H_bzJQQryQkry7DA7tI_SnKVsehLgeF-tCcjRF_MF1kM14F1A5Zsu6oYIkMZvgJIRM-ejtz3aUcdnLcTvpPrmfvj7KwRgNsfm6Q-kO0-OAf6m6LaRvaC5VpTIRoVxXNhSIiGKuZ4d05Yk0-HdOR0D0sfOujYzleJmTGBEIAmdWpZqUXiSWbzmpw8mJmacFTP9v8lsTUYZrXc69xm5fHaNJ6PO_E-IKiPKT7OeoM2l3HIK76a4azVL1Ewbv1UtMFw\\\"\"), \",\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"e\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"AQAB\\\"\"), \",\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"x5c\\\"\"), \":[\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"MIICmTCCAYECBgFwplKOujANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAV2ZXJ0eDAeFw0yMDAzMDQxNjExMzNaFw0zMDAzMDQxNjEzMTNaMBAxDjAMBgNVBAMMBXZlcnR4MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiFuX2bAXA99Yrv6YEvpV9tjS52krP5UJ7lFL02Zl83PPV6PiLIWKTqF71bfTKnVDxO421xAsBw9f6dlgoyxxY1H/bzJQQryQkry7DA7tI/SnKVsehLgeF+tCcjRF/MF1kM14F1A5Zsu6oYIkMZvgJIRM+ejtz3aUcdnLcTvpPrmfvj7KwRgNsfm6Q+kO0+OAf6m6LaRvaC5VpTIRoVxXNhSIiGKuZ4d05Yk0+HdOR0D0sfOujYzleJmTGBEIAmdWpZqUXiSWbzmpw8mJmacFTP9v8lsTUYZrXc69xm5fHaNJ6PO/E+IKiPKT7OeoM2l3HIK76a4azVL1Ewbv1UtMFwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBxcXiTtGoo4/eMNwhagYH8QpK1n7fxgzn4mkESU3wD+rnPOAh/xFmx5c3aq8X+8W2z7oopO86ZBSQ8HfbzViBP0uwvf7s7E6Q8FOqrUNv0Kj308A7hF1IOqOhCJE2nABIWJduYz5dWZN434Q9El30L1eOYTtjBUmCdP7/CM+1bvxIT+CYrWmjI9zCMJxhuixmLffppsLCjGtNgFBemjQyCrLxpEGCfy8QGb4pTY/XaHuJ7k6ZaQkVeTbeDzaZbHc9zT5qgf6w4Gp7y+uPZdAsasrwiqm3YBtyBfaK42luk09nHpV6PRKpftnyLVPwlQiJAW6ZMckvDwmnDst70msnb\\\"\"), \"\\n         ],\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"x5t\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"MVYTXCx5cUQ8lT1ymIDDRYO7_ZI\\\"\"), \",\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"x5t#S256\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"yBDVTlfR0e7cv3HxbbkfvGKVs5W1VQtFs7haE_js3DY\\\"\"), \"\\n      }\\n   ]\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keys\"), \" array con\\xADtains the JWKS struc\\xADture with the pub\\xADlic key in\\xADfor\\xADma\\xADtion that be\\xADlongs to the pub\\xADlic/pri\\xADvate key-\\u200Bpair which was used\\nto sign the JWT ac\\xADcess token from above. Note the match\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kid\"), \" claim from our ear\\xADlier JWT header ex\\xADam\\xADple.\"), mdx(\"p\", null, \"Now that we have the ap\\xADpro\\xADpri\\xADate pub\\xADlic key, we can use the in\\xADfor\\xADma\\xADtion from the JWT header to val\\xADi\\xADdate the sig\\xADna\\xADture of the JWT ac\\xADcess token.\\nIf the sig\\xADna\\xADture is valid, we can go on and check ad\\xADdi\\xADtional claims from the pay\\xADload sec\\xADtion of the JWT, such as ex\\xADpi\\xADra\\xADtion, al\\xADlowed is\\xADsuer and au\\xADdi\\xADence etc. \"), mdx(\"p\", null, \"Now that we have the nec\\xADes\\xADsary build\\xADing blocks in place, we can fi\\xADnally look at how to con\\xADfig\\xADure JWT au\\xADtho\\xADriza\\xADtion in Vert.x.\"), mdx(\"h3\", {\n    \"id\": \"jwt-authorization-in-vertx\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#jwt-authorization-in-vertx\"\n  })), \"JWT Authorization in Vert.x\"), mdx(\"p\", null, \"Set\\xADting up JWT au\\xADtho\\xADriza\\xADtion in Vert.x is quite easy. First we need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-auth-jwt\"), \" mod\\xADule as a de\\xADpen\\xADdency to our project.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-auth-jwt\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"In our ex\\xADam\\xADple, the whole JWT au\\xADtho\\xADriza\\xADtion setup hap\\xADpens in the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setupJwtAuth\"), \".\"), mdx(\"p\", null, \"We use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebClient\"), \" to dy\\xADnam\\xADi\\xADcally fetch the pub\\xADlic key in\\xADfor\\xADma\\xADtion from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/protocol/openid-connect/certs\"), \" JWKS end\\xADpoint rel\\xADa\\xADtive to our Key\\xADcloak is\\xADsuer URL.\\nAfter that, we con\\xADfig\\xADure a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JWTAuth\"), \" in\\xADstance and cus\\xADtomize the JWT val\\xADi\\xADda\\xADtion via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JWTOptions\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JWTAuthOptions\"), \".\\nNote that we use Key\\xADcloak\\u2019s realm roles for role based au\\xADtho\\xADriza\\xADtion via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JWTAuthOptions#setPermissionsClaimKey(..)\"), \" method.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Startup> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"setupJwtAuth\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Startup startup)\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwtConfig = startup.config.getJsonObject(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"jwt\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" issuer = jwtConfig.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"issuer\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" issuerUri = URI.create(issuer);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// derive JWKS uri from Keycloak issuer URI\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwksUri = URI.create(jwtConfig.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"jwksUri\\\"\"), \", String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"%s://%s:%d%s\\\"\"), \",\\n            issuerUri.getScheme(), issuerUri.getHost(), issuerUri.getPort(), issuerUri.getPath() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/protocol/openid-connect/certs\\\"\"), \")));\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" promise = Promise.<JWTAuth>promise();\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// fetch JWKS from `/certs` endpoint\"), \"\\n    webClient.get(jwksUri.getPort(), jwksUri.getHost(), jwksUri.getPath())\\n            .as(BodyCodec.jsonObject())\\n            .send(ar -> {\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!ar.succeeded()) {\\n                    startup.bootstrap.fail(String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Could not fetch JWKS from URI: %s\\\"\"), \", jwksUri));\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n                }\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" response = ar.result();\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwksResponse = response.body();\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" keys = jwksResponse.getJsonArray(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"keys\\\"\"), \");\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Configure JWT validation options\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwtOptions = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JWTOptions();\\n                jwtOptions.setIssuer(issuer);\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// extract JWKS from keys array\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwks = ((List<Object>) keys.getList()).stream()\\n                        .map(o -> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject((Map<String, Object>) o))\\n                        .collect(Collectors.toList());\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// configure JWTAuth\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwtAuthOptions = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JWTAuthOptions();\\n                jwtAuthOptions.setJwks(jwks);\\n                jwtAuthOptions.setJWTOptions(jwtOptions);\\n                jwtAuthOptions.setPermissionsClaimKey(jwtConfig.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"permissionClaimsKey\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"realm_access/roles\\\"\"), \"));\\n\\n                JWTAuth jwtAuth = JWTAuth.create(vertx, jwtAuthOptions);\\n                promise.complete(jwtAuth);\\n            });\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" promise.future().compose(auth -> {\\n        jwtAuth = auth;\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture(startup);\\n    });\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"protecting-routes-with-jwtauthhandler\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#protecting-routes-with-jwtauthhandler\"\n  })), \"Protecting routes with JWTAuthHandler\"), mdx(\"p\", null, \"Now that our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JWTAuth\"), \" is con\\xADfig\\xADured, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JWTAuthHandler\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setupRouter\"), \" method to apply\\nJWT au\\xADtho\\xADriza\\xADtion to all routes match\\xADing the path pat\\xADtern \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/api/*\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JWTAuthHandler\"), \" val\\xADi\\xADdates re\\xADceived JWTs and per\\xADforms\\nad\\xADdi\\xADtional checks like ex\\xADpi\\xADra\\xADtion and al\\xADlowed is\\xADsuers. With that in place, we con\\xADfig\\xADure our ac\\xADtual routes in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setupRoutes\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Startup> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"setupRouter\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Startup startup)\"), \" \"), \"{\\n\\n    router = Router.router(vertx);\\n\\n    router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/*\\\"\"), \").handler(JWTAuthHandler.create(jwtAuth));\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture(startup);\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Startup> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"setupRoutes\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Startup startup)\"), \" \"), \"{\\n\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/greet\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::handleGreet);\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/user\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::handleUserData);\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/admin\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::handleAdminData);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture(startup);\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"extracting-user-information-from-jwtuser\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#extracting-user-information-from-jwtuser\"\n  })), \"Extracting user information from JWTUser\"), mdx(\"p\", null, \"To ac\\xADcess user in\\xADfor\\xADma\\xADtion in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleGreet\"), \" method, we cast the re\\xADsult of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.ext.web.RoutingContext#user\"), \" method to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JWTUser\"), \"\\nwhich al\\xADlows us to ac\\xADcess token claim in\\xADfor\\xADma\\xADtion via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.ext.auth.jwt.impl.JWTUser#principal\"), \" JSON ob\\xADject.\"), mdx(\"p\", null, \"If we\\u2019d like to use the JWT ac\\xADcess token for other ser\\xADvice calls, we could ex\\xADtract the token from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Authorization\"), \" header.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleGreet\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwtUser = (JWTUser) ctx.user();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" username = jwtUser.principal().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"preferred_username\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" userId = jwtUser.principal().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"sub\\\"\"), \");\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" accessToken = ctx.request().getHeader(HttpHeaders.AUTHORIZATION).substring(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bearer \\\"\"), \".length());\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Use accessToken for down-stream calls if needed...\"), \"\\n\\n    ctx.request().response().end(String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hi %s (%s) %s%n\\\"\"), \", username, userId, Instant.now()));\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"obtaining-an-access-token-from-keycloak-for-user-tester\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#obtaining-an-access-token-from-keycloak-for-user-tester\"\n  })), \"Obtaining an Access Token from Keycloak for user \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"tester\")), mdx(\"p\", null, \"To test our ap\\xADpli\\xADca\\xADtion we can use the fol\\xADlow\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"curl\"), \" com\\xADmands in a bash like shell to ob\\xADtain an JWT ac\\xADcess token to call one\\nof our end\\xADpoints as the user \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tester\"), \" with the role \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user\"), \".\"), mdx(\"p\", null, \"Note that this ex\\xADam\\xADple uses the cli tool \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stedolan.github.io/jq/\"\n  }), \"jq\"), \" for JSON pro\\xADcess\\xADing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"KC_USERNAME=tester\\nKC_PASSWORD=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"test\"), \"\\nKC_CLIENT=vertx-service\\nKC_CLIENT_SECRET=ecb85cc5-f90d-4a03-8fac-24dcde57f40c\\nKC_REALM=vertx\\nKC_URL=http://localhost:8080/auth\\nKC_RESPONSE=$(curl  -k \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"username=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_USERNAME\"), \"\\\"\"), \" \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"password=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_PASSWORD\"), \"\\\"\"), \" \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'grant_type=password'\"), \" \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"client_id=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_CLIENT\"), \"\\\"\"), \" \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"client_secret=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_CLIENT_SECRET\"), \"\\\"\"), \" \\\\\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_URL\"), \"/realms/\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_REALM\"), \"/protocol/openid-connect/token\\\"\"), \" \\\\\\n    | jq .)\\n\\nKC_ACCESS_TOKEN=$(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"echo\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_RESPONSE\"), \"| jq -r .access_token)\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"echo\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_ACCESS_TOKEN\"), \"\\n\")), mdx(\"p\", null, \"Here we use the JWT ac\\xADcess token in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Authorization\"), \" header with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bearer\"), \" pre\\xADfix to call our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"greet\"), \" route:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"curl --silent -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Authorization: Bearer \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_ACCESS_TOKEN\"), \"\\\"\"), \" http://localhost:3000/api/greet\\n\")), mdx(\"p\", null, \"Ex\\xADam\\xADple out\\xADput:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"Hi tester (27b3fac0-9aec-4421-81cf-d4b02428f901) 2020-09-28T21:03:59.254230700Z\\n\")), mdx(\"h3\", {\n    \"id\": \"applying-role-based-access-control-with-jwtuser\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#applying-role-based-access-control-with-jwtuser\"\n  })), \"Applying Role-based Access-Control with JWTUser\"), mdx(\"p\", null, \"To lever\\xADage sup\\xADport for role based ac\\xADcess con\\xADtrol (RBAC) we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.ext.auth.User#isAuthorised\"), \" method\\nto check whether the cur\\xADrent user has the re\\xADquired role. If the role is present we re\\xADturn some data about the user, oth\\xADer\\xADwise\\nwe send a re\\xADsponse with sta\\xADtus code 403 and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"forbidden\"), \" error mes\\xADsage.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleUserData\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwtUser = (JWTUser) ctx.user();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" username = jwtUser.principal().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"preferred_username\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" userId = jwtUser.principal().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"sub\\\"\"), \");\\n\\n    jwtUser.isAuthorized(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user\\\"\"), \", res -> {\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!res.succeeded() || !res.result()) {\\n            toJsonResponse(ctx).setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"403\"), \").end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"{\\\\\\\"error\\\\\\\": \\\\\\\"forbidden\\\\\\\"}\\\"\"), \");\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n        }\\n\\n        JsonObject data = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user\\\"\"), \")\\n                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"username\\\"\"), \", username)\\n                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"userId\\\"\"), \", userId)\\n                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"timestamp\\\"\"), \", Instant.now());\\n\\n        toJsonResponse(ctx).end(data.toString());\\n    });\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleAdminData\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" jwtUser = (JWTUser) ctx.user();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" username = jwtUser.principal().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"preferred_username\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" userId = jwtUser.principal().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"sub\\\"\"), \");\\n\\n    jwtUser.isAuthorized(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"admin\\\"\"), \", res -> {\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!res.succeeded() || !res.result()) {\\n            toJsonResponse(ctx).setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"403\"), \").end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"{\\\\\\\"error\\\\\\\": \\\\\\\"forbidden\\\\\\\"}\\\"\"), \");\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n        }\\n\\n        JsonObject data = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"admin\\\"\"), \")\\n                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"username\\\"\"), \", username)\\n                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"userId\\\"\"), \", userId)\\n                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"timestamp\\\"\"), \", Instant.now());\\n\\n        toJsonResponse(ctx).end(data.toString());\\n    });\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"curl --silent -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Authorization: Bearer \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_ACCESS_TOKEN\"), \"\\\"\"), \" http://localhost:3000/api/user\\n\")), mdx(\"p\", null, \"Out\\xADput:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"type\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"username\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"tester\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"userId\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"27b3fac0-9aec-4421-81cf-d4b02428f901\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"timestamp\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"2020-09-28T21:07:49.340950300Z\\\"\"), \"}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"curl --silent -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Authorization: Bearer \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_ACCESS_TOKEN\"), \"\\\"\"), \" http://localhost:3000/api/admin\\n\")), mdx(\"p\", null, \"Out\\xADput:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"error\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"forbidden\\\"\"), \"}\\n\")), mdx(\"h3\", {\n    \"id\": \"obtaining-an-access-token-from-keycloak-for-user-vadmin\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#obtaining-an-access-token-from-keycloak-for-user-vadmin\"\n  })), \"Obtaining an Access Token from Keycloak for user \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"vadmin\")), mdx(\"p\", null, \"To check ac\\xADcess with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"admin\"), \" role, we ob\\xADtain a new token for the user \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vadmin\"), \" which has the roles \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"admin\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user\"), \". \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"KC_USERNAME=vadmin\\nKC_PASSWORD=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"test\"), \"\\nKC_CLIENT=vertx-service\\nKC_CLIENT_SECRET=ecb85cc5-f90d-4a03-8fac-24dcde57f40c\\nKC_REALM=vertx\\nKC_URL=http://localhost:8080/auth\\nKC_RESPONSE=$(curl  -k \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"username=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_USERNAME\"), \"\\\"\"), \" \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"password=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_PASSWORD\"), \"\\\"\"), \" \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'grant_type=password'\"), \" \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"client_id=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_CLIENT\"), \"\\\"\"), \" \\\\\\n        -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"client_secret=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_CLIENT_SECRET\"), \"\\\"\"), \" \\\\\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_URL\"), \"/realms/\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_REALM\"), \"/protocol/openid-connect/token\\\"\"), \" \\\\\\n    | jq .)\\n\\nKC_ACCESS_TOKEN=$(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"echo\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_RESPONSE\"), \"| jq -r .access_token)\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"echo\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_ACCESS_TOKEN\"), \"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"curl --silent -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Authorization: Bearer \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_ACCESS_TOKEN\"), \"\\\"\"), \" http://localhost:3000/api/user\\n\")), mdx(\"p\", null, \"Out\\xADput:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"type\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"username\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vadmin\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"userId\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"75090eac-36ff-4cd8-847d-fc2941bc024e\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"timestamp\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"2020-09-28T21:13:05.099393900Z\\\"\"), \"}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"curl --silent -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Authorization: Bearer \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$KC_ACCESS_TOKEN\"), \"\\\"\"), \" http://localhost:3000/api/admin\\n\")), mdx(\"p\", null, \"Out\\xADput:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"type\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"admin\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"username\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vadmin\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"userId\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"75090eac-36ff-4cd8-847d-fc2941bc024e\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"timestamp\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"2020-09-28T21:13:34.945276500Z\\\"\"), \"}\\n\")), mdx(\"h3\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"We learned how to con\\xADfig\\xADure a Vert.x ap\\xADpli\\xADca\\xADtion with JWT au\\xADtho\\xADriza\\xADtion pow\\xADered by Key\\xADcloak. Al\\xADthough the con\\xADfig\\xADu\\xADra\\xADtion is quite com\\xADplete\\nal\\xADready, there are still some parts that can be im\\xADproved, like the dy\\xADnamic JWKS fetch\\xADing on public-\\u200Bkey pair ro\\xADta\\xADtion as well as ex\\xADtrac\\xADtion of nested roles.\"), mdx(\"p\", null, \"Nev\\xADer\\xADthe\\xADless this is a good start\\xADing point for se\\xADcur\\xADing your own Vert.x ser\\xADvices with JWT and Key\\xADcloak.\"), mdx(\"p\", null, \"You can check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx\"\n  }), \"com\\xADplete ex\\xADam\\xADple in keycloak-\\u200Bvertx Ex\\xADam\\xADples Repo\"), \".\"), mdx(\"p\", null, \"Thank you for your time, stay tuned for more up\\xADdates! If you want to learn more about Key\\xADcloak, feel free to reach out to me. You can find me via \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/thomasdarimont\"\n  }), \"thomas\\xADda\\xADri\\xADmont on twit\\xADter\"), \".\"), mdx(\"p\", null, \"Happy Hack\\xADing!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><strong>TL;DR:</strong></p><p>In this blog post you’ll learn:</p><ul><li>JWT foun­da­tions</li><li>How to pro­tect routes with a JWT Au­tho­riza­tion</li><li>How to ex­tract claims from a JWT en­coded token</li><li>How to apply RBAC with Key­cloak Realm roles</li></ul><h2 id=\"hello-again\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#hello-again\"></a>Hello again</h2><p>Hi there! In my last blog post <a href=\"/blog/easy-sso-for-vert-x-with-keycloak/\">Easy SSO for Vert.x with Key­cloak</a>, we learned how to con­fig­ure sin­gle sign-​on for a Vert.x web ap­pli­ca­tion with Key­cloak and OpenID con­nect. This time, we’ll see how we can pro­tect an ap­pli­ca­tion with Vert.x’s <a href=\"/docs/vertx-web/java/#_jwt_authorisation\">JWT Au­tho­riza­tion</a> sup­port and Key­cloak.</p><h2 id=\"keycloak-setup\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#keycloak-setup\"></a>Keycloak Setup</h2><p>To se­cure our Vert.x app, we need to use a Key­cloak server for ob­tain­ing JWT to­kens. Al­though <a href=\"https://www.keycloak.org/docs/latest/getting_started/\">Key­cloak has a great get­ting started guide</a> I wanted to make it a bit eas­ier to put every­thing to­gether, there­fore I pre­pared a local Key­cloak docker con­tainer <a href=\"https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx#start-keycloak-with-the-vertx-realm\">as de­scribed here</a>, which comes with all the re­quired con­fig­u­ra­tion in place, that you can start eas­ily.</p><p>The pre­con­fig­ured Key­cloak realm <code>vertx</code> con­tains a <code>vertx-service</code> OpenID con­nect client for our Vert.x app and a set\nof users for test­ing. To ease test­ing, the <code>vertx-service</code> is con­fig­ured with <code>Direct Access Grant</code> en­abled in Key­cloak, which\nen­ables sup­port for the OAuth2 re­source owner pass­word cre­den­tials grant (ROPC) flow.</p><p>To start Key­cloak with the pre­con­fig­ured realm, just start the docker con­tainer with the fol­low­ing com­mand:</p><pre><code class=\"hljs language-bash\">docker run \\\n  -it \\\n  --name vertx-keycloak \\\n  --rm \\\n  -e KEYCLOAK_USER=admin \\\n  -e KEYCLOAK_PASSWORD=admin \\\n  -e KEYCLOAK_IMPORT=/tmp/vertx-realm.json \\\n  -v <span class=\"hljs-variable\">$PWD</span>/vertx-realm.json:/tmp/vertx-realm.json \\\n  -v <span class=\"hljs-variable\">$PWD</span>/data:/opt/jboss/keycloak/standalone/data \\\n  -p 8080:8080 \\\n  quay.io/keycloak/keycloak:11.0.2\n</code></pre><h2 id=\"vertx-app\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-app\"></a>Vert.x App</h2><p>The ex­am­ple app con­sists of a sin­gle <code>Verticle</code>, that runs on <code>http://localhost:3000</code> and pro­vides a few routes with pro­tected re­sources. <a href=\"https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx/src/main/java/demo/MainVerticle.java\">You can find the com­plete ex­am­ple here</a>.</p><p>Our web app con­tains the fol­low­ing pro­tected routes with han­dlers:</p><ul><li><code>/api/greet</code> - The greet­ing re­source, which re­turns a greet­ing mes­sage, only au­then­ti­cated users can ac­cess this re­source.</li><li><code>/api/user</code> - The user re­source, which re­turns some in­for­ma­tion about the user, only users with role <code>user</code> can ac­cess this re­source.</li><li><code>/api/admin</code> - The user re­source, which re­turns some in­for­ma­tion about the admin, only users with role <code>admin</code> can ac­cess this re­source.</li></ul><p>This ex­am­ple is built with Vert.x ver­sion 3.9.3.</p><h3 id=\"running-the-app-in-the-console\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#running-the-app-in-the-console\"></a>Running the app in the console</h3><p>To run the app, we need to build it first:</p><pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> jwt-service-vertx\nmvn clean package\n</code></pre><p>This cre­ates a jar, which we can run:</p><pre><code class=\"hljs language-bash\">java -jar target/*.jar\n</code></pre><p>Note, that we need to start Key­cloak first, since our app fetches the con­fig­u­ra­tion from Key­cloak on startup.</p><h3 id=\"running-the-app-in-the-ide\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#running-the-app-in-the-ide\"></a>Running the app in the IDE</h3><p>We can also run the app di­rectly from your favourite IDE like In­tel­liJ Idea or Eclipse.\nTo run the app from an IDE, we need to cre­ate a launch con­fig­u­ra­tion and use the main class <code>io.vertx.core.Launcher</code>. Then set the the pro­gram ar­gu­ments to\n<code>run demo.MainVerticle</code> and use the class­path of the <code>jwt-service-vertx</code> mod­ule.\nWith that in place we should be able to run the app.</p><h2 id=\"jwt-authorization\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#jwt-authorization\"></a>JWT Authorization</h2><h3 id=\"jwt-foundations\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#jwt-foundations\"></a>JWT Foundations</h3><p><a href=\"https://tools.ietf.org/html/rfc7519\">JSON Web Token (JWT)</a> is an open stan­dard to se­curely ex­change in­for­ma­tion be­tween two par­ties in the form\nof <a href=\"https://base64.guru/standards/base64url\">Base64URL</a> en­coded JSON ob­jects.\nA stan­dard JWT is just a string which com­prises three base64url en­coded parts header, pay­load and a sig­na­ture, which are sep­a­rated by a ”<code>.</code>” char­ac­ter.\nThere are other vari­ants of JWT that can have more parts.</p><p>An ex­am­ple JWT can look like this:</p><pre><code class=\"hljs language-text\">eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjN00xX2hkWjAtWDNyZTl1dmZLSFRDUWRxYXJQYnBMblVJMHltdkF0U1RzIn0.eyJleHAiOjE2MDEzMTg0MjIsImlhdCI6MTYwMTMxODEyMiwianRpIjoiNzYzNWY1YTEtZjFkNy00NTdkLWI4NjktYWQ0OTIzNTJmNGQyIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3ZlcnR4IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjI3YjNmYWMwLTlhZWMtNDQyMS04MWNmLWQ0YjAyNDI4ZjkwMSIsInR5cCI6IkJlYXJlciIsImF6cCI6InZlcnR4LXNlcnZpY2UiLCJzZXNzaW9uX3N0YXRlIjoiNjg3MDgyMTMtNDBiNy00NThhLWFlZTEtMzlkNmY5ZGEwN2FkIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwidXNlciJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiVGhlbyBUZXN0ZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0ZXIiLCJnaXZlbl9uYW1lIjoiVGhlbyIsImZhbWlseV9uYW1lIjoiVGVzdGVyIiwiZW1haWwiOiJ0b20rdGVzdGVyQGxvY2FsaG9zdCJ9.NN1ZGE3f3LHE0u7T6Vfq5yPMKoZ6SmrUxoFopAXZm5wVgMOsJHB8BgHQTDm7u0oTVU0ZHlKH2-o11RKK7Mz0mLqMy2EPdkGY9Bqtj5LZ8oTp8FaVqY1g5Fr5veXYpOMbc2fke-e2hG8sAfSjWz1Mq9BUhJ7HdK7TTIte12pub2nbUs4APYystJWx49cYmUwZ-5c9X295V-NX9UksuMSzFItZ4cACVKi68m9lkR4RuNQKFTuLvWsorz9yRx884e4cnoT_JmfSfYBIl31FfnQzUtCjluUzuD9jVXc_vgC7num_0AreOZiUzpglb8UjKXjswTHF-v_nEIaq7YmM5WKpeg\n</code></pre><p>The header and pay­load sec­tions con­tain in­for­ma­tion as a JSON ob­ject, whereas the sig­na­ture is just a plain string. JSON ob­jects con­tain key value pairs which are called <code>claims</code>.</p><p>The claims in­for­ma­tion can be ver­i­fied and trusted be­cause it is dig­i­tally signed with the pri­vate key from a pub­lic/pri­vate key-​pair.\nThe sig­na­ture can later be ver­i­fied with a cor­re­spond­ing pub­lic key. The iden­ti­fier of the pub­lic/pri­vate key-​pair used to sign a JWT can be\ncon­tained in a spe­cial claim called <code>kid</code> (key iden­ti­fier) in the header sec­tion of the JWT.</p><p>An ex­am­ple for a JWT header that ref­er­ences a pub­lic/pri­vate key-​pair looks like this:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;alg&quot;</span>: <span class=\"hljs-string\">&quot;RS256&quot;</span>,\n  <span class=\"hljs-attr\">&quot;typ&quot;</span>: <span class=\"hljs-string\">&quot;JWT&quot;</span>,\n  <span class=\"hljs-attr\">&quot;kid&quot;</span>: <span class=\"hljs-string\">&quot;c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs&quot;</span>\n}\n</code></pre><p>It is quite com­mon to use JWTs to con­vey in­for­ma­tion about au­then­ti­ca­tion (user iden­tity) and au­tho­riza­tion (scopes, user roles, per­mis­sions and other claims).\nOpenID providers such as <a href=\"https://www.keycloak.org/\">Key­cloak</a> sup­port is­su­ing OAuth2 ac­cess to­kens after au­then­ti­ca­tion for users to clients in the form of JWTs.\nAn ac­cess token can then be used to ac­cess other ser­vices or APIs on be­half of the user. The server pro­vid­ing those ser­vices or APIs is often called <code>resource server</code>.</p><p>An ex­am­ple JWT pay­load gen­er­ated by Key­cloak looks like this:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;exp&quot;</span>: <span class=\"hljs-number\">1601318422</span>,\n  <span class=\"hljs-attr\">&quot;iat&quot;</span>: <span class=\"hljs-number\">1601318122</span>,\n  <span class=\"hljs-attr\">&quot;jti&quot;</span>: <span class=\"hljs-string\">&quot;7635f5a1-f1d7-457d-b869-ad492352f4d2&quot;</span>,\n  <span class=\"hljs-attr\">&quot;iss&quot;</span>: <span class=\"hljs-string\">&quot;http://localhost:8080/auth/realms/vertx&quot;</span>,\n  <span class=\"hljs-attr\">&quot;aud&quot;</span>: <span class=\"hljs-string\">&quot;account&quot;</span>,\n  <span class=\"hljs-attr\">&quot;sub&quot;</span>: <span class=\"hljs-string\">&quot;27b3fac0-9aec-4421-81cf-d4b02428f901&quot;</span>,\n  <span class=\"hljs-attr\">&quot;typ&quot;</span>: <span class=\"hljs-string\">&quot;Bearer&quot;</span>,\n  <span class=\"hljs-attr\">&quot;azp&quot;</span>: <span class=\"hljs-string\">&quot;vertx-service&quot;</span>,\n  <span class=\"hljs-attr\">&quot;session_state&quot;</span>: <span class=\"hljs-string\">&quot;68708213-40b7-458a-aee1-39d6f9da07ad&quot;</span>,\n  <span class=\"hljs-attr\">&quot;acr&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,\n  <span class=\"hljs-attr\">&quot;realm_access&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;roles&quot;</span>: [\n      <span class=\"hljs-string\">&quot;offline_access&quot;</span>,\n      <span class=\"hljs-string\">&quot;uma_authorization&quot;</span>,\n      <span class=\"hljs-string\">&quot;user&quot;</span>\n    ]\n  },\n  <span class=\"hljs-attr\">&quot;scope&quot;</span>: <span class=\"hljs-string\">&quot;email profile&quot;</span>,\n  <span class=\"hljs-attr\">&quot;email_verified&quot;</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Theo Tester&quot;</span>,\n  <span class=\"hljs-attr\">&quot;preferred_username&quot;</span>: <span class=\"hljs-string\">&quot;tester&quot;</span>,\n  <span class=\"hljs-attr\">&quot;given_name&quot;</span>: <span class=\"hljs-string\">&quot;Theo&quot;</span>,\n  <span class=\"hljs-attr\">&quot;family_name&quot;</span>: <span class=\"hljs-string\">&quot;Tester&quot;</span>,\n  <span class=\"hljs-attr\">&quot;email&quot;</span>: <span class=\"hljs-string\">&quot;tom+tester@localhost&quot;</span>\n}\n</code></pre><p>If a <code>resource server</code> re­ceives a re­quest with such an ac­cess token, it needs to ver­ify and in­spect the token be­fore it can trust its con­tent.\nTo ver­ify the token, the <code>resource server</code> needs to ob­tain the <code>public key</code> to check the token sig­na­ture.\nThis <code>public key</code> can ei­ther be con­fig­ured sta­t­i­cally or fetched dy­nam­i­cally from the OpenID Provider by lever­ag­ing the <code>kid</code> in­for­ma­tion from the JWT header sec­tion.\nNote that most <code>OpenID providers</code>, such as Key­cloak, pro­vide a ded­i­cated end­point for dy­namic pub­lic key lookups, e.g. <code>http://localhost:8080/auth/realms/vertx/protocol/openid-connect/certs</code>.\nA stan­dard for pro­vid­ing pub­lic key in­for­ma­tion is <a href=\"https://tools.ietf.org/html/rfc7517\">JSON Web Key Set (JWKS)</a>.\nThe JWKS in­for­ma­tion is usu­ally cached by the re­source server to avoid the over­head of fetch­ing JWKS for every re­quest.</p><p>An ex­am­ple re­sponse for Key­cloak’s JWKS end­point looks like this:</p><pre><code class=\"hljs language-json\">{\n   <span class=\"hljs-attr\">&quot;keys&quot;</span>:[\n      {\n         <span class=\"hljs-attr\">&quot;kid&quot;</span>:<span class=\"hljs-string\">&quot;c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs&quot;</span>,\n         <span class=\"hljs-attr\">&quot;kty&quot;</span>:<span class=\"hljs-string\">&quot;RSA&quot;</span>,\n         <span class=\"hljs-attr\">&quot;alg&quot;</span>:<span class=\"hljs-string\">&quot;RS256&quot;</span>,\n         <span class=\"hljs-attr\">&quot;use&quot;</span>:<span class=\"hljs-string\">&quot;sig&quot;</span>,\n         <span class=\"hljs-attr\">&quot;n&quot;</span>:<span class=\"hljs-string\">&quot;iFuX2bAXA99Yrv6YEvpV9tjS52krP5UJ7lFL02Zl83PPV6PiLIWKTqF71bfTKnVDxO421xAsBw9f6dlgoyxxY1H_bzJQQryQkry7DA7tI_SnKVsehLgeF-tCcjRF_MF1kM14F1A5Zsu6oYIkMZvgJIRM-ejtz3aUcdnLcTvpPrmfvj7KwRgNsfm6Q-kO0-OAf6m6LaRvaC5VpTIRoVxXNhSIiGKuZ4d05Yk0-HdOR0D0sfOujYzleJmTGBEIAmdWpZqUXiSWbzmpw8mJmacFTP9v8lsTUYZrXc69xm5fHaNJ6PO_E-IKiPKT7OeoM2l3HIK76a4azVL1Ewbv1UtMFw&quot;</span>,\n         <span class=\"hljs-attr\">&quot;e&quot;</span>:<span class=\"hljs-string\">&quot;AQAB&quot;</span>,\n         <span class=\"hljs-attr\">&quot;x5c&quot;</span>:[\n            <span class=\"hljs-string\">&quot;MIICmTCCAYECBgFwplKOujANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAV2ZXJ0eDAeFw0yMDAzMDQxNjExMzNaFw0zMDAzMDQxNjEzMTNaMBAxDjAMBgNVBAMMBXZlcnR4MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiFuX2bAXA99Yrv6YEvpV9tjS52krP5UJ7lFL02Zl83PPV6PiLIWKTqF71bfTKnVDxO421xAsBw9f6dlgoyxxY1H/bzJQQryQkry7DA7tI/SnKVsehLgeF+tCcjRF/MF1kM14F1A5Zsu6oYIkMZvgJIRM+ejtz3aUcdnLcTvpPrmfvj7KwRgNsfm6Q+kO0+OAf6m6LaRvaC5VpTIRoVxXNhSIiGKuZ4d05Yk0+HdOR0D0sfOujYzleJmTGBEIAmdWpZqUXiSWbzmpw8mJmacFTP9v8lsTUYZrXc69xm5fHaNJ6PO/E+IKiPKT7OeoM2l3HIK76a4azVL1Ewbv1UtMFwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBxcXiTtGoo4/eMNwhagYH8QpK1n7fxgzn4mkESU3wD+rnPOAh/xFmx5c3aq8X+8W2z7oopO86ZBSQ8HfbzViBP0uwvf7s7E6Q8FOqrUNv0Kj308A7hF1IOqOhCJE2nABIWJduYz5dWZN434Q9El30L1eOYTtjBUmCdP7/CM+1bvxIT+CYrWmjI9zCMJxhuixmLffppsLCjGtNgFBemjQyCrLxpEGCfy8QGb4pTY/XaHuJ7k6ZaQkVeTbeDzaZbHc9zT5qgf6w4Gp7y+uPZdAsasrwiqm3YBtyBfaK42luk09nHpV6PRKpftnyLVPwlQiJAW6ZMckvDwmnDst70msnb&quot;</span>\n         ],\n         <span class=\"hljs-attr\">&quot;x5t&quot;</span>:<span class=\"hljs-string\">&quot;MVYTXCx5cUQ8lT1ymIDDRYO7_ZI&quot;</span>,\n         <span class=\"hljs-attr\">&quot;x5t#S256&quot;</span>:<span class=\"hljs-string\">&quot;yBDVTlfR0e7cv3HxbbkfvGKVs5W1VQtFs7haE_js3DY&quot;</span>\n      }\n   ]\n}\n</code></pre><p>The <code>keys</code> array con­tains the JWKS struc­ture with the pub­lic key in­for­ma­tion that be­longs to the pub­lic/pri­vate key-​pair which was used\nto sign the JWT ac­cess token from above. Note the match­ing <code>kid</code> claim from our ear­lier JWT header ex­am­ple.</p><p>Now that we have the ap­pro­pri­ate pub­lic key, we can use the in­for­ma­tion from the JWT header to val­i­date the sig­na­ture of the JWT ac­cess token.\nIf the sig­na­ture is valid, we can go on and check ad­di­tional claims from the pay­load sec­tion of the JWT, such as ex­pi­ra­tion, al­lowed is­suer and au­di­ence etc. </p><p>Now that we have the nec­es­sary build­ing blocks in place, we can fi­nally look at how to con­fig­ure JWT au­tho­riza­tion in Vert.x.</p><h3 id=\"jwt-authorization-in-vertx\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#jwt-authorization-in-vertx\"></a>JWT Authorization in Vert.x</h3><p>Set­ting up JWT au­tho­riza­tion in Vert.x is quite easy. First we need to add the <code>vertx-auth-jwt</code> mod­ule as a de­pen­dency to our project.</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-jwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>In our ex­am­ple, the whole JWT au­tho­riza­tion setup hap­pens in the method <code>setupJwtAuth</code>.</p><p>We use a <code>WebClient</code> to dy­nam­i­cally fetch the pub­lic key in­for­ma­tion from the <code>/protocol/openid-connect/certs</code> JWKS end­point rel­a­tive to our Key­cloak is­suer URL.\nAfter that, we con­fig­ure a <code>JWTAuth</code> in­stance and cus­tomize the JWT val­i­da­tion via <code>JWTOptions</code> and <code>JWTAuthOptions</code>.\nNote that we use Key­cloak’s realm roles for role based au­tho­riza­tion via the <code>JWTAuthOptions#setPermissionsClaimKey(..)</code> method.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Startup&gt; <span class=\"hljs-title\">setupJwtAuth</span><span class=\"hljs-params\">(Startup startup)</span> </span>{\n\n    <span class=\"hljs-keyword\">var</span> jwtConfig = startup.config.getJsonObject(<span class=\"hljs-string\">&quot;jwt&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> issuer = jwtConfig.getString(<span class=\"hljs-string\">&quot;issuer&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> issuerUri = URI.create(issuer);\n\n    <span class=\"hljs-comment\">// derive JWKS uri from Keycloak issuer URI</span>\n    <span class=\"hljs-keyword\">var</span> jwksUri = URI.create(jwtConfig.getString(<span class=\"hljs-string\">&quot;jwksUri&quot;</span>, String.format(<span class=\"hljs-string\">&quot;%s://%s:%d%s&quot;</span>,\n            issuerUri.getScheme(), issuerUri.getHost(), issuerUri.getPort(), issuerUri.getPath() + <span class=\"hljs-string\">&quot;/protocol/openid-connect/certs&quot;</span>)));\n\n    <span class=\"hljs-keyword\">var</span> promise = Promise.&lt;JWTAuth&gt;promise();\n\n    <span class=\"hljs-comment\">// fetch JWKS from `/certs` endpoint</span>\n    webClient.get(jwksUri.getPort(), jwksUri.getHost(), jwksUri.getPath())\n            .as(BodyCodec.jsonObject())\n            .send(ar -&gt; {\n\n                <span class=\"hljs-keyword\">if</span> (!ar.succeeded()) {\n                    startup.bootstrap.fail(String.format(<span class=\"hljs-string\">&quot;Could not fetch JWKS from URI: %s&quot;</span>, jwksUri));\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                <span class=\"hljs-keyword\">var</span> response = ar.result();\n\n                <span class=\"hljs-keyword\">var</span> jwksResponse = response.body();\n                <span class=\"hljs-keyword\">var</span> keys = jwksResponse.getJsonArray(<span class=\"hljs-string\">&quot;keys&quot;</span>);\n\n                <span class=\"hljs-comment\">// Configure JWT validation options</span>\n                <span class=\"hljs-keyword\">var</span> jwtOptions = <span class=\"hljs-keyword\">new</span> JWTOptions();\n                jwtOptions.setIssuer(issuer);\n\n                <span class=\"hljs-comment\">// extract JWKS from keys array</span>\n                <span class=\"hljs-keyword\">var</span> jwks = ((List&lt;Object&gt;) keys.getList()).stream()\n                        .map(o -&gt; <span class=\"hljs-keyword\">new</span> JsonObject((Map&lt;String, Object&gt;) o))\n                        .collect(Collectors.toList());\n\n                <span class=\"hljs-comment\">// configure JWTAuth</span>\n                <span class=\"hljs-keyword\">var</span> jwtAuthOptions = <span class=\"hljs-keyword\">new</span> JWTAuthOptions();\n                jwtAuthOptions.setJwks(jwks);\n                jwtAuthOptions.setJWTOptions(jwtOptions);\n                jwtAuthOptions.setPermissionsClaimKey(jwtConfig.getString(<span class=\"hljs-string\">&quot;permissionClaimsKey&quot;</span>, <span class=\"hljs-string\">&quot;realm_access/roles&quot;</span>));\n\n                JWTAuth jwtAuth = JWTAuth.create(vertx, jwtAuthOptions);\n                promise.complete(jwtAuth);\n            });\n\n    <span class=\"hljs-keyword\">return</span> promise.future().compose(auth -&gt; {\n        jwtAuth = auth;\n        <span class=\"hljs-keyword\">return</span> Future.succeededFuture(startup);\n    });\n}\n</code></pre><h3 id=\"protecting-routes-with-jwtauthhandler\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#protecting-routes-with-jwtauthhandler\"></a>Protecting routes with JWTAuthHandler</h3><p>Now that our <code>JWTAuth</code> is con­fig­ured, we can use the <code>JWTAuthHandler</code> in the <code>setupRouter</code> method to apply\nJWT au­tho­riza­tion to all routes match­ing the path pat­tern <code>/api/*</code>. The <code>JWTAuthHandler</code> val­i­dates re­ceived JWTs and per­forms\nad­di­tional checks like ex­pi­ra­tion and al­lowed is­suers. With that in place, we con­fig­ure our ac­tual routes in <code>setupRoutes</code>.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Startup&gt; <span class=\"hljs-title\">setupRouter</span><span class=\"hljs-params\">(Startup startup)</span> </span>{\n\n    router = Router.router(vertx);\n\n    router.route(<span class=\"hljs-string\">&quot;/api/*&quot;</span>).handler(JWTAuthHandler.create(jwtAuth));\n\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture(startup);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Startup&gt; <span class=\"hljs-title\">setupRoutes</span><span class=\"hljs-params\">(Startup startup)</span> </span>{\n\n    router.get(<span class=\"hljs-string\">&quot;/api/greet&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::handleGreet);\n    router.get(<span class=\"hljs-string\">&quot;/api/user&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::handleUserData);\n    router.get(<span class=\"hljs-string\">&quot;/api/admin&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::handleAdminData);\n\n    <span class=\"hljs-keyword\">return</span> Future.succeededFuture(startup);\n}\n</code></pre><h3 id=\"extracting-user-information-from-jwtuser\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#extracting-user-information-from-jwtuser\"></a>Extracting user information from JWTUser</h3><p>To ac­cess user in­for­ma­tion in our <code>handleGreet</code> method, we cast the re­sult of the <code>io.vertx.ext.web.RoutingContext#user</code> method to <code>JWTUser</code>\nwhich al­lows us to ac­cess token claim in­for­ma­tion via the <code>io.vertx.ext.auth.jwt.impl.JWTUser#principal</code> JSON ob­ject.</p><p>If we’d like to use the JWT ac­cess token for other ser­vice calls, we could ex­tract the token from the <code>Authorization</code> header.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleGreet</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n\n    <span class=\"hljs-keyword\">var</span> jwtUser = (JWTUser) ctx.user();\n    <span class=\"hljs-keyword\">var</span> username = jwtUser.principal().getString(<span class=\"hljs-string\">&quot;preferred_username&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> userId = jwtUser.principal().getString(<span class=\"hljs-string\">&quot;sub&quot;</span>);\n\n    <span class=\"hljs-keyword\">var</span> accessToken = ctx.request().getHeader(HttpHeaders.AUTHORIZATION).substring(<span class=\"hljs-string\">&quot;Bearer &quot;</span>.length());\n    <span class=\"hljs-comment\">// Use accessToken for down-stream calls if needed...</span>\n\n    ctx.request().response().end(String.format(<span class=\"hljs-string\">&quot;Hi %s (%s) %s%n&quot;</span>, username, userId, Instant.now()));\n}\n</code></pre><h3 id=\"obtaining-an-access-token-from-keycloak-for-user-tester\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#obtaining-an-access-token-from-keycloak-for-user-tester\"></a>Obtaining an Access Token from Keycloak for user <code>tester</code></h3><p>To test our ap­pli­ca­tion we can use the fol­low­ing <code>curl</code> com­mands in a bash like shell to ob­tain an JWT ac­cess token to call one\nof our end­points as the user <code>tester</code> with the role <code>user</code>.</p><p>Note that this ex­am­ple uses the cli tool <a href=\"https://stedolan.github.io/jq/\">jq</a> for JSON pro­cess­ing.</p><pre><code class=\"hljs language-bash\">KC_USERNAME=tester\nKC_PASSWORD=<span class=\"hljs-built_in\">test</span>\nKC_CLIENT=vertx-service\nKC_CLIENT_SECRET=ecb85cc5-f90d-4a03-8fac-24dcde57f40c\nKC_REALM=vertx\nKC_URL=http://localhost:8080/auth\nKC_RESPONSE=$(curl  -k \\\n        -d <span class=\"hljs-string\">&quot;username=<span class=\"hljs-variable\">$KC_USERNAME</span>&quot;</span> \\\n        -d <span class=\"hljs-string\">&quot;password=<span class=\"hljs-variable\">$KC_PASSWORD</span>&quot;</span> \\\n        -d <span class=\"hljs-string\">&#x27;grant_type=password&#x27;</span> \\\n        -d <span class=\"hljs-string\">&quot;client_id=<span class=\"hljs-variable\">$KC_CLIENT</span>&quot;</span> \\\n        -d <span class=\"hljs-string\">&quot;client_secret=<span class=\"hljs-variable\">$KC_CLIENT_SECRET</span>&quot;</span> \\\n        <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$KC_URL</span>/realms/<span class=\"hljs-variable\">$KC_REALM</span>/protocol/openid-connect/token&quot;</span> \\\n    | jq .)\n\nKC_ACCESS_TOKEN=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$KC_RESPONSE</span>| jq -r .access_token)\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$KC_ACCESS_TOKEN</span>\n</code></pre><p>Here we use the JWT ac­cess token in the <code>Authorization</code> header with the <code>Bearer</code> pre­fix to call our <code>greet</code> route:</p><pre><code class=\"hljs language-bash\">curl --silent -H <span class=\"hljs-string\">&quot;Authorization: Bearer <span class=\"hljs-variable\">$KC_ACCESS_TOKEN</span>&quot;</span> http://localhost:3000/api/greet\n</code></pre><p>Ex­am­ple out­put:</p><pre><code class=\"hljs language-bash\">Hi tester (27b3fac0-9aec-4421-81cf-d4b02428f901) 2020-09-28T21:03:59.254230700Z\n</code></pre><h3 id=\"applying-role-based-access-control-with-jwtuser\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#applying-role-based-access-control-with-jwtuser\"></a>Applying Role-based Access-Control with JWTUser</h3><p>To lever­age sup­port for role based ac­cess con­trol (RBAC) we can use the <code>io.vertx.ext.auth.User#isAuthorised</code> method\nto check whether the cur­rent user has the re­quired role. If the role is present we re­turn some data about the user, oth­er­wise\nwe send a re­sponse with sta­tus code 403 and a <code>forbidden</code> error mes­sage.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleUserData</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n\n    <span class=\"hljs-keyword\">var</span> jwtUser = (JWTUser) ctx.user();\n    <span class=\"hljs-keyword\">var</span> username = jwtUser.principal().getString(<span class=\"hljs-string\">&quot;preferred_username&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> userId = jwtUser.principal().getString(<span class=\"hljs-string\">&quot;sub&quot;</span>);\n\n    jwtUser.isAuthorized(<span class=\"hljs-string\">&quot;user&quot;</span>, res -&gt; {\n\n        <span class=\"hljs-keyword\">if</span> (!res.succeeded() || !res.result()) {\n            toJsonResponse(ctx).setStatusCode(<span class=\"hljs-number\">403</span>).end(<span class=\"hljs-string\">&quot;{\\&quot;error\\&quot;: \\&quot;forbidden\\&quot;}&quot;</span>);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        JsonObject data = <span class=\"hljs-keyword\">new</span> JsonObject()\n                .put(<span class=\"hljs-string\">&quot;type&quot;</span>, <span class=\"hljs-string\">&quot;user&quot;</span>)\n                .put(<span class=\"hljs-string\">&quot;username&quot;</span>, username)\n                .put(<span class=\"hljs-string\">&quot;userId&quot;</span>, userId)\n                .put(<span class=\"hljs-string\">&quot;timestamp&quot;</span>, Instant.now());\n\n        toJsonResponse(ctx).end(data.toString());\n    });\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleAdminData</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n\n    <span class=\"hljs-keyword\">var</span> jwtUser = (JWTUser) ctx.user();\n    <span class=\"hljs-keyword\">var</span> username = jwtUser.principal().getString(<span class=\"hljs-string\">&quot;preferred_username&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> userId = jwtUser.principal().getString(<span class=\"hljs-string\">&quot;sub&quot;</span>);\n\n    jwtUser.isAuthorized(<span class=\"hljs-string\">&quot;admin&quot;</span>, res -&gt; {\n\n        <span class=\"hljs-keyword\">if</span> (!res.succeeded() || !res.result()) {\n            toJsonResponse(ctx).setStatusCode(<span class=\"hljs-number\">403</span>).end(<span class=\"hljs-string\">&quot;{\\&quot;error\\&quot;: \\&quot;forbidden\\&quot;}&quot;</span>);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        JsonObject data = <span class=\"hljs-keyword\">new</span> JsonObject()\n                .put(<span class=\"hljs-string\">&quot;type&quot;</span>, <span class=\"hljs-string\">&quot;admin&quot;</span>)\n                .put(<span class=\"hljs-string\">&quot;username&quot;</span>, username)\n                .put(<span class=\"hljs-string\">&quot;userId&quot;</span>, userId)\n                .put(<span class=\"hljs-string\">&quot;timestamp&quot;</span>, Instant.now());\n\n        toJsonResponse(ctx).end(data.toString());\n    });\n}\n</code></pre><pre><code class=\"hljs language-bash\">curl --silent -H <span class=\"hljs-string\">&quot;Authorization: Bearer <span class=\"hljs-variable\">$KC_ACCESS_TOKEN</span>&quot;</span> http://localhost:3000/api/user\n</code></pre><p>Out­put:</p><pre><code class=\"hljs language-json\">{<span class=\"hljs-attr\">&quot;type&quot;</span>:<span class=\"hljs-string\">&quot;user&quot;</span>,<span class=\"hljs-attr\">&quot;username&quot;</span>:<span class=\"hljs-string\">&quot;tester&quot;</span>,<span class=\"hljs-attr\">&quot;userId&quot;</span>:<span class=\"hljs-string\">&quot;27b3fac0-9aec-4421-81cf-d4b02428f901&quot;</span>,<span class=\"hljs-attr\">&quot;timestamp&quot;</span>:<span class=\"hljs-string\">&quot;2020-09-28T21:07:49.340950300Z&quot;</span>}\n</code></pre><pre><code class=\"hljs language-bash\">curl --silent -H <span class=\"hljs-string\">&quot;Authorization: Bearer <span class=\"hljs-variable\">$KC_ACCESS_TOKEN</span>&quot;</span> http://localhost:3000/api/admin\n</code></pre><p>Out­put:</p><pre><code class=\"hljs language-json\">{<span class=\"hljs-attr\">&quot;error&quot;</span>: <span class=\"hljs-string\">&quot;forbidden&quot;</span>}\n</code></pre><h3 id=\"obtaining-an-access-token-from-keycloak-for-user-vadmin\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#obtaining-an-access-token-from-keycloak-for-user-vadmin\"></a>Obtaining an Access Token from Keycloak for user <code>vadmin</code></h3><p>To check ac­cess with an <code>admin</code> role, we ob­tain a new token for the user <code>vadmin</code> which has the roles <code>admin</code> and <code>user</code>. </p><pre><code class=\"hljs language-bash\">KC_USERNAME=vadmin\nKC_PASSWORD=<span class=\"hljs-built_in\">test</span>\nKC_CLIENT=vertx-service\nKC_CLIENT_SECRET=ecb85cc5-f90d-4a03-8fac-24dcde57f40c\nKC_REALM=vertx\nKC_URL=http://localhost:8080/auth\nKC_RESPONSE=$(curl  -k \\\n        -d <span class=\"hljs-string\">&quot;username=<span class=\"hljs-variable\">$KC_USERNAME</span>&quot;</span> \\\n        -d <span class=\"hljs-string\">&quot;password=<span class=\"hljs-variable\">$KC_PASSWORD</span>&quot;</span> \\\n        -d <span class=\"hljs-string\">&#x27;grant_type=password&#x27;</span> \\\n        -d <span class=\"hljs-string\">&quot;client_id=<span class=\"hljs-variable\">$KC_CLIENT</span>&quot;</span> \\\n        -d <span class=\"hljs-string\">&quot;client_secret=<span class=\"hljs-variable\">$KC_CLIENT_SECRET</span>&quot;</span> \\\n        <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$KC_URL</span>/realms/<span class=\"hljs-variable\">$KC_REALM</span>/protocol/openid-connect/token&quot;</span> \\\n    | jq .)\n\nKC_ACCESS_TOKEN=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$KC_RESPONSE</span>| jq -r .access_token)\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$KC_ACCESS_TOKEN</span>\n</code></pre><pre><code class=\"hljs language-bash\">curl --silent -H <span class=\"hljs-string\">&quot;Authorization: Bearer <span class=\"hljs-variable\">$KC_ACCESS_TOKEN</span>&quot;</span> http://localhost:3000/api/user\n</code></pre><p>Out­put:</p><pre><code class=\"hljs language-json\">{<span class=\"hljs-attr\">&quot;type&quot;</span>:<span class=\"hljs-string\">&quot;user&quot;</span>,<span class=\"hljs-attr\">&quot;username&quot;</span>:<span class=\"hljs-string\">&quot;vadmin&quot;</span>,<span class=\"hljs-attr\">&quot;userId&quot;</span>:<span class=\"hljs-string\">&quot;75090eac-36ff-4cd8-847d-fc2941bc024e&quot;</span>,<span class=\"hljs-attr\">&quot;timestamp&quot;</span>:<span class=\"hljs-string\">&quot;2020-09-28T21:13:05.099393900Z&quot;</span>}\n</code></pre><pre><code class=\"hljs language-bash\">curl --silent -H <span class=\"hljs-string\">&quot;Authorization: Bearer <span class=\"hljs-variable\">$KC_ACCESS_TOKEN</span>&quot;</span> http://localhost:3000/api/admin\n</code></pre><p>Out­put:</p><pre><code class=\"hljs language-json\">{<span class=\"hljs-attr\">&quot;type&quot;</span>:<span class=\"hljs-string\">&quot;admin&quot;</span>,<span class=\"hljs-attr\">&quot;username&quot;</span>:<span class=\"hljs-string\">&quot;vadmin&quot;</span>,<span class=\"hljs-attr\">&quot;userId&quot;</span>:<span class=\"hljs-string\">&quot;75090eac-36ff-4cd8-847d-fc2941bc024e&quot;</span>,<span class=\"hljs-attr\">&quot;timestamp&quot;</span>:<span class=\"hljs-string\">&quot;2020-09-28T21:13:34.945276500Z&quot;</span>}\n</code></pre><h3 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h3><p>We learned how to con­fig­ure a Vert.x ap­pli­ca­tion with JWT au­tho­riza­tion pow­ered by Key­cloak. Al­though the con­fig­u­ra­tion is quite com­plete\nal­ready, there are still some parts that can be im­proved, like the dy­namic JWKS fetch­ing on public-​key pair ro­ta­tion as well as ex­trac­tion of nested roles.</p><p>Nev­er­the­less this is a good start­ing point for se­cur­ing your own Vert.x ser­vices with JWT and Key­cloak.</p><p>You can check out the <a href=\"https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx\">com­plete ex­am­ple in keycloak-​vertx Ex­am­ples Repo</a>.</p><p>Thank you for your time, stay tuned for more up­dates! If you want to learn more about Key­cloak, feel free to reach out to me. You can find me via <a href=\"https://twitter.com/thomasdarimont\">thomas­da­ri­mont on twit­ter</a>.</p><p>Happy Hack­ing!</p>","scope":{}}},"prevPost":{"meta":{"title":"Eclipse Vert.x 3.9.4 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Eclipse Vert.x version 3.9.4 has just been released. It fixes quite a few bugs that have been reported by the community."},"date":"2020-10-15","slug":"eclipse-vert-x-3-9-4-released"},"nextPost":{"meta":{"title":"Eclipse Vert.x 4 beta 3 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"The third beta version of Eclipse Vert.x 4.0 highlights many features including (but not limited to) HTTP client request creation, HTTP tunnel improvements, and WebSocket upgrade improvements."},"date":"2020-09-25","slug":"eclipse-vert-x-4-beta-3-released"},"relatedPosts":[{"meta":{"title":"Easy SSO for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn how to implement Single Sign-on with OpenID Connect and how to use Keycloak together with Eclipse Vert.x."},"date":"2020-03-16","slug":"easy-sso-for-vert-x-with-keycloak"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}