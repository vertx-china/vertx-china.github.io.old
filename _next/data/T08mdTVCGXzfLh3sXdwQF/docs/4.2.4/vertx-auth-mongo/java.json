{"pageProps":{"slug":"4.2.4/vertx-auth-mongo/java","title":"Mongo Auth Provider","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_vertx_auth_jdbc_and_gdpr\">Vertx Auth JDBC 和 GDPR</a></li>\n<li><a href=\"#_authentication\">认证</a></li>\n<li><a href=\"#_authorisation_permission_role_model\">授权：Permission/Role模型</a></li>\n</ul>\n</div>","contents":"<h1>Mongo Auth Provider</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.X中提供了一个 <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code> 的实现，\n它可以让您使用 MongoClient 针对 MongoDb 数据库执行认证和授权。</p>\n</div>\n<div class=\"paragraph\">\n<p>若要在自己的项目中使用它，\n需要在构建描述信息的 <em>dependencies</em> 节点中添加以下信息：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在 <code>pom.xml</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-mongo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在 <code>build.gradle</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-auth-mongo:4.2.4&#x27;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果要创建一个客户端实例，您首先需要一个 <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html\">MongoClient</a></code> 的实例，\n要知道如何创建这个实例可按照文档中的内容实施。</p>\n</div>\n<div class=\"paragraph\">\n<p>一旦您创建了一个 <code><a href=\"../../apidocs/io/vertx/ext/mongo/MongoClient.html\">MongoClient</a></code> 实例后，就可以按照下边的代码创建 <code><a href=\"../../apidocs/io/vertx/ext/auth/mongo/MongoAuth.html\">MongoAuth</a></code> 实例：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MongoClient client = MongoClient.createShared(vertx, mongoClientConfig);\nMongoAuthenticationOptions options = <span class=\"hljs-keyword\">new</span> MongoAuthenticationOptions();\nMongoAuthentication authenticationProvider =\n  MongoAuthentication.create(client, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>创建好上边的实例过后，您就可以使用任何 <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code> 针对MongoDB执行认证和授权功能了。</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.X的默认标准配置（Out Of the Box）中包含了\"user\"集合（Collection），\n用户名字段使用\"username\"进行存储和读取。</p>\n</div>\n<div class=\"paragraph\">\n<p>为了避免在\"user\"集合中出现重复的用户名，应该在\"user\"集合中给\"username\"添加唯一索引（Unique Index），\n您可以在MongoDB服务器中运行下边的片段来完成此操作：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>db.user.createIndex( { username: 1 }, { unique: true } )</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>MongoDB的特性是先查询username字段中的值是否已经存在，然后会插入一个Document，并不能作为一个原子性操作，\n基于这个原因您需要添加上边的唯一索引，\n使用了这个索引过后您的代码会尝试先插入一行数据，如果出现了重复记录则会失败。</p>\n</div>\n<div class=\"paragraph\">\n<p>根据您自身需要，您同样可以使用方法：</p>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/auth/mongo/MongoAuthenticationOptions.html#setCollectionName-java.lang.String-\">setCollectionName</a></code> 、\n<code><a href=\"../../apidocs/io/vertx/ext/auth/mongo/MongoAuthenticationOptions.html#setUsernameField-java.lang.String-\">setUsernameField</a></code> 、\n<code><a href=\"../../apidocs/io/vertx/ext/auth/mongo/MongoAuthenticationOptions.html#setPasswordField-java.lang.String-\">setPasswordField</a></code>\n改变 MongoDB 中使用的默认集合（Collection）和列（Column）名称等信息：</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.X默认实现中的密码通过 <code><a href=\"../../apidocs/io/vertx/ext/auth/HashingStrategy.html\">HashingStrategy</a></code> 在数据库中加密后进行存储。(salt值存储在该Hash结果中)</p>\n</div>\n<div class=\"paragraph\">\n<p>如您想要重写上述行为，则可以调用 <code><a href=\"../../apidocs/io/vertx/ext/auth/mongo/MongoAuth.html#setHashStrategy-io.vertx.ext.auth.mongo.HashStrategy-\">setHashStrategy</a></code>\n方法设置新的Hash策略，并且提供变更过的Hash策略及配置信息。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_vertx_auth_jdbc_and_gdpr\"><a class=\"anchor\" href=\"#_vertx_auth_jdbc_and_gdpr\"></a>Vertx Auth JDBC 和 GDPR</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>GDPR（译者注：一般数据保护条例）是欧盟普通法中的一项法规。它重新定义或凌驾于本国的数据保护法之上，\n并且扩展了先前已存在的法令。本节内容绝不是一个法规的概览，\n而是对组件如何遵循要求做的小总结。\n不遵守法规的公司可以按营业额的4％或2000万欧元处以罚款。\n因此我们想要确保的是，您，作为 Vert.x Auth JDBC 的用户，很好地遵守了该法规。</p>\n</div>\n<div class=\"paragraph\">\n<p>该法规定义如下术语：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Data Subject（数据主体） - 被处理私人数据的人（例如：用户）</p>\n</li>\n<li>\n<p>Personal Data（个人数据） - 任何指向一个已识别或可识别的自然人（即数据主体）相关的的数据</p>\n</li>\n<li>\n<p>Data Processing（数据处理） - 对于个人信息（即个人数据）的任何操作（手动或自动）</p>\n</li>\n<li>\n<p>Controller（控制者） - 请求和使用数据的实体（例如：公司）</p>\n</li>\n<li>\n<p>Processors（处理者） - 代表控制者处理数据的任何实体（例如：云服务供应商）。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>GDPR 定义如下的功能：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>\"Forget me\" - 清除数据的权利</p>\n</li>\n<li>\n<p>将 <code>概览（profile）</code> 标记为受限资源 - 限制数据处理的权利</p>\n</li>\n<li>\n<p>导出数据 - 数据的可移植权利</p>\n</li>\n<li>\n<p>允许编辑 <code>概览</code> - 重新授权的权利</p>\n</li>\n<li>\n<p>查看自己的所有信息 - 访问权利</p>\n</li>\n<li>\n<p>选中复选框</p>\n</li>\n<li>\n<p>年龄检查</p>\n</li>\n<li>\n<p>资料销毁 - 数据最小化原则</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>本模块遵循GDPR法律，它不存储任何数据对象的可识别信息。\n唯一的标识就是不关联任何私人信息的用户名（username）。</p>\n</div>\n<div class=\"paragraph\">\n<p>为了在您的应用中加入个人信息，您应该创建您自己的数据表，并关联用户名字段。\n这里提示一下，您应该有一个布尔类型的字段来标识个人信息是否访问受限，\n以此来遵循处理数据时的法律限制：例如，向邮件列表中的邮箱批量发送邮件，\n当某个邮箱用户的限制标识为true时，便不允许向他发送邮件。</p>\n</div>\n<div class=\"paragraph\">\n<p>删除数据的权利并不代表您必须清除您应用中所有的数据，例如：在银行当中，这个权利不能用来清除贷款和债务信息。\n您可以保留应用中的数据，但是必须清除个人数据。\n对于 Vert.x Auth JDBC 场景，您应该删除您的表，\n但只要不将用户名和个人信息关联起来，那么您依旧可以保留对用户名的引用。</p>\n</div>\n<div class=\"paragraph\">\n<p>重要说明：这必须在备份中保留下来！作为提示，您应该备份数据，并保证数据备份在不同的数据库当中，\n所以他们才能够独立地回滚。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>认证</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>如果认证使用了默认的MongoDB实现，\n认证信息中用了 <code>username</code> 和 <code>password</code> 字段：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject authInfo = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">&quot;username&quot;</span>, <span class=\"hljs-string\">&quot;tim&quot;</span>)\n  .put(<span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;sausages&quot;</span>);\n\nauthProvider.authenticate(authInfo)\n  .onSuccess(user -&gt; System.out.println(<span class=\"hljs-string\">&quot;User: &quot;</span> + user.principal()))\n  .onFailure(err -&gt; {\n    <span class=\"hljs-comment\">// Failed!</span>\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果想要替换上边的 <code>username</code> 和 <code>password</code> 两个默认字段名，您可使用以下两种方法：\n<code><a href=\"../../apidocs/io/vertx/ext/auth/mongo/MongoAuthenticationOptions.html#getUsernameCredentialField--\">getUsernameCredentialField</a></code> 和\n<code><a href=\"../../apidocs/io/vertx/ext/auth/mongo/MongoAuthenticationOptions.html#getPasswordCredentialField--\">getPasswordCredentialField</a></code></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authorisation_permission_role_model\"><a class=\"anchor\" href=\"#_authorisation_permission_role_model\"></a>授权：Permission/Role模型</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>尽管 Vert.X 自身并不要求使用特定的许可模型（它本身只是使用了不透明的字符串），\n但 MongoDB 认证中的实现使用了比较熟悉的：用户/角色/许可模型，这样在应用里您可以使用一个或者多个角色，\n而一个角色也可以拥有一个或者多个许可。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果要验证一个用户是否拥有特定的许可，则要将许可信息传递到\n<code><a href=\"../../apidocs/io/vertx/ext/auth/User.html#isAuthorized-io.vertx.ext.auth.authorization.Authorization-io.vertx.core.Handler-\">isAuthorized</a></code> 中：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mongoAuthZ.getAuthorizations(user)\n  .onSuccess(v -&gt; {\n    <span class=\"hljs-keyword\">if</span> (PermissionBasedAuthorization.create(<span class=\"hljs-string\">&quot;commit_code&quot;</span>).match(user)) {\n      <span class=\"hljs-comment\">// Has permission!</span>\n    }\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果要验证一个用户是否属于特定角色，则可以使用 <code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/RoleBasedAuthorization.html\">RoleBasedAuthorization</a></code> 。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mongoAuthZ.getAuthorizations(user)\n  .onSuccess(v -&gt; {\n    <span class=\"hljs-keyword\">if</span> (RoleBasedAuthorization.create(<span class=\"hljs-string\">&quot;manager&quot;</span>).match(user)) {\n      <span class=\"hljs-comment\">// Has role!</span>\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.2.4"},"__N_SSG":true}