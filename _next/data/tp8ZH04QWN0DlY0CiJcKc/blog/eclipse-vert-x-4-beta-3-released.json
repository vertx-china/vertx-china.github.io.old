{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Eclipse Vert.x 4 beta 3 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"The third beta version of Eclipse Vert.x 4.0 highlights many features including (but not limited to) HTTP client request creation, HTTP tunnel improvements, and WebSocket upgrade improvements."},"date":"2020-09-25","slug":"eclipse-vert-x-4-beta-3-released","readingTime":{"text":"4 min read","minutes":3.51,"time":210600,"words":702},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are ex\\xADtremely pleased to an\\xADnounce the third 4.0 beta re\\xADlease of Eclipse Vert.x.\"), mdx(\"p\", null, \"Vert.x 4 is the evo\\xADlu\\xADtion of the Vert.x 3.x se\\xADries that will bring key fea\\xADtures to Vert.x.\"), mdx(\"h2\", {\n    \"id\": \"http-client-request-creation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#http-client-request-creation\"\n  })), \"HTTP client request creation\"), mdx(\"p\", null, \"Until Beta3, HTTP client has cre\\xADated lazy HTTP re\\xADquests, since then cre\\xADat\\xADing a re\\xADquest\\nhas be\\xADcome an asyn\\xADchro\\xADnous op\\xADer\\xADa\\xADtion guar\\xADan\\xADtee\\xADing that a slot for per\\xADform\\xADing the re\\xADquest\\nis granted:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Created a request\"), \"\\nHttpClientRequest request = client.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \");\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Connect to the server or reuse a connection from the pool and then try to send the request\"), \"\\nrequest.end();\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Since Beta3\"), \"\\nclient.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \", ar -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// The client connected to the server or reused a connection from the pool\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n    HttpClientRequest request = ar.result();\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send the request\"), \"\\n    request.end();\\n  }\\n});\\n\")), mdx(\"p\", null, \"An\\xADother (hid\\xADden) mo\\xADti\\xADva\\xADtion to switch to this model is avoid\\xADing data races when the\\nHTTP client is used out\\xADside the event-\\u200Bloop using fu\\xADtures.\"), mdx(\"p\", null, \"Pre\\xADvi\\xADously, you could write code like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Future<HttpClientResponse> get = client.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"some-uri\\\"\"), \");\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Assuming we have a client that returns a future response\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// assuging this is *not* on the event-loop\"), \"\\nFuture<Buffer> fut = get.send().compose(response -> {\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Response events might have happen already\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" response.body();\\n});\\n\")), mdx(\"p\", null, \"Now, you can write in\\xADstead:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Future<Buffer> fut = client.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"some-uri\\\"\"), \").compose(request -> {\\n  request.send().compose(response -> response.body())\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"httpserverresponse-send-method\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#httpserverresponse-send-method\"\n  })), \"HttpServerResponse send method\"), mdx(\"p\", null, \"In the pre\\xADvi\\xADous beta, HTTP client re\\xADquest got a new sim\\xADpli\\xADfied \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"send\"), \" method to send\\na body or a stream. We did the same for the HTTP server re\\xADsponse API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"server.requestHandler(req -> {\\n  req.pause();\\n  getSomeStream().onSuccess(stream -> {\\n    req.response().send(stream);\\n  });\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"http-tunnel-improvements\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#http-tunnel-improvements\"\n  })), \"HTTP tunnel improvements\"), mdx(\"p\", null, \"Cre\\xADat\\xADing an HTTP tun\\xADnel has now be\\xADcome more nat\\xADural:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"client.request(HttpMethod.CONNECT, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"some-uri\\\"\"), \")\\n  .onSuccess(request -> {\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Connect to the server\"), \"\\n    request.connect(ar -> {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n        HttpClientResponse response = ar.result();\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (response.statusCode() != \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \") {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Connect failed for some reason\"), \"\\n        } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Tunnel created, raw buffers are transmitted on the wire\"), \"\\n          NetSocket socket = response.netSocket();\\n        }\\n      }\\n    });\\n});\\n\")), mdx(\"p\", null, \"The new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"connect\"), \" method tells the client that when a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"201\"), \" re\\xADsponse is re\\xADceived\\nfrom the server then the con\\xADnec\\xADtion should be switched to not in\\xADter\\xADpret HTTP\\ndata any\\xADmore.\"), mdx(\"p\", null, \"On the server, the API has be\\xADcome asyn\\xADchro\\xADnous and re\\xADnamed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toNetSocket()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"server.requestHandler(request -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (request.method() == HttpMethod.CONNECT) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Will send an HTTP 201 status code and switch the connection to use raw buffers\"), \"\\n    request.toNetSocket(ar -> {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n        NetSocket socket = ar.result();\\n      }\\n    });\\n  }\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"websocket-upgrade-improvements\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#websocket-upgrade-improvements\"\n  })), \"WebSocket upgrade improvements\"), mdx(\"p\", null, \"The server Web\\xADSocket man\\xADual up\\xADgrade op\\xADer\\xADa\\xADtion has also be\\xADcome asyn\\xADchro\\xADnous and re\\xADnamed\\nto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toWebSocket()\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"server.requestHandler(request -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (request.method() == HttpMethod.GET && \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Upgrade\\\"\"), \".equals(request.getHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"connection\\\"\"), \"))) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Will do the WebSocket handshake\"), \"\\n    request.toWebSocket(ar -> {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n        ServerWebSocket socket = ar.result();\\n      }\\n    });\\n  }\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"row-to-json-conversion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#row-to-json-conversion\"\n  })), \"Row to JSON conversion\"), mdx(\"p\", null, \"SQL client can now eas\\xADily trans\\xADform a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Row\"), \" into a JSON ob\\xADject, this can be con\\xADvie\\xADnient\\nfor ap\\xADpli\\xADca\\xADtions di\\xADrectly trans\\xADfer\\xADring JSON re\\xADsults to the client:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"client\\n  .preparedQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM USERS WHERE ID=$1\\\"\"), \")\\n  .execute(Tuple.of(id))\\n  .onSuccess(row -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (row.size() == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \") {\\n      JsonObject json = row.iterator().next().toJson();\\n    }\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"oauth2oidc-pkce\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#oauth2oidc-pkce\"\n  })), \"OAuth2/OIDC PKCE\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OAuth2Handler\"), \" can now han\\xADdle \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tools.ietf.org/html/rfc7636\"\n  }), \"PKCE\"), \", which means an\\xADother layer of se\\xADcu\\xADrity to your ap\\xADpli\\xADca\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"redis-resp3\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#redis-resp3\"\n  })), \"Redis RESP3\"), mdx(\"p\", null, \"The redis client can now speak \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RESP3\"), \" with redis servers. This means it can han\\xADdle all the new types and APIs avail\\xADable on redis from all ver\\xADsions (RESP2, redis < 6) and (RESP3, redis >= 6).\"), mdx(\"h2\", {\n    \"id\": \"finally\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finally\"\n  })), \"Finally\"), mdx(\"p\", null, \"This is the Beta3 re\\xADlase of Vert.x 4, you can of course ex\\xADpect an\\xADother beta as we get feed\\xADback from the com\\xADmu\\xADnity and fix is\\xADsues that we failed to catch be\\xADfore.\"), mdx(\"p\", null, \"You can also read the mile\\xADstone an\\xADnounces to know more about the over\\xADral changes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    href: \"/blog/eclipse-vert-x-4-beta-1-released\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"https://vertx.io/blog/eclipse-\\u200Bvert-x-4-\\u200Bbeta-1-\\u200Breleased\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    href: \"/blog/eclipse-vert-x-4-milestone-5-released\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"https://vertx.io/blog/eclipse-\\u200Bvert-x-4-\\u200Bmilestone-5-\\u200Breleased\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    href: \"/blog/eclipse-vert-x-4-milestone-5-released\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"https://vertx.io/blog/eclipse-\\u200Bvert-x-4-\\u200Bmilestone-5-\\u200Breleased\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    href: \"/blog/eclipse-vert-x-4-milestone-4-released\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"https://vertx.io/blog/eclipse-\\u200Bvert-x-4-\\u200Bmilestone-4-\\u200Breleased\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    href: \"/blog/eclipse-vert-x-4-milestone-3-released\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"https://vertx.io/blog/eclipse-\\u200Bvert-x-4-\\u200Bmilestone-3-\\u200Breleased\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    href: \"/blog/eclipse-vert-x-4-milestone-2-released\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"https://vertx.io/blog/eclipse-\\u200Bvert-x-4-\\u200Bmilestone-2-\\u200Breleased\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    href: \"/blog/eclipse-vert-x-4-milestone-1-released\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"\"\n  }), \"https://vertx.io/blog/eclipse-\\u200Bvert-x-4-\\u200Bmilestone-1-\\u200Breleased\")))), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes\"\n  }), \"dep\\xADre\\xADca\\xADtions and break\\xADing changes\"), \"\\ncan be found on the wiki.\"), mdx(\"p\", null, \"For this re\\xADlease, there are no Docker im\\xADages.\"), mdx(\"p\", null, \"The re\\xADlease ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0.Beta1\"\n  }), \"Maven Cen\\xADtral\"), \" and you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0.Beta1/\"\n  }), \"Maven Cen\\xADtral\"), \".\"), mdx(\"p\", null, \"You can boot\\xADstrap a Vert.x 4.0.0.Beta3 project using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://start.vertx.io\"\n  }), \"https://start.vertx.io\"), \".\"), mdx(\"p\", null, \"The doc\\xADu\\xADmen\\xADta\\xADtion has been de\\xADployed on this pre\\xADview web-\\u200Bsite \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx-web-site.github.io/docs/\"\n  }), \"https://vertx-\\u200Bweb-site.github.io/docs/\")), mdx(\"p\", null, \"That\\u2019s it! Happy cod\\xADing and see you soon on our user or dev \", mdx(Link, {\n    href: \"/community\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"chan\\xADnels\")), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We are ex­tremely pleased to an­nounce the third 4.0 beta re­lease of Eclipse Vert.x.</p><p>Vert.x 4 is the evo­lu­tion of the Vert.x 3.x se­ries that will bring key fea­tures to Vert.x.</p><h2 id=\"http-client-request-creation\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#http-client-request-creation\"></a>HTTP client request creation</h2><p>Until Beta3, HTTP client has cre­ated lazy HTTP re­quests, since then cre­at­ing a re­quest\nhas be­come an asyn­chro­nous op­er­a­tion guar­an­tee­ing that a slot for per­form­ing the re­quest\nis granted:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Created a request</span>\nHttpClientRequest request = client.get(<span class=\"hljs-string\">&quot;/some-uri&quot;</span>);\n\n<span class=\"hljs-comment\">// Connect to the server or reuse a connection from the pool and then try to send the request</span>\nrequest.end();\n\n<span class=\"hljs-comment\">// Since Beta3</span>\nclient.get(<span class=\"hljs-string\">&quot;/some-uri&quot;</span>, ar -&gt; {\n  <span class=\"hljs-comment\">// The client connected to the server or reused a connection from the pool</span>\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    HttpClientRequest request = ar.result();\n\n    <span class=\"hljs-comment\">// Send the request</span>\n    request.end();\n  }\n});\n</code></pre><p>An­other (hid­den) mo­ti­va­tion to switch to this model is avoid­ing data races when the\nHTTP client is used out­side the event-​loop using fu­tures.</p><p>Pre­vi­ously, you could write code like:</p><pre><code class=\"hljs language-java\">Future&lt;HttpClientResponse&gt; get = client.get(<span class=\"hljs-string\">&quot;some-uri&quot;</span>);\n\n<span class=\"hljs-comment\">// Assuming we have a client that returns a future response</span>\n<span class=\"hljs-comment\">// assuging this is *not* on the event-loop</span>\nFuture&lt;Buffer&gt; fut = get.send().compose(response -&gt; {\n\n  <span class=\"hljs-comment\">// Response events might have happen already</span>\n  <span class=\"hljs-keyword\">return</span> response.body();\n});\n</code></pre><p>Now, you can write in­stead:</p><pre><code class=\"hljs language-java\">Future&lt;Buffer&gt; fut = client.get(<span class=\"hljs-string\">&quot;some-uri&quot;</span>).compose(request -&gt; {\n  request.send().compose(response -&gt; response.body())\n});\n</code></pre><h2 id=\"httpserverresponse-send-method\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#httpserverresponse-send-method\"></a>HttpServerResponse send method</h2><p>In the pre­vi­ous beta, HTTP client re­quest got a new sim­pli­fied <code>send</code> method to send\na body or a stream. We did the same for the HTTP server re­sponse API:</p><pre><code class=\"hljs language-java\">server.requestHandler(req -&gt; {\n  req.pause();\n  getSomeStream().onSuccess(stream -&gt; {\n    req.response().send(stream);\n  });\n});\n</code></pre><h2 id=\"http-tunnel-improvements\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#http-tunnel-improvements\"></a>HTTP tunnel improvements</h2><p>Cre­at­ing an HTTP tun­nel has now be­come more nat­ural:</p><pre><code class=\"hljs language-java\">client.request(HttpMethod.CONNECT, <span class=\"hljs-string\">&quot;some-uri&quot;</span>)\n  .onSuccess(request -&gt; {\n\n    <span class=\"hljs-comment\">// Connect to the server</span>\n    request.connect(ar -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n        HttpClientResponse response = ar.result();\n\n        <span class=\"hljs-keyword\">if</span> (response.statusCode() != <span class=\"hljs-number\">200</span>) {\n          <span class=\"hljs-comment\">// Connect failed for some reason</span>\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-comment\">// Tunnel created, raw buffers are transmitted on the wire</span>\n          NetSocket socket = response.netSocket();\n        }\n      }\n    });\n});\n</code></pre><p>The new <code>connect</code> method tells the client that when a <code>201</code> re­sponse is re­ceived\nfrom the server then the con­nec­tion should be switched to not in­ter­pret HTTP\ndata any­more.</p><p>On the server, the API has be­come asyn­chro­nous and re­named to <code>toNetSocket()</code>:</p><pre><code class=\"hljs language-java\">server.requestHandler(request -&gt; {\n  <span class=\"hljs-keyword\">if</span> (request.method() == HttpMethod.CONNECT) {\n    <span class=\"hljs-comment\">// Will send an HTTP 201 status code and switch the connection to use raw buffers</span>\n    request.toNetSocket(ar -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n        NetSocket socket = ar.result();\n      }\n    });\n  }\n});\n</code></pre><h2 id=\"websocket-upgrade-improvements\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#websocket-upgrade-improvements\"></a>WebSocket upgrade improvements</h2><p>The server Web­Socket man­ual up­grade op­er­a­tion has also be­come asyn­chro­nous and re­named\nto <code>toWebSocket()</code></p><pre><code class=\"hljs language-java\">server.requestHandler(request -&gt; {\n  <span class=\"hljs-keyword\">if</span> (request.method() == HttpMethod.GET &amp;&amp; <span class=\"hljs-string\">&quot;Upgrade&quot;</span>.equals(request.getHeader(<span class=\"hljs-string\">&quot;connection&quot;</span>))) {\n    <span class=\"hljs-comment\">// Will do the WebSocket handshake</span>\n    request.toWebSocket(ar -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n        ServerWebSocket socket = ar.result();\n      }\n    });\n  }\n});\n</code></pre><h2 id=\"row-to-json-conversion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#row-to-json-conversion\"></a>Row to JSON conversion</h2><p>SQL client can now eas­ily trans­form a <code>Row</code> into a JSON ob­ject, this can be con­vie­nient\nfor ap­pli­ca­tions di­rectly trans­fer­ring JSON re­sults to the client:</p><pre><code class=\"hljs language-java\">client\n  .preparedQuery(<span class=\"hljs-string\">&quot;SELECT * FROM USERS WHERE ID=$1&quot;</span>)\n  .execute(Tuple.of(id))\n  .onSuccess(row -&gt; {\n    <span class=\"hljs-keyword\">if</span> (row.size() == <span class=\"hljs-number\">1</span>) {\n      JsonObject json = row.iterator().next().toJson();\n    }\n  });\n</code></pre><h2 id=\"oauth2oidc-pkce\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#oauth2oidc-pkce\"></a>OAuth2/OIDC PKCE</h2><p><code>OAuth2Handler</code> can now han­dle <a href=\"https://tools.ietf.org/html/rfc7636\">PKCE</a>, which means an­other layer of se­cu­rity to your ap­pli­ca­tion.</p><h2 id=\"redis-resp3\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#redis-resp3\"></a>Redis RESP3</h2><p>The redis client can now speak <code>RESP3</code> with redis servers. This means it can han­dle all the new types and APIs avail­able on redis from all ver­sions (RESP2, redis &lt; 6) and (RESP3, redis &gt;= 6).</p><h2 id=\"finally\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finally\"></a>Finally</h2><p>This is the Beta3 re­lase of Vert.x 4, you can of course ex­pect an­other beta as we get feed­back from the com­mu­nity and fix is­sues that we failed to catch be­fore.</p><p>You can also read the mile­stone an­nounces to know more about the over­ral changes:</p><ul><li><a href=\"/blog/eclipse-vert-x-4-beta-1-released/\">https://vertx.io/blog/eclipse-​vert-x-4-​beta-1-​released</a></li><li><a href=\"/blog/eclipse-vert-x-4-milestone-5-released/\">https://vertx.io/blog/eclipse-​vert-x-4-​milestone-5-​released</a></li><li><a href=\"/blog/eclipse-vert-x-4-milestone-5-released/\">https://vertx.io/blog/eclipse-​vert-x-4-​milestone-5-​released</a></li><li><a href=\"/blog/eclipse-vert-x-4-milestone-4-released/\">https://vertx.io/blog/eclipse-​vert-x-4-​milestone-4-​released</a></li><li><a href=\"/blog/eclipse-vert-x-4-milestone-3-released/\">https://vertx.io/blog/eclipse-​vert-x-4-​milestone-3-​released</a></li><li><a href=\"/blog/eclipse-vert-x-4-milestone-2-released/\">https://vertx.io/blog/eclipse-​vert-x-4-​milestone-2-​released</a></li><li><a href=\"/blog/eclipse-vert-x-4-milestone-1-released/\">https://vertx.io/blog/eclipse-​vert-x-4-​milestone-1-​released</a></li></ul><p>The <a href=\"https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes\">dep­re­ca­tions and break­ing changes</a>\ncan be found on the wiki.</p><p>For this re­lease, there are no Docker im­ages.</p><p>The re­lease ar­ti­facts have been de­ployed to <a href=\"https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0.Beta1\">Maven Cen­tral</a> and you can get the dis­tri­b­u­tion on <a href=\"https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0.Beta1/\">Maven Cen­tral</a>.</p><p>You can boot­strap a Vert.x 4.0.0.Beta3 project using <a href=\"https://start.vertx.io\">https://start.vertx.io</a>.</p><p>The doc­u­men­ta­tion has been de­ployed on this pre­view web-​site <a href=\"https://vertx-web-site.github.io/docs/\">https://vertx-​web-site.github.io/docs/</a></p><p>That’s it! Happy cod­ing and see you soon on our user or dev <a href=\"/community/\">chan­nels</a>.</p>","scope":{}}},"prevPost":{"meta":{"title":"JWT Authorization for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn about JWT foundations, protect routes with JWT Authorization, JWT encoded tokens, and RBAC with Keycloak"},"date":"2020-10-01","slug":"jwt-authorization-for-vert-x-with-keycloak"},"nextPost":{"meta":{"title":"Eclipse Vert.x 3.9.3 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Eclipse Vert.x version 3.9.3 has just been released. It fixes quite a few bugs that have been reported by the community."},"date":"2020-09-17","slug":"eclipse-vert-x-3-9-3-released"},"relatedPosts":[{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"}]},"__N_SSG":true}