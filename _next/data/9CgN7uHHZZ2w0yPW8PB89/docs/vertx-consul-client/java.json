{"pageProps":{"slug":"vertx-consul-client/java","title":"Vert.x Consul 客户端","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_consul_client\">使用 Vert.x Consul 客户端</a></li>\n<li><a href=\"#_creating_a_client\">创建客户端</a></li>\n<li><a href=\"#_using_the_api\">使用接口</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_blocking_queries\">阻塞查询</a></li>\n</ul>\n</li>\n<li><a href=\"#_keyvalue_store\">键值对存储</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_get_key_value_pair_from_store\">从存储中获取键值对</a></li>\n<li><a href=\"#_put_key_value_pair_to_store\">保存键值对</a></li>\n<li><a href=\"#_transactions\">事务</a></li>\n<li><a href=\"#_delete_key_value_pair\">删除键值对</a></li>\n</ul>\n</li>\n<li><a href=\"#_services\">服务</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_service_registering\">服务注册</a></li>\n<li><a href=\"#_service_discovery\">服务发现</a></li>\n<li><a href=\"#_deregister_service\">取消注册服务</a></li>\n</ul>\n</li>\n<li><a href=\"#_health_checks\">健康检查</a></li>\n<li><a href=\"#_events\">事件</a></li>\n<li><a href=\"#_sessions\">会话</a></li>\n<li><a href=\"#_nodes_in_datacenter\">数据中心下的节点</a></li>\n<li><a href=\"#_prepared_queries\">预备查询（Prepared Query）</a></li>\n<li><a href=\"#_watches\">监视</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Consul 客户端</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://www.consul.io\">Consul</a> 是一个在你的应用架构中提供服务发现和配置管理的工具。\nVert.x 的 Consul 客户端允许应用通过阻塞或非阻塞的 HTTP 接口与 Consul 系统互动。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_consul_client\"><a class=\"anchor\" href=\"#_using_vert_x_consul_client\"></a>使用 Vert.x Consul 客户端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>为了使用该项目， 将以下依赖添加到你的构建描述文件的 <em>依赖配置</em> 中：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在你的 <code>pom.xml</code> 中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-consul-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在你的 <code>build.gradle</code> 文件中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-consul-client:4.2.5&#x27;</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_client\"><a class=\"anchor\" href=\"#_creating_a_client\"></a>创建客户端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>只需使用工厂方法即可创建：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConsulClient client = ConsulClient.create(vertx);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Consul 客户端也可以配置选项</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ConsulClientOptions options = <span class=\"hljs-keyword\">new</span> ConsulClientOptions()\n  .setHost(<span class=\"hljs-string\">&quot;consul.example.com&quot;</span>);\n\nConsulClient client = ConsulClient.create(vertx, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Consul 客户端支持以下配置：</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>host</code></dt>\n<dd>\n<p>Consul 的主机地址。 默认是 <code>localhost</code></p>\n</dd>\n<dt class=\"hdlist1\"><code>port</code></dt>\n<dd>\n<p>Consul 的 HTTP 接口地址。 默认是 <code>8500</code></p>\n</dd>\n<dt class=\"hdlist1\"><code>timeout</code></dt>\n<dd>\n<p>设置超时时间 (单位为毫秒) 如果在超时时间内请求没有返回任何数据，那么\n处理器会收到一个失败的结果，请求也会被关闭</p>\n</dd>\n<dt class=\"hdlist1\"><code>aclToken</code></dt>\n<dd>\n<p>ACL 签名。 如果设置了该参数， 客户端在请求 Consul 时会在\n查询参数中携带 \"?token\" 参数。如没有提供，那么签名为空，会使用对应的 '匿名'\nACL 策略。</p>\n</dd>\n<dt class=\"hdlist1\"><code>dc</code></dt>\n<dd>\n<p>数据中心名称。 如果设置了该参数， 客户端在请求 Consul 时会在\n查询参数中携带 \"?dc\" 参数。 如果没有提供，那么会默认查询当前的 Consul agent 的数据中心。</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>ConsulClient 的选项类继承了 <code>vertx-web-client</code> 模块的 WebClientOptions 类，\n因此还可以提供很多设置。 请参阅相关文档。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_api\"><a class=\"anchor\" href=\"#_using_the_api\"></a>使用接口</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>客户端接口参见 <code><a href=\"../../apidocs/io/vertx/ext/consul/ConsulClient.html\">ConsulClient</a></code>。 接口的格式与 Consul 的\nHTTP 接口非常相像，Consul 的 HTTP 接口参见 <a href=\"https://www.consul.io/docs/agent/http.html\">Consul API 文档</a></p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_blocking_queries\"><a class=\"anchor\" href=\"#_blocking_queries\"></a>阻塞查询</h3>\n<div class=\"paragraph\">\n<p>Consul 的某些接口支持名为 \"阻塞查询\" 的特性。 阻塞查询基于长轮询以查询结果的潜在\n变化。 每个支持阻塞查询的接口都提供了一个唯一标识 (index)，以代表\n所请求资源的当前状态。 以下参数配置用于阻塞查询：</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>index</code></dt>\n<dd>\n<p>该值用于表示 Consul 客户端期望看到的所请求资源的 index 的变化。</p>\n</dd>\n<dt class=\"hdlist1\"><code>wait</code></dt>\n<dd>\n<p>该值用于表示阻塞查询的最大时间。 该值最大为 10 分钟。</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">BlockingQueryOptions opts = <span class=\"hljs-keyword\">new</span> BlockingQueryOptions()\n  .setIndex(lastIndex)\n  .setWait(<span class=\"hljs-string\">&quot;1m&quot;</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>要注意的是，阻塞查询 <strong>不能严格保证</strong> 所返回的数据一定是发生了变化的。\n很有可能的情况是，阻塞查询的返回只是因为超时时间到了或发生了并没有改变数据内容的写入。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_keyvalue_store\"><a class=\"anchor\" href=\"#_keyvalue_store\"></a>键值对存储</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>键值对接口用于访问 Consul 内部的简单键值对存储，这对保存服务的配置或其他元数据很有用。\n以下是可以使用的接口：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>管理单个键值对的更新，删除和获取，以及根据键的前缀匹配的同样操作</p>\n</li>\n<li>\n<p>管理通过单个原子性的事务操作来获取和更新键值对的操作</p>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_get_key_value_pair_from_store\"><a class=\"anchor\" href=\"#_get_key_value_pair_from_store\"></a>从存储中获取键值对</h3>\n<div class=\"paragraph\">\n<p>Consul 客户端可以返回一个键的值</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.getValue(<span class=\"hljs-string\">&quot;key&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;retrieved value: &quot;</span> + res.result().getValue());\n    System.out.println(<span class=\"hljs-string\">&quot;modify index: &quot;</span> + res.result().getModifyIndex());\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>&#8230;&#8203;或者返回所有匹配某一给定前缀的键的值</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.getValues(<span class=\"hljs-string\">&quot;prefix&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;modify index: &quot;</span> + res.result().getIndex());\n    <span class=\"hljs-keyword\">for</span> (KeyValue kv : res.result().getList()) {\n      System.out.println(<span class=\"hljs-string\">&quot;retrieved value: &quot;</span> + kv.getValue());\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>返回的键值对数据包括以下字段（参考 <a href=\"https://www.consul.io/docs/agent/http/kv.html#single\">文档</a>）：</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>createIndex</code></dt>\n<dd>\n<p>内部的创建索引，表示该键值对何时被创建的。</p>\n</dd>\n<dt class=\"hdlist1\"><code>modifyIndex</code></dt>\n<dd>\n<p>更新索引，该键值对最后一次被修改时的索引</p>\n</dd>\n<dt class=\"hdlist1\"><code>lockIndex</code></dt>\n<dd>\n<p>该键被成功获取锁的次数</p>\n</dd>\n<dt class=\"hdlist1\"><code>key</code></dt>\n<dd>\n<p>键</p>\n</dd>\n<dt class=\"hdlist1\"><code>flags</code></dt>\n<dd>\n<p>该键值对的标志位。 客户端可以选择使用标识位\n来表示应用业务中的一些信息</p>\n</dd>\n<dt class=\"hdlist1\"><code>value</code></dt>\n<dd>\n<p>值</p>\n</dd>\n<dt class=\"hdlist1\"><code>session</code></dt>\n<dd>\n<p>拥有锁的会话</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>更新索引可以用于阻塞查询：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">BlockingQueryOptions opts = <span class=\"hljs-keyword\">new</span> BlockingQueryOptions()\n  .setIndex(modifyIndex)\n  .setWait(<span class=\"hljs-string\">&quot;1m&quot;</span>);\n\nconsulClient.getValueWithOptions(<span class=\"hljs-string\">&quot;key&quot;</span>, opts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;retrieved value: &quot;</span> + res.result().getValue());\n    System.out.println(<span class=\"hljs-string\">&quot;new modify index: &quot;</span> + res.result().getModifyIndex());\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_put_key_value_pair_to_store\"><a class=\"anchor\" href=\"#_put_key_value_pair_to_store\"></a>保存键值对</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.putValue(<span class=\"hljs-string\">&quot;key&quot;</span>, <span class=\"hljs-string\">&quot;value&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String opResult = res.result() ? <span class=\"hljs-string\">&quot;success&quot;</span> : <span class=\"hljs-string\">&quot;fail&quot;</span>;\n    System.out.println(<span class=\"hljs-string\">&quot;result of the operation: &quot;</span> + opResult);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>保存请求也可以接受参数</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">KeyValueOptions opts = <span class=\"hljs-keyword\">new</span> KeyValueOptions()\n  .setFlags(<span class=\"hljs-number\">42</span>)\n  .setCasIndex(modifyIndex)\n  .setAcquireSession(<span class=\"hljs-string\">&quot;acquireSessionID&quot;</span>)\n  .setReleaseSession(<span class=\"hljs-string\">&quot;releaseSessionID&quot;</span>);\n\nconsulClient.putValueWithOptions(<span class=\"hljs-string\">&quot;key&quot;</span>, <span class=\"hljs-string\">&quot;value&quot;</span>, opts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String opResult = res.result() ? <span class=\"hljs-string\">&quot;success&quot;</span> : <span class=\"hljs-string\">&quot;fail&quot;</span>;\n    System.out.println(<span class=\"hljs-string\">&quot;result of the operation: &quot;</span> + opResult);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>以下是 <code>PUT</code> 请求可以接收的参数：</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>flags</code></dt>\n<dd>\n<p>可以指定一个无符号数，范围是 <code>0</code> 到 <code>2<sup>64</sup>-1</code> 。\n客户端可以选择使用标识位来表示应用业务中的一些信息。</p>\n</dd>\n<dt class=\"hdlist1\"><code>casIndex</code></dt>\n<dd>\n<p>该标志位用于将 PUT 操作转为一次检查设置（Check-And-Set）操作。 如果你需要构建一个\n拥有非常复杂同步原语的操作的话这回非常有用。 如果该索引值为 <code>0</code>， Consul 只会在键不存在的情况下\n设置该键值对。 如果该索引不为 0， 该键值对只会在该索引与更新索引相匹配的时候被设置。</p>\n</dd>\n<dt class=\"hdlist1\"><code>acquireSession</code></dt>\n<dd>\n<p>该标志位用于将 PUT 操作转为一次需要获取锁的操作。 这个参数可以让\nConsul 在顶层发生领导选举。 如果锁未被获取并且会话有效，\n那么该操作会增加锁索引（LockIndex） 并设置该键值对所属的会话以更新该键的值。\n获取锁时键不一定存在。 如果锁已经被设置的会话持有， 那么锁索引\n不会增加，但是键的内容还是会更新。 这是因为该会话当前已经拥有锁，可以直接更新键的内容，\n而不用再释放锁并重新获取。</p>\n</dd>\n<dt class=\"hdlist1\"><code>releaseSession</code></dt>\n<dd>\n<p>该标志位用于将 PUT 操作转换为一次释放锁的操作。 跟 <code>acquireSession</code> 一起搭配\n使用的话会很有用，这样可以让客户端生成一个锁。 该操作不会修改锁索引，但会释放\n与该键相关联的会话。 前提是该键的锁正在被该会话持有。</p>\n</dd>\n</dl>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_transactions\"><a class=\"anchor\" href=\"#_transactions\"></a>事务</h3>\n<div class=\"paragraph\">\n<p>当连接到 Consul 的 0.7 或更高的版本时， 客户端可以使用单次原子性的事务操作\n来管理对多个键的更新和查询。 事务操作目前只支持键值对， 其他类型的\n事务操作可能会在以后的版本中支持。\n(参见 <a href=\"https://www.consul.io/docs/agent/http/kv.html#txn\">文档</a>).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">TxnRequest request = <span class=\"hljs-keyword\">new</span> TxnRequest()\n  .addOperation(<span class=\"hljs-keyword\">new</span> TxnKVOperation().setKey(<span class=\"hljs-string\">&quot;key1&quot;</span>).setValue(<span class=\"hljs-string\">&quot;value1&quot;</span>).setType(TxnKVVerb.SET))\n  .addOperation(<span class=\"hljs-keyword\">new</span> TxnKVOperation().setKey(<span class=\"hljs-string\">&quot;key2&quot;</span>).setValue(<span class=\"hljs-string\">&quot;value2&quot;</span>).setType(TxnKVVerb.SET));\n\nconsulClient.transaction(request, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;succeeded results: &quot;</span> + res.result().getResults().size());\n    System.out.println(<span class=\"hljs-string\">&quot;errors: &quot;</span> + res.result().getErrors().size());\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_delete_key_value_pair\"><a class=\"anchor\" href=\"#_delete_key_value_pair\"></a>删除键值对</h3>\n<div class=\"paragraph\">\n<p>最后， Consul 允许你从存储中删除键值对：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.deleteValue(<span class=\"hljs-string\">&quot;key&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;complete&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>&#8230;&#8203;或者删除所有符合该前缀的键值对</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.deleteValues(<span class=\"hljs-string\">&quot;prefix&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;complete&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_services\"><a class=\"anchor\" href=\"#_services\"></a>服务</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>服务发现的主要目的之一是提供可用的服务清单。\n为了实现该目标， agent 提供了一个简单的服务声明格式以便说明当前服务是否可用\n并将它与健康检查潜在地关联起来。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_registering\"><a class=\"anchor\" href=\"#_service_registering\"></a>服务注册</h3>\n<div class=\"paragraph\">\n<p>服务的声明格式必须包含一个 <code>name</code> ，还可以选择设置 <code>id</code>， <code>tags</code>， <code>address</code>， <code>port</code>， 和 <code>checks</code> 等属性</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ServiceOptions opts = <span class=\"hljs-keyword\">new</span> ServiceOptions()\n  .setName(<span class=\"hljs-string\">&quot;serviceName&quot;</span>)\n  .setId(<span class=\"hljs-string\">&quot;serviceId&quot;</span>)\n  .setTags(Arrays.asList(<span class=\"hljs-string\">&quot;tag1&quot;</span>, <span class=\"hljs-string\">&quot;tag2&quot;</span>))\n  .setCheckOptions(<span class=\"hljs-keyword\">new</span> CheckOptions().setTtl(<span class=\"hljs-string\">&quot;10s&quot;</span>))\n  .setAddress(<span class=\"hljs-string\">&quot;10.0.0.1&quot;</span>)\n  .setPort(<span class=\"hljs-number\">8048</span>);</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>name</code></dt>\n<dd>\n<p>服务的名称</p>\n</dd>\n<dt class=\"hdlist1\"><code>id</code></dt>\n<dd>\n<p>如果没有设置 <code>name</code> 则会使用 <code>id</code> 替代。 节点的每个服务都需要使用唯一的 ID，\n如果 <code>name</code> 发生了冲突，那么会使用 <code>id</code> 替换。</p>\n</dd>\n<dt class=\"hdlist1\"><code>tags</code></dt>\n<dd>\n<p>一组数据，对 Consul 来说没有意义，但是用于区分服务是不是主要节点或是次要节点\n不同的版本，或者服务的其他不同等级标记。</p>\n</dd>\n<dt class=\"hdlist1\"><code>address</code></dt>\n<dd>\n<p>用于区分服务的 IP 地址。 默认情况下，使用 agent 的地址，\n不需要手动设置</p>\n</dd>\n<dt class=\"hdlist1\"><code>port</code></dt>\n<dd>\n<p>也是用于简要配置面向服务的结构； 这样，\n通过配置的地址和端口可以发现一个服务</p>\n</dd>\n<dt class=\"hdlist1\"><code>checks</code></dt>\n<dd>\n<p>关联的健康检查</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>这些设置用于将服务注册到清单中：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.registerService(opts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Service successfully registered&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_service_discovery\"><a class=\"anchor\" href=\"#_service_discovery\"></a>服务发现</h3>\n<div class=\"paragraph\">\n<p>Consul 客户端可以当前可以提供服务的节点列表：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.catalogServiceNodes(<span class=\"hljs-string\">&quot;serviceName&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;found &quot;</span> + res.result().getList().size() + <span class=\"hljs-string\">&quot; services&quot;</span>);\n    System.out.println(<span class=\"hljs-string\">&quot;consul state index: &quot;</span> + res.result().getIndex());\n    <span class=\"hljs-keyword\">for</span> (Service service : res.result().getList()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Service node: &quot;</span> + service.getNode());\n      System.out.println(<span class=\"hljs-string\">&quot;Service address: &quot;</span> + service.getAddress());\n      System.out.println(<span class=\"hljs-string\">&quot;Service port: &quot;</span> + service.getPort());\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>获取节点列表时还可以同时获取相关联的健康检查的状态。\n可以使用健康检查的状态过滤结果。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.healthServiceNodes(<span class=\"hljs-string\">&quot;serviceName&quot;</span>, passingOnly, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;found &quot;</span> + res.result().getList().size() + <span class=\"hljs-string\">&quot; services&quot;</span>);\n    System.out.println(<span class=\"hljs-string\">&quot;consul state index: &quot;</span> + res.result().getIndex());\n    <span class=\"hljs-keyword\">for</span> (ServiceEntry entry : res.result().getList()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Service node: &quot;</span> + entry.getNode());\n      System.out.println(<span class=\"hljs-string\">&quot;Service address: &quot;</span> + entry.getService().getAddress());\n      System.out.println(<span class=\"hljs-string\">&quot;Service port: &quot;</span> + entry.getService().getPort());\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>查询服务时还可以设置以下参数：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">ServiceQueryOptions queryOpts = <span class=\"hljs-keyword\">new</span> ServiceQueryOptions()\n  .setTag(<span class=\"hljs-string\">&quot;tag1&quot;</span>)\n  .setNear(<span class=\"hljs-string\">&quot;_agent&quot;</span>)\n  .setBlockingOptions(<span class=\"hljs-keyword\">new</span> BlockingQueryOptions().setIndex(lastIndex));</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>tag</code></dt>\n<dd>\n<p>默认情况下，会返回所有匹配服务的节点。\n你可以指定 <code>tag</code> 查询参数以根据服务的标签过滤返回结果</p>\n</dd>\n<dt class=\"hdlist1\"><code>near</code></dt>\n<dd>\n<p>添加可选的 <code>near</code> 参数为一个节点名，那么返回结果会根据\n到该节点的 rtt（round trip time，即往返时间）升序排序。 如果设置 <code>near</code>=<code>_agent</code> 那么会使用当前节点作为排序的依据。</p>\n</dd>\n<dt class=\"hdlist1\"><code>blockingOptions</code></dt>\n<dd>\n<p>阻塞查询参数</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>请求如下所示：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.healthServiceNodesWithOptions(<span class=\"hljs-string\">&quot;serviceName&quot;</span>, passingOnly, queryOpts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;found &quot;</span> + res.result().getList().size() + <span class=\"hljs-string\">&quot; services&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_deregister_service\"><a class=\"anchor\" href=\"#_deregister_service\"></a>取消注册服务</h3>\n<div class=\"paragraph\">\n<p>服务可以通过它的 ID 取消注册：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.deregisterService(<span class=\"hljs-string\">&quot;serviceId&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Service successfully deregistered&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_health_checks\"><a class=\"anchor\" href=\"#_health_checks\"></a>健康检查</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>agent 的主要角色之一就是系统层面和应用层面上的健康检查管理。\n如果健康检查与服务关联，那么该健康检查被认为是应用层面上的。\n反之，则健康检查监控的是整个节点的健康状态。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">CheckOptions opts = <span class=\"hljs-keyword\">new</span> CheckOptions()\n  .setTcp(<span class=\"hljs-string\">&quot;localhost:4848&quot;</span>)\n  .setInterval(<span class=\"hljs-string\">&quot;1s&quot;</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>以下是 Consul 客户端支持的健康检查选项：</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>id</code></dt>\n<dd>\n<p>健康检查 ID</p>\n</dd>\n<dt class=\"hdlist1\"><code>name</code></dt>\n<dd>\n<p>健康检查名称</p>\n</dd>\n<dt class=\"hdlist1\"><code>script</code></dt>\n<dd>\n<p>健康检查脚本的路径，同时你应该设置检查的间隔</p>\n</dd>\n<dt class=\"hdlist1\"><code>http</code></dt>\n<dd>\n<p>健康检查的 HTTP 地址，同时你应该设置检查的间隔</p>\n</dd>\n<dt class=\"hdlist1\"><code>ttl</code></dt>\n<dd>\n<p>健康检查的 ttl（time to live，即生存时间）</p>\n</dd>\n<dt class=\"hdlist1\"><code>tcp</code></dt>\n<dd>\n<p>健康检查的 tcp 地址，同时你应该设置检查的间隔</p>\n</dd>\n<dt class=\"hdlist1\"><code>interval</code></dt>\n<dd>\n<p>健康检查的时间间隔，使用 Go 语言的时间格式，是一个十进制的数组字符串，\n可以携带小数和单位后缀，例如 \"300ms\"， \"-1.5h\" 或 \"2h45m\"\n有效的时间单位是 \"ns\"， \"us\" （或 \"µs\"）， \"ms\"， \"s\"， \"m\"， \"h\"</p>\n</dd>\n<dt class=\"hdlist1\"><code>notes</code></dt>\n<dd>\n<p>健康检查的备注</p>\n</dd>\n<dt class=\"hdlist1\"><code>serviceId</code></dt>\n<dd>\n<p>服务的 ID，用于将当前注册的健康检查与 agent 提供的已存在的服务相关联</p>\n</dd>\n<dt class=\"hdlist1\"><code>deregisterAfter</code></dt>\n<dd>\n<p>取消注册超时时间。 该设置是可选的， 它的时间格式与 Interval 和 TTL 相同。\n如果健康检查与一个服务相关联并且服务的状态处于不可用的时间超过该值，\n那么该服务 (以及所有该服务相关联的服务) 将会自动取消注册\n该值最小为 1 分钟， 并且用于解除服务的进程每 30 秒运行一次。\n因此实际运用中，Consul 可能会花费比该设置长一点的时间将服务取消注册。\n该超时时间应该配置得远大于该服务\n重启或恢复所需要得时间。</p>\n</dd>\n<dt class=\"hdlist1\"><code>status</code></dt>\n<dd>\n<p>健康检查的初始状态值</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p><code>Name</code> 字段是必须的，而 <code>Script</code>， <code>HTTP</code>， <code>TCP</code> 或 <code>TTL</code> 只需一个就可以。 <code>Script</code>， <code>TCP</code> 和 <code>HTTP</code>\n需要设置 <code>Interval</code> 选项。 如果没有提供 <code>ID</code> ， 会用 <code>Name</code> 的值替代。\n每个节点上不能有重复的 ID， 因此设置一个 ID 是很有必要的。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.registerCheck(opts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;check successfully registered&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_events\"><a class=\"anchor\" href=\"#_events\"></a>事件</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Consul 提供了事件机制以便让用户触发自定义的事件给整个数据中心（datacenter）。\n这些事件对 Consul 是没有特殊意义的， 但是它们可以用于构建自动发布的脚本系统，\n重启服务，或处理其他一些编排好的动作。</p>\n</div>\n<div class=\"paragraph\">\n<p>发送用户事件时只需填写事件名称：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.fireEvent(<span class=\"hljs-string\">&quot;eventName&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Event sent&quot;</span>);\n    System.out.println(<span class=\"hljs-string\">&quot;id: &quot;</span> + res.result().getId());\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>也可以携带一些额外的参数</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>node</code></dt>\n<dd>\n<p>一个正则表达式，用于过滤需要接收事件的节点</p>\n</dd>\n<dt class=\"hdlist1\"><code>service</code></dt>\n<dd>\n<p>一个正则表达式，用于过滤需要接收事件的服务</p>\n</dd>\n<dt class=\"hdlist1\"><code>tag</code></dt>\n<dd>\n<p>一个正则表达式，用于根据标签过滤</p>\n</dd>\n<dt class=\"hdlist1\"><code>payload</code></dt>\n<dd>\n<p>事件可以拥有一个消息体\n对 Consul 来说消息体的内容也是透明的，它会成为事件的内容。</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">EventOptions opts = <span class=\"hljs-keyword\">new</span> EventOptions()\n  .setTag(<span class=\"hljs-string\">&quot;tag&quot;</span>)\n  .setPayload(<span class=\"hljs-string\">&quot;message&quot;</span>);\n\nconsulClient.fireEventWithOptions(<span class=\"hljs-string\">&quot;eventName&quot;</span>, opts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Event sent&quot;</span>);\n    System.out.println(<span class=\"hljs-string\">&quot;id: &quot;</span> + res.result().getId());\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Consul 客户端支持查询 agent 最近收到的事件。 Consul 的事件使用\ngossip 协议广播， 因此事件之间没有顺序关系，也并不保证送达。 Agent 只会缓存\n最近的事件。 目前的缓存大小是 256， 但该值在未来也可能会发生变化。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.listEvents(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Consul index: &quot;</span> + res.result().getIndex());\n    <span class=\"hljs-keyword\">for</span>(Event event: res.result().getList()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Event id: &quot;</span> + event.getId());\n      System.out.println(<span class=\"hljs-string\">&quot;Event name: &quot;</span> + event.getName());\n      System.out.println(<span class=\"hljs-string\">&quot;Event payload: &quot;</span> + event.getPayload());\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Consul 的索引也可以用于预备查询请求：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">EventListOptions opts = <span class=\"hljs-keyword\">new</span> EventListOptions()\n  .setName(<span class=\"hljs-string\">&quot;eventName&quot;</span>)\n  .setBlockingOptions(<span class=\"hljs-keyword\">new</span> BlockingQueryOptions().setIndex(lastIndex));\n\nconsulClient.listEventsWithOptions(opts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Consul index: &quot;</span> + res.result().getIndex());\n    <span class=\"hljs-keyword\">for</span>(Event event: res.result().getList()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Event id: &quot;</span> + event.getId());\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_sessions\"><a class=\"anchor\" href=\"#_sessions\"></a>会话</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Consul 提供了会话机制，可以用于构建分布式锁。\n会话表现为一个中间层，绑定了节点，健康检查和键值对存储的资源。\n当会话创建时， 需要提供节点名称，健康检查列表，一个动作，TTL，和\n一个延迟锁。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SessionOptions opts = <span class=\"hljs-keyword\">new</span> SessionOptions()\n  .setNode(<span class=\"hljs-string\">&quot;nodeId&quot;</span>)\n  .setBehavior(SessionBehavior.RELEASE);</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>lockDelay</code></dt>\n<dd>\n<p>是一个表示时间的字符串，使用 's' 作为后缀，代表以秒为单位。默认的值是 '15s'</p>\n</dd>\n<dt class=\"hdlist1\"><code>name</code></dt>\n<dd>\n<p>用于给会话设置一个有意义的易于理解的名称</p>\n</dd>\n<dt class=\"hdlist1\"><code>node</code></dt>\n<dd>\n<p>如果要设置的话，必须是一个已经注册的节点。 默认情况下， 会使用当前 agent 的节点</p>\n</dd>\n<dt class=\"hdlist1\"><code>checks</code></dt>\n<dd>\n<p>用于提供相关联的健康检查的列表。 这里强烈建议如果你设置了该参数，\n健康检查列表中需要包含默认的 <code>serfHealth</code>。</p>\n</dd>\n<dt class=\"hdlist1\"><code>behavior</code></dt>\n<dd>\n<p>可以被设置为 <code>release</code> 或 <code>delete</code>。 该设置控制会话到期时的行为。\n默认情况下设置为 <code>release</code>， 这样该会话占有的锁会被释放。 如果将其改为 <code>delete</code> 那么\n该会话占有的锁会被删除。如果你要创建临时的键值对存储那么使用 <code>delete</code> 会很有用</p>\n</dd>\n<dt class=\"hdlist1\"><code>ttl</code></dt>\n<dd>\n<p>一个时间字符串， 格式与 <code>LockDelay</code> 一样，也使用 s 作为后缀。 该设置需要\n在 10s 和 86400s 之间。 如果提供该设置，那么如果会话在 TTL 时间到期前仍没有刷新的话会失效。</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>更多信息请参考 <a href=\"https://www.consul.io/docs/internals/sessions.html\">Consul Sessions internals</a></p>\n</div>\n<div class=\"paragraph\">\n<p>新创建的会话会拥有一个命名 ID， 可以用于区分不同的会话。\n这个 ID 可以和键值对一起使用以尝试获取锁，这个锁用通知机制实现了互斥。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.createSessionWithOptions(opts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Session successfully created&quot;</span>);\n    System.out.println(<span class=\"hljs-string\">&quot;id: &quot;</span> + res.result());\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>你也可以销毁会话</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.destroySession(sessionId, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Session successfully destroyed&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>获取属于某个节点的会话列表</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.listNodeSessions(<span class=\"hljs-string\">&quot;nodeId&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-keyword\">for</span>(Session session: res.result().getList()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Session id: &quot;</span> + session.getId());\n      System.out.println(<span class=\"hljs-string\">&quot;Session node: &quot;</span> + session.getNode());\n      System.out.println(<span class=\"hljs-string\">&quot;Session create index: &quot;</span> + session.getCreateIndex());\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>所有读取会话的接口支持阻塞查询和全一致模式。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">BlockingQueryOptions blockingOpts = <span class=\"hljs-keyword\">new</span> BlockingQueryOptions()\n  .setIndex(lastIndex);\n\nconsulClient.listSessionsWithOptions(blockingOpts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Found &quot;</span> + res.result().getList().size() + <span class=\"hljs-string\">&quot; sessions&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_nodes_in_datacenter\"><a class=\"anchor\" href=\"#_nodes_in_datacenter\"></a>数据中心下的节点</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.catalogNodes(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;found &quot;</span> + res.result().getList().size() + <span class=\"hljs-string\">&quot; nodes&quot;</span>);\n    System.out.println(<span class=\"hljs-string\">&quot;consul state index &quot;</span> + res.result().getIndex());\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>该接口支持阻塞查询，并根据与指定节点的距离排序</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">NodeQueryOptions opts = <span class=\"hljs-keyword\">new</span> NodeQueryOptions()\n  .setNear(<span class=\"hljs-string\">&quot;_agent&quot;</span>)\n  .setBlockingOptions(<span class=\"hljs-keyword\">new</span> BlockingQueryOptions().setIndex(lastIndex));\n\nconsulClient.catalogNodesWithOptions(opts, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;found &quot;</span> + res.result().getList().size() + <span class=\"hljs-string\">&quot; nodes&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_prepared_queries\"><a class=\"anchor\" href=\"#_prepared_queries\"></a>预备查询（Prepared Query）</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>以下接口用于创建，更新，销毁和执行预备查询。\n预备查询可以让你注册一个复杂的服务查询并在之后通过该预备查询的 ID 或名字执行，\n并获取可以提供服务的健康节点的集合。 当与 Consul 的 DNS 接口一起\n使用时会很有帮助，因为这样可以使用更复杂的查询，而不是被 DNS 接口\n的查询接口要求所限制。</p>\n</div>\n<div class=\"paragraph\">\n<p>创建一条阻塞查询语句有很多参数\n所有的细节请参考 <a href=\"https://www.consul.io/api/query.html\">文档</a></p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>dc</code> </dt>\n<dd>\n<p>设置要查询的数据中心的名称。 默认情况下该参数为被查询的 agent 所属的数据中心。 它会作为查询参数一部分存在于 URL 中</p>\n</dd>\n<dt class=\"hdlist1\"><code>name</code> </dt>\n<dd>\n<p>一个可选的昵称， 你可以使用该昵称而不是 ID 来指定要使用的预备查询。</p>\n</dd>\n<dt class=\"hdlist1\"><code>session</code> </dt>\n<dd>\n<p>指定一个现有会话的 ID，这样如果该会话过期后，对应的预备查询语句也会被删除，否则你需要手动删除不再使用的预备查询语句。</p>\n</dd>\n<dt class=\"hdlist1\"><code>token</code> </dt>\n<dd>\n<p>指定一个 ACL 签名，每次执行查询都会使用该签名。 预备查询在执行时可以没有 ACL 签名， 因此你需要谨慎使用。 签名本身只对管理签名的客户端可见。 如果签名没有设置或为空字符串，那么会使用客户端的 ACL 签名来决定是否有权限来查询对应服务。 如果客户端无法提供 ACL 签名， 那么会使用一个匿名签名。</p>\n</dd>\n<dt class=\"hdlist1\"><code>service</code> </dt>\n<dd>\n<p>指定要查询的服务名称，这个参数是必填的。</p>\n</dd>\n<dt class=\"hdlist1\"><code>failover</code> </dt>\n<dd>\n<p>该参数包括两个字段，都是可选的。 该参数用于指定执行查询时如果本地的数据中心没有处于健康状态下的服务时的行为。通过简单的配置你可以使用其他数据中心上的节点。</p>\n</dd>\n<dt class=\"hdlist1\"><code>nearestN</code> </dt>\n<dd>\n<p>该选项用于设置预备请求会被转发至其余最近的 NearestN 个数据中心。 使用 WAN gossip pool 中数据中心之间的网络 rtt（round trip time，即往返时间）构成的网路坐标来判断距离。 远程的数据中心上的服务器处理请求的 rtt 的中位数会作为判断权重的依据。</p>\n</dd>\n<dt class=\"hdlist1\"><code>datacenters</code> </dt>\n<dd>\n<p>指定要转发的远程数据中心列表。 如果本地没有健康节点可用的话，会转发请求到这些数据中心上。 Consul 会按照列表中的顺序查询数据中心。 如果该选项与 NearestN 一起使用， 那么会首先依据 NearestN 设置的规则， 其次才是 Datacenters 配置的规则。 在失效转移请求的过程中一个数据中心只会使用一次， 即使它都满足 NearestN 和 Datacenters 配置的条件。</p>\n</dd>\n<dt class=\"hdlist1\"><code>onlyPassing</code> </dt>\n<dd>\n<p>指定该查询的健康检查状态的条件。 如果设置为 false， 那么即使服务处于警告状态也会返回。 如果设置为 true， 则只会返回健康检查成功的服务。</p>\n</dd>\n<dt class=\"hdlist1\"><code>tags</code> </dt>\n<dd>\n<p>设置服务标签列表， 查询结果会根据参数列表过滤。 如果设置了该参数，那么只有服务拥有列表中所有的标签才会满足条件， 并且不包含禁止标签（前缀带有 ! 的为禁止标签）。</p>\n</dd>\n<dt class=\"hdlist1\"><code>nodeMeta</code> </dt>\n<dd>\n<p>设置一个自定义的用户键值对列表，可以用于查询节点的元数据过滤返回结果。</p>\n</dd>\n<dt class=\"hdlist1\"><code>dnsTtl</code> </dt>\n<dd>\n<p>如果查询结果是通过 DNS 服务的话，设置 TTL 的范围。 如果提供了该设置， 那么该设置相比其他设置项是最优先的。</p>\n</dd>\n<dt class=\"hdlist1\"><code>templateType</code> </dt>\n<dd>\n<p>查询类型，用于 <code>名称前缀匹配</code> 。 这意味着任何查询，如果它的名称的前缀都与该字段匹配，那么则属于该模板。在以下示例中，任何对 geo-db 的查询都与该查询相匹配。 查询模板使用最长前缀匹配，因此可以使用高级模板，这些高级模板为了一些服务被重写。 静态查询会被首先解析，因此也可以重写查询模板。</p>\n</dd>\n<dt class=\"hdlist1\"><code>templateRegexp</code> </dt>\n<dd>\n<p>一个可选的正则表达式，用于从整个名称字段中匹配提取对应的变量。 如果选择了该模板，在以下示例中正则表达式提取了 \"-\" 符号后的第一个变量作为数据库的名称而之后的变量均作为标签数据。 参考 RE2 文档以获取正则表达式的更多信息。</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">PreparedQueryDefinition def = <span class=\"hljs-keyword\">new</span> PreparedQueryDefinition()\n  .setName(<span class=\"hljs-string\">&quot;Query name&quot;</span>)\n  .setService(<span class=\"hljs-string\">&quot;service-${match(1)}-${match(2)}&quot;</span>)\n  .setDcs(Arrays.asList(<span class=\"hljs-string\">&quot;dc1&quot;</span>, <span class=\"hljs-string\">&quot;dc42&quot;</span>))\n  .setTemplateType(<span class=\"hljs-string\">&quot;name_prefix_match&quot;</span>)\n  .setTemplateRegexp(<span class=\"hljs-string\">&quot;^find_(.+?)_(.+?)$&quot;</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>如果预备查询被成功创建，那么会返回它的 ID</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.createPreparedQuery(def, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    String queryId = res.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Query created: &quot;</span> + queryId);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>通过指定预备查询的 ID，可以执行该查询命令</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.executePreparedQuery(id, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    PreparedQueryExecuteResponse response = res.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Found &quot;</span> + response.getNodes().size() + <span class=\"hljs-string\">&quot; nodes&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者使用正则匹配来指定要执行的预备查询</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.executePreparedQuery(<span class=\"hljs-string\">&quot;find_1_2&quot;</span>, res -&gt; {\n  <span class=\"hljs-comment\">// matches template regexp &quot;^find_(.+?)_(.+?)$&quot;</span>\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    PreparedQueryExecuteResponse response = res.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Found &quot;</span> + response.getNodes().size() + <span class=\"hljs-string\">&quot; nodes&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>最后， <code>ConsulClient</code> 允许你修改，获取和删除预备查询</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consulClient.deletePreparedQuery(query, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Query deleted&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_watches\"><a class=\"anchor\" href=\"#_watches\"></a>监视</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>监视是一种指定一个数据(例如节点列表， 键值对数据， 健康检查)的视图的方法，\n它会监视数据的更新。 当发现数据更新后，一个参数为 <code>WatchResult</code> 的 <code>Handler</code> 会被调用。\n以下示例中， 你可以监视健康检查的状态并当状态不正常时收到通知。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Watch.key(<span class=\"hljs-string\">&quot;foo/bar&quot;</span>, vertx)\n  .setHandler(res -&gt; {\n    <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n      System.out.println(<span class=\"hljs-string\">&quot;value: &quot;</span> + res.nextResult().getValue());\n    } <span class=\"hljs-keyword\">else</span> {\n      res.cause().printStackTrace();\n    }\n  })\n  .start();</code></pre>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}