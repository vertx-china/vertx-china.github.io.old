{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Automatic redeployment in Eclipse IDE","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x 3.1 has (re-)introduced the redeploy feature. This blog post explains how to use this feature in the Eclipse IDE. However, you can easily adapt the content to your IDE."},"date":"2015-12-20","slug":"automatic-redeployment-in-eclipse-ide","readingTime":{"text":"3 min read","minutes":2.035,"time":122100.00000000001,"words":407},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x 3.1 has (re-)in\\xADtro\\xADduced the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADde\\xADploy\"), \" fea\\xADture. This blog post ex\\xADplains how to use this fea\\xADture in the Eclipse IDE. How\\xADever, you can eas\\xADily adapt the con\\xADtent to your IDE.\"), mdx(\"h2\", {\n    \"id\": \"how-does-redeploy-work\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#how-does-redeploy-work\"\n  })), \"How does redeploy work\"), mdx(\"p\", null, \"How is im\\xADple\\xADmented the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redeploy\"), \" is not as you may ex\\xADpect. First, the re\\xADde\\xADploy does not rely on a build tool, but is in\\xADte\\xADgrated in vert.x. How\\xADever you can plug your build tools with the re\\xADde\\xADploy fea\\xADture. This fea\\xADture is of\\xADfered by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.core.Launcher\"), \" class. The re\\xADde\\xADploy\\xADment process is ac\\xADtu\\xADally very sim\\xADple:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the ap\\xADpli\\xADca\\xADtion is launched in \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"re\\xADde\\xADploy mode\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it lis\\xADtens for file changes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"when a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"match\\xADing\"), \" file is changed, it stops the ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it ex\\xADe\\xADcutes the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"on-redeploy\"), \" ac\\xADtions if any\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it restarts the ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"back to (2)\")), mdx(\"p\", null, \"Ini\\xADtially the ap\\xADpli\\xADca\\xADtion is launched in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADde\\xADploy mode\"), \". The ap\\xADpli\\xADca\\xADtion is ac\\xADtu\\xADally launched in back\\xADground, in a sep\\xADa\\xADrated process. Vert.x lis\\xADtens for file changes. You give it a set of (Ant-\\u200Bstyle) pat\\xADterns and every time a match\\xADing file changes, Vert.x stops the whole ap\\xADpli\\xADca\\xADtion and restarts it. Op\\xADtion\\xADally you can con\\xADfig\\xADure a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on-redeploy\"), \" ac\\xADtion to plug in your build tools.\"), mdx(\"p\", null, \"To in\\xADte\\xADgrate this process in Eclipse (or in your IDE), you just need to con\\xADfig\\xADure the set of lis\\xADtened files, and let the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Launcher\"), \" class starts and stops your ap\\xADpli\\xADca\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"redeploy-in-eclipse\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#redeploy-in-eclipse\"\n  })), \"Redeploy in Eclipse\"), mdx(\"p\", null, \"The fol\\xADlow\\xADing screen\\xADcast ex\\xADplains how you con\\xADfig\\xADure a vert.x ap\\xADpli\\xADca\\xADtion to be run in Eclipse and how to con\\xADfig\\xADure the re\\xADde\\xADploy:\"), mdx(\"div\", {\n    className: \"youtube-embed\"\n  }, mdx(\"iframe\", {\n    src: \"https://www.youtube.com/embed/iyZwAzEVX-o\",\n    frameBorder: \"0\",\n    allowFullScreen: true\n  })), mdx(\"p\", null, \"To sum\\xADma\\xADrize the last con\\xADfig\\xADu\\xADra\\xADtion:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it\\u2019s a Java ap\\xADpli\\xADca\\xADtion con\\xADfig\\xADu\\xADra\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it uses \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"io.vertx.core.Launcher\"), \" as main class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Pro\\xADgram ar\\xADgu\\xADments\"), \" (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ar\\xADgu\\xADments\"), \" tab), write: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"run org.acme.verticle.MyMainVerticle --redeploy=\\\"src/**/*.java\\\" --launcher-class=io.vertx.core.Launcher\"))), mdx(\"h2\", {\n    \"id\": \"redeploy-with-your-own-main-class\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#redeploy-with-your-own-main-class\"\n  })), \"Redeploy with your own Main class\"), mdx(\"p\", null, \"Let\\u2019s now imag\\xADine that you have your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class, start\\xADing your ap\\xADpli\\xADca\\xADtion. For in\\xADstance, it can be some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" org.acme.vertx;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.Vertx;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Main\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"main\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String[] args)\"), \" \"), \"{\\n        Vertx vertx = Vertx.vertx();\\n        vertx.deployVerticle(MyMainVerticle.class.getName());\\n    }\\n\\n}\\n\")), mdx(\"p\", null, \"The re\\xADde\\xADploy fea\\xADture from vert.x lets you use your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Cre\\xADate an\\xADother \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Run\"), \" con\\xADfig\\xADu\\xADra\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Set the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Main-Class\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"io.vertx.core.Launcher\"), \" (yes, the one from vert.x not yours)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the ap\\xADpli\\xADca\\xADtion pa\\xADra\\xADme\\xADter add: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"run --redeploy=\\\"src/**/*.java\\\" --launcher-class=org.acme.vertx.Main\"))), mdx(\"p\", null, \"With this con\\xADfig\\xADu\\xADra\\xADtion, the ap\\xADpli\\xADca\\xADtion is launched in back\\xADground using your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class, and will restart the ap\\xADpli\\xADca\\xADtion every time you change your source code (you can even change the source code of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class).\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x 3.1 has (re-)in­tro­duced the <em>re­de­ploy</em> fea­ture. This blog post ex­plains how to use this fea­ture in the Eclipse IDE. How­ever, you can eas­ily adapt the con­tent to your IDE.</p><h2 id=\"how-does-redeploy-work\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#how-does-redeploy-work\"></a>How does redeploy work</h2><p>How is im­ple­mented the <code>redeploy</code> is not as you may ex­pect. First, the re­de­ploy does not rely on a build tool, but is in­te­grated in vert.x. How­ever you can plug your build tools with the re­de­ploy fea­ture. This fea­ture is of­fered by the <code>io.vertx.core.Launcher</code> class. The re­de­ploy­ment process is ac­tu­ally very sim­ple:</p><ol><li>the ap­pli­ca­tion is launched in <em>re­de­ploy mode</em>.</li><li>it lis­tens for file changes</li><li>when a <em>match­ing</em> file is changed, it stops the ap­pli­ca­tion</li><li>it ex­e­cutes the <code>on-redeploy</code> ac­tions if any</li><li>it restarts the ap­pli­ca­tion</li><li>back to (2)</li></ol><p>Ini­tially the ap­pli­ca­tion is launched in <em>re­de­ploy mode</em>. The ap­pli­ca­tion is ac­tu­ally launched in back­ground, in a sep­a­rated process. Vert.x lis­tens for file changes. You give it a set of (Ant-​style) pat­terns and every time a match­ing file changes, Vert.x stops the whole ap­pli­ca­tion and restarts it. Op­tion­ally you can con­fig­ure a <code>on-redeploy</code> ac­tion to plug in your build tools.</p><p>To in­te­grate this process in Eclipse (or in your IDE), you just need to con­fig­ure the set of lis­tened files, and let the <code>Launcher</code> class starts and stops your ap­pli­ca­tion.</p><h2 id=\"redeploy-in-eclipse\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#redeploy-in-eclipse\"></a>Redeploy in Eclipse</h2><p>The fol­low­ing screen­cast ex­plains how you con­fig­ure a vert.x ap­pli­ca­tion to be run in Eclipse and how to con­fig­ure the re­de­ploy:</p><div class=\"youtube-embed\"><iframe src=\"https://www.youtube.com/embed/iyZwAzEVX-o\" frameBorder=\"0\" allowfullscreen=\"\"></iframe></div><p>To sum­ma­rize the last con­fig­u­ra­tion:</p><ul><li>it’s a Java ap­pli­ca­tion con­fig­u­ra­tion</li><li>it uses <code>io.vertx.core.Launcher</code> as main class</li><li>In the <em>Pro­gram ar­gu­ments</em> (<em>Ar­gu­ments</em> tab), write: <code>run org.acme.verticle.MyMainVerticle --redeploy=&quot;src/**/*.java&quot; --launcher-class=io.vertx.core.Launcher</code></li></ul><h2 id=\"redeploy-with-your-own-main-class\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#redeploy-with-your-own-main-class\"></a>Redeploy with your own Main class</h2><p>Let’s now imag­ine that you have your own <code>Main</code> class, start­ing your ap­pli­ca­tion. For in­stance, it can be some­thing like:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> org.acme.vertx;\n\n<span class=\"hljs-keyword\">import</span> io.vertx.core.Vertx;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Vertx vertx = Vertx.vertx();\n        vertx.deployVerticle(MyMainVerticle.class.getName());\n    }\n\n}\n</code></pre><p>The re­de­ploy fea­ture from vert.x lets you use your own <code>Main</code> class:</p><ol><li>Cre­ate an­other <code>Run</code> con­fig­u­ra­tion</li><li>Set the <code>Main-Class</code> to <code>io.vertx.core.Launcher</code> (yes, the one from vert.x not yours)</li><li>In the ap­pli­ca­tion pa­ra­me­ter add: <code>run --redeploy=&quot;src/**/*.java&quot; --launcher-class=org.acme.vertx.Main</code></li></ol><p>With this con­fig­u­ra­tion, the ap­pli­ca­tion is launched in back­ground using your own <code>Main</code> class, and will restart the ap­pli­ca­tion every time you change your source code (you can even change the source code of your <code>Main</code> class).</p>","scope":{}}},"prevPost":{"meta":{"title":"ECMAScript 6/7 on the JVM with TypeScript and Vert.x","category":"guides","authors":[{"name":"Michel Krämer","github_id":"michel-kraemer"}],"summary":"I figured it would be a good idea to give you a couple of examples how teaming\n  Vert.x and TypeScript helps you use ECMAScript 6 and 7 features on the JVM today."},"date":"2016-01-03","slug":"ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x"},"nextPost":{"meta":{"title":"Vert.x 3.2.0 is released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"We are pleased to announce the release of Vert.x 3.2.0!"},"date":"2015-12-15","slug":"vert-x-3-2-0-is-released"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Vert.x featuring Continuous Delivery with Jenkins and Ansible","category":"guides","authors":[{"name":"Ricardo Hernandez","github_id":"ricardohmon"}],"summary":"This blog entry describes an approach to adopt Continuous Delivery for Vert.x applications using Jenkins and Ansible by taking advantage of the Jenkins Job DSL and Ansible plugins."},"date":"2016-09-28","slug":"vert-x-featuring-continuous-delivery-with-jenkins-and-ansible"}]},"__N_SSG":true}