{"pageProps":{"slug":"4.0.0/vertx-mail-client/java","title":"Vert.x Mail client (SMTP client implementation)","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_creating_a_client\">Creating a client</a></li>\n<li><a href=\"#_sending_mails\">Sending mails</a></li>\n<li><a href=\"#_dkim_signature_signing_emails\">DKIM Signature Signing emails</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_caching_the_attachment_streams_used_in_dkim\">Caching the Attachment Streams used in DKIM</a></li>\n</ul>\n</li>\n<li><a href=\"#_mail_client_data_objects\">Mail-client data objects</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_mailmessage_properties\">MailMessage properties</a></li>\n<li><a href=\"#_mailattachment_properties\">MailAttachment properties</a></li>\n<li><a href=\"#_mailconfig_options\">MailConfig options</a></li>\n<li><a href=\"#_mailresult_object\">MailResult object</a></li>\n<li><a href=\"#_dkimsignoptions_object\">DKIMSignOptions object</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x Mail client (SMTP client implementation)</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x client for sending SMTP emails via a local mail server\n(e.g. postfix) or by external mail server (e.g. googlemail or aol).</p>\n</div>\n<div class=\"paragraph\">\n<p>The client supports a few additional auth methods like DIGEST-MD5 and has full\nsupport for TLS and SSL and is completely asynchronous. The client supports\nconnection pooling to keep connections open to be reused.</p>\n</div>\n<div class=\"paragraph\">\n<p>To use this project, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-mail-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-mail-client:4.0.0'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_client\"><a class=\"anchor\" href=\"#_creating_a_client\"></a>Creating a client</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can send mails by creating a client that opens SMTP connections from the local jvm.</p>\n</div>\n<div class=\"paragraph\">\n<p>The client uses a configuration object, the default config is created as empty\nobject and will connect to localhost port 25, which should be ok in a standard\nLinux environment where you have Postfix or similar mail server running on\nthe local machine. For all possible properties of the config object, see below.</p>\n</div>\n<div class=\"paragraph\">\n<p>The client can use a connection pool of the SMTP connections to get rid of the overhead of\nconnecting each time to the server, negotiating TLS and login (this function can be\nturned off by setting keepAlive = false). A client can either be shared or non-shared,\nif it is shared, the same connection pool will be used for all clients using the same identifier.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MailConfig config = <span class=\"hljs-keyword\">new</span> MailConfig();\nMailClient mailClient = MailClient\n  .createShared(vertx, config, <span class=\"hljs-string\">\"exampleclient\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The first call to MailClient.createShared will actually create the pool with the specified config.\nSubsequent calls will return a new client instance that uses the same pool, so the configuration won&#8217;t be used.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you leave out the pool identifier, a default pool will be created. Note that the clients are\nshared in the scope of a vertx instance only (so two different vertx will have different pools with the\nsame identifier).</p>\n</div>\n<div class=\"paragraph\">\n<p>The unshared client can be created the same way leaving out the identifier.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MailConfig config = <span class=\"hljs-keyword\">new</span> MailConfig();\nMailClient mailClient = MailClient.create(vertx, config);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>A more elaborate example using a mailserver that requires login via TLS</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MailConfig config = <span class=\"hljs-keyword\">new</span> MailConfig();\nconfig.setHostname(<span class=\"hljs-string\">\"mail.example.com\"</span>);\nconfig.setPort(<span class=\"hljs-number\">587</span>);\nconfig.setStarttls(StartTLSOptions.REQUIRED);\nconfig.setUsername(<span class=\"hljs-string\">\"user\"</span>);\nconfig.setPassword(<span class=\"hljs-string\">\"password\"</span>);\nMailClient mailClient = MailClient.create(vertx, config);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_sending_mails\"><a class=\"anchor\" href=\"#_sending_mails\"></a>Sending mails</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once the client object is created, you can use it to send mails. Since the\nsending of the mails works asynchronous in vert.x, the result handler will be\ncalled when the mail operation finishes. You can start many mail send operations\nin parallel, the connection pool will limit the number of concurrent operations\nso that new operations will wait in queue if no slots are available.</p>\n</div>\n<div class=\"paragraph\">\n<p>A mail message is constructed as JSON. The MailMessage object has\nproperties from, to, cc, bcc, subject, text, html etc. Depending on which values are set, the\nformat of the generated MIME message will vary. The recipient address properties\ncan either be a single address or a list of addresses.</p>\n</div>\n<div class=\"paragraph\">\n<p>The MIME encoder supports us-ascii (7bit) headers/messages and utf8 (usually\nquoted-printable) headers/messages</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MailMessage message = <span class=\"hljs-keyword\">new</span> MailMessage();\nmessage.setFrom(<span class=\"hljs-string\">\"user@example.com (Example User)\"</span>);\nmessage.setTo(<span class=\"hljs-string\">\"recipient@example.org\"</span>);\nmessage.setCc(<span class=\"hljs-string\">\"Another User &lt;another@example.net&gt;\"</span>);\nmessage.setText(<span class=\"hljs-string\">\"this is the plain message text\"</span>);\nmessage.setHtml(<span class=\"hljs-string\">\"this is html text &lt;a href=\\\"http://vertx.io\\\"&gt;vertx.io&lt;/a&gt;\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Attachments can be created by the MailAttachment object using data stored in a Buffer,\nthis supports base64 attachments.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MailAttachment attachment = MailAttachment.create();\nattachment.setContentType(<span class=\"hljs-string\">\"text/plain\"</span>);\nattachment.setData(Buffer.buffer(<span class=\"hljs-string\">\"attachment file\"</span>));\n\nmessage.setAttachment(attachment);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When using inline attachments (usually images), it is possible to reference the images within a html message\nto display html with the images included in the mail.\nImages can be referenced as &lt;img src=\"cid:contentid@domain\"&gt; in the html text, the corresponding image has Disposition:\ninline and the Content-ID header as \"&lt;contentid@domain&gt;\". Please note that RFC 2392 requires Content-ID values to be structured\nlike a Message-ID with angle brackets and a local and domain part using URL compatible encoding. None of this is not enforced\nand most mail clients supports IDs without angle brackets or without domain part, the best practice is to use the strict format.\nA valid example for a Content-ID value is \"&lt;<a href=\"mailto:filename%201.jpg@example.org\">filename%201.jpg@example.org</a>&gt;\"</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MailAttachment attachment = MailAttachment.create();\nattachment.setContentType(<span class=\"hljs-string\">\"image/jpeg\"</span>);\nattachment.setData(Buffer.buffer(<span class=\"hljs-string\">\"image data\"</span>));\nattachment.setDisposition(<span class=\"hljs-string\">\"inline\"</span>);\nattachment.setContentId(<span class=\"hljs-string\">\"&lt;image1@example.com&gt;\"</span>);\n\nmessage.setInlineAttachment(attachment);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When sending the mail, you can provide a AsyncResult&lt;MailResult&gt; handler that will be called when\nthe send operation is finished or it failed.</p>\n</div>\n<div class=\"paragraph\">\n<p>A mail is sent as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">mailClient.sendMail(message)\n  .onSuccess(System.out::println)\n  .onFailure(Throwable::printStackTrace);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_dkim_signature_signing_emails\"><a class=\"anchor\" href=\"#_dkim_signature_signing_emails\"></a>DKIM Signature Signing emails</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>It supports <a href=\"http://dkim.org\">DomainKeys Identified Mail (DKIM)</a> Signature signing to secure your emails. All you need to\ndo is to specify required configurations to sign your email.</p>\n</div>\n<div class=\"paragraph\">\n<p>A mail client with DKIM feature enabled can be created as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DKIMSignOptions dkimSignOptions = <span class=\"hljs-keyword\">new</span> DKIMSignOptions();\ndkimSignOptions.setPrivateKey(<span class=\"hljs-string\">\"PKCS8 Private Key Base64 String\"</span>);\ndkimSignOptions.setAuid(<span class=\"hljs-string\">\"identifier@example.com\"</span>);\ndkimSignOptions.setSelector(<span class=\"hljs-string\">\"selector\"</span>);\ndkimSignOptions.setSdid(<span class=\"hljs-string\">\"example.com\"</span>);\nMailConfig config = <span class=\"hljs-keyword\">new</span> MailConfig()\n  .setDKIMSignOption(dkimSignOptions)\n  .setEnableDKIM(<span class=\"hljs-keyword\">true</span>);\n\nMailClient mailClient = MailClient.createShared(vertx, config);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After the mail client is created, each <code>mailClient.sendMail</code> call will have the email signed by adding additional\n<code>DKIM-Signature</code> header.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_caching_the_attachment_streams_used_in_dkim\"><a class=\"anchor\" href=\"#_caching_the_attachment_streams_used_in_dkim\"></a>Caching the Attachment Streams used in DKIM</h3>\n<div class=\"paragraph\">\n<p>To be able to perform DKIM sign, it needs to hash the email&#8217;s body, including attachments.\nIf an attachment comes from a ReadStream, it won&#8217;t be able to go through again. So we need\nto cache the attachment data. This client provides 2 strategies to cache it.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>In memory caching</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>By default, the stream content is cached in memory so it can be sent later.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Caching in a temporary file</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>You can cache data from attachment&#8217;s Stream to a temporary file by specifying a system property:\n<code>vertx.mail.attachment.cache.file</code> to <code>true</code> for large attachments. It will try to delete the temporary file\nafter each send.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mail_client_data_objects\"><a class=\"anchor\" href=\"#_mail_client_data_objects\"></a>Mail-client data objects</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_mailmessage_properties\"><a class=\"anchor\" href=\"#_mailmessage_properties\"></a>MailMessage properties</h3>\n<div class=\"paragraph\">\n<p>Email fields are Strings using the common formats for email with or without real\nname</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>username@example.com</code></p>\n</li>\n<li>\n<p><code>username@example.com (Firstname Lastname)</code></p>\n</li>\n<li>\n<p><code>Firstname Lastname &lt;<a href=\"mailto:username@example.com\">username@example.com</a>&gt;</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The MailMessage object has the following properties</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>from</code> String representing the From address and the MAIL FROM field</p>\n</li>\n<li>\n<p><code>to</code> String or list of String representing the To addresses and the RCPT TO fields</p>\n</li>\n<li>\n<p><code>cc</code> same as to</p>\n</li>\n<li>\n<p><code>bcc</code> same as to</p>\n</li>\n<li>\n<p><code>bounceAddress</code> String representing the error address (MAIL FROM), if not set from is used</p>\n</li>\n<li>\n<p><code>text</code> String representing the text/plain part of the mail</p>\n</li>\n<li>\n<p><code>html</code> String representing the text/html part of the mail</p>\n</li>\n<li>\n<p><code>attachment</code> MailAttachment or list of MailAttachment attachments of the message</p>\n</li>\n<li>\n<p><code>inlineAttachment</code> MailAttachment or list of MailAttachment of inline attachments of the message (usually images)</p>\n</li>\n<li>\n<p><code>headers</code> MultiMap representing headers to be added in addition to the headers necessary for the MIME Message</p>\n</li>\n<li>\n<p><code>fixedHeaders</code> boolean if true, only the headers provided as headers property will be set in the generated message</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>the last two properties allow manipulating the generate messages with custom headers, e.g. providing\na message-id chosen by the calling program or setting different headers than would be generated by default. Unless you know\nwhat you are doing, this may generate invalid messages.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_mailattachment_properties\"><a class=\"anchor\" href=\"#_mailattachment_properties\"></a>MailAttachment properties</h3>\n<div class=\"paragraph\">\n<p>The MailAttachment object has the following properties</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>data</code> Buffer containing the binary data of the attachment</p>\n</li>\n<li>\n<p><code>stream</code> ReadStream that represents the source of the binary data of the attachment</p>\n</li>\n<li>\n<p><code>size</code> int describing the attachment size when using <code>stream</code> as the source of the binary data</p>\n</li>\n<li>\n<p><code>contentType</code> String of the Content-Type of the attachment (e.g. text/plain or text/plain; charset=\"UTF8\", default is application/octet-stream)</p>\n</li>\n<li>\n<p><code>description</code> String describing the attachment (this is put in the description header of the attachment), optional</p>\n</li>\n<li>\n<p><code>disposition</code> String describing the disposition of the attachment (this is either \"inline\" or \"attachment\", default is attachment)</p>\n</li>\n<li>\n<p><code>name</code> String filename of the attachment (this is put into the disposition and in the Content-Type headers of the attachment), optional</p>\n</li>\n<li>\n<p><code>contentId</code> String describing the Content-Id of the attachment (this is used to identify inline images), optional</p>\n</li>\n<li>\n<p><code>headers</code> MultiMap of headers for the attachment in addition to the default ones, optional</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_mailconfig_options\"><a class=\"anchor\" href=\"#_mailconfig_options\"></a>MailConfig options</h3>\n<div class=\"paragraph\">\n<p>The configuration has the following properties</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>hostname</code> the hostname of the smtp server to connect to (default is localhost)</p>\n</li>\n<li>\n<p><code>port</code> the port of the smtp server to connect to (default is 25)</p>\n</li>\n<li>\n<p><code>startTLS</code> StartTLSOptions either DISABLED, OPTIONAL or REQUIRED, default is OPTIONAL</p>\n</li>\n<li>\n<p><code>login</code> LoginOption either DISABLED, NONE or REQUIRED, default is NONE</p>\n</li>\n<li>\n<p><code>username</code> String of the username to be used for login (required only when LoginOption is REQUIRED)</p>\n</li>\n<li>\n<p><code>password</code> String of the password to be used for login (required only when LoginOption is REQUIRED)</p>\n</li>\n<li>\n<p><code>ssl</code> boolean whether to use ssl on connect to the mail server (default is false), set this to use a port 465 ssl connection (default is false)</p>\n</li>\n<li>\n<p><code>ehloHostname</code> String to used in EHLO and for creating the message-id, if not set, the own hostname will be used, which may not be a good choice if it doesn&#8217;t contain a FQDN or is localhost (optional)</p>\n</li>\n<li>\n<p><code>authMethods</code> String space separated list of allowed auth methods, this can be used to disallow some auth methods or define one required auth method (optional)</p>\n</li>\n<li>\n<p><code>keepAlive</code> boolean if connection pooling is enabled (default is true)</p>\n</li>\n<li>\n<p><code>maxPoolSize</code> int max number of open connections kept in the pool or to be opened at one time (regardless if pooling is enabled or not), default is 10</p>\n</li>\n<li>\n<p><code>trustAll</code> boolean whether to accept all certs from the server (default is false)</p>\n</li>\n<li>\n<p><code>keyStore</code> String the key store filename, this can be used to trust a server cert that is custom generated (optional)</p>\n</li>\n<li>\n<p><code>keyStorePassword</code> String password used to decrypt the key store (optional)</p>\n</li>\n<li>\n<p><code>allowRcptErrors</code> boolean if true, sending continues if a recipient address is not accepted and the mail will be sent if at least one address is accepted (default false)</p>\n</li>\n<li>\n<p><code>disableEsmtp</code> boolean if true, ESMTP-related commands will not be used (set if your smtp server doesn&#8217;t even give a proper error response code for the EHLO command) (default false)</p>\n</li>\n<li>\n<p><code>userAgent</code> String represents the Mail User Agent(MUA) name used to generate email boundaries for multipart emails and message-id, default is <code>vertxmail</code>.</p>\n</li>\n<li>\n<p><code>enableDKIM</code> boolean if true, the DKIM signing will be enabled if DKIM configurations are set as well, default is <code>false</code>.</p>\n</li>\n<li>\n<p><code>dkimSignOptions</code> List of <code>DKIMSignOptions</code> which are used to perform the DKIM sign.</p>\n</li>\n<li>\n<p><code>pipelining</code> enables pipelining if the SMTP server supports it. Default is <code>true</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_mailresult_object\"><a class=\"anchor\" href=\"#_mailresult_object\"></a>MailResult object</h3>\n<div class=\"paragraph\">\n<p>The MailResult object has the following members</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>messageID</code> the Message-ID of the generated mail</p>\n</li>\n<li>\n<p><code>recipients</code> the list of recipients the mail was sent to (if allowRcptErrors is true, this may be fewer than the intended recipients)</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_dkimsignoptions_object\"><a class=\"anchor\" href=\"#_dkimsignoptions_object\"></a>DKIMSignOptions object</h3>\n<div class=\"paragraph\">\n<p>The DKIMSignOptions object has the following properties</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>privateKey</code> The RSA <a href=\"https://www.ietf.org/rfc/rfc5208.txt\">PKCS#8</a> format private key used to sign the emails.</p>\n</li>\n<li>\n<p><code>privateKeyPath</code> The file path where the RSA <a href=\"https://www.ietf.org/rfc/rfc5208.txt\">PKCS#8</a> format private key is specified. Either <code>privateKey</code> or <code>privateKeyPath</code> is <strong>required</strong>.</p>\n</li>\n<li>\n<p><code>signAlgo</code> either <code>DKIMSignAlgorithm.RSA_SHA256</code>(default) or <code>DKIMSignAlgorithm.RSA_SHA1</code>. The algorithm used to do the body hashing and signature sign.</p>\n</li>\n<li>\n<p><code>signedHeaders</code> List of String that specify which email headers will be used to perform the sign. Defaults: <code>From</code>, <code>Reply-to</code>, <code>Subject</code>, <code>Date</code>, <code>To</code>, <code>Cc</code>. Note: the order matters.</p>\n</li>\n<li>\n<p><code>sdid</code> <strong>required</strong>, String, Singing Domain Identifier(SDID), normally it is the domain of the SMTP server.</p>\n</li>\n<li>\n<p><code>auid</code> optional, String, the Agent or User Identifier(AUID), default is <code>@</code> plus <code>sdid</code></p>\n</li>\n<li>\n<p><code>selector</code> <strong>required</strong>, String, the selector used to query public key.</p>\n</li>\n<li>\n<p><code>headerCanonAlgo</code> Canonicalization algorithm used for mail headers, one of <code>simple</code>(default) and <code>relaxed</code>.</p>\n</li>\n<li>\n<p><code>bodyCanonAlgo</code> Canonicalization algorithm used for mail body, one of <code>simple</code>(default) and <code>relaxed</code>.</p>\n</li>\n<li>\n<p><code>bodyLimit</code> optional, int, how long of the body used to calculate the body hash.</p>\n</li>\n<li>\n<p><code>signatureTimestamp</code> optional, boolean, if includes timestamp in the <code>DKIM-SIgnature</code> tags list. default is false</p>\n</li>\n<li>\n<p><code>expireTime</code> optional, long, expire time in seconds when the signature sign will be expired from now.</p>\n</li>\n<li>\n<p><code>copiedHeaders</code> optional, List of strings, the copied headers used in DKIM. Usually they are used for debug purpose according to the DKIM spec.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","version":"4.0.0"},"__N_SSG":true}