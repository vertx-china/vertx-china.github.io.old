{"pageProps":{"slug":"3.9.4/vertx-auth-common/ruby","title":"Vert.x Auth - Authentication and Authorisation","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_basic_concepts\">Basic concepts</a></li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_authorisation\">Authorisation</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_caching_authorities\">Caching authorities</a></li>\n<li><a href=\"#_the_user_principal\">The User Principal</a></li>\n</ul>\n</li>\n<li><a href=\"#_creating_your_own_auth_implementation\">Creating your own auth implementation</a></li>\n<li><a href=\"#_pseudo_random_number_generator\">Pseudo Random Number Generator</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_sharing_pseudo_random_number_generator\">Sharing Pseudo Random Number Generator</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x Auth - Authentication and Authorisation</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This Vert.x component provides interfaces for authentication and authorisation that can be used from\nyour Vert.x applications and can be backed by different providers.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x auth is also used by vertx-web to handle its authentication and authorisation.</p>\n</div>\n<div class=\"paragraph\">\n<p>To use this project, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-common<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-auth-common:3.9.4'</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_basic_concepts\"><a class=\"anchor\" href=\"#_basic_concepts\"></a>Basic concepts</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><em>Authentication</em> means verifying the identity of a user.</p>\n</div>\n<div class=\"paragraph\">\n<p><em>Authorisation</em> means verifying a user has an authority.</p>\n</div>\n<div class=\"paragraph\">\n<p>What the authority means is determined by the particular implementation and we don&#8217;t mandate any particular model,\ne.g. a permissions/roles model, to keep things very flexible.</p>\n</div>\n<div class=\"paragraph\">\n<p>For some implementations an authority might represent a permission, for example the authority to access all printers,\nor a specific printer. Other implementations must support roles too, and will often represent this by prefixing\nthe authority with something like <code>role:</code>, e.g. <code>role:admin</code>. Another implementation might have a completely\ndifferent model of representing authorities.</p>\n</div>\n<div class=\"paragraph\">\n<p>To find out what a particular auth provider expects, consult the documentation for that auth provider..</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To authenticate a user you use <code><a href=\"../../yardoc/VertxAuthCommon/AuthProvider.html#authenticate-instance_method\">authenticate</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The first argument is a JSON object which contains authentication information. What this actually contains depends\non the specific implementation; for a simple username/password based authentication it might contain something like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>{\n \"username\": \"tim\"\n \"password\": \"mypassword\"\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For an implementation based on JWT token or OAuth bearer tokens it might contain the token information.</p>\n</div>\n<div class=\"paragraph\">\n<p>Authentication occurs asynchronously and the result is passed to the user on the result handler that was provided in\nthe call. The async result contains an instance of <code><a href=\"../../yardoc/VertxAuthCommon/User.html\">User</a></code> which represents the authenticated\nuser and contains operations which allow the user to be authorised.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of authenticating a user using a simple username/password implementation:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">authInfo = {\n  <span class=\"hljs-string\">'username'</span> =&gt; <span class=\"hljs-string\">\"tim\"</span>,\n  <span class=\"hljs-string\">'password'</span> =&gt; <span class=\"hljs-string\">\"mypassword\"</span>\n}\n\nauthProvider.authenticate(authInfo) { <span class=\"hljs-params\">|res_err,res|</span>\n  <span class=\"hljs-keyword\">if</span> (res_err == <span class=\"hljs-literal\">nil</span>)\n\n    user = res\n\n    puts <span class=\"hljs-string\">\"User <span class=\"hljs-subst\">#{user.principal()}</span> is now authenticated\"</span>\n\n  <span class=\"hljs-keyword\">else</span>\n    res_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authorisation\"><a class=\"anchor\" href=\"#_authorisation\"></a>Authorisation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once you have an <code><a href=\"../../yardoc/VertxAuthCommon/User.html\">User</a></code> instance you can call methods on it to authorise it.</p>\n</div>\n<div class=\"paragraph\">\n<p>to check if a user has a specific authority you use <code><a href=\"../../yardoc/VertxAuthCommon/User.html#is_authorised-instance_method\">isAuthorised</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The results of all the above are provided asynchronously in the handler.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here&#8217;s an example of authorising a user:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">user.is_authorized(<span class=\"hljs-string\">\"printers:printer1234\"</span>) { <span class=\"hljs-params\">|res_err,res|</span>\n  <span class=\"hljs-keyword\">if</span> (res_err == <span class=\"hljs-literal\">nil</span>)\n\n    hasAuthority = res\n\n    <span class=\"hljs-keyword\">if</span> (hasAuthority)\n      puts <span class=\"hljs-string\">\"User has the authority\"</span>\n    <span class=\"hljs-keyword\">else</span>\n      puts <span class=\"hljs-string\">\"User does not have the authority\"</span>\n    <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">else</span>\n    res_err.print_stack_trace()\n  <span class=\"hljs-keyword\">end</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And another example of authorising in a roles based model which uses <code>role:</code> as a prefix.</p>\n</div>\n<div class=\"paragraph\">\n<p>Please note, as discussed above how the authority string is interpreted is completely determined by the underlying\nimplementation and Vert.x makes no assumptions here.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_caching_authorities\"><a class=\"anchor\" href=\"#_caching_authorities\"></a>Caching authorities</h3>\n<div class=\"paragraph\">\n<p>The user object will cache any authorities so subsequently calls to check if it has the same authorities will result\nin the underlying provider being called.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to clear the internal cache you can use <code><a href=\"../../yardoc/VertxAuthCommon/User.html#clear_cache-instance_method\">clearCache</a></code>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_the_user_principal\"><a class=\"anchor\" href=\"#_the_user_principal\"></a>The User Principal</h3>\n<div class=\"paragraph\">\n<p>You can get the Principal corresponding to the authenticated user with <code><a href=\"../../yardoc/VertxAuthCommon/User.html#principal-instance_method\">principal</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>What this returns depends on the underlying implementation.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_your_own_auth_implementation\"><a class=\"anchor\" href=\"#_creating_your_own_auth_implementation\"></a>Creating your own auth implementation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you wish to create your own auth provider you should implement the <code><a href=\"../../yardoc/VertxAuthCommon/AuthProvider.html\">AuthProvider</a></code> interface.</p>\n</div>\n<div class=\"paragraph\">\n<p>We provide an abstract implementation of user called <code><a href=\"unavailable\">AbstractUser</a></code> which you can subclass\nto make your user implementation. This contains the caching logic so you don&#8217;t have to implement that yourself.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you wish your user objects to be clusterable you should make sure they implement <code><a href=\"unavailable\">ClusterSerializable</a></code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pseudo_random_number_generator\"><a class=\"anchor\" href=\"#_pseudo_random_number_generator\"></a>Pseudo Random Number Generator</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Since Secure Random from java can block during the acquisition of entropy from the system, we provide a simple wrapper\naround it that can be used without the danger of blocking the event loop.</p>\n</div>\n<div class=\"paragraph\">\n<p>By default this PRNG uses a mixed mode, blocking for seeding, non blocking for generating. The PRNG will also reseed\nevery 5 minutes with 64bits of new entropy. However this can all be configured using the system properties:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>io.vertx.ext.auth.prng.algorithm e.g.: SHA1PRNG</p>\n</li>\n<li>\n<p>io.vertx.ext.auth.prng.seed.interval e.g.: 1000 (every second)</p>\n</li>\n<li>\n<p>io.vertx.ext.auth.prng.seed.bits e.g.: 128</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Most users should not need to configure these values unless if you notice that the performance of your application is\nbeing affected by the PRNG algorithm.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_sharing_pseudo_random_number_generator\"><a class=\"anchor\" href=\"#_sharing_pseudo_random_number_generator\"></a>Sharing Pseudo Random Number Generator</h3>\n<div class=\"paragraph\">\n<p>Since the Pseudo Random Number Generator objects are expensive in resources, they consume system entropy which is a\nscarce resource it can be wise to share the PRNG&#8217;s across all your handlers. In order to do this and to make this\navailable to all languages supported by Vert.x you should look into the <code><a href=\"../../yardoc/VertxAuthCommon/VertxContextPRNG.html\">VertxContextPRNG</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This interface relaxes the lifecycle management of PRNG&#8217;s for the end user and ensures it can be reused across all\nyour application, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'vertx-auth-common/vertx_context_prng'</span>\n<span class=\"hljs-comment\"># Generate a secure token of 32 bytes as a base64 string</span>\ntoken = VertxAuthCommon::VertxContextPRNG.current(vertx).next_string(<span class=\"hljs-number\">32</span>)\n<span class=\"hljs-comment\"># Generate a secure random integer</span>\nrandomInt = VertxAuthCommon::VertxContextPRNG.current(vertx).next_int()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>@author &lt;a href=\"mailto:julien@julienviet.com\"&gt;Julien Viet&lt;/a&gt;\n@author &lt;a href=\"http://tfox.org\"&gt;Tim Fox&lt;/a&gt;</p>\n</div>\n</div>\n</div>\n</div>","version":"3.9.4"},"__N_SSG":true}