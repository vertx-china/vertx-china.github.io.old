{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Simplified database transaction management with the Vert.x RxJava API","category":"guides","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"As of Vert.x 3.5, managing database transactions requires a lot of boilerplate code. Vert.x 3.6 provides helpers to easily make a reactive flow transactional."},"date":"2018-07-02","slug":"simplified-database-transaction-management-with-the-vert-x-rxjava-api","readingTime":{"text":"4 min read","minutes":3.235,"time":194100,"words":647},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TL;DR As of 3.5, man\\xADag\\xADing data\\xADbase trans\\xADac\\xADtions with Vert.x re\\xADquires a lot of boil\\xADer\\xADplate code.\"), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x 3.6 will pro\\xADvide helpers and \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"Observable\"), \" trans\\xADform\\xADers to eas\\xADily make a re\\xADac\\xADtive flow trans\\xADac\\xADtional.\")), mdx(\"h2\", {\n    \"id\": \"simple-queries-with-the-rxified-api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#simple-queries-with-the-rxified-api\"\n  })), \"Simple queries with the \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"\\u201CRxified\\u201D\"), \" API\"), mdx(\"p\", null, \"The \", mdx(Link, {\n    href: \"/docs/vertx-rx/java2/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Vert.x API for Rx\\xADJava\")), \" is one of the most pop\\xADu\\xADlar mod\\xADules in the Vert.x stack.\"), mdx(\"p\", null, \"So we make sure the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201CRx\\xADi\\xADfied\\u201D\"), \" API is easy to use for com\\xADmon pro\\xADgram\\xADming tasks, such as read\\xADing rows from a re\\xADla\\xADtional data\\xADbase and send\\xADing the re\\xADsult to the client:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"dbClient.rxQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT name, duration FROM tracks WHERE album = 'The Israelites'\\\"\"), \")\\n  .map(ResultSet::getResults)\\n  .map(rows -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform DB rows into a client-friendly JSON object\"), \"\\n  })\\n  .subscribe(json -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send JSON to the client\"), \"\\n  }, t -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send error to the client\"), \"\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"managing-transactions-with-vertx-35\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#managing-transactions-with-vertx-35\"\n  })), \"Managing transactions with Vert.x 3.5\"), mdx(\"p\", null, \"But very often, de\\xADvel\\xADop\\xADers have to im\\xADple\\xADment com\\xADplex in\\xADter\\xADac\\xADtions with the data\\xADbase, run\\xADning in\\xADside a sin\\xADgle trans\\xADac\\xADtion.\\nTo do so, the im\\xADple\\xADmen\\xADta\\xADtion must fol\\xADlow this process:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get a con\\xADnec\\xADtion from the pool,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"start a trans\\xADac\\xADtion,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ex\\xADe\\xADcute queries,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if all queries suc\\xADceed, com\\xADmit the trans\\xADac\\xADtion,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"oth\\xADer\\xADwise, roll\\xADback the changes.\")), mdx(\"p\", null, \"How does that trans\\xADlate to code?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Get a connection from the pool\"), \"\\ndbClient.rxGetConnection().flatMap(sqlConnection -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Setting auto-commit mode to false implicitely starts a transaction\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" sqlConnection.rxSetAutoCommit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"false\"), \")\\n    .andThen(\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Database queries\"), \"\\n      sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO albums (name) VALUES ('The Israelites')\\\"\"), \")\\n        .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\\\"\"), \"))\\n        .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\\\"\"), \"))\\n        .andThen(sqlConnection.rxQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT name FROM tracks WHERE album = 'The Israelites'\\\"\"), \").map(ResultSet::getResults))\\n    )\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Commit if all queries succeed\"), \"\\n    .flatMap(rows -> sqlConnection.rxCommit().andThen(Single.just(rows)))\\n    .onErrorResumeNext(throwable -> {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// On error, rollback the changes\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" sqlConnection.rxRollback().onErrorComplete()\\n        .andThen(sqlConnection.rxSetAutoCommit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \").onErrorComplete())\\n        .andThen(Single.error(throwable));\\n    }).flatMap(rows -> sqlConnection.rxSetAutoCommit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \").andThen(Single.just(rows)))\\n    .doFinally(sqlConnection::close);\\n}).map(rows -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform DB rows into a client-friendly JSON object\"), \"\\n}).subscribe(json -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send JSON to the client\"), \"\\n}, t -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send error to the client\"), \"\\n});\\n\")), mdx(\"p\", null, \"That is a lot of boil\\xADer\\xADplate around the spe\\xADcific data\\xADbase queries\\u2026\\nIt would be bet\\xADter to re\\xADlieve the de\\xADvel\\xADoper from main\\xADtain\\xADing it.\"), mdx(\"h2\", {\n    \"id\": \"vertx-36-tools-for-transaction-management\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-36-tools-for-transaction-management\"\n  })), \"Vert.x 3.6 tools for transaction management\"), mdx(\"p\", null, \"That is why Vert.x 3.6 will pro\\xADvide \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"Observable\"), \" trans\\xADform\\xADers\"), \" that can be ap\\xADplied to re\\xADac\\xADtive flows with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://reactivex.io/RxJava/javadoc/io/reactivex/Flowable.html#compose-io.reactivex.FlowableTransformer-\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"compose\")), \" to make them trans\\xADac\\xADtional:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txFlowableTransformer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txObservableTransformer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txSingleTransformer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txMaybeTransformer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txCompletableTransformer\"))), mdx(\"p\", null, \"These \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"trans\\xADform\\xADers\"), \" wrap the cor\\xADre\\xADspond\\xADing source of events with SQL trans\\xADac\\xADtion man\\xADage\\xADment.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"dbClient.rxGetConnection().flatMap(sqlConnection -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO albums (name) VALUES ('The Israelites')\\\"\"), \")\\n    .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\\\"\"), \"))\\n    .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\\\"\"), \"))\\n    .andThen(sqlConnection.rxQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT name FROM tracks WHERE album = 'The Israelites'\\\"\"), \").map(ResultSet::getResults))\\n    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))\\n    .doFinally(sqlConnection::close);\\n}).map(rows -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform DB rows into a client-friendly JSON object\"), \"\\n}).subscribe(json -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send JSON to the client\"), \"\\n}, t -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send error to the client\"), \"\\n});\\n\")), mdx(\"p\", null, \"Source \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"trans\\xADform\\xADers\"), \" pro\\xADvide max\\xADi\\xADmum flex\\xADi\\xADbil\\xADity: you are still able to ex\\xADe\\xADcute op\\xADer\\xADa\\xADtions with the con\\xADnec\\xADtion after the trans\\xADac\\xADtion com\\xADpletes.\"), mdx(\"p\", null, \"How\\xADever, you usu\\xADally do not need the con\\xADnec\\xADtion after the changes are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"com\\xADmited\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"roll\\xADbacked\"), \".\\nIn this case, you may sim\\xADply cre\\xADate you source ob\\xADserv\\xADable with one of the trans\\xADac\\xADtional helper meth\\xADods in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.reactivex.ext.sql.SQLClientHelper\"), \".\"), mdx(\"p\", null, \"Let\\u2019s rewrite the pre\\xADvi\\xADous ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"SQLClientHelper.inTransactionSingle(client, sqlConnection -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO albums (name) VALUES ('The Israelites')\\\"\"), \")\\n    .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\\\"\"), \"))\\n    .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\\\"\"), \"))\\n    .andThen(sqlConnection.rxQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT name FROM tracks WHERE album = 'The Israelites'\\\"\"), \").map(ResultSet::getResults))\\n}).map(rows -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform DB rows into a client-friendly JSON object\"), \"\\n}).subscribe(json -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send JSON to the client\"), \"\\n}, t -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send error to the client\"), \"\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"give-it-a-try\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#give-it-a-try\"\n  })), \"Give it a try\"), mdx(\"p\", null, \"Vert.x 3.6 is ex\\xADpected around fall, but the code is al\\xADready in mas\\xADter and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"snap\\xADshots\"), \" are reg\\xADu\\xADlarly pub\\xADlished to Sonatype\\u2019s OSS repos.\"), mdx(\"p\", null, \"So give it a try and feel free to pro\\xADvide your fee\\xADback on our user or dev \", mdx(Link, {\n    href: \"/community\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"chan\\xADnels\")), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><em>TL;DR As of 3.5, man­ag­ing data­base trans­ac­tions with Vert.x re­quires a lot of boil­er­plate code.</em>\n<em>Vert.x 3.6 will pro­vide helpers and <code>Observable</code> trans­form­ers to eas­ily make a re­ac­tive flow trans­ac­tional.</em></p><h2 id=\"simple-queries-with-the-rxified-api\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#simple-queries-with-the-rxified-api\"></a>Simple queries with the <em>“Rxified”</em> API</h2><p>The <a href=\"/docs/vertx-rx/java2/\">Vert.x API for Rx­Java</a> is one of the most pop­u­lar mod­ules in the Vert.x stack.</p><p>So we make sure the <em>“Rx­i­fied”</em> API is easy to use for com­mon pro­gram­ming tasks, such as read­ing rows from a re­la­tional data­base and send­ing the re­sult to the client:</p><pre><code class=\"hljs language-java\">dbClient.rxQuery(<span class=\"hljs-string\">&quot;SELECT name, duration FROM tracks WHERE album = &#x27;The Israelites&#x27;&quot;</span>)\n  .map(ResultSet::getResults)\n  .map(rows -&gt; {\n    <span class=\"hljs-comment\">// Transform DB rows into a client-friendly JSON object</span>\n  })\n  .subscribe(json -&gt; {\n    <span class=\"hljs-comment\">// Send JSON to the client</span>\n  }, t -&gt; {\n    <span class=\"hljs-comment\">// Send error to the client</span>\n  });\n</code></pre><h2 id=\"managing-transactions-with-vertx-35\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#managing-transactions-with-vertx-35\"></a>Managing transactions with Vert.x 3.5</h2><p>But very often, de­vel­op­ers have to im­ple­ment com­plex in­ter­ac­tions with the data­base, run­ning in­side a sin­gle trans­ac­tion.\nTo do so, the im­ple­men­ta­tion must fol­low this process:</p><ul><li>get a con­nec­tion from the pool,</li><li>start a trans­ac­tion,</li><li>ex­e­cute queries,</li><li>if all queries suc­ceed, com­mit the trans­ac­tion,</li><li>oth­er­wise, roll­back the changes.</li></ul><p>How does that trans­late to code?</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Get a connection from the pool</span>\ndbClient.rxGetConnection().flatMap(sqlConnection -&gt; {\n  <span class=\"hljs-comment\">// Setting auto-commit mode to false implicitely starts a transaction</span>\n  <span class=\"hljs-keyword\">return</span> sqlConnection.rxSetAutoCommit(<span class=\"hljs-keyword\">false</span>)\n    .andThen(\n      <span class=\"hljs-comment\">// Database queries</span>\n      sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO albums (name) VALUES (&#x27;The Israelites&#x27;)&quot;</span>)\n        .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Israelites&#x27;)&quot;</span>))\n        .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Too Much Too Soon&#x27;)&quot;</span>))\n        .andThen(sqlConnection.rxQuery(<span class=\"hljs-string\">&quot;SELECT name FROM tracks WHERE album = &#x27;The Israelites&#x27;&quot;</span>).map(ResultSet::getResults))\n    )\n    <span class=\"hljs-comment\">// Commit if all queries succeed</span>\n    .flatMap(rows -&gt; sqlConnection.rxCommit().andThen(Single.just(rows)))\n    .onErrorResumeNext(throwable -&gt; {\n      <span class=\"hljs-comment\">// On error, rollback the changes</span>\n      <span class=\"hljs-keyword\">return</span> sqlConnection.rxRollback().onErrorComplete()\n        .andThen(sqlConnection.rxSetAutoCommit(<span class=\"hljs-keyword\">true</span>).onErrorComplete())\n        .andThen(Single.error(throwable));\n    }).flatMap(rows -&gt; sqlConnection.rxSetAutoCommit(<span class=\"hljs-keyword\">true</span>).andThen(Single.just(rows)))\n    .doFinally(sqlConnection::close);\n}).map(rows -&gt; {\n  <span class=\"hljs-comment\">// Transform DB rows into a client-friendly JSON object</span>\n}).subscribe(json -&gt; {\n  <span class=\"hljs-comment\">// Send JSON to the client</span>\n}, t -&gt; {\n  <span class=\"hljs-comment\">// Send error to the client</span>\n});\n</code></pre><p>That is a lot of boil­er­plate around the spe­cific data­base queries…\nIt would be bet­ter to re­lieve the de­vel­oper from main­tain­ing it.</p><h2 id=\"vertx-36-tools-for-transaction-management\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-36-tools-for-transaction-management\"></a>Vert.x 3.6 tools for transaction management</h2><p>That is why Vert.x 3.6 will pro­vide <em><code>Observable</code> trans­form­ers</em> that can be ap­plied to re­ac­tive flows with <a href=\"http://reactivex.io/RxJava/javadoc/io/reactivex/Flowable.html#compose-io.reactivex.FlowableTransformer-\"><code>compose</code></a> to make them trans­ac­tional:</p><ul><li><code>SQLClientHelper#txFlowableTransformer</code></li><li><code>SQLClientHelper#txObservableTransformer</code></li><li><code>SQLClientHelper#txSingleTransformer</code></li><li><code>SQLClientHelper#txMaybeTransformer</code></li><li><code>SQLClientHelper#txCompletableTransformer</code></li></ul><p>These <em>trans­form­ers</em> wrap the cor­re­spond­ing source of events with SQL trans­ac­tion man­age­ment.</p><pre><code class=\"hljs language-java\">dbClient.rxGetConnection().flatMap(sqlConnection -&gt; {\n  <span class=\"hljs-keyword\">return</span> sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO albums (name) VALUES (&#x27;The Israelites&#x27;)&quot;</span>)\n    .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Israelites&#x27;)&quot;</span>))\n    .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Too Much Too Soon&#x27;)&quot;</span>))\n    .andThen(sqlConnection.rxQuery(<span class=\"hljs-string\">&quot;SELECT name FROM tracks WHERE album = &#x27;The Israelites&#x27;&quot;</span>).map(ResultSet::getResults))\n    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))\n    .doFinally(sqlConnection::close);\n}).map(rows -&gt; {\n  <span class=\"hljs-comment\">// Transform DB rows into a client-friendly JSON object</span>\n}).subscribe(json -&gt; {\n  <span class=\"hljs-comment\">// Send JSON to the client</span>\n}, t -&gt; {\n  <span class=\"hljs-comment\">// Send error to the client</span>\n});\n</code></pre><p>Source <em>trans­form­ers</em> pro­vide max­i­mum flex­i­bil­ity: you are still able to ex­e­cute op­er­a­tions with the con­nec­tion after the trans­ac­tion com­pletes.</p><p>How­ever, you usu­ally do not need the con­nec­tion after the changes are <em>com­mited</em> or <em>roll­backed</em>.\nIn this case, you may sim­ply cre­ate you source ob­serv­able with one of the trans­ac­tional helper meth­ods in <code>io.vertx.reactivex.ext.sql.SQLClientHelper</code>.</p><p>Let’s rewrite the pre­vi­ous ex­am­ple:</p><pre><code class=\"hljs language-java\">SQLClientHelper.inTransactionSingle(client, sqlConnection -&gt; {\n  <span class=\"hljs-keyword\">return</span> sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO albums (name) VALUES (&#x27;The Israelites&#x27;)&quot;</span>)\n    .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Israelites&#x27;)&quot;</span>))\n    .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Too Much Too Soon&#x27;)&quot;</span>))\n    .andThen(sqlConnection.rxQuery(<span class=\"hljs-string\">&quot;SELECT name FROM tracks WHERE album = &#x27;The Israelites&#x27;&quot;</span>).map(ResultSet::getResults))\n}).map(rows -&gt; {\n  <span class=\"hljs-comment\">// Transform DB rows into a client-friendly JSON object</span>\n}).subscribe(json -&gt; {\n  <span class=\"hljs-comment\">// Send JSON to the client</span>\n}, t -&gt; {\n  <span class=\"hljs-comment\">// Send error to the client</span>\n});\n</code></pre><h2 id=\"give-it-a-try\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#give-it-a-try\"></a>Give it a try</h2><p>Vert.x 3.6 is ex­pected around fall, but the code is al­ready in mas­ter and <em>snap­shots</em> are reg­u­larly pub­lished to Sonatype’s OSS repos.</p><p>So give it a try and feel free to pro­vide your fee­back on our user or dev <a href=\"/community/\">chan­nels</a>.</p>","scope":{}}},"prevPost":{"meta":{"title":"Eclipse Vert.x 3.5.3","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have just released Vert.x 3.5.3, a bug fix release of Vert.x 3.5.x."},"date":"2018-07-13","slug":"eclipse-vert-x-3-5-3"},"nextPost":{"meta":{"title":"Eclipse Vert.x 3.5.2","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have just released Vert.x 3.5.2, a bug fix release of Vert.x 3.5.x."},"date":"2018-06-08","slug":"eclipse-vert-x-3-5-2"},"relatedPosts":[{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"},{"meta":{"title":"Eclipse Vert.x meets GraphQL","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"In this blog post, we will look at an example application written in Vert.x that uses the new GraphQL API of Gentics Mesh."},"date":"2017-11-14","slug":"eclipse-vert-x-meets-graphql"},{"meta":{"title":"Contract Driven REST Services with Vert.x3","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"We see a new trend in development where we are shifting from developing applications to APIs. More and more we see services being offered as REST APIs that we are allowed to consume."},"date":"2015-09-17","slug":"contract-driven-rest-services-with-vert-x3"}]},"__N_SSG":true}