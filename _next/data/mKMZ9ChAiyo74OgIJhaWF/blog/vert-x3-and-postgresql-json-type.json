{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Vert.x 3 and PostgreSQL JSON type","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"One of the interesting features of NoSQL databases is their schema-less mode of operation. This feature is very useful during project prototyping and early development since at early the stages of development of projects all data structures are not clear or have been defined yet."},"date":"2015-07-03","slug":"vert-x3-and-postgresql-json-type","readingTime":{"text":"1 min read","minutes":1,"time":60000,"words":200},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One of the in\\xADter\\xADest\\xADing fea\\xADtures of NoSQL data\\xADbases is their schema-\\u200Bless mode of op\\xADer\\xADa\\xADtion. This fea\\xADture is very use\\xADful\\ndur\\xADing project pro\\xADto\\xADtyp\\xADing and early de\\xADvel\\xADop\\xADment since at early the stages of de\\xADvel\\xADop\\xADment of projects all data\\nstruc\\xADtures are not clear or have been de\\xADfined yet. The rea\\xADson of this post is not to dis\\xADcuss about that sub\\xADject, but to\\nshow that some\\xADtimes you can also use NoSQL with a more tra\\xADdi\\xADtional data\\xADbase en\\xADgine like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.postgresql.org/\"\n  }), \"Post\\xADgreSQL\"), \".\"), mdx(\"p\", null, \"Since ver\\xADsion \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.postgresql.org/docs/9.3/static/datatype-json.html\"\n  }), \"9.3\"), \" there is sup\\xADport for JSON how\\xADever with\\nver\\xADsion \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.postgresql.org/docs/9.4/static/datatype-json.html\"\n  }), \"9.4\"), \" there is even bet\\xADter sup\\xADport with the new type\\nJSONB. I will now show how to use the basic JSON type in a sim\\xADple REST ap\\xADpli\\xADca\\xADtion writ\\xADten with Vert.x3:\"), mdx(Gist, {\n    url: \"https://gist.github.com/pmlopes/47f7f02b0b102b5e68d8\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"Now all you need to do is play with this REST ser\\xADvice, for this you can use curl to cre\\xADate a sale:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"$ curl \\\\\\n    -i \\\\\\n    -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Content-Type: application/json\\\"\"), \" \\\\\\n    -X POST \\\\\\n    -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'{\\\"id\\\": 1, \\\"customer_name\\\": \\\"John\\\", \\\"items\\\": {\\\"description\\\": \\\"milk\\\", \\\"quantity\\\": 4}}'\"), \" \\\\\\n    http://localhost:8080/sales\\n\\nHTTP/1.1 201 Created\\nContent-Length: 0\\n\")), mdx(\"p\", null, \"And if you want to read that new doc\\xADu\\xADment:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"$ curl -i -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Accept: application/json\\\"\"), \" -X GET http://localhost:8080/sales/1\\nHTTP/1.1 200 OK\\ncontent-type: application/json\\nContent-Length: 75\\n\\n{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \":1,\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"customer_name\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"John\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"items\\\"\"), \":{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"description\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"milk\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"quantity\\\"\"), \":4}}\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>One of the in­ter­est­ing fea­tures of NoSQL data­bases is their schema-​less mode of op­er­a­tion. This fea­ture is very use­ful\ndur­ing project pro­to­typ­ing and early de­vel­op­ment since at early the stages of de­vel­op­ment of projects all data\nstruc­tures are not clear or have been de­fined yet. The rea­son of this post is not to dis­cuss about that sub­ject, but to\nshow that some­times you can also use NoSQL with a more tra­di­tional data­base en­gine like <a href=\"http://www.postgresql.org/\">Post­greSQL</a>.</p><p>Since ver­sion <a href=\"http://www.postgresql.org/docs/9.3/static/datatype-json.html\">9.3</a> there is sup­port for JSON how­ever with\nver­sion <a href=\"http://www.postgresql.org/docs/9.4/static/datatype-json.html\">9.4</a> there is even bet­ter sup­port with the new type\nJSONB. I will now show how to use the basic JSON type in a sim­ple REST ap­pli­ca­tion writ­ten with Vert.x3:</p><div>...waiting for Gist...</div><p>Now all you need to do is play with this REST ser­vice, for this you can use curl to cre­ate a sale:</p><pre><code class=\"hljs language-bash\">$ curl \\\n    -i \\\n    -H <span class=\"hljs-string\">&quot;Content-Type: application/json&quot;</span> \\\n    -X POST \\\n    -d <span class=\"hljs-string\">&#x27;{&quot;id&quot;: 1, &quot;customer_name&quot;: &quot;John&quot;, &quot;items&quot;: {&quot;description&quot;: &quot;milk&quot;, &quot;quantity&quot;: 4}}&#x27;</span> \\\n    http://localhost:8080/sales\n\nHTTP/1.1 201 Created\nContent-Length: 0\n</code></pre><p>And if you want to read that new doc­u­ment:</p><pre><code class=\"hljs language-bash\">$ curl -i -H <span class=\"hljs-string\">&quot;Accept: application/json&quot;</span> -X GET http://localhost:8080/sales/1\nHTTP/1.1 200 OK\ncontent-type: application/json\nContent-Length: 75\n\n{<span class=\"hljs-string\">&quot;id&quot;</span>:1,<span class=\"hljs-string\">&quot;customer_name&quot;</span>:<span class=\"hljs-string\">&quot;John&quot;</span>,<span class=\"hljs-string\">&quot;items&quot;</span>:{<span class=\"hljs-string\">&quot;description&quot;</span>:<span class=\"hljs-string\">&quot;milk&quot;</span>,<span class=\"hljs-string\">&quot;quantity&quot;</span>:4}}\n</code></pre>","scope":{}}},"prevPost":{"meta":{"title":"Checklist for Migrating from Vert.x 2.1.x to Vert.x 3 - Part One","category":"guides","authors":[{"name":"Mark Spritzler","github_id":"bytor99999"}],"summary":"So while upgrading our application, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major upgrade from the previous version, with so many changes."},"date":"2015-07-06","slug":"checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one"},"nextPost":{"meta":{"title":"Vert.x 3 init.d Script","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say you have a Vert.x 3 application you want to install on a Linux server. But you want the old school way (I mean not the Docker way)."},"date":"2015-07-02","slug":"vert-x-3-init-d-script"},"relatedPosts":[{"meta":{"title":"Eclipse Vert.x meets GraphQL","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"In this blog post, we will look at an example application written in Vert.x that uses the new GraphQL API of Gentics Mesh."},"date":"2017-11-14","slug":"eclipse-vert-x-meets-graphql"},{"meta":{"title":"Eclipse Vert.x 4 milestone 5 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We are extremely pleased to announce the fifth 4.0 milestone release of Eclipse Vert.x. This release aims to provide a reliable distribution of the current development of Vert.x 4."},"date":"2020-06-10","slug":"eclipse-vert-x-4-milestone-5-released"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}