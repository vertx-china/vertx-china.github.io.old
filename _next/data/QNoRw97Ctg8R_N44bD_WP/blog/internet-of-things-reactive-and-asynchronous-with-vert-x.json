{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Internet of Things - Reactive and Asynchronous with Vert.x","category":"guides","authors":[{"name":"Paolo Patierno","github_id":"ppatierno"}],"summary":"I have to admit … before joining Red Hat I didn’t know about the Eclipse Vert.x project but it took me few days to fall in love with it!"},"date":"2016-12-29","slug":"internet-of-things-reactive-and-asynchronous-with-vert-x","readingTime":{"text":"4 min read","minutes":3.68,"time":220800,"words":736},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-iot/vertx-iot.png\",\n    \"alt\": \"Vert.x IoT\"\n  }))), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://paolopatierno.wordpress.com/2016/12/27/internet-of-things-reactive-and-asynchronous-with-vert-x/\"\n  }), \"blog post\"), \".\")), mdx(\"p\", null, \"I have to admit \\u2026 be\\xADfore join\\xADing Red Hat I didn\\u2019t know about the \", mdx(Link, {\n    href: \"/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Eclipse Vert.x\"))), \" project but it took me few days to fall in love with it!\"), mdx(\"p\", null, \"For the other de\\xADvel\\xADop\\xADers who don\\u2019t know what Vert.x is, the best de\\xADf\\xADi\\xADn\\xADi\\xADtion is \\u2026\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u2026 a toolkit to build dis\\xADtrib\\xADuted and re\\xADac\\xADtive sys\\xADtems on top of the JVM using an asyn\\xADchro\\xADnous non block\\xADing de\\xADvel\\xADop\\xADment model\")), mdx(\"p\", null, \"The first big thing is re\\xADlated to de\\xADvelop a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADac\\xADtive\"), \" sys\\xADtem using Vert.x which means :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Re\\xADspon\\xADsive\"), \" : the sys\\xADtem re\\xADsponds in an ac\\xADcept\\xADable time;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Elas\\xADtic\"), \" : the sys\\xADtem can scale up and scale down;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Re\\xADsilient\"), \" : the sys\\xADtem is de\\xADsigned to han\\xADdle fail\\xADures grace\\xADfully;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Asyn\\xADchro\\xADnous\"), \" : the in\\xADter\\xADac\\xADtion with the sys\\xADtem is achieved using asyn\\xADchro\\xADnous mes\\xADsages;\")), mdx(\"p\", null, \"The other big thing is re\\xADlated to use an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"asyn\\xADchro\\xADnous non block\\xADing\"), \" de\\xADvel\\xADop\\xADment model which doesn\\u2019t mean to be multi-\\u200Bthreading but thanks to the non block\\xADing I/O (i.e. for han\\xADdling net\\xADwork, file sys\\xADtem, \\u2026) and call\\xADbacks sys\\xADtem, it\\u2019s pos\\xADsi\\xADble to han\\xADdle a huge num\\xADbers of events per sec\\xADond using a sin\\xADgle thread (aka \\u201Cevent loop\\u201D).\"), mdx(\"p\", null, \"You can find a lot of \", mdx(Link, {\n    href: \"/materials/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"ma\\xADte\\xADr\\xADial\")), \" on the of\\xADfi\\xADcial web site in order to bet\\xADter un\\xADder\\xADstand what Vert.x is and all its main fea\\xADtures; it\\u2019s not my ob\\xADjec\\xADtive to ex\\xADplain it in this very short ar\\xADti\\xADcle that is mostly \\u2026 you guess \\u2026 mes\\xADsag\\xADing and IoT ori\\xADented  :-)\"), mdx(\"p\", null, \"In my opin\\xADion, all the above fea\\xADtures make Vert.x a great toolkit for build\\xADing In\\xADter\\xADnet of Things ap\\xADpli\\xADca\\xADtions where being re\\xADac\\xADtive and asyn\\xADchro\\xADnous is a \\u201Cmust\\u201D in order to han\\xADdle mil\\xADlions of con\\xADnec\\xADtions from de\\xADvices and all the mes\\xADsages in\\xADgested from them.\"), mdx(\"h2\", {\n    \"id\": \"vertx-and-the-internet-of-things\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-and-the-internet-of-things\"\n  })), \"Vert.x and the Internet of Things\"), mdx(\"p\", null, \"As a toolkit, so made of dif\\xADfer\\xADent com\\xADpo\\xADnents, what are the ones pro\\xADvided by Vert.x and use\\xADful to IoT?\"), mdx(\"p\", null, \"Start\\xADing from the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/eclipse/vert.x\"\n  }), \"Core\"), \" com\\xADpo\\xADnent, there is sup\\xADport for both ver\\xADsions of HTTP pro\\xADto\\xADcol so 1.1 and 2.0 in order to de\\xADvelop an \", mdx(Link, {\n    href: \"/docs/vertx-core/java/#_writing_http_servers_and_clients\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"HTTP server\")), \" which can ex\\xADpose a REST\\xADful API to the de\\xADvices. Today , a lot of web and mo\\xADbile de\\xADvel\\xADop\\xADers pre\\xADfer to use this pro\\xADto\\xADcol for build\\xADing their IoT so\\xADlu\\xADtion lever\\xADag\\xADing on the deep knowl\\xADedge they have about the HTTP pro\\xADto\\xADcol.\"), mdx(\"p\", null, \"Re\\xADgard\\xADing more IoT ori\\xADented pro\\xADto\\xADcols, there is the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-mqtt-server\"\n  }), \"MQTT server\"), \" com\\xADpo\\xADnent which doesn\\u2019t pro\\xADvide a full bro\\xADker but ex\\xADposes an API that a de\\xADvel\\xADoper can use in order to han\\xADdle in\\xADcom\\xADing con\\xADnec\\xADtions and mes\\xADsages from re\\xADmote MQTT clients and then build\\xADing the busi\\xADness logic on top of it, so for ex\\xADam\\xADple de\\xADvel\\xADop\\xADing a real bro\\xADker or ex\\xADe\\xADcut\\xADing pro\\xADto\\xADcol trans\\xADla\\xADtion (i.e. to/from plain TCP,to/from the Vert.x Event Bus,to/from HTTP,to/from AMQP and so on). The API raises all events re\\xADlated to the con\\xADnec\\xADtion re\\xADquest from a re\\xADmote MQTT client and all sub\\xADse\\xADquent in\\xADcom\\xADing mes\\xADsages; at same time, the API pro\\xADvides the way to reply to the re\\xADmote end\\xADpoint. The de\\xADvel\\xADoper doesn\\u2019t need to know how MQTT works on the wire in terms of en\\xADcod\\xADing/de\\xADcod\\xADing mes\\xADsages.\"), mdx(\"p\", null, \"Re\\xADlated to the AMQP 1.0 pro\\xADto\\xADcol there are the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-proton\"\n  }), \"Pro\\xADton\"), \" and the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-amqp-bridge\"\n  }), \"AMQP bridge\"), \" com\\xADpo\\xADnents. The first one pro\\xADvides a thin wrap\\xADper around the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://qpid.apache.org/\"\n  }), \"Apache Qpid\"), \" Pro\\xADton en\\xADgine and can be used for in\\xADter\\xADact\\xADing with AMQP based mes\\xADsag\\xADing sys\\xADtems as clients (sender and re\\xADceiver) but even de\\xADvel\\xADop\\xADing a server. The last one pro\\xADvides a bridge be\\xADtween the pro\\xADto\\xADcol and the Vert.x Event Bus mostly used for com\\xADmu\\xADni\\xADca\\xADtion be\\xADtween de\\xADployed Vert.x ver\\xADti\\xADcles. Thanks to this bridge, ver\\xADti\\xADcles can in\\xADter\\xADact with AMQP com\\xADpo\\xADnents in a sim\\xADple way.\"), mdx(\"p\", null, \"Last but not least, the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-kafka-client\"\n  }), \"Kafka client\"), \" com\\xADpo\\xADnent which pro\\xADvides ac\\xADcess to Apache Kafka for send\\xADing and con\\xADsum\\xADing mes\\xADsages from top\\xADics and re\\xADlated par\\xADti\\xADtions. A lot of IoT sce\\xADnar\\xADios lever\\xADage on Apache Kafka in order to have an in\\xADges\\xADtion sys\\xADtem ca\\xADpa\\xADble of han\\xADdling mil\\xADlion mes\\xADsages per sec\\xADond.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"The cur\\xADrent Vert.x code base pro\\xADvides quite in\\xADter\\xADest\\xADing com\\xADpo\\xADnents for de\\xADvel\\xADop\\xADing IoT so\\xADlu\\xADtions which are al\\xADready avail\\xADable in the cur\\xADrent 3.3.3 ver\\xADsion (see Vert.x Pro\\xADton and AMQP bridge) and that will be avail\\xADable soon in the fu\\xADture 3.4.0 ver\\xADsion (see MQTT server and Kafka client). Of course, you don\\u2019t need to wait for their of\\xADfi\\xADcial re\\xADlease be\\xADcause, even if under de\\xADvel\\xADop\\xADment, you can al\\xADready adopt these com\\xADpo\\xADnents and pro\\xADvide your feed\\xADback to the com\\xADmu\\xADnity.\"), mdx(\"p\", null, \"This ecosys\\xADtem will grow in the fu\\xADture and Vert.x will be a lead\\xADing actor in the IoT ap\\xADpli\\xADca\\xADtions world based on a mi\\xADcroser\\xADvices ar\\xADchi\\xADtec\\xADture!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><img src=\"/images/blog/vertx-iot/vertx-iot.png\" alt=\"Vert.x IoT\"/></p><div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"https://paolopatierno.wordpress.com/2016/12/27/internet-of-things-reactive-and-asynchronous-with-vert-x/\">blog post</a>.</p></div><p>I have to admit … be­fore join­ing Red Hat I didn’t know about the <a href=\"/\"><em>Eclipse Vert.x</em></a> project but it took me few days to fall in love with it!</p><p>For the other de­vel­op­ers who don’t know what Vert.x is, the best de­f­i­n­i­tion is …</p><blockquote><p>… a toolkit to build dis­trib­uted and re­ac­tive sys­tems on top of the JVM using an asyn­chro­nous non block­ing de­vel­op­ment model</p></blockquote><p>The first big thing is re­lated to de­velop a <em>re­ac­tive</em> sys­tem using Vert.x which means :</p><ul><li><em>Re­spon­sive</em> : the sys­tem re­sponds in an ac­cept­able time;</li><li><em>Elas­tic</em> : the sys­tem can scale up and scale down;</li><li><em>Re­silient</em> : the sys­tem is de­signed to han­dle fail­ures grace­fully;</li><li><em>Asyn­chro­nous</em> : the in­ter­ac­tion with the sys­tem is achieved using asyn­chro­nous mes­sages;</li></ul><p>The other big thing is re­lated to use an <em>asyn­chro­nous non block­ing</em> de­vel­op­ment model which doesn’t mean to be multi-​threading but thanks to the non block­ing I/O (i.e. for han­dling net­work, file sys­tem, …) and call­backs sys­tem, it’s pos­si­ble to han­dle a huge num­bers of events per sec­ond using a sin­gle thread (aka “event loop”).</p><p>You can find a lot of <a href=\"/materials/\">ma­te­r­ial</a> on the of­fi­cial web site in order to bet­ter un­der­stand what Vert.x is and all its main fea­tures; it’s not my ob­jec­tive to ex­plain it in this very short ar­ti­cle that is mostly … you guess … mes­sag­ing and IoT ori­ented  :-)</p><p>In my opin­ion, all the above fea­tures make Vert.x a great toolkit for build­ing In­ter­net of Things ap­pli­ca­tions where being re­ac­tive and asyn­chro­nous is a “must” in order to han­dle mil­lions of con­nec­tions from de­vices and all the mes­sages in­gested from them.</p><h2 id=\"vertx-and-the-internet-of-things\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-and-the-internet-of-things\"></a>Vert.x and the Internet of Things</h2><p>As a toolkit, so made of dif­fer­ent com­po­nents, what are the ones pro­vided by Vert.x and use­ful to IoT?</p><p>Start­ing from the Vert.x <a href=\"https://github.com/eclipse/vert.x\">Core</a> com­po­nent, there is sup­port for both ver­sions of HTTP pro­to­col so 1.1 and 2.0 in order to de­velop an <a href=\"/docs/vertx-core/java/#_writing_http_servers_and_clients\">HTTP server</a> which can ex­pose a REST­ful API to the de­vices. Today , a lot of web and mo­bile de­vel­op­ers pre­fer to use this pro­to­col for build­ing their IoT so­lu­tion lever­ag­ing on the deep knowl­edge they have about the HTTP pro­to­col.</p><p>Re­gard­ing more IoT ori­ented pro­to­cols, there is the Vert.x <a href=\"https://github.com/vert-x3/vertx-mqtt-server\">MQTT server</a> com­po­nent which doesn’t pro­vide a full bro­ker but ex­poses an API that a de­vel­oper can use in order to han­dle in­com­ing con­nec­tions and mes­sages from re­mote MQTT clients and then build­ing the busi­ness logic on top of it, so for ex­am­ple de­vel­op­ing a real bro­ker or ex­e­cut­ing pro­to­col trans­la­tion (i.e. to/from plain TCP,to/from the Vert.x Event Bus,to/from HTTP,to/from AMQP and so on). The API raises all events re­lated to the con­nec­tion re­quest from a re­mote MQTT client and all sub­se­quent in­com­ing mes­sages; at same time, the API pro­vides the way to reply to the re­mote end­point. The de­vel­oper doesn’t need to know how MQTT works on the wire in terms of en­cod­ing/de­cod­ing mes­sages.</p><p>Re­lated to the AMQP 1.0 pro­to­col there are the Vert.x <a href=\"https://github.com/vert-x3/vertx-proton\">Pro­ton</a> and the <a href=\"https://github.com/vert-x3/vertx-amqp-bridge\">AMQP bridge</a> com­po­nents. The first one pro­vides a thin wrap­per around the <a href=\"http://qpid.apache.org/\">Apache Qpid</a> Pro­ton en­gine and can be used for in­ter­act­ing with AMQP based mes­sag­ing sys­tems as clients (sender and re­ceiver) but even de­vel­op­ing a server. The last one pro­vides a bridge be­tween the pro­to­col and the Vert.x Event Bus mostly used for com­mu­ni­ca­tion be­tween de­ployed Vert.x ver­ti­cles. Thanks to this bridge, ver­ti­cles can in­ter­act with AMQP com­po­nents in a sim­ple way.</p><p>Last but not least, the Vert.x <a href=\"https://github.com/vert-x3/vertx-kafka-client\">Kafka client</a> com­po­nent which pro­vides ac­cess to Apache Kafka for send­ing and con­sum­ing mes­sages from top­ics and re­lated par­ti­tions. A lot of IoT sce­nar­ios lever­age on Apache Kafka in order to have an in­ges­tion sys­tem ca­pa­ble of han­dling mil­lion mes­sages per sec­ond.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>The cur­rent Vert.x code base pro­vides quite in­ter­est­ing com­po­nents for de­vel­op­ing IoT so­lu­tions which are al­ready avail­able in the cur­rent 3.3.3 ver­sion (see Vert.x Pro­ton and AMQP bridge) and that will be avail­able soon in the fu­ture 3.4.0 ver­sion (see MQTT server and Kafka client). Of course, you don’t need to wait for their of­fi­cial re­lease be­cause, even if under de­vel­op­ment, you can al­ready adopt these com­po­nents and pro­vide your feed­back to the com­mu­nity.</p><p>This ecosys­tem will grow in the fu­ture and Vert.x will be a lead­ing actor in the IoT ap­pli­ca­tions world based on a mi­croser­vices ar­chi­tec­ture!</p>","scope":{}}},"prevPost":{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"},"nextPost":{"meta":{"title":"Getting started with new fabric8 Vert.x Maven Plugin","category":"guides","authors":[{"name":"Kamesh Sampath","github_id":"kameshsampath"}],"summary":"The all new fabric8 Vert.x Maven Plugin allows you to setup, package, run, start, stop and redeploy easily with a very little configuration resulting in a less verbose pom.xml."},"date":"2016-12-07","slug":"getting-started-with-new-fabric8-vert-x-maven-plugin"},"relatedPosts":[{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"},{"meta":{"title":"Building a real-time web app with Angular/Ngrx and Vert.x","category":"guides","authors":[{"name":"Benoit Hediard","github_id":"benorama"}],"summary":"There are multiple tech stacks to build a real-time web app. What are the best choices to build Angular client apps, connected to a JVM-based backend?"},"date":"2017-04-26","slug":"building-a-real-time-web-app-with-angular-ngrx-and-vert-x"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"}]},"__N_SSG":true}