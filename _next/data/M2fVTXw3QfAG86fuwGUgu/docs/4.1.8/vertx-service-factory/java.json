{"pageProps":{"slug":"4.1.8/vertx-service-factory/java","title":"Vert.x 服务工厂","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_service_identifier\">服务标识</a></li>\n<li><a href=\"#_usage\">使用说明</a></li>\n<li><a href=\"#_making_it_available\">如何启用 vert.x 服务工厂</a></li>\n<li><a href=\"#_service_descriptor\">服务描述文件</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x 服务工厂</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x 服务工厂是 VerticleFactory 的一种实现，\n它基于服务id/名称来部署 verticle 。\n请注意，该工厂并不涉及 <a href=\"http://vertx.io/docs/vertx-service-proxy/java\">vert.x service proxies</a> ，\n而是用于部署单独组件的一种设施。</p>\n</div>\n<div class=\"paragraph\">\n<p>服务名称的作用是在某个 JSON 描述文件中查找并确认所需要部署的 verticle ，\n同时也可以包含部署选项，例如该 verticle 是否以 worker verticle 模式运行，\n该服务的缺省配置，等等。</p>\n</div>\n<div class=\"paragraph\">\n<p>它的好处是把服务使用者和已部署的 verticle 进行了解耦，\n并且允许该服务提供缺省的部署选项和配置。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_service_identifier\"><a class=\"anchor\" href=\"#_service_identifier\"></a>服务标识</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>服务名称就是一个简单的字符串 —— 您可以使用任何内容个字符串，\n但是有一个良好的约定是使用倒着写的域名（就像 Java 的包名那样），\n这样可以避免和您的类路径中或许已存在的类似的服务名发生冲突。服务名称示例：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>良好的取名方式： <code>com.mycompany.services.clever-db-service</code>, <code>org.widgets.widget-processor</code></p>\n</li>\n<li>\n<p>糟糕的取名方式（尽管这样起名仍然是合法的）： <code>accounting-service</code>， <code>foo</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>使用说明</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>一旦以 <code>service:</code> 前缀来部署服务，就意味着选择了服务 verticle 工厂。\nVerticle 可以用编程方式进行部署，例如：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;service:com.mycompany.clever-db-service&quot;</span>, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者也可以通过命令行方式部署：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>vertx run service:com.mycompany-clever-db-service</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_making_it_available\"><a class=\"anchor\" href=\"#_making_it_available\"></a>如何启用 vert.x 服务工厂</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x 从类路径中获取 <code>VerticleFactory</code> 的实现，因此您必须保证类路径中已有 vertx-service-factory 相关的jar包，\n并且在此之前您首先需要在您的应用的类路径中加入 verticle 工厂的 Maven 依赖。\n如果您使用的是 fat jar， 您可以加入以下依赖：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven （在您的 <code>pom.xml</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-service-factory<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle （在您的 <code>build.gradle</code> 文件中）：</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-service-factory:4.1.8&#x27;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您也可以通过编程方式使用 <code><a href=\"../../apidocs/io/vertx/core/Vertx.html#registerVerticleFactory-io.vertx.core.spi.VerticleFactory-\">registerVerticleFactory</a></code>\n方法在您的 <code>vertx</code> 实例中注册 <code>VerticleFactory</code> 的实例：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">vertx.registerVerticleFactory(<span class=\"hljs-keyword\">new</span> ServiceVerticleFactory());</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_service_descriptor\"><a class=\"anchor\" href=\"#_service_descriptor\"></a>服务描述文件</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>当您部署一个服务的时候，服务工厂会首先在类路径中寻找一个描述文件。\n该描述文件的文件名为服务名加上 <code>.json</code> 文件后缀名。</p>\n</div>\n<div class=\"paragraph\">\n<p>例如一个服务名叫做 <code>com.mycompany.clever-db-service</code> ，则类路径中对应的描述文件名就是\n<code>com.mycompany.clever-db-service.json</code> 。</p>\n</div>\n<div class=\"paragraph\">\n<p>描述文件是一个简单的文本文件，并且文件内容必须包含一个合法的 JSON 对象。\n该 JSON 对象中至少要包含一个 <code>main</code> 属性用来确定哪个 verticle 将被部署，例如：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n\"main\": \"com.mycompany.cleverdb.MainVerticle\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n \"main\": \"app.js\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者您甚至可以重定向到另一个不同的 verticle 工厂，例如重定向到 Maven verticle 工厂\n用以在运行时从 Maven 中动态加载一个服务：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n\"main\": \"maven:com.mycompany:clever-db:1,2::clever-db-service\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>该 JSON 对象也可以包含一个 <code>options</code> 属性用以映射一个 <code><a href=\"../../apidocs/io/vertx/core/DeploymentOptions.html\">DeploymentOptions</a></code> 对象。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>{\n \"main\": \"com.mycompany.cleverdb.MainVerticle\",\n \"options\": {\n   \"config\" : {\n    \"foo\": \"bar\"\n   },\n   \"worker\": true,\n   \"isolationGroup\": \"mygroup\"\n }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当使用服务描述文件来部署一个服务时，描述文件中的 JOSN 对象属性，诸如 <code>worker</code>， <code>isolationGroup</code> 等等，\n在部署时将不会被传入的部署选项所覆盖。</p>\n</div>\n<div class=\"paragraph\">\n<p>此处有个例外是 <code>config</code> 属性，\n在部署时所传入的选项将会取代描述文件中对应的属性值。</p>\n</div>\n</div>\n</div>","version":"4.1.8"},"__N_SSG":true}