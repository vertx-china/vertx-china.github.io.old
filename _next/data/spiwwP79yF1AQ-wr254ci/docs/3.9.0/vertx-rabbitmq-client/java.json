{"pageProps":{"slug":"3.9.0/vertx-rabbitmq-client/java","title":"RabbitMQ Client for Vert.x","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_getting_started\">Getting Started</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_maven\">Maven</a></li>\n<li><a href=\"#_gradle\">Gradle</a></li>\n<li><a href=\"#_create_a_client\">Create a client</a></li>\n<li><a href=\"#_declare_exchange_with_additional_config\">Declare exchange with additional config</a></li>\n<li><a href=\"#_declare_queue_with_additional_config\">Declare queue with additional config</a></li>\n</ul>\n</li>\n<li><a href=\"#_operations\">Operations</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_publish\">Publish</a></li>\n<li><a href=\"#_publish_with_confirm\">Publish with confirm</a></li>\n<li><a href=\"#_consume\">Consume</a></li>\n<li><a href=\"#_get\">Get</a></li>\n<li><a href=\"#_consume_messages_without_auto_ack\">Consume messages without auto-ack</a></li>\n</ul>\n</li>\n<li><a href=\"#_running_the_tests\">Running the tests</a></li>\n</ul>\n</div>","contents":"<h1>RabbitMQ Client for Vert.x</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A Vert.x client allowing applications to interact with a RabbitMQ broker (AMQP 0.9.1)</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>This service is experimental and the APIs are likely to change before settling down.</strong></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting Started</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_maven\"><a class=\"anchor\" href=\"#_maven\"></a>Maven</h3>\n<div class=\"paragraph\">\n<p>Add the following dependency to your maven project</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-rabbitmq-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.9.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_gradle\"><a class=\"anchor\" href=\"#_gradle\"></a>Gradle</h3>\n<div class=\"paragraph\">\n<p>Add the following dependency to your gradle project</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-rabbitmq-client:3.9.0&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_create_a_client\"><a class=\"anchor\" href=\"#_create_a_client\"></a>Create a client</h3>\n<div class=\"paragraph\">\n<p>You can create a client instance as follows using a full amqp uri:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">RabbitMQOptions</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RabbitMQOptions</span>();\n<span class=\"hljs-comment\">// full amqp uri</span>\nconfig.setUri(<span class=\"hljs-string\">&quot;amqp://xvjvsrrc:VbuL1atClKt7zVNQha0bnnScbNvGiqgb@moose.rmq.cloudamqp.com/xvjvsrrc&quot;</span>);\n<span class=\"hljs-type\">RabbitMQClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> RabbitMQClient.create(vertx, config);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or you can also specify individual parameters manually:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">RabbitMQOptions</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RabbitMQOptions</span>();\n<span class=\"hljs-comment\">// Each parameter is optional</span>\n<span class=\"hljs-comment\">// The default parameter with be used if the parameter is not set</span>\nconfig.setUser(<span class=\"hljs-string\">&quot;user1&quot;</span>);\nconfig.setPassword(<span class=\"hljs-string\">&quot;password1&quot;</span>);\nconfig.setHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>);\nconfig.setPort(<span class=\"hljs-number\">5672</span>);\nconfig.setVirtualHost(<span class=\"hljs-string\">&quot;vhost1&quot;</span>);\nconfig.setConnectionTimeout(<span class=\"hljs-number\">6000</span>); <span class=\"hljs-comment\">// in milliseconds</span>\nconfig.setRequestedHeartbeat(<span class=\"hljs-number\">60</span>); <span class=\"hljs-comment\">// in seconds</span>\nconfig.setHandshakeTimeout(<span class=\"hljs-number\">6000</span>); <span class=\"hljs-comment\">// in milliseconds</span>\nconfig.setRequestedChannelMax(<span class=\"hljs-number\">5</span>);\nconfig.setNetworkRecoveryInterval(<span class=\"hljs-number\">500</span>); <span class=\"hljs-comment\">// in milliseconds</span>\nconfig.setAutomaticRecoveryEnabled(<span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-type\">RabbitMQClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> RabbitMQClient.create(vertx, config);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can set multiples addresses to connect to a cluster;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">RabbitMQOptions</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RabbitMQOptions</span>();\nconfig.setUser(<span class=\"hljs-string\">&quot;user1&quot;</span>);\nconfig.setPassword(<span class=\"hljs-string\">&quot;password1&quot;</span>);\nconfig.setVirtualHost(<span class=\"hljs-string\">&quot;vhost1&quot;</span>);\n\nconfig.setAddresses(Arrays.asList(Address.parseAddresses(<span class=\"hljs-string\">&quot;firstHost,secondHost:5672&quot;</span>)));\n\n<span class=\"hljs-type\">RabbitMQClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> RabbitMQClient.create(vertx, config);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_declare_exchange_with_additional_config\"><a class=\"anchor\" href=\"#_declare_exchange_with_additional_config\"></a>Declare exchange with additional config</h3>\n<div class=\"paragraph\">\n<p>You can pass additional config parameters to RabbitMQ&#8217;s exchangeDeclare method</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">JsonObject</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>();\n\nconfig.put(<span class=\"hljs-string\">&quot;x-dead-letter-exchange&quot;</span>, <span class=\"hljs-string\">&quot;my.deadletter.exchange&quot;</span>);\nconfig.put(<span class=\"hljs-string\">&quot;alternate-exchange&quot;</span>, <span class=\"hljs-string\">&quot;my.alternate.exchange&quot;</span>);\n<span class=\"hljs-comment\">// ...</span>\nclient.exchangeDeclare(<span class=\"hljs-string\">&quot;my.exchange&quot;</span>, <span class=\"hljs-string\">&quot;fanout&quot;</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, config, onResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (onResult.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Exchange successfully declared with config&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    onResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_declare_queue_with_additional_config\"><a class=\"anchor\" href=\"#_declare_queue_with_additional_config\"></a>Declare queue with additional config</h3>\n<div class=\"paragraph\">\n<p>You can pass additional config parameters to RabbitMQs queueDeclare method</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">JsonObject</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>();\nconfig.put(<span class=\"hljs-string\">&quot;x-message-ttl&quot;</span>, <span class=\"hljs-number\">10_000L</span>);\n\nclient.queueDeclare(<span class=\"hljs-string\">&quot;my-queue&quot;</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, config, queueResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (queueResult.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Queue declared!&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.err.println(<span class=\"hljs-string\">&quot;Queue failed to be declared!&quot;</span>);\n    queueResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_operations\"><a class=\"anchor\" href=\"#_operations\"></a>Operations</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following are some examples of the operations supported by the RabbitMQService API.\nConsult the javadoc/documentation for detailed information on all API methods.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish\"><a class=\"anchor\" href=\"#_publish\"></a>Publish</h3>\n<div class=\"paragraph\">\n<p>Publish a message to a queue</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">JsonObject</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().put(<span class=\"hljs-string\">&quot;body&quot;</span>, <span class=\"hljs-string\">&quot;Hello RabbitMQ, from Vert.x !&quot;</span>);\nclient.basicPublish(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;my.queue&quot;</span>, message, pubResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (pubResult.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Message published !&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    pubResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish_with_confirm\"><a class=\"anchor\" href=\"#_publish_with_confirm\"></a>Publish with confirm</h3>\n<div class=\"paragraph\">\n<p>Publish a message to a queue and confirm the broker acknowledged it.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">JsonObject</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonObject</span>().put(<span class=\"hljs-string\">&quot;body&quot;</span>, <span class=\"hljs-string\">&quot;Hello RabbitMQ, from Vert.x !&quot;</span>);\n\n<span class=\"hljs-comment\">// Put the channel in confirm mode. This can be done once at init.</span>\nclient.confirmSelect(confirmResult -&gt; {\n  <span class=\"hljs-keyword\">if</span>(confirmResult.succeeded()) {\n    client.basicPublish(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;my.queue&quot;</span>, message, pubResult -&gt; {\n      <span class=\"hljs-keyword\">if</span> (pubResult.succeeded()) {\n        <span class=\"hljs-comment\">// Check the message got confirmed by the broker.</span>\n        client.waitForConfirms(waitResult -&gt; {\n          <span class=\"hljs-keyword\">if</span>(waitResult.succeeded())\n            System.out.println(<span class=\"hljs-string\">&quot;Message published !&quot;</span>);\n          <span class=\"hljs-keyword\">else</span>\n            waitResult.cause().printStackTrace();\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        pubResult.cause().printStackTrace();\n      }\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    confirmResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consume\"><a class=\"anchor\" href=\"#_consume\"></a>Consume</h3>\n<div class=\"paragraph\">\n<p>Consume messages from a queue.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-comment\">// Create a stream of messages from a queue</span>\nclient.basicConsumer(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, rabbitMQConsumerAsyncResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (rabbitMQConsumerAsyncResult.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;RabbitMQ consumer created !&quot;</span>);\n    <span class=\"hljs-type\">RabbitMQConsumer</span> <span class=\"hljs-variable\">mqConsumer</span> <span class=\"hljs-operator\">=</span> rabbitMQConsumerAsyncResult.result();\n    mqConsumer.handler(message -&gt; {\n      System.out.println(<span class=\"hljs-string\">&quot;Got message: &quot;</span> + message.body().toString());\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    rabbitMQConsumerAsyncResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>At any moment of time you can pause or resume the stream. When stream is paused you won&#8217;t receive any message.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consumer.pause();\nconsumer.resume();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>There are actually a set of options to specify when creating a consumption stream.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>QueueOptions</code> lets you specify:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The size of internal queue with <code>setMaxInternalQueueSize</code></p>\n</li>\n<li>\n<p>Should the stream keep more recent messages when queue size is exceed with <code>setKeepMostRecent</code></p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">QueueOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QueueOptions</span>()\n  .setMaxInternalQueueSize(<span class=\"hljs-number\">1000</span>)\n  .setKeepMostRecent(<span class=\"hljs-literal\">true</span>);\n\nclient.basicConsumer(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, options, rabbitMQConsumerAsyncResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (rabbitMQConsumerAsyncResult.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;RabbitMQ consumer created !&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    rabbitMQConsumerAsyncResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you want to stop consuming message from a queue, you can do:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">rabbitMQConsumer.cancel(cancelResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (cancelResult.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;Consumption successfully stopped&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Tired in attempt to stop consumption&quot;</span>);\n    cancelResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can get notified by the end handler when the queue won&#8217;t process any more messages:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">rabbitMQConsumer.endHandler(v -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;It is the end of the stream&quot;</span>);\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can set the exception handler to be notified of any error that may occur when a message is processed:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">consumer.exceptionHandler(e -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;An exception occurred in the process of message handling&quot;</span>);\n  e.printStackTrace();\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And finally, you may want to retrive a related to the consumer tag:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">consumerTag</span> <span class=\"hljs-operator\">=</span> consumer.consumerTag();\nSystem.out.println(<span class=\"hljs-string\">&quot;Consumer tag is: &quot;</span> + consumerTag);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_get\"><a class=\"anchor\" href=\"#_get\"></a>Get</h3>\n<div class=\"paragraph\">\n<p>Will get a message from a queue</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.basicGet(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, <span class=\"hljs-literal\">true</span>, getResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (getResult.succeeded()) {\n    <span class=\"hljs-type\">JsonObject</span> <span class=\"hljs-variable\">msg</span> <span class=\"hljs-operator\">=</span> getResult.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Got message: &quot;</span> + msg.getString(<span class=\"hljs-string\">&quot;body&quot;</span>));\n  } <span class=\"hljs-keyword\">else</span> {\n    getResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consume_messages_without_auto_ack\"><a class=\"anchor\" href=\"#_consume_messages_without_auto_ack\"></a>Consume messages without auto-ack</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.basicConsumer(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QueueOptions</span>().setAutoAck(<span class=\"hljs-literal\">false</span>), consumeResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (consumeResult.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;RabbitMQ consumer created !&quot;</span>);\n    <span class=\"hljs-type\">RabbitMQConsumer</span> <span class=\"hljs-variable\">consumer</span> <span class=\"hljs-operator\">=</span> consumeResult.result();\n\n    <span class=\"hljs-comment\">// Set the handler which messages will be sent to</span>\n    consumer.handler(msg -&gt; {\n      <span class=\"hljs-type\">JsonObject</span> <span class=\"hljs-variable\">json</span> <span class=\"hljs-operator\">=</span> (JsonObject) msg.body();\n      System.out.println(<span class=\"hljs-string\">&quot;Got message: &quot;</span> + json.getString(<span class=\"hljs-string\">&quot;body&quot;</span>));\n      <span class=\"hljs-comment\">// ack</span>\n      client.basicAck(json.getLong(<span class=\"hljs-string\">&quot;deliveryTag&quot;</span>), <span class=\"hljs-literal\">false</span>, asyncResult -&gt; {\n      });\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    consumeResult.cause().printStackTrace();\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_running_the_tests\"><a class=\"anchor\" href=\"#_running_the_tests\"></a>Running the tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You will need to have RabbitMQ installed and running with default ports on localhost for this to work.</p>\n</div>\n</div>\n</div>","version":"3.9.0"},"__N_SSG":true}