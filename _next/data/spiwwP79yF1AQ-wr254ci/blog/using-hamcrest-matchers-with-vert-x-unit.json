{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Using Hamcrest Matchers with Vert.x Unit","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x Unit is a very elegant library to test asynchronous applications developed with vert.x. However because of this asynchronous aspect, reporting test failures is not natural for JUnit users."},"date":"2016-01-18","slug":"using-hamcrest-matchers-with-vert-x-unit","readingTime":{"text":"5 min read","minutes":4.205,"time":252300,"words":841},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      em: \"em\",\n      h2: \"h2\",\n      a: \"a\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      ol: \"ol\",\n      li: \"li\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Vert.x Unit is a very el­e­gant li­brary to test asyn­chro­nous ap­pli­ca­tions de­vel­oped with vert.x. How­ever be­cause of this asyn­chro­nous as­pect, re­port­ing test fail­ures is not nat­ural for JUnit users.  This is be­cause, the failed as­ser­tions need to be re­ported to the \", _jsx(_components.em, {\n          children: \"test con­text\"\n        }), \", con­trol­ling the ex­e­cu­tion (and so the out­come) of the test. In other words, in a Vert.x Unit test you can­not use the reg­u­lar Junit as­ser­tions and as­ser­tion li­braries. In this blog post, we pro­pose a way to let you using Ham­crest match­ers in Vert.x Unit tests.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"using-vertx-unit\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#using-vertx-unit\"\n        }), \"Using Vert.x Unit\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Vert.x Unit is a test li­brary made to en­sure the be­hav­ior of vert.x ap­pli­ca­tions. It lets you im­ple­ment tests check­ing asyn­chro­nous be­hav­ior.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Vert.x Unit can be used with Junit. For this, you just need to add the fol­low­ing de­pen­dency to your project:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"io.vertx\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"vertx-unit\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"3.2.0\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          }), \"\\n  \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you are using Gra­dle, the de­pen­dency is:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-gradle\",\n          children: [\"testCompile ‘io.vertx:vertx-unit:\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"3.2\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"’\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you are using an IDE, just add the vertx-​unit jar to your project class­path.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Ob­vi­ously, you would need to add JUnit too.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"No­tice that vertx-​unit does not need JUnit, and can be used with­out it. Check the Vert.x Unit \", _jsx(Link, {\n          href: \"/docs/vertx-unit/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"doc­u­men­ta­tion\"\n          })\n        }), \" for more de­tails.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"vertx-unit-example\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#vertx-unit-example\"\n        }), \"Vert.x Unit example\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s con­sider this very sim­ple \", _jsx(_components.code, {\n          children: \"Verticle\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MyFirstVerticle\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"AbstractVerticle\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"start\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"final\"\n            }), \" Future future)\"]\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"throws\"\n          }), \" Exception {\\n    vertx.createHttpServer()\\n        .requestHandler(req -> req.response().end(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"hello vert.x\\\"\"\n          }), \"))\\n        .listen(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", done -> {\\n          \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (done.failed()) {\\n            future.fail(done.cause());\\n          } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n            future.complete();\\n          }\\n        });\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It just cre­ates a new HTTP server and when launched it no­ti­fies the \", _jsx(_components.code, {\n          children: \"future\"\n        }), \" of the com­ple­tion.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To test this ver­ti­cle with Vert.x Unit you would write some­thing like:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@RunWith(VertxUnitRunner.class)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MyFirstVerticleTest\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Vertx vertx;\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Before\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"setUp\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n    vertx = Vertx.vertx();\\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\\n      context.asyncAssertSuccess());\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"test\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" context.async();\\n    vertx.createHttpClient().get(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \")\\n      .handler(response -> {\\n        context.assertEquals(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \", response.statusCode());\\n        response.bodyHandler(buffer -> {\\n          context.assertEquals(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"hello vert.x\\\"\"\n          }), \", buffer.toString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"utf-8\\\"\"\n          }), \"));\\n          async.complete();\\n        });\\n      })\\n      .end();\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"First, the test class is an­no­tated with \", _jsx(_components.code, {\n          children: \"@RunWith(VertxUnitRunner.class)\"\n        }), \", in­struct­ing JUnit to use this spe­cial run­ner. This run­ner lets you in­ject a \", _jsx(_components.code, {\n          children: \"TestContext\"\n        }), \" pa­ra­me­ter into every test meth­ods (as well as \", _jsx(_components.code, {\n          children: \"@Before\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"@After\"\n        }), \") to han­dle the asyn­chro­nous as­pect of the test.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the \", _jsx(_components.code, {\n          children: \"setUp\"\n        }), \" method, it cre­ates a new in­stance of \", _jsx(_components.code, {\n          children: \"Vertx\"\n        }), \" and de­ploy the ver­ti­cle. Thanks to \", _jsx(_components.code, {\n          children: \"context.asyncAssertSuccess()\"\n        }), \", it waits until the suc­cess­ful com­ple­tion of the ver­ti­cle de­ploy­ment. In­deed, the de­ploy­ment is asyn­chro­nous, and we must be sure that the ver­ti­cle has been de­ployed and has com­pleted its ini­tial­iza­tion be­fore start­ing to test it.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"test()\"\n        }), \" method cre­ates an \", _jsx(_components.code, {\n          children: \"Async\"\n        }), \" ob­ject that will be used to re­port when the test has been com­pleted. Then it cre­ates an HTTP client to emit a re­quest on the server from our ver­ti­cle and check that:\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"the HTTP code is \", _jsx(_components.code, {\n            children: \"200 (OK)\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"the body is \", _jsx(_components.code, {\n            children: \"hello vert.x\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As you can see, to im­ple­ment the checks, the as­ser­tions method are called on the \", _jsx(_components.code, {\n          children: \"TestContext\"\n        }), \" ob­ject, which con­trol the test ex­e­cu­tion. When every­thing has been tested, we call \", _jsx(_components.code, {\n          children: \"async.complete()\"\n        }), \" to end the test. If an as­ser­tion failed, the test is ob­vi­ously stopped. This would not be the case if you would use reg­u­lar Junit as­ser­tions.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"using-the-hamcrest-matchers\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#using-the-hamcrest-matchers\"\n        }), \"Using the Hamcrest Matchers\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the pre­vi­ous ex­am­ple, we used the the as­ser­tions avail­able from the \", _jsx(_components.code, {\n          children: \"TestContext\"\n        }), \" in­stance. How­ever it pro­vides a lim­ited set of meth­ods. Ham­crest is a li­brary of match­ers, which can be com­bined in to cre­ate flex­i­ble ex­pres­sions of in­tent in tests. It is very con­ve­nient when test­ing com­plex ap­pli­ca­tions.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Ham­crest can­not be used di­rectly as it would not re­port the fail­ure on the \", _jsx(_components.code, {\n          children: \"TestContext\"\n        }), \". For this pur­pose we cre­ate a \", _jsx(_components.code, {\n          children: \"VertxMatcherAssert\"\n        }), \" class:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"VertxMatcherAssert\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" <T> \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"assertThat\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(TestContext context, T actual,\\n    Matcher<? \", _jsx(_components.span, {\n              className: \"hljs-built_in\",\n              children: \"super\"\n            }), \" T> matcher)\"]\n          }), \" {\\n    assertThat(context, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"\\\"\"\n          }), \", actual, matcher);\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" <T> \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"assertThat\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(TestContext context, String reason,\\n    T actual, Matcher<? \", _jsx(_components.span, {\n              className: \"hljs-built_in\",\n              children: \"super\"\n            }), \" T> matcher)\"]\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (!matcher.matches(actual)) {\\n      \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Description\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"description\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"StringDescription\"\n          }), \"();\\n      description.appendText(reason)\\n          .appendText(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"\\\\nExpected: \\\"\"\n          }), \")\\n          .appendDescriptionOf(matcher)\\n          .appendText(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"\\\\n     but: \\\"\"\n          }), \");\\n      matcher.describeMismatch(actual, description);\\n      context.fail(description.toString());\\n    }\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"assertThat\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(TestContext context, String reason,\\n    \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"boolean\"\n            }), \" assertion)\"]\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (!assertion) {\\n      context.fail(reason);\\n    }\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This class pro­vides \", _jsx(_components.code, {\n          children: \"assertThat\"\n        }), \" method that re­ports error on the given \", _jsx(_components.code, {\n          children: \"TestContext\"\n        }), \". The com­plete code is avail­able \", _jsx(_components.a, {\n          href: \"https://gist.github.com/cescoffier/5cbf4c69aa094ac9b1a6\",\n          children: \"here\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"With this class, we can re-​implement our test as fol­lows:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"testWithHamcrest\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(TestContext context)\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" context.async();\\n  vertx.createHttpClient().get(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"localhost\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/\\\"\"\n          }), \").handler(response -> {\\n    assertThat(context, response.statusCode(), is(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \"));\\n    response.bodyHandler(buffer -> {\\n      assertThat(context, buffer.toString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"utf-8\\\"\"\n          }), \"), is(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"hello vert.x\\\"\"\n          }), \"));\\n      async.complete();\\n    });\\n  }).end();\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To ease the usage, I’ve added two \", _jsx(_components.em, {\n          children: \"im­port sta­tic\"\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" io.vertx.unit.example.VertxMatcherAssert.assertThat;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" org.hamcrest.core.Is.is;\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can use any Ham­crest matcher, or even im­ple­ment your own as soon as you use the \", _jsx(_components.code, {\n          children: \"assertThat\"\n        }), \" method pro­vided by \", _jsx(_components.code, {\n          children: \"VertxMatcherAssert\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"conclusion\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#conclusion\"\n        }), \"Conclusion\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this post we have seen how you can com­bine Ham­crest and Vert.x Unit. So, you are not lim­ited any­more by the set of as­sert meth­ods pro­vided by Vert.x Unit, and can use the whole ex­pres­sive­ness of Ham­crest Match­ers.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Don’t for­get that you still can’t use the \", _jsx(_components.code, {\n          children: \"assert\"\n        }), \" meth­ods from Junit, as they don’t re­port on the \", _jsx(_components.code, {\n          children: \"TestContext\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Intro to Vert.x Shell","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Vert.x Shell provides an extensible command line for Vert.x, accessible via SSH, Telnet or a nice Web interface. Vert.x Shell comes out of the box with plenty of commands."},"date":"2016-01-25","slug":"intro-to-vert-x-shell"},"nextPost":{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"}]},"__N_SSG":true}