{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"OAuth2 got easy","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"Oauth2 support exists in Eclipse Vert.x since version 3.2.0. The implementation follows the principles that rule the whole vert.x ecosystem."},"date":"2016-12-02","slug":"oauth2-got-easy","readingTime":{"text":"2 min read","minutes":1.865,"time":111900,"words":373},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      em: \"em\",\n      pre: \"pre\",\n      span: \"span\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\"\n    }, props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Oauth2\"\n        }), \" sup­port ex­ists in Eclipse Vert.x since ver­sion 3.2.0. The im­ple­men­ta­tion fol­lows the prin­ci­ples that rule the whole vert.x ecosys­tem: un­opin­ion­ated, it does what you want it to do, sim­ple but not too sim­ple.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This works fine be­cause \", _jsx(_components.code, {\n          children: \"OAuth2\"\n        }), \" is a widely spread stan­dard and ven­dors ad­here to it quite well. How­ever due to the API and the de­tails of the spec­i­fi­ca­tion it re­quires some knowl­edge on what kind of \", _jsx(_components.em, {\n          children: \"flow\"\n        }), \" your ap­pli­ca­tion needs to sup­port, what are the end­points for au­tho­riz­ing and get­ting to­kens. This in­for­ma­tion, even though eas­ily ac­ces­si­ble to any­one who’s got the time and will, to read the ven­dor doc­u­men­ta­tion is easy to find, but it means that de­vel­op­ers would need to spend time in a non-​project problem-​related task.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Vert.x thrives for being fast and pro­duc­tive, so what if we could help you fo­cus­ing on your de­vel­op­ment tasks rather than read­ing Oauth2 provider doc­u­men­ta­tion? This is what you can ex­pect for the next re­lease.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Out of the box you will find out that you can in­stan­ti­ate an OAuth2 provider as easy as:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-lua\",\n          children: [\"Provider.\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"create\"\n          }), \"(vertx, clientId, clientSecret)\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"That’s it! sim­ple, to the point, sure it makes some as­sump­tions, it as­sumes that you want to use the ”\", _jsx(_components.code, {\n          children: \"AUTH_CODE\"\n        }), \"” flow which is what you nor­mally do for web ap­pli­ca­tions with a back­end.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The sup­ported \", _jsx(_components.code, {\n          children: \"Provider\"\n        }), \" im­ple­men­ta­tions will con­fig­ure the base API (which will be still avail­able) with the cor­rect URLs, scope en­cod­ing scheme or extra con­fig­u­ra­tion such as ”\", _jsx(_components.code, {\n          children: \"shopId\"\n        }), \"”/”\", _jsx(_components.code, {\n          children: \"GUID\"\n        }), \"” for \", _jsx(_components.code, {\n          children: \"Shopify\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"Azure AD\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So what sup­ported \", _jsx(_components.code, {\n          children: \"Provider\"\n        }), \"s can you al­ready find?\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://app.net/\",\n            children: \"App.net\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://azure.microsoft.com/en-us/\",\n            children: \"Azure\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://box.com\",\n            children: \"Box.com\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://dropbox.com\",\n            children: \"Drop­box\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://facebook.com\",\n            children: \"Face­book\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://foursquare.com\",\n            children: \"Foursquare\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"http://github.com\",\n            children: \"Github\"\n          })\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://google.com\",\n            children: \"Google\"\n          }), \" (ei­ther \", _jsx(_components.code, {\n            children: \"AUTH_CODE\"\n          }), \" flow or \", _jsx(_components.code, {\n            children: \"Server to Server\"\n          }), \" flow)\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://instagram.com\",\n            children: \"In­sta­gram\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://keycloak.org\",\n            children: \"Key­cloak\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://linkedin.com\",\n            children: \"LinkedIn\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://mailchimp.com\",\n            children: \"Mailchimp\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://salesforce.com\",\n            children: \"Sales­force\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://shopify.com\",\n            children: \"Shopify\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://soundcloud.com\",\n            children: \"Sound­cloud\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://stripe.com\",\n            children: \"Stripe\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://twitter.com\",\n            children: \"Twit­ter\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"That’s a hand­ful of \", _jsx(_components.code, {\n          children: \"Provider\"\n        }), \"s, but there is more. Say that you want to en­sure that your SSL con­nec­tions are valid and want to con­trol the cer­tifi­cate val­i­da­tion. Every provider also ac­cepts a Http­Clien­tOp­tions ob­ject that will be used in­ter­nally when con­tact­ing your provider, so in this case, you have full se­cu­rity con­trol of your con­nec­tion, not just de­faults.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You can ex­pect this new code to land for 3.4 as it is not avail­able in the cur­rent re­lease (3.3.3).\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"},"prevPost":{"meta":{"title":"Getting started with new fabric8 Vert.x Maven Plugin","category":"guides","authors":[{"name":"Kamesh Sampath","github_id":"kameshsampath"}],"summary":"The all new fabric8 Vert.x Maven Plugin allows you to setup, package, run, start, stop and redeploy easily with a very little configuration resulting in a less verbose pom.xml."},"date":"2016-12-07","slug":"getting-started-with-new-fabric8-vert-x-maven-plugin"},"nextPost":{"meta":{"title":"Vert.x featuring Continuous Delivery with Jenkins and Ansible","category":"guides","authors":[{"name":"Ricardo Hernandez","github_id":"ricardohmon"}],"summary":"This blog entry describes an approach to adopt Continuous Delivery for Vert.x applications using Jenkins and Ansible by taking advantage of the Jenkins Job DSL and Ansible plugins."},"date":"2016-09-28","slug":"vert-x-featuring-continuous-delivery-with-jenkins-and-ansible"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Contract Driven REST Services with Vert.x3","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"We see a new trend in development where we are shifting from developing applications to APIs. More and more we see services being offered as REST APIs that we are allowed to consume."},"date":"2015-09-17","slug":"contract-driven-rest-services-with-vert-x3"},{"meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant"}]},"__N_SSG":true}