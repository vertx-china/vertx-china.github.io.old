{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Send web requests and assert results with vertx-junit5-web-client","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"In this blog post, you'll learn how to use the new vertx-junit5-web-client module to send web requests in your unit tests and to make assertions."},"date":"2019-10-22","slug":"send-web-requests-and-assert-results-with-vertx-junit5-web-client","readingTime":{"text":"2 min read","minutes":1.3,"time":78000,"words":260},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\",\n      pre: \"pre\",\n      span: \"span\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"In the last Vert.x 3.8 re­lease, we added a new mod­ule called \", _jsx(_components.code, {\n          children: \"vertx-junit5-web-client\"\n        }), \", that brings \", _jsx(Link, {\n          href: \"/docs/vertx-web-client/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x Web Client\"\n          })\n        }), \" in­jec­tion\\ninto tests and pro­vides an API called \", _jsx(_components.code, {\n          children: \"TestRequest\"\n        }), \" to sim­plify the cre­ation and as­ser­tions on \", _jsx(_components.code, {\n          children: \"WebClient\"\n        }), \" re­quests:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" io.vertx.junit5.web.TestRequest.*;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ExtendWith({\\n  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension\\n  VertxWebClientExtension.class\\n})\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"TestRequestExample\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"test1\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(WebClient client, VertxTestContext testContext)\"\n          }), \" {\\n    testRequest(client, HttpMethod.GET, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/hello\\\"\"\n          }), \") \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Build the request\"\n          }), \"\\n      .with(\\n        queryParam(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"francesco\\\"\"\n          }), \"), \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Add query param\"\n          }), \"\\n        requestHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"x-my\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"foo\\\"\"\n          }), \") \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Add request header\"\n          }), \"\\n      )\\n      .expect(\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Assert that response is a JSON with a specific body\"\n          }), \"\\n        jsonBodyResponse(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"value\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello Francesco!\\\"\"\n          }), \")),\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Assert that response contains a particular header\"\n          }), \"\\n        responseHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"x-my\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"bar\\\"\"\n          }), \")\\n      )\\n      .send(testContext); \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Complete (or fail) the VertxTestContext\"\n          }), \"\\n  }\\n\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"testRequest()\"\n        }), \" will use Vert.x Web Client to send the re­quest. When the re­sponse is re­ceived, It suc­ceds the test or it cor­rectly prop­a­gates as­ser­tion fail­ures, if any.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can also send mul­ti­ple re­quests using \", _jsx(Link, {\n          href: \"/docs/apidocs/io/vertx/junit5/Checkpoint.html\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: _jsx(_components.code, {\n              children: \"Checkpoint\"\n            })\n          })\n        }), \":\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" io.vertx.junit5.web.TestRequest.*;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ExtendWith({\\n  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension\\n  VertxWebClientExtension.class\\n})\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MultiTestRequestExample\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Test\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"test2\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(WebClient client, VertxTestContext testContext)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Checkpoint\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"checkpoint\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" testContext.checkpoint(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2\"\n          }), \"); \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create the Checkpoint to flag when request succeds\"\n          }), \"\\n\\n    testRequest(\\n        client    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create the test request using WebClient APIs\"\n          }), \"\\n          .get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/hello\\\"\"\n          }), \")\\n          .addQueryParam(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"francesco\\\"\"\n          }), \")\\n          .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"x-my\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"foo\\\"\"\n          }), \")\\n      )\\n      .expect(\\n        jsonBodyResponse(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"value\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello Francesco!\\\"\"\n          }), \")),\\n        responseHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"x-my\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"bar\\\"\"\n          }), \")\\n      )\\n      .send(testContext, checkpoint); \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Pass the checkpoint to flag\"\n          }), \"\\n\\n    testRequest(\\n        client\\n          .get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/hello\\\"\"\n          }), \")\\n          .addQueryParam(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"julien\\\"\"\n          }), \")\\n          .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"x-my\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"foo\\\"\"\n          }), \")\\n      )\\n      .expect(\\n        jsonBodyResponse(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"JsonObject\"\n          }), \"().put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"value\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello Julien!\\\"\"\n          }), \")),\\n        responseHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"x-my\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"bar\\\"\"\n          }), \")\\n      )\\n      .send(testContext, checkpoint);\\n  }\\n\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Look at \", _jsx(Link, {\n          href: \"/docs/vertx-junit5-web-client/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x JUnit 5 Web Client doc­u­men­ta­tion\"\n          })\n        }), \" for more de­tails\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Eclipse Vert.x 3.8.4","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"This version is a bug fix release of Vert.x 3.8.3, which addresses quite a few bugs reported by the community."},"date":"2019-11-28","slug":"eclipse-vert-x-3-8-4"},"nextPost":{"meta":{"title":"Eclipse Vert.x 3.8.3","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"This new version is a minor bug fix release that addresses issues reported in Eclipse Vert.x 3.8.2. We would like to thank you all for reporting these bugs."},"date":"2019-10-18","slug":"eclipse-vert-x-3-8-3"},"relatedPosts":[{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"},{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"}]},"__N_SSG":true}