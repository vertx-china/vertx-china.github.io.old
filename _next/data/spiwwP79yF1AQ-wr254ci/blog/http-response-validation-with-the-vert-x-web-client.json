{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"HTTP response validation with the Vert.x Web Client","category":"guides","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"Learn how to use response predicates from the Vert.x Web module to validate HTTP responses and to automatically generate error messages."},"date":"2018-12-10","slug":"http-response-validation-with-the-vert-x-web-client","readingTime":{"text":"4 min read","minutes":3.09,"time":185400,"words":618},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      code: \"code\",\n      strong: \"strong\",\n      pre: \"pre\",\n      span: \"span\",\n      em: \"em\",\n      h2: \"h2\",\n      h3: \"h3\"\n    }, props.components), {Link} = _components;\n    if (!Link) _missingMdxReference(\"Link\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"By de­fault, a \", _jsx(Link, {\n          href: \"/docs/vertx-web-client/java/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x Web Client\"\n          })\n        }), \" re­quest ends with an error only if some­thing wrong hap­pens at the net­work level.\\nIn other words, a \", _jsx(_components.code, {\n          children: \"404 Not Found\"\n        }), \" re­sponse, or a re­sponse with the wrong con­tent type, are \", _jsx(_components.strong, {\n          children: \"not\"\n        }), \" con­sid­ered as fail­ures.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Hence, you would usu­ally per­form san­ity checks man­u­ally after the re­sponse is re­ceived:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-csharp\",\n          children: [\"client\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"get\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"myserver.mycompany.com\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/some-uri\\\"\"\n          }), \")\\n  .send(ar -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (ar.succeeded()) {\\n      HttpResponse<Buffer> response = ar.result();\\n      \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (response.statusCode() == \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \" && response.getHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \").\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"equals\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json\\\"\"\n          }), \")) {\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Decode the body as a json object\"\n          }), \"\\n        JsonObject body = response.bodyAsJsonObject();\\n      } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n        System.\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"out\"\n          }), \".println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Something went wrong \\\"\"\n          }), \" + response.statusCode());\\n      }\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n      System.\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"out\"\n          }), \".println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Something went wrong \\\"\"\n          }), \" + ar.cause().getMessage());\\n    }\\n  });\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Start­ing with \", _jsx(Link, {\n          href: \"/blog/eclipse-vert-x-3-6-0-released/\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Vert.x 3.6\"\n          })\n        }), \", you can can trade flex­i­bil­ity for clar­ity and con­cise­ness using \", _jsx(_components.em, {\n          children: \"re­sponse pred­i­cates\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"response-predicates\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#response-predicates\"\n        }), \"Response predicates\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(Link, {\n          href: \"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"Re­sponse pred­i­cates\"\n          })\n        }), \" can fail a re­quest when the re­sponse does not match cri­te­rion.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The Web Client mod­ule comes with a set of ready-​to-use pred­i­cates:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-kotlin\",\n          children: [\"client\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"get\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"myserver.mycompany.com\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/some-uri\\\"\"\n          }), \")\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"expect\"\n          }), \"(ResponsePredicate.SC_SUCCESS)\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"expect\"\n          }), \"(ResponsePredicate.JSON)\\n  .send(ar -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (ar.succeeded()) {\\n      HttpResponse<Buffer> response = ar.result();\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Safely decode the body as a json object\"\n          }), \"\\n      JsonObject body = response.bodyAsJsonObject();\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n      System.\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"out\"\n          }), \".println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Something went wrong \\\"\"\n          }), \" + ar.cause().getMessage());\\n    }\\n  });\\n\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The web is full of HTTP/JSON end­points, so there is no doubt the \", _jsx(_components.code, {\n          children: \"ResponsePredicate.SC_SUCCESS\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"ResponsePredicate.JSON\"\n        }), \" can be handy.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Nev­er­the­less, you might also need to check that the sta­tus code is whithin a spe­cific range:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-kotlin\",\n          children: [\"client\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"get\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"myserver.mycompany.com\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/some-uri\\\"\"\n          }), \")\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"expect\"\n          }), \"(ResponsePredicate.status(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"200\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"202\"\n          }), \"))\\n  .send(ar -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// ....\"\n          }), \"\\n  });\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Or that the con­tent is of a spe­cific type:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-kotlin\",\n          children: [\"client\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"get\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"myserver.mycompany.com\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/some-uri\\\"\"\n          }), \")\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"expect\"\n          }), \"(ResponsePredicate.contentType(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"some/content-type\\\"\"\n          }), \"))\\n  .send(ar -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// ....\"\n          }), \"\\n  });\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Please refer to the \", _jsx(Link, {\n          href: \"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\",\n          passHref: true,\n          children: _jsxs(_components.a, {\n            href: \"\",\n            children: [_jsx(_components.code, {\n              children: \"ResponsePredicate\"\n            }), \" doc­u­men­ta­tion\"]\n          })\n        }), \" for a full list of pre­de­fined pred­i­cates.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"custom-predicates\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#custom-predicates\"\n        }), \"Custom predicates\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Even­tu­ally, pred­i­cates were not de­signed for sta­tus code and con­tent type check­ing only, so feel free to cre­ate your own val­i­da­tion code:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-kotlin\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Check CORS header allowing to do POST\"\n          }), \"\\nFunction<HttpResponse<\", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"Void\"\n          }), \">, ResponsePredicateResult> methodsPredicate = resp -> {\\n  String methods = resp.getHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Access-Control-Allow-Methods\\\"\"\n          }), \");\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (methods != \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \") {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (methods.contains(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"POST\\\"\"\n          }), \")) {\\n      \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" ResponsePredicateResult.success();\\n    }\\n  }\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" ResponsePredicateResult.failure(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Does not work\\\"\"\n          }), \");\\n};\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Send pre-flight CORS request\"\n          }), \"\\nclient\\n  .request(HttpMethod.OPTIONS, \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8080\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"myserver.mycompany.com\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"/some-uri\\\"\"\n          }), \")\\n  .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Origin\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Server-b.com\\\"\"\n          }), \")\\n  .putHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Access-Control-Request-Method\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"POST\\\"\"\n          }), \")\\n  .\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"expect\"\n          }), \"(methodsPredicate)\\n  .send(ar -> {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (ar.succeeded()) {\\n      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Process the POST request now\"\n          }), \"\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n      System.\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"out\"\n          }), \".println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Something went wrong \\\"\"\n          }), \" + ar.cause().getMessage());\\n    }\\n  });\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that re­sponse pred­i­cates are eval­u­ated \", _jsx(_components.em, {\n          children: \"be­fore\"\n        }), \" the re­sponse body is re­ceived.\\nThere­fore \", _jsx(_components.strong, {\n          children: \"you can’t in­spect the re­sponse body\"\n        }), \" in a pred­i­cate test func­tion, only sta­tus code, sta­tus mes­sage and re­sponse head­ers.\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        id: \"dealing-with-failures\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#dealing-with-failures\"\n        }), \"Dealing with failures\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"By de­fault, re­sponse pred­i­cates (in­clud­ing the pre­de­fined ones) use a generic error con­verter which dis­cards the re­sponse body and con­veys a sim­ple mes­sage.\\nYou can cus­tomize the ex­cep­tion class by chang­ing the error con­verter:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"ResponsePredicate \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"predicate\"\n          }), \" = ResponsePredicate.create(ResponsePredicate.SC_SUCCESS, result -> {\\n  return new MyCustomException(result.message())\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n})\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Be­ware that cre­at­ing ex­cep­tions in Java comes with the \", _jsx(_components.strong, {\n          children: \"per­for­mance cost\"\n        }), \" of cap­tur­ing the call stack.\\nThe generic error con­verter gen­er­ates ex­cep­tions that do not cap­ture it.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        id: \"reading-details-in-error-responses\",\n        children: [_jsx(_components.a, {\n          \"aria-hidden\": true,\n          tabIndex: \"-1\",\n          className: \"heading-anchor\",\n          href: \"#reading-details-in-error-responses\"\n        }), \"Reading details in error responses\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Many web APIs pro­vide de­tails in error re­sponses.\\nFor ex­am­ple, the \", _jsx(_components.a, {\n          href: \"https://developer.marvel.com/docs\",\n          children: \"Mar­vel API\"\n        }), \" uses this JSON ob­ject for­mat:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-css\",\n          children: [\"{\\n  \\\"\", _jsx(_components.span, {\n            className: \"hljs-selector-tag\",\n            children: \"code\"\n          }), \"\\\": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"InvalidCredentials\\\"\"\n          }), \",\\n  \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"message\\\"\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"The passed API key is invalid.\\\"\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To avoid los­ing this in­for­ma­tion, it is pos­si­ble to wait for the re­sponse body to be fully re­ceived be­fore the error con­verter is called:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ErrorConverter\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"converter\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ErrorConverter.createFullBody(result -> {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Invoked after the response body is fully received\"\n          }), \"\\n  HttpResponse<Buffer> response = result.response();\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (response.getHeader(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"content-type\\\"\"\n          }), \").equals(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"application/json\\\"\"\n          }), \")) {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Error body is JSON data\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"JsonObject\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"body\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" response.bodyAsJsonObject();\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MyCustomException\"\n          }), \"(body.getString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"code\\\"\"\n          }), \"), body.getString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"message\\\"\"\n          }), \"));\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Fallback to defaut message\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"MyCustomException\"\n          }), \"(result.message());\\n});\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ResponsePredicate\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"predicate\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" ResponsePredicate.create(ResponsePredicate.SC_SUCCESS, converter);\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"That’s it! Feel free to com­ment here or ask ques­tions on our \", _jsx(Link, {\n          href: \"/community\",\n          passHref: true,\n          children: _jsx(_components.a, {\n            href: \"\",\n            children: \"com­mu­nity chan­nels\"\n          })\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"},"prevPost":{"meta":{"title":"Vert.x Web API Service Introduction","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"This blog post teaches you how to use the new module vertx-web-api-service to combine the Web Router and the OpenAPI Router Factory with service proxies."},"date":"2018-12-13","slug":"vert-x-web-api-service-introduction"},"nextPost":{"meta":{"title":"The RSS reader tutorial (Step 3)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"This is the third installment of our Vert.x Cassandra Client tutorial. We will implement the last RSS endpoint serving a list of articles related to a specific channel."},"date":"2018-12-06","slug":"the-rss-reader-tutorial-step-3"},"relatedPosts":[{"meta":{"title":"Things to keep in mind concerning CSRF attacks","category":"guides","authors":[{"name":"Xhelal Likaj","github_id":"xhlika"}],"summary":"Eclipse Vert.x like most frameworks provides an anti-CSRF defense. However, no framework can prevent all attack vectors that exist in the web. Therefore, developers need to be aware of some dangers and common attack vectors concerning CSRF defenses."},"date":"2021-01-23","slug":"eclipse-vert-x-CSRF-concerns"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"}]},"__N_SSG":true}