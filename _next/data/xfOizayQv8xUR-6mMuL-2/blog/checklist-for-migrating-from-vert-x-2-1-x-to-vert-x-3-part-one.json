{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Checklist for Migrating from Vert.x 2.1.x to Vert.x 3 - Part One","category":"guides","authors":[{"name":"Mark Spritzler","github_id":"bytor99999"}],"summary":"So while upgrading our application, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major upgrade from the previous version, with so many changes."},"date":"2015-07-06","slug":"checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one","readingTime":{"text":"9 min read","minutes":8.74,"time":524400,"words":1748},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This blog post presents feed\\xADbacks from a project mi\\xADgra\\xADtion using Vert.x 2 to Vert.x 3.\"), mdx(\"h2\", {\n    \"id\": \"we-are-in-the-process-of-converting-our-vertx-215-application-to-vertx-30\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#we-are-in-the-process-of-converting-our-vertx-215-application-to-vertx-30\"\n  })), \"We are in the process of converting our Vert.x 2.1.5 application to Vert.x 3.0.\"), mdx(\"p\", null, \"So while up\\xADgrad\\xADing our ap\\xADpli\\xADca\\xADtion, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major up\\xADgrade from the pre\\xADvi\\xADous ver\\xADsion, with so many changes.\"), mdx(\"p\", null, \"It re\\xADquires re-\\u200Bthinking your cur\\xADrent 2.x Vert.x ap\\xADpli\\xADca\\xADtion. There are new classes, new apis, and a new pack\\xADage struc\\xADture that has greatly sim\\xADpli\\xADfied things that we used to have to work around. There\\xADfore in our up\\xADgrade it re\\xADquired us to refac\\xADtor and re\\xADmove any un\\xADnec\\xADes\\xADsary \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201Chacks\\u201D\"), \" that weren\\u2019t avail\\xADable in 2 that are now a part of Vert.x 3 that you re\\xADally want and need to take ad\\xADvan\\xADtage of. (I don\\u2019t mean there are hacks in 3.x, just that we had in our ap\\xADpli\\xADca\\xADtion with Vert.x 2.x)\"), mdx(\"p\", null, \"There are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Met\\xADrics\"), \", and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Clus\\xADtered shared data\"), \", with lock\\xADing and many more fea\\xADtures that are amaz\\xADing new ad\\xADdi\\xADtions. These are things we had to hack into our ap\\xADpli\\xADca\\xADtion with Vert.x 2.x. We added our own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MetricsRegistry\"), \" from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dropwizard.github.io/metrics/3.1.0/getting-started/\"\n  }), \"Drop\\xADWiz\\xADard\"), \" which meant mak\\xADing our own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class that called Vert.x\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Starter\"), \" class after start\\xADing up the reg\\xADistry, but only in our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"De\\xADvops\"), \" server de\\xADploys, not our de\\xADvel\\xADoper ma\\xADchines. And we had to build our own dis\\xADtrib\\xADuted locked of clus\\xADtered data that also re\\xADquired writ\\xADing a com\\xADpre\\xADhen\\xADsive dis\\xADtrib\\xADuted timers. (The timers got fixed with a bet\\xADter actor model). But now we can use what Vert.x gives us in\\xADter\\xADnally for those use cases.\"), mdx(\"p\", null, \"This blog post is part one, as I am sure there will be some new changes that we need to do that we haven\\u2019t got\\xADten to yet. Which as we go, will post in part two. Also that this post is a work in progress in that when\\xADever you are up\\xADgrad\\xADing and refac\\xADtor\\xADing your code, it doesn\\u2019t leave much time for tak\\xADing de\\xADtailed notes, or writ\\xADing beau\\xADti\\xADful prose. I am a ter\\xADri\\xADble writer even when I can fully con\\xADcen\\xADtrate on it. So the first draft will just be a list of my notes. These notes are not in any par\\xADtic\\xADu\\xADlar order, but some things like tests you might want to save for last. (Just DON\\u2019T delete your tests, tests are very im\\xADpor\\xADtant)\"), mdx(\"p\", null, \"One of the first things that Vert.x has changed is the whole \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"class\\xADloader\"), \" setup. Read the Vert.x Docs for more in\\xADfor\\xADma\\xADtion but ba\\xADsi\\xADcally, we have a flat \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"class\\xADloader\"), \" sys\\xADtem now. YAY! And one of the first things I no\\xADticed that is gone is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Platform\"), \" mod\\xADule.\"), mdx(\"h2\", {\n    \"id\": \"changes-we-have-made\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#changes-we-have-made\"\n  })), \"Changes we have made.\"), mdx(\"h3\", {\n    \"id\": \"dependency-changes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#dependency-changes\"\n  })), \"Dependency changes\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"So the first thing we did was to re\\xADmove the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vert.x-platform\"), \" de\\xADpen\\xADdency from our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom\"), \" file (Build de\\xADpen\\xADdency file of what\\xADever build sys\\xADtem you use) This also means that you will be re\\xADmov\\xADing any im\\xADport state\\xADments from your code that has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".platform\"), \". Which leads us to the next point.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Change all the im\\xADports for Vertx. from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"org.vertx\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx\"), \". This could be a lot of work, as it is in every class you use Vert.x in. We had at least 250 lo\\xADca\\xADtions to change here. Some classes have moved pack\\xADages and \\u201Cjars\\u201D that have them, so there will be some new jars to in\\xADclude as de\\xADpen\\xADden\\xADcies and dif\\xADfer\\xADent im\\xADport state\\xADments for them.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If using a lan\\xADguage other than Java, change the de\\xADpen\\xADdency to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-lang-<<language>>\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Re\\xADmove any mod\\xADules ref\\xADer\\xADences that are using Vert.x 2.x stuff. You can get an odd error like\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"The type org.vertx.java.core.json.JsonOb\\xADject can\\xADnot be re\\xADsolved. It is in\\xADdi\\xADrectly ref\\xADer\\xADenced from re\\xADquired .class files\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testtools\"), \" de\\xADpen\\xADdency is gone. There is now Vertx-\\u200Bunit. So all your pre\\xADvi\\xADous tests need to be com\\xADpletely re-\\u200Bwritten in the new style. This can be re\\xADally dif\\xADfi\\xADcult and time con\\xADsum\\xADing as the tests you al\\xADready have writ\\xADten re\\xADally do need to be re-\\u200Bwritten from scratch. But these tests are also the back\\xADbone in know\\xADing if your code is work\\xADing. So this could take months if you have a re\\xADally full set of test suites al\\xADready. Also note the list below is to con\\xADvert your JUnit In\\xADte\\xADgra\\xADtion tests. as vertx-\\u200Bunit first and fore\\xADmost pro\\xADvides its own test\\xADing frame\\xADwork/suite but it also works in JUnit, and if you are using JUnit you need to do the fol\\xADlow\\xADing\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Re\\xADmove all the im\\xADports to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TestTools\"), \", in\\xADclud\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"VertxAssert\"), \". I would do a find/re\\xADplace to re\\xADplace all the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"VertxAssert\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"testContext\"), \" for when you have to add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TestContext\"), \" to all your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@Test\"), \" meth\\xADods. I rec\\xADom\\xADmend nam\\xADing the pa\\xADra\\xADme\\xADter \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"testContext\"), \", just to put more con\\xADtext, into your con\\xADtext. Be\\xADcause if you just have \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"context\"), \" as your pa\\xADra\\xADme\\xADter name, how do you know what con\\xADtext the con\\xADtext is? Sorry, that was too much fun. Ba\\xADsi\\xADcally, what I am say\\xADing is if you have say \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Spring ApplicationContext\"), \" in with your in\\xADte\\xADgra\\xADtion tests with Vert.x what does \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"context\"), \" rep\\xADre\\xADsent? Spring or Vert.x test con\\xADtext.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@RunWith(VertxUnitRunner.class)\"), \" above your test class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Re\\xADmove any \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"VertxAssert.testComplete()\"), \" those are gone. It needs \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TestContext.async().complete()\"), \". It is also im\\xADpor\\xADtant to un\\xADder\\xADstand what \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"async()\"), \" means. When to call it, when to com\\xADplete it. It also al\\xADlows you to do mul\\xADti\\xADple \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"async()\"), \" calls and nested ones. I think I needed that when I had a test that was a longer use case of many mes\\xADsages being sent, but only after re\\xADsponses to other ones oc\\xADcurred. For in\\xADstance, to do chat in our app, you have to con\\xADnect, sub\\xADscribe, friend some\\xADone, then you can send a chat mes\\xADsage. So that is 4 total Vert.x Mes\\xADsages sent from the Test client. And you can sub\\xADscribe until con\\xADnect com\\xADpleted, and you can send or re\\xADceive mes\\xADsages un\\xADless you are sub\\xADscribed and have a friend. So we need to have a few \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"async()\"), \" calls in that sce\\xADnario.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What is in your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"start\"), \" method over\\xADride. Make that an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@Before\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What is in your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stop\"), \" method over\\xADride. Make that an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@After\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you have your as\\xADser\\xADtions have cus\\xADtom mes\\xADsage \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"strings\"), \" to log out when they fail, that pa\\xADra\\xADme\\xADter is now at the end of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert\"), \" method call. Yes, this one can be painful.\")), mdx(\"h3\", {\n    \"id\": \"build-changes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#build-changes\"\n  })), \"Build Changes\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Re\\xADmove all \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"vertx maven plugin\"), \" code to gen\\xADer\\xADate mod\\xADules, in\\xADstead cre\\xADate \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat\"), \" jars, which re\\xADquires adding the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Shade maven plugin\"), \" to put all jar files into a big fat jar. The vertx-\\u200Bexamples project has \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/master/maven-simplest\"\n  }), \"simplest-\\u200Bmaven\"), \" which has the stuff to cre\\xADate the fat jar. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/master/gradle-simplest\"\n  }), \"simplest-\\u200Bgradle\"), \" is the gra\\xADdle equiv\\xADa\\xADlent.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you were run\\xADning your ap\\xADpli\\xADca\\xADtion with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runMod\"), \" or some\\xADthing like that then you need to cre\\xADate a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat\"), \" jar, chang\\xADing the build file as in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/blob/master/maven-simplest/pom.xml\"\n  }), \"this one\"), \" and cre\\xADate a Main class like here \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/blob/master/maven-simplest/src/main/java/io/vertx/example/HelloWorldEmbedded.java\"\n  }), \"this one\"), \".\"))), mdx(\"h3\", {\n    \"id\": \"classcode-changes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#classcode-changes\"\n  })), \"Class/Code Changes\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Verticle\"), \" is now an in\\xADter\\xADface and not a class to ex\\xADtend, so using Groovy as an ex\\xADam\\xADple you now ex\\xADtend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GroovyVerticle\"), \". In Java ex\\xADtend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AbstractVerticle\"), \" in\\xADstead.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There is no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registerHandler\"), \" on the event\\xADBus any\\xADmore. So every\\xADwhere you do that has to change to cre\\xADate/call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumer()\"), \" and to un\\xADreg\\xADis\\xADter that han\\xADdler, you have to have a ref\\xADer\\xADence to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MessageConsumer\"), \" that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumer()\"), \" call re\\xADturns and call its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unregister\"), \" method.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject.toMap()\"), \" changed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject.getMap()\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \" also re\\xADmoved all the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"putXXX\"), \" meth\\xADods with just one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"put\"), \" method with over\\xADloaded ver\\xADsions for dif\\xADfer\\xADent types.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObjectMessage\"), \" no longer ex\\xADists. What re\\xADplaces de\\xADpends on what you are doing. Mean\\xADing, if it is an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" call\\xADback to a de\\xADploy, you will get a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Message\"), \" in\\xADstance back that has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"succeeded()\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"failed()\"), \" meth\\xADods as well as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body()\"), \" to check any re\\xADsults. If it is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Consumer\"), \", it is typ\\xADi\\xADcally a straight for\\xADward\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \". If you are in Groovy it is also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \", but the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body()\"), \" is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map\"), \" which you can use di\\xADrectly now, in\\xADstead of hav\\xADing to con\\xADvert from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There isn\\u2019t a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"container\"), \" vari\\xADable in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Verticles\"), \" any\\xADmore for de\\xADploy\\xADing ver\\xADti\\xADcles and also a con\\xADfig file. You need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.getOrCreateContext().config()\"), \" to get to it. I used that in the SockJS Ex\\xADam\\xADple code below.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SharedData\"), \" no longer has shared sets. It has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SharedData\"), \", so an entry in that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map\"), \" of shared data could be the name of the set as the key, and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Set\"), \" as the value. It ac\\xADtu\\xADally gives you more flex\\xADi\\xADbil\\xADity of what you put into Shared data, so this is ac\\xADtu\\xADally a big win for us.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Get\\xADting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeHandlerID\"), \" from a Socket type, is now a method call in\\xADstead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".writeHandlerID\"), \", so \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".writeHandlerID()\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJSSocket\"), \" is in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"vertx-\\u200Bweb\"), \" pack\\xADage now, so in\\xADclude it to get the class.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There isn\\u2019t a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJSServer\"), \" class any\\xADmore ei\\xADther. So you will cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebServer\"), \", a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \"\\nand set SSL (if you are using SSL on the Web\\xADServer) then cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJSHandler\"), \" to as\\xADsign to the router via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"route()\"), \" method and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handler()\"), \" meth\\xADods in the Router api.\\nHere is an ex\\xADam\\xADple of our code. Al\\xADthough I haven\\u2019t tested it yet. ;)\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-groovy\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"MyVerticle\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"GroovyVerticle\"), \" {\"), \"\\n  Router router\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" start() \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throws\"), \" Exception {\\n     router = Router.router(vertx)\\n     (Map<String, Object>) sslConfig =\\n        (Map<String, Object>)vertx.getOrCreateContext()\\n          .config().get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'ssl'\"), \")\\n\\n     HttpServer sslHttpServer = vertx.createHttpServer(\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-symbol\"\n  }), \"SSL:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \",\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-symbol\"\n  }), \"keyStorePath:\"), \" sslConfig.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"keystore\\\"\"), \"),\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-symbol\"\n  }), \"keyStorePassword:\"), \" sslConfig.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"password\\\"\"), \"))\\n\\n     startWebApiServer(sslHttpServer)\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" startWebApiServer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" HttpServer httpServer) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" sockHandler = SockJSHandler.create(vertx, [:])\\n    sockHandler.socketHandler {\\n      SockJSSocket ws -> sockJSConnectHandler(ws)\\n    }\\n    router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hdpoker\\\"\"), \").handler(sockHandler)\\n    httpServer.requestHandler(router.&accept)\\n    httpServer.listen()\\n  }\\n\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"more-testing-change\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#more-testing-change\"\n  })), \"More testing change\"), mdx(\"p\", null, \"Test\\xADing mes\\xADsages in In\\xADte\\xADgra\\xADtion Tests. To tell the test method that this has async calls put\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Async async = testContext.async()\"), \" as the first line in the test method. Yes, this is a lit\\xADtle re\\xADdun\\xADdant from above, but I al\\xADways for\\xADgot to put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async()\"), \" calls in my in\\xADte\\xADgra\\xADtion tests and they would pass so quickly, with\\xADout send\\xADing any\\xADthing out, be\\xADcause it wasn\\u2019t wait\\xADing any\\xADmore\"), mdx(\"h3\", {\n    \"id\": \"runtime-changes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#runtime-changes\"\n  })), \"Runtime changes\"), mdx(\"p\", null, \"If you don\\u2019t use Vert.x built-\\u200Bin Log\\xADging and need to use slf4j, then re\\xADmem\\xADber that you should set a sys\\xADtem prop\\xADerty called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.logger-delegate-factory-class-name\"), \" with the name of a Java class which im\\xADple\\xADments the in\\xADter\\xADface \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LoggerFactory\"), \". Vert.x pro\\xADvides pre-\\u200Bbuilt im\\xADple\\xADmen\\xADta\\xADtions for Log4J and SLF4J with the class names \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.core.logging.Log4jLogDelegateFactory\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.core.logging.SLF4JLogDelegateFactory\"), \".\"), mdx(\"h2\", {\n    \"id\": \"still-working\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#still-working\"\n  })), \"Still working\"), mdx(\"p\", null, \"Well, that is all I have for you folks so far. We are still not done, as we haven\\u2019t got\\xADten our ap\\xADpli\\xADca\\xADtion run\\xADning with real clients just yet. But we do have all our in\\xADte\\xADgra\\xADtion tests from be\\xADfore com\\xADpletely pass\\xADing\\nso, if some\\xADthing does come up, it should be a small one (KNOCK ON WOOD)\"), mdx(\"p\", null, \"Please feel free to post on the Vert.x Google Group with any com\\xADments or sug\\xADges\\xADtions on what to add to this blog post or for Part Two.\"), mdx(\"p\", null, \"Thanks\"), mdx(\"p\", null, \"Mark S\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This blog post presents feed­backs from a project mi­gra­tion using Vert.x 2 to Vert.x 3.</p><h2 id=\"we-are-in-the-process-of-converting-our-vertx-215-application-to-vertx-30\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#we-are-in-the-process-of-converting-our-vertx-215-application-to-vertx-30\"></a>We are in the process of converting our Vert.x 2.1.5 application to Vert.x 3.0.</h2><p>So while up­grad­ing our ap­pli­ca­tion, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major up­grade from the pre­vi­ous ver­sion, with so many changes.</p><p>It re­quires re-​thinking your cur­rent 2.x Vert.x ap­pli­ca­tion. There are new classes, new apis, and a new pack­age struc­ture that has greatly sim­pli­fied things that we used to have to work around. There­fore in our up­grade it re­quired us to refac­tor and re­move any un­nec­es­sary <em>“hacks”</em> that weren’t avail­able in 2 that are now a part of Vert.x 3 that you re­ally want and need to take ad­van­tage of. (I don’t mean there are hacks in 3.x, just that we had in our ap­pli­ca­tion with Vert.x 2.x)</p><p>There are <em>Met­rics</em>, and <em>Clus­tered shared data</em>, with lock­ing and many more fea­tures that are amaz­ing new ad­di­tions. These are things we had to hack into our ap­pli­ca­tion with Vert.x 2.x. We added our own <code>MetricsRegistry</code> from <a href=\"https://dropwizard.github.io/metrics/3.1.0/getting-started/\">Drop­Wiz­ard</a> which meant mak­ing our own <code>Main</code> class that called Vert.x’s <code>Starter</code> class after start­ing up the reg­istry, but only in our <em>De­vops</em> server de­ploys, not our de­vel­oper ma­chines. And we had to build our own dis­trib­uted locked of clus­tered data that also re­quired writ­ing a com­pre­hen­sive dis­trib­uted timers. (The timers got fixed with a bet­ter actor model). But now we can use what Vert.x gives us in­ter­nally for those use cases.</p><p>This blog post is part one, as I am sure there will be some new changes that we need to do that we haven’t got­ten to yet. Which as we go, will post in part two. Also that this post is a work in progress in that when­ever you are up­grad­ing and refac­tor­ing your code, it doesn’t leave much time for tak­ing de­tailed notes, or writ­ing beau­ti­ful prose. I am a ter­ri­ble writer even when I can fully con­cen­trate on it. So the first draft will just be a list of my notes. These notes are not in any par­tic­u­lar order, but some things like tests you might want to save for last. (Just DON’T delete your tests, tests are very im­por­tant)</p><p>One of the first things that Vert.x has changed is the whole <em>class­loader</em> setup. Read the Vert.x Docs for more in­for­ma­tion but ba­si­cally, we have a flat <em>class­loader</em> sys­tem now. YAY! And one of the first things I no­ticed that is gone is the <code>Platform</code> mod­ule.</p><h2 id=\"changes-we-have-made\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#changes-we-have-made\"></a>Changes we have made.</h2><h3 id=\"dependency-changes\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#dependency-changes\"></a>Dependency changes</h3><ol><li><p>So the first thing we did was to re­move the <code>vert.x-platform</code> de­pen­dency from our <code>pom</code> file (Build de­pen­dency file of what­ever build sys­tem you use) This also means that you will be re­mov­ing any im­port state­ments from your code that has <code>.platform</code>. Which leads us to the next point.</p></li><li><p>Change all the im­ports for Vertx. from <code>org.vertx</code> to <code>io.vertx</code>. This could be a lot of work, as it is in every class you use Vert.x in. We had at least 250 lo­ca­tions to change here. Some classes have moved pack­ages and “jars” that have them, so there will be some new jars to in­clude as de­pen­den­cies and dif­fer­ent im­port state­ments for them.</p></li><li><p>If using a lan­guage other than Java, change the de­pen­dency to <code>vertx-lang-&lt;&lt;language&gt;&gt;</code></p></li><li><p>Re­move any mod­ules ref­er­ences that are using Vert.x 2.x stuff. You can get an odd error like\n<em>The type org.vertx.java.core.json.JsonOb­ject can­not be re­solved. It is in­di­rectly ref­er­enced from re­quired .class files</em>.</p></li><li><p><code>testtools</code> de­pen­dency is gone. There is now Vertx-​unit. So all your pre­vi­ous tests need to be com­pletely re-​written in the new style. This can be re­ally dif­fi­cult and time con­sum­ing as the tests you al­ready have writ­ten re­ally do need to be re-​written from scratch. But these tests are also the back­bone in know­ing if your code is work­ing. So this could take months if you have a re­ally full set of test suites al­ready. Also note the list below is to con­vert your JUnit In­te­gra­tion tests. as vertx-​unit first and fore­most pro­vides its own test­ing frame­work/suite but it also works in JUnit, and if you are using JUnit you need to do the fol­low­ing</p></li></ol><ul><li>Re­move all the im­ports to <code>TestTools</code>, in­clud­ing <code>VertxAssert</code>. I would do a find/re­place to re­place all the <code>VertxAssert</code> to <code>testContext</code> for when you have to add <code>TestContext</code> to all your <code>@Test</code> meth­ods. I rec­om­mend nam­ing the pa­ra­me­ter <code>testContext</code>, just to put more con­text, into your con­text. Be­cause if you just have <code>context</code> as your pa­ra­me­ter name, how do you know what con­text the con­text is? Sorry, that was too much fun. Ba­si­cally, what I am say­ing is if you have say <code>Spring ApplicationContext</code> in with your in­te­gra­tion tests with Vert.x what does <code>context</code> rep­re­sent? Spring or Vert.x test con­text.</li><li>Add <code>@RunWith(VertxUnitRunner.class)</code> above your test class</li><li>Re­move any <code>VertxAssert.testComplete()</code> those are gone. It needs <code>TestContext.async().complete()</code>. It is also im­por­tant to un­der­stand what <code>async()</code> means. When to call it, when to com­plete it. It also al­lows you to do mul­ti­ple <code>async()</code> calls and nested ones. I think I needed that when I had a test that was a longer use case of many mes­sages being sent, but only after re­sponses to other ones oc­curred. For in­stance, to do chat in our app, you have to con­nect, sub­scribe, friend some­one, then you can send a chat mes­sage. So that is 4 total Vert.x Mes­sages sent from the Test client. And you can sub­scribe until con­nect com­pleted, and you can send or re­ceive mes­sages un­less you are sub­scribed and have a friend. So we need to have a few <code>async()</code> calls in that sce­nario.</li><li>What is in your <code>start</code> method over­ride. Make that an <code>@Before</code>.</li><li>What is in your <code>stop</code> method over­ride. Make that an <code>@After</code>.</li><li>If you have your as­ser­tions have cus­tom mes­sage <em>strings</em> to log out when they fail, that pa­ra­me­ter is now at the end of the <code>assert</code> method call. Yes, this one can be painful.</li></ul><h3 id=\"build-changes\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#build-changes\"></a>Build Changes</h3><ol><li><p>Re­move all <em>vertx maven plugin</em> code to gen­er­ate mod­ules, in­stead cre­ate <em>fat</em> jars, which re­quires adding the <em>Shade maven plugin</em> to put all jar files into a big fat jar. The vertx-​examples project has <a href=\"https://github.com/vert-x3/vertx-examples/tree/master/maven-simplest\">simplest-​maven</a> which has the stuff to cre­ate the fat jar. <a href=\"https://github.com/vert-x3/vertx-examples/tree/master/gradle-simplest\">simplest-​gradle</a> is the gra­dle equiv­a­lent.</p></li><li><p>If you were run­ning your ap­pli­ca­tion with <code>runMod</code> or some­thing like that then you need to cre­ate a <em>fat</em> jar, chang­ing the build file as in <a href=\"https://github.com/vert-x3/vertx-examples/blob/master/maven-simplest/pom.xml\">this one</a> and cre­ate a Main class like here <a href=\"https://github.com/vert-x3/vertx-examples/blob/master/maven-simplest/src/main/java/io/vertx/example/HelloWorldEmbedded.java\">this one</a>.</p></li></ol><h3 id=\"classcode-changes\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#classcode-changes\"></a>Class/Code Changes</h3><ol><li><p><code>Verticle</code> is now an in­ter­face and not a class to ex­tend, so using Groovy as an ex­am­ple you now ex­tend <code>GroovyVerticle</code>. In Java ex­tend <code>AbstractVerticle</code> in­stead.</p></li><li><p>There is no <code>registerHandler</code> on the event­Bus any­more. So every­where you do that has to change to cre­ate/call <code>consumer()</code> and to un­reg­is­ter that han­dler, you have to have a ref­er­ence to the <code>MessageConsumer</code> that <code>consumer()</code> call re­turns and call its <code>unregister</code> method.</p></li><li><p><code>JsonObject.toMap()</code> changed to <code>JsonObject.getMap()</code></p></li><li><p><code>JsonObject</code> also re­moved all the <code>putXXX</code> meth­ods with just one <code>put</code> method with over­loaded ver­sions for dif­fer­ent types.</p></li><li><p><code>JsonObjectMessage</code> no longer ex­ists. What re­places de­pends on what you are doing. Mean­ing, if it is an <code>async</code> call­back to a de­ploy, you will get a <code>Message</code> in­stance back that has <code>succeeded()</code> or <code>failed()</code> meth­ods as well as <code>body()</code> to check any re­sults. If it is a <code>Consumer</code>, it is typ­i­cally a straight for­ward\n<code>JsonObject</code>. If you are in Groovy it is also a <code>JsonObject</code>, but the <code>body()</code> is a <code>Map</code> which you can use di­rectly now, in­stead of hav­ing to con­vert from <code>JsonObject</code> to <code>Map</code>.</p></li><li><p>There isn’t a <code>container</code> vari­able in <code>Verticles</code> any­more for de­ploy­ing ver­ti­cles and also a con­fig file. You need to use <code>vertx.getOrCreateContext().config()</code> to get to it. I used that in the SockJS Ex­am­ple code below.</p></li><li><p><code>SharedData</code> no longer has shared sets. It has a <code>Map</code> of <code>SharedData</code>, so an entry in that <code>Map</code> of shared data could be the name of the set as the key, and a <code>Set</code> as the value. It ac­tu­ally gives you more flex­i­bil­ity of what you put into Shared data, so this is ac­tu­ally a big win for us.</p></li><li><p>Get­ting the <code>writeHandlerID</code> from a Socket type, is now a method call in­stead of <code>.writeHandlerID</code>, so <code>.writeHandlerID()</code></p></li><li><p><code>SockJSSocket</code> is in <em>vertx-​web</em> pack­age now, so in­clude it to get the class.</p></li><li><p>There isn’t a <code>SockJSServer</code> class any­more ei­ther. So you will cre­ate a <code>WebServer</code>, a <code>Router</code>\nand set SSL (if you are using SSL on the Web­Server) then cre­ate a <code>SockJSHandler</code> to as­sign to the router via the <code>route()</code> method and <code>handler()</code> meth­ods in the Router api.\nHere is an ex­am­ple of our code. Al­though I haven’t tested it yet. ;)</p></li></ol><pre><code class=\"hljs language-groovy\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">GroovyVerticle</span> {</span>\n  Router router\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">void</span> start() <span class=\"hljs-keyword\">throws</span> Exception {\n     router = Router.router(vertx)\n     (Map&lt;String, Object&gt;) sslConfig =\n        (Map&lt;String, Object&gt;)vertx.getOrCreateContext()\n          .config().get(<span class=\"hljs-string\">&#x27;ssl&#x27;</span>)\n\n     HttpServer sslHttpServer = vertx.createHttpServer(\n         <span class=\"hljs-symbol\">SSL:</span> <span class=\"hljs-literal\">true</span>,\n         <span class=\"hljs-symbol\">keyStorePath:</span> sslConfig.get(<span class=\"hljs-string\">&quot;keystore&quot;</span>),\n         <span class=\"hljs-symbol\">keyStorePassword:</span> sslConfig.get(<span class=\"hljs-string\">&quot;password&quot;</span>))\n\n     startWebApiServer(sslHttpServer)\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> startWebApiServer(<span class=\"hljs-keyword\">final</span> HttpServer httpServer) {\n    <span class=\"hljs-keyword\">def</span> sockHandler = SockJSHandler.create(vertx, [:])\n    sockHandler.socketHandler {\n      SockJSSocket ws -&gt; sockJSConnectHandler(ws)\n    }\n    router.route(<span class=\"hljs-string\">&quot;/hdpoker&quot;</span>).handler(sockHandler)\n    httpServer.requestHandler(router.&amp;accept)\n    httpServer.listen()\n  }\n\n}\n</code></pre><h4 id=\"more-testing-change\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#more-testing-change\"></a>More testing change</h4><p>Test­ing mes­sages in In­te­gra­tion Tests. To tell the test method that this has async calls put\n<code>Async async = testContext.async()</code> as the first line in the test method. Yes, this is a lit­tle re­dun­dant from above, but I al­ways for­got to put <code>async()</code> calls in my in­te­gra­tion tests and they would pass so quickly, with­out send­ing any­thing out, be­cause it wasn’t wait­ing any­more</p><h3 id=\"runtime-changes\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#runtime-changes\"></a>Runtime changes</h3><p>If you don’t use Vert.x built-​in Log­ging and need to use slf4j, then re­mem­ber that you should set a sys­tem prop­erty called <code>vertx.logger-delegate-factory-class-name</code> with the name of a Java class which im­ple­ments the in­ter­face <code>LoggerFactory</code>. Vert.x pro­vides pre-​built im­ple­men­ta­tions for Log4J and SLF4J with the class names <code>io.vertx.core.logging.Log4jLogDelegateFactory</code> and <code>io.vertx.core.logging.SLF4JLogDelegateFactory</code>.</p><h2 id=\"still-working\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#still-working\"></a>Still working</h2><p>Well, that is all I have for you folks so far. We are still not done, as we haven’t got­ten our ap­pli­ca­tion run­ning with real clients just yet. But we do have all our in­te­gra­tion tests from be­fore com­pletely pass­ing\nso, if some­thing does come up, it should be a small one (KNOCK ON WOOD)</p><p>Please feel free to post on the Vert.x Google Group with any com­ments or sug­ges­tions on what to add to this blog post or for Part Two.</p><p>Thanks</p><p>Mark S</p>","scope":{}}},"prevPost":{"meta":{"title":"Vert.x 3 says “hello” to NPM users","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"In programming literature it has become the standard to create a hello world program as the first example. In this article, I'll demonstrate how NPM users can quickly get started with Vert.x."},"date":"2015-07-13","slug":"vert-x3-says-hello-to-npm-users"},"nextPost":{"meta":{"title":"Vert.x 3 and PostgreSQL JSON type","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"One of the interesting features of NoSQL databases is their schema-less mode of operation. This feature is very useful during project prototyping and early development since at early the stages of development of projects all data structures are not clear or have been defined yet."},"date":"2015-07-03","slug":"vert-x3-and-postgresql-json-type"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}