{"pageProps":{"slug":"vertx-db2-client/java","title":"响应式 DB2 客户端","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">使用方法</a></li>\n<li><a href=\"#_getting_started\">开始</a></li>\n<li><a href=\"#_connecting_to_db2\">连接 DB2</a></li>\n<li><a href=\"#_pool_versus_pooled_client\">连接池与池化的客户端</a></li>\n<li><a href=\"#_configuration\">配置</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_object\">数据对象</a></li>\n<li><a href=\"#_connection_uri\">连接 URI</a></li>\n</ul>\n</li>\n<li><a href=\"#_connect_retries\">连接重试</a></li>\n<li><a href=\"#_running_queries\">执行查询</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_prepared_queries\">预查询</a></li>\n<li><a href=\"#_batches\">批处理</a></li>\n</ul>\n</li>\n<li><a href=\"#_using_connections\">使用连接</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_getting_a_connection\">获取一条连接</a></li>\n<li><a href=\"#_simplified_connection_api\">简化的连接API</a></li>\n</ul>\n</li>\n<li><a href=\"#_using_transactions\">使用事务</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_transactions_with_connections\">连接中使用事务操作</a></li>\n<li><a href=\"#_simplified_transaction_api\">简化版事务API</a></li>\n</ul>\n</li>\n<li><a href=\"#_cursors_and_streaming\">游标和流式操作</a></li>\n<li><a href=\"#_tracing_queries\">追踪查询</a></li>\n<li><a href=\"#_db2_type_mapping\">DB2 类型映射</a></li>\n<li><a href=\"#_using_java_enum_types\">使用 Java 枚举类型</a></li>\n<li><a href=\"#_collector_queries\">集合类查询</a></li>\n<li><a href=\"#_using_ssltls\">使用 SSL/TLS</a></li>\n<li><a href=\"#_using_a_proxy\">使用代理</a></li>\n<li><a href=\"#_advanced_pool_configuration\">高级连接池配置</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_server_load_balancing\">数据库服务负载均衡</a></li>\n<li><a href=\"#_pool_connection_initialization\">连接初始化</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>响应式 DB2 客户端</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>响应式的DB2客户端具有直接简单的API，\n专注于可伸缩性和低开销。</p>\n</div>\n<div class=\"paragraph\">\n<p>该客户端是响应式的、非阻塞的，可以用单个线程处理多个数据库连接。</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>特性</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>支持Linux、Unix，及Windows上的DB2</p>\n</li>\n<li>\n<p>对z/OS上的DB2提供有限支持</p>\n</li>\n<li>\n<p>事件驱动</p>\n</li>\n<li>\n<p>轻量级</p>\n</li>\n<li>\n<p>内置连接池</p>\n</li>\n<li>\n<p>预处理查询（Prepared query）缓存</p>\n</li>\n<li>\n<p>批处理及游标支持</p>\n</li>\n<li>\n<p>流式行处理</p>\n</li>\n<li>\n<p>RxJava API 支持</p>\n</li>\n<li>\n<p>支持内存直接映射到对象，避免了不必要的复制</p>\n</li>\n<li>\n<p>支持Java 8的日期和时间类型</p>\n</li>\n<li>\n<p>支持 SSL/TLS</p>\n</li>\n<li>\n<p>支持 HTTP/1.x 连接，SOCKS4a 及 SOCKS5 等代理</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><strong>当前限制</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>不支持存储过程</p>\n</li>\n<li>\n<p>不支持某些列类型（例如BLOB和CLOB）</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>使用方法</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>使用响应式 DB2 客户端，需要将以下依赖项添加到项目构建工具的 <em>依赖</em> 配置中：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (在您的 <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-db2-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (在您的 <code>build.gradle</code> 文件中):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-db2-client:4.1.4&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>开始</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>以下是最简单的连接，查询和断开连接方法</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// 连接池选项</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// 创建客户端池</span>\nDB2Pool client = DB2Pool.pool(connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// 简单查询</span>\nclient\n  .query(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=&#x27;julien&#x27;&quot;</span>)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; result = ar.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + result.size() + <span class=\"hljs-string\">&quot; rows &quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n  }\n\n  <span class=\"hljs-comment\">// 现在关闭客户端池</span>\n  client.close();\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connecting_to_db2\"><a class=\"anchor\" href=\"#_connecting_to_db2\"></a>连接 DB2</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>大多数时候，您将使用连接池连接 DB2：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// 连接池配置</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// 创建池化的客户端</span>\nSqlClient client = DB2Pool.client(connectOptions, poolOptions);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>池化的客户端使用连接池，任何操作都将借用连接池中的连接来执行该操作，\n并将连接释放回连接池中。</p>\n</div>\n<div class=\"paragraph\">\n<p>如果您使用 Vert.x 运行，您可以将 Vertx 实例传递给它：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// 连接池配置</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-comment\">// 创建池化的客户端</span>\nSqlClient client = DB2Pool.client(vertx, connectOptions, poolOptions);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当您不再需要客户端时，您需要将其释放：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.close();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当您需要在同一连接上执行多个操作时，您需要从连接池中获取\n<code><a href=\"../../apidocs/io/vertx/db2client/DB2Connection.html\">connection</a></code> 连接。</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以轻松地从连接池中获取一个：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// 连接池配置</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// 创建池化的客户端</span>\nDB2Pool client = DB2Pool.pool(vertx, connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// 从连接池获取一个连接</span>\nclient.getConnection().compose(conn -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;Got a connection from the pool&quot;</span>);\n\n  <span class=\"hljs-comment\">// 以下所有操作都在同一个连接上执行</span>\n  <span class=\"hljs-keyword\">return</span> conn\n    .query(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=&#x27;julien&#x27;&quot;</span>)\n    .execute()\n    .compose(res -&gt; conn\n      .query(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=&#x27;emad&#x27;&quot;</span>)\n      .execute())\n    .onComplete(ar -&gt; {\n      <span class=\"hljs-comment\">// 将连接释放回连接池</span>\n      conn.close();\n    });\n}).onComplete(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n    System.out.println(<span class=\"hljs-string\">&quot;Done&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>连接使用完后，您必须关闭它以释放到连接池中，以便可以重复使用。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pool_versus_pooled_client\"><a class=\"anchor\" href=\"#_pool_versus_pooled_client\"></a>连接池与池化的客户端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/db2client/DB2Pool.html\">DB2Pool</a></code> 允许您创建连接池或池化客户端</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlClient pooledClient = DB2Pool.client(vertx, connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// 流水线操作（Pipelined）</span>\nFuture&lt;RowSet&lt;Row&gt;&gt; res1 = pooledClient.query(sql).execute();\n\n<span class=\"hljs-comment\">// 连接池</span>\nDB2Pool pool = DB2Pool.pool(vertx, connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// 不是流水线操作</span>\nFuture&lt;RowSet&lt;Row&gt;&gt; res2 = pool.query(sql).execute();</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>连接池操作并非流水线操作（pipelined），只有连接客户端是流水线操作</p>\n</li>\n<li>\n<p>池化的客户端操作是流水线操作</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuration\"><a class=\"anchor\" href=\"#_configuration\"></a>配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>有几个选项供您配置客户端。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_object\"><a class=\"anchor\" href=\"#_data_object\"></a>数据对象</h3>\n<div class=\"paragraph\">\n<p>配置客户端的简单方法就是指定 <code>DB2ConnectOptions</code> 数据对象。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50000</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// 连接池配置</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions().setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// 从数据对象创建连接池</span>\nDB2Pool pool = DB2Pool.pool(vertx, connectOptions, poolOptions);\n\npool.getConnection(ar -&gt; {\n  <span class=\"hljs-comment\">// 使用连接进行处理</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您也可以使用 <code>setProperties</code> 及 <code>addProperty</code> 方法配置通用配置项。但请注意调用 <code>setProperties</code> 方法会覆盖默认的客户端配置。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_connection_uri\"><a class=\"anchor\" href=\"#_connection_uri\"></a>连接 URI</h3>\n<div class=\"paragraph\">\n<p>除了使用 <code>DB2ConnectOptions</code> 数据对象进行配置外，我们还为您提供了另外一种使用连接URI进行配置的方法：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String connectionUri = <span class=\"hljs-string\">&quot;db2://dbuser:secretpassword@database.server.com:50000/mydb&quot;</span>;\n\n<span class=\"hljs-comment\">// 从连接URI创建连接池</span>\nDB2Pool pool = DB2Pool.pool(connectionUri);\n\n<span class=\"hljs-comment\">// 从连接URI创建连接</span>\nDB2Connection.connect(vertx, connectionUri, res -&gt; {\n  <span class=\"hljs-comment\">// 使用连接进行处理</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>连接字符串的URI格式为：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>db2://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;HOSTNAME&gt;:&lt;PORT&gt;/&lt;DBNAME&gt;</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>目前，客户端支持以下的连接 uri 参数关键字：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>host</p>\n</li>\n<li>\n<p>port</p>\n</li>\n<li>\n<p>user</p>\n</li>\n<li>\n<p>password</p>\n</li>\n<li>\n<p>dbname</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Note: 连接URI中配置的配置项会覆盖默认配置。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connect_retries\"><a class=\"anchor\" href=\"#_connect_retries\"></a>连接重试</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以将客户端配置为在连接无法建立时重试。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">options\n  .setReconnectAttempts(<span class=\"hljs-number\">2</span>)\n  .setReconnectInterval(<span class=\"hljs-number\">1000</span>);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_running_queries\"><a class=\"anchor\" href=\"#_running_queries\"></a>执行查询</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>当您不需要事务或者只是执行一个单次查询操作，您可以直接在连接池里执行查询；\n连接池会使用某一条连接执行并给您返回结果。\n下边是如何执行一个简单的查询的例子：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .query(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=&#x27;andy&#x27;&quot;</span>)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; result = ar.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + result.size() + <span class=\"hljs-string\">&quot; rows &quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_prepared_queries\"><a class=\"anchor\" href=\"#_prepared_queries\"></a>预查询</h3>\n<div class=\"paragraph\">\n<p>执行预查询也是一样的操作。</p>\n</div>\n<div class=\"paragraph\">\n<p>SQL字符通过位置引用实际的参数，并使用数据库的语法 `?` ​</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .preparedQuery(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=$1&quot;</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">&quot;andy&quot;</span>), ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + rows.size() + <span class=\"hljs-string\">&quot; rows &quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>查询相关的方法为 <em>SELECT</em> 类型的操作提供了异步的 <code><a href=\"../../apidocs/io/vertx/sqlclient/RowSet.html\">RowSet</a></code> 实例</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .preparedQuery(<span class=\"hljs-string\">&quot;SELECT first_name, last_name FROM users&quot;</span>)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    <span class=\"hljs-keyword\">for</span> (Row row : rows) {\n      System.out.println(<span class=\"hljs-string\">&quot;User &quot;</span> + row.getString(<span class=\"hljs-number\">0</span>) + <span class=\"hljs-string\">&quot; &quot;</span> + row.getString(<span class=\"hljs-number\">1</span>));\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者 <em>UPDATE</em>/<em>INSERT</em> 类型的查询：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .preparedQuery(<span class=\"hljs-string\">&quot;INSERT INTO users (first_name, last_name) VALUES ($1, $2)&quot;</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">&quot;Andy&quot;</span>, <span class=\"hljs-string\">&quot;Guibert&quot;</span>),  ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    System.out.println(rows.rowCount());\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Row对象（<code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code>）可以让您通过索引位置获取相应的数据</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">System.out.println(<span class=\"hljs-string\">&quot;User &quot;</span> + row.getString(<span class=\"hljs-number\">0</span>) + <span class=\"hljs-string\">&quot; &quot;</span> + row.getString(<span class=\"hljs-number\">1</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>或者通过名称</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">System.out.println(<span class=\"hljs-string\">&quot;User &quot;</span> + row.getString(<span class=\"hljs-string\">&quot;first_name&quot;</span>) + <span class=\"hljs-string\">&quot; &quot;</span> + row.getString(<span class=\"hljs-string\">&quot;last_name&quot;</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>客户端在此处没有做特殊处理，无论您的SQL文本时什么，列名都将使用数据库表中的名称标识。</p>\n</div>\n<div class=\"paragraph\">\n<p>您也可以直接访问得到多种类型</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String firstName = row.getString(<span class=\"hljs-string\">&quot;first_name&quot;</span>);\nBoolean male = row.getBoolean(<span class=\"hljs-string\">&quot;male&quot;</span>);\nInteger age = row.getInteger(<span class=\"hljs-string\">&quot;age&quot;</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您可以使用缓存过的预处理语句去执行一次性的预查询：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connectOptions.setCachePreparedStatements(<span class=\"hljs-keyword\">true</span>);\nclient\n  .preparedQuery(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id = ?&quot;</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">&quot;julien&quot;</span>), ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      RowSet&lt;Row&gt; rows = ar.result();\n      System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + rows.size() + <span class=\"hljs-string\">&quot; rows &quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>您也可以创建 <code>PreparedStatement</code> 并自主地管理它的生命周期。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">sqlConnection\n  .prepare(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id= ?&quot;</span>, ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      PreparedStatement preparedStatement = ar.result();\n      preparedStatement.query()\n        .execute(Tuple.of(<span class=\"hljs-string\">&quot;julien&quot;</span>), ar2 -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n            RowSet&lt;Row&gt; rows = ar2.result();\n            System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + rows.size() + <span class=\"hljs-string\">&quot; rows &quot;</span>);\n            preparedStatement.close();\n          } <span class=\"hljs-keyword\">else</span> {\n            System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar2.cause().getMessage());\n          }\n        });\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_batches\"><a class=\"anchor\" href=\"#_batches\"></a>批处理</h3>\n<div class=\"paragraph\">\n<p>您可以在预查询中执行批处理操作</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">List&lt;Tuple&gt; batch = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\nbatch.add(Tuple.of(<span class=\"hljs-string\">&quot;julien&quot;</span>, <span class=\"hljs-string\">&quot;Julient Viet&quot;</span>));\nbatch.add(Tuple.of(<span class=\"hljs-string\">&quot;emad&quot;</span>, <span class=\"hljs-string\">&quot;Emad Alblueshi&quot;</span>));\nbatch.add(Tuple.of(<span class=\"hljs-string\">&quot;andy&quot;</span>, <span class=\"hljs-string\">&quot;Andy Guibert&quot;</span>));\n\n<span class=\"hljs-comment\">// Execute the prepared batch</span>\nclient\n  .preparedQuery(<span class=\"hljs-string\">&quot;INSERT INTO USERS (id, name) VALUES ($1, $2)&quot;</span>)\n  .executeBatch(batch, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n\n    <span class=\"hljs-comment\">// Process rows</span>\n    RowSet&lt;Row&gt; rows = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Batch failed &quot;</span> + res.cause());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>通过将查询包装在 <code>SELECT &lt;COLUMNS&gt; FROM FINAL TABLE ( &lt;SQL&gt; )</code>，可以获取生成的键，例如：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client\n  .preparedQuery(<span class=\"hljs-string\">&quot;SELECT color_id FROM FINAL TABLE ( INSERT INTO color (color_name) VALUES (?), (?), (?) )&quot;</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">&quot;white&quot;</span>, <span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-string\">&quot;blue&quot;</span>), ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Inserted &quot;</span> + rows.rowCount() + <span class=\"hljs-string\">&quot; new rows.&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (Row row : rows) {\n      System.out.println(<span class=\"hljs-string\">&quot;generated key: &quot;</span> + row.getInteger(<span class=\"hljs-string\">&quot;color_id&quot;</span>));\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_connections\"><a class=\"anchor\" href=\"#_using_connections\"></a>使用连接</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_getting_a_connection\"><a class=\"anchor\" href=\"#_getting_a_connection\"></a>获取一条连接</h3>\n<div class=\"paragraph\">\n<p>当您要执行查询（无事务）操作时，您可以创建一条或者从连接池里拿到一条连接。\n请注意在从拿到连接到将连接释放回连接池这之间的连接状态，服务端可能由于某些原因比如空闲时间超时，而关闭这条连接。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool\n  .getConnection()\n  .compose(connection -&gt;\n    connection\n      .preparedQuery(<span class=\"hljs-string\">&quot;INSERT INTO Users (first_name,last_name) VALUES (?, ?)&quot;</span>)\n      .executeBatch(Arrays.asList(\n        Tuple.of(<span class=\"hljs-string\">&quot;Julien&quot;</span>, <span class=\"hljs-string\">&quot;Viet&quot;</span>),\n        Tuple.of(<span class=\"hljs-string\">&quot;Andy&quot;</span>, <span class=\"hljs-string\">&quot;Guibert&quot;</span>)\n      ))\n      .compose(res -&gt; connection\n        <span class=\"hljs-comment\">// Do something with rows</span>\n        .query(<span class=\"hljs-string\">&quot;SELECT COUNT(*) FROM Users&quot;</span>)\n        .execute()\n        .map(rows -&gt; rows.iterator().next().getInteger(<span class=\"hljs-number\">0</span>)))\n      <span class=\"hljs-comment\">// Return the connection to the pool</span>\n      .eventually(v -&gt; connection.close())\n  ).onSuccess(count -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;Insert users, now the number of users is &quot;</span> + count);\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>也可以通过连接对象创建预查询:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection\n  .prepare(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE first_name LIKE $1&quot;</span>)\n  .compose(pq -&gt;\n    pq.query()\n      .execute(Tuple.of(<span class=\"hljs-string\">&quot;Andy&quot;</span>))\n      .eventually(v -&gt; pq.close())\n  ).onSuccess(rows -&gt; {\n  <span class=\"hljs-comment\">// All rows</span>\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_simplified_connection_api\"><a class=\"anchor\" href=\"#_simplified_connection_api\"></a>简化的连接API</h3>\n<div class=\"paragraph\">\n<p>当您使用连接池时，您可以调用 <code><a href=\"../../apidocs/io/vertx/sqlclient/Pool.html#withConnection-java.util.function.Function-io.vertx.core.Handler-\">withConnection</a></code>\n并以当前连接要执行的操作作为参数。</p>\n</div>\n<div class=\"paragraph\">\n<p>这样会从连接池里拿到一条连接，并使用当前连接执行目标操作。</p>\n</div>\n<div class=\"paragraph\">\n<p>这种方式需要返回一个future对象来表示操作结果。</p>\n</div>\n<div class=\"paragraph\">\n<p>当这个future操作完成后，当前连接会被释放会连接池同时您也可能拿到最终的执行结果。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.withConnection(connection -&gt;\n  connection\n    .preparedQuery(<span class=\"hljs-string\">&quot;INSERT INTO Users (first_name,last_name) VALUES (?, ?)&quot;</span>)\n    .executeBatch(Arrays.asList(\n      Tuple.of(<span class=\"hljs-string\">&quot;Julien&quot;</span>, <span class=\"hljs-string\">&quot;Viet&quot;</span>),\n      Tuple.of(<span class=\"hljs-string\">&quot;Andy&quot;</span>, <span class=\"hljs-string\">&quot;Guibert&quot;</span>)\n    ))\n    .compose(res -&gt; connection\n      <span class=\"hljs-comment\">// Do something with rows</span>\n      .query(<span class=\"hljs-string\">&quot;SELECT COUNT(*) FROM Users&quot;</span>)\n      .execute()\n      .map(rows -&gt; rows.iterator().next().getInteger(<span class=\"hljs-number\">0</span>)))\n).onSuccess(count -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;Insert users, now the number of users is &quot;</span> + count);\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_transactions\"><a class=\"anchor\" href=\"#_using_transactions\"></a>使用事务</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_transactions_with_connections\"><a class=\"anchor\" href=\"#_transactions_with_connections\"></a>连接中使用事务操作</h3>\n<div class=\"paragraph\">\n<p>您可以使用SQL语法 <code>BEGIN</code>/<code>COMMIT</code>/<code>ROLLBACK</code> 来执行事务操作，同时您必须使用\n<code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnection.html\">SqlConnection</a></code> 并自己管理当前连接。</p>\n</div>\n<div class=\"paragraph\">\n<p>或者您也可以使用 <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnection.html\">SqlConnection</a></code> 的事务API：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.getConnection()\n  <span class=\"hljs-comment\">// Transaction must use a connection</span>\n  .onSuccess(conn -&gt; {\n    <span class=\"hljs-comment\">// Begin the transaction</span>\n    conn.begin()\n      .compose(tx -&gt; conn\n        <span class=\"hljs-comment\">// Various statements</span>\n        .query(<span class=\"hljs-string\">&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Julien&#x27;,&#x27;Viet&#x27;)&quot;</span>)\n        .execute()\n        .compose(res2 -&gt; conn\n          .query(<span class=\"hljs-string\">&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Andy&#x27;,&#x27;Guibert&#x27;)&quot;</span>)\n          .execute())\n        <span class=\"hljs-comment\">// Commit the transaction</span>\n        .compose(res3 -&gt; tx.commit()))\n      <span class=\"hljs-comment\">// Return the connection to the pool</span>\n      .eventually(v -&gt; conn.close())\n      .onSuccess(v -&gt; System.out.println(<span class=\"hljs-string\">&quot;Transaction succeeded&quot;</span>))\n      .onFailure(err -&gt; System.out.println(<span class=\"hljs-string\">&quot;Transaction failed: &quot;</span> + err.getMessage()));\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当数据库服务端返回当前事务已失败（比如常见的 <em>current transaction is aborted, commands ignored until end of transaction block</em>）\n，事务已回滚和 <code><a href=\"../../apidocs/io/vertx/sqlclient/Transaction.html#completion--\">completion</a></code> 方法的返回值future返回了\n<code><a href=\"../../apidocs/io/vertx/sqlclient/TransactionRollbackException.html\">TransactionRollbackException</a></code> 异常时：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">tx.completion()\n  .onFailure(err -&gt; {\n    System.out.println(<span class=\"hljs-string\">&quot;Transaction failed =&gt; rolled back&quot;</span>);\n  });</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_simplified_transaction_api\"><a class=\"anchor\" href=\"#_simplified_transaction_api\"></a>简化版事务API</h3>\n<div class=\"paragraph\">\n<p>当您使用连接池时，您可以调用 <code><a href=\"../../apidocs/io/vertx/sqlclient/Pool.html#withTransaction-java.util.function.Function-io.vertx.core.Handler-\">withTransaction</a></code> 方法\n并传递待执行的事务操作作为参数。</p>\n</div>\n<div class=\"paragraph\">\n<p>这将会从连接池里拿到一条连接，开启事务并调用待执行操作，配合客户端一起执行该事务范围内\n的所有操作。</p>\n</div>\n<div class=\"paragraph\">\n<p>待执行操作需要返回一个future来表示可能产生的结果：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>当future成功时，客户端提交该事务</p>\n</li>\n<li>\n<p>当future失败时，客户端回滚该事务</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>事务操作完成后，连接会被释放回连接池，并且可以获取到最终的操作结果。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.withTransaction(client -&gt; client\n  .query(<span class=\"hljs-string\">&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Julien&#x27;,&#x27;Viet&#x27;)&quot;</span>)\n  .execute()\n  .flatMap(res -&gt; client\n    .query(<span class=\"hljs-string\">&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Andy&#x27;,&#x27;Guibert&#x27;)&quot;</span>)\n    .execute()\n    <span class=\"hljs-comment\">// Map to a message result</span>\n    .map(<span class=\"hljs-string\">&quot;Users inserted&quot;</span>)))\n  .onSuccess(v -&gt; System.out.println(<span class=\"hljs-string\">&quot;Transaction succeeded&quot;</span>))\n  .onFailure(err -&gt; System.out.println(<span class=\"hljs-string\">&quot;Transaction failed: &quot;</span> + err.getMessage()));</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cursors_and_streaming\"><a class=\"anchor\" href=\"#_cursors_and_streaming\"></a>游标和流式操作</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>默认情况下预查询操作会拉去所有的行记录，您可以使用\n<code><a href=\"../../apidocs/io/vertx/sqlclient/Cursor.html\">游标</a></code> 来控制您想要读取的行数：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE first_name LIKE $1&quot;</span>, ar0 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar0.succeeded()) {\n    PreparedStatement pq = ar0.result();\n\n    <span class=\"hljs-comment\">// Cursors require to run within a transaction</span>\n    connection.begin(ar1 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n        Transaction tx = ar1.result();\n\n        <span class=\"hljs-comment\">// Create a cursor</span>\n        Cursor cursor = pq.cursor(Tuple.of(<span class=\"hljs-string\">&quot;julien&quot;</span>));\n\n        <span class=\"hljs-comment\">// Read 50 rows</span>\n        cursor.read(<span class=\"hljs-number\">50</span>, ar2 -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n            RowSet&lt;Row&gt; rows = ar2.result();\n\n            <span class=\"hljs-comment\">// Check for more ?</span>\n            <span class=\"hljs-keyword\">if</span> (cursor.hasMore()) {\n              <span class=\"hljs-comment\">// Repeat the process...</span>\n            } <span class=\"hljs-keyword\">else</span> {\n              <span class=\"hljs-comment\">// No more rows - commit the transaction</span>\n              tx.commit();\n            }\n          }\n        });\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>游标释放时需要同时执行关闭操作：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">cursor.read(<span class=\"hljs-number\">50</span>, ar2 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n    <span class=\"hljs-comment\">// Close the cursor</span>\n    cursor.close();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>stream API也可以用于游标，尤其是在Rx版的客户端，可能更为方便。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE first_name LIKE $1&quot;</span>, ar0 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar0.succeeded()) {\n    PreparedStatement pq = ar0.result();\n\n    <span class=\"hljs-comment\">// Streams require to run within a transaction</span>\n    connection.begin(ar1 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n        Transaction tx = ar1.result();\n\n        <span class=\"hljs-comment\">// Fetch 50 rows at a time</span>\n        RowStream&lt;Row&gt; stream = pq.createStream(<span class=\"hljs-number\">50</span>, Tuple.of(<span class=\"hljs-string\">&quot;julien&quot;</span>));\n\n        <span class=\"hljs-comment\">// Use the stream</span>\n        stream.exceptionHandler(err -&gt; {\n          System.out.println(<span class=\"hljs-string\">&quot;Error: &quot;</span> + err.getMessage());\n        });\n        stream.endHandler(v -&gt; {\n          tx.commit();\n          System.out.println(<span class=\"hljs-string\">&quot;End of stream&quot;</span>);\n        });\n        stream.handler(row -&gt; {\n          System.out.println(<span class=\"hljs-string\">&quot;User: &quot;</span> + row.getString(<span class=\"hljs-string\">&quot;last_name&quot;</span>));\n        });\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>上边的stream会批量读取 <code>50</code> 行并同时将其转换为流，当这些行记录被传递给处理器时，\n会以此类推地读取下一批的 <code>50</code> 行记录。</p>\n</div>\n<div class=\"paragraph\">\n<p>stream支持重启或暂停，已经加载到的行记录将会被保留在内存里直到被传递给处理器，此时\n游标也将终止遍历。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_tracing_queries\"><a class=\"anchor\" href=\"#_tracing_queries\"></a>追踪查询</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>当Vert.x启用tracing功能时，SQL客户端可以跟踪查询的执行情况。</p>\n</div>\n<div class=\"paragraph\">\n<p>客户端会上报下列这些 <em>client</em> spans：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>Query</code> 操作名称</p>\n</li>\n<li>\n<p>tags</p>\n</li>\n<li>\n<p><code>db.user</code> ：数据库用户名</p>\n</li>\n<li>\n<p><code>db.instance</code> ：数据库实例</p>\n</li>\n<li>\n<p><code>db.statement</code> ：SQL语句</p>\n</li>\n<li>\n<p><code>db.type</code> ：<em>sql</em></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>默认的 tracing 策略时 <code><a href=\"../../apidocs/io/vertx/core/tracing/TracingPolicy.html#PROPAGATE\">PROPAGATE</a></code>，客户端\n在一个活跃trace里只创建一个span。</p>\n</div>\n<div class=\"paragraph\">\n<p>您可以通过 <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnectOptions.html#setTracingPolicy-io.vertx.core.tracing.TracingPolicy-\">setTracingPolicy</a></code> 方法来调整tracing策略，\n例如您可以设置为 <code><a href=\"../../apidocs/io/vertx/core/tracing/TracingPolicy.html#ALWAYS\">ALWAYS</a></code>，\n客户端将始终上报span：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">options.setTracingPolicy(TracingPolicy.ALWAYS);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_db2_type_mapping\"><a class=\"anchor\" href=\"#_db2_type_mapping\"></a>DB2 类型映射</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>当前客户端支持以下 DB2 类型</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>BOOLEAN (<code>java.lang.Boolean</code>) （只针对DB2 LUW）</p>\n</li>\n<li>\n<p>SMALLINT (<code>java.lang.Short</code>)</p>\n</li>\n<li>\n<p>INTEGER (<code>java.lang.Integer</code>)</p>\n</li>\n<li>\n<p>BIGINT (<code>java.lang.Long</code>)</p>\n</li>\n<li>\n<p>REAL (<code>java.lang.Float</code>)</p>\n</li>\n<li>\n<p>DOUBLE (<code>java.lang.Double</code>)</p>\n</li>\n<li>\n<p>DECIMAL (<code>io.vertx.sqlclient.data.Numeric</code>)</p>\n</li>\n<li>\n<p>CHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>VARCHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>ENUM (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>DATE (<code>java.time.LocalDate</code>)</p>\n</li>\n<li>\n<p>TIME (<code>java.time.LocalTime</code>)</p>\n</li>\n<li>\n<p>TIMESTAMP (<code>java.time.LocalDateTime</code>)</p>\n</li>\n<li>\n<p>BINARY (<code>byte[]</code>)</p>\n</li>\n<li>\n<p>VARBINARY (<code>byte[]</code>)</p>\n</li>\n<li>\n<p>ROWID (<code>io.vertx.db2client.impl.drda.DB2RowId</code> 或 <code>java.sql.RowId</code>) （只针对DB2 z/OS）</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>以下类型目前不支持：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>XML</p>\n</li>\n<li>\n<p>BLOB</p>\n</li>\n<li>\n<p>CLOB</p>\n</li>\n<li>\n<p>DBCLOB</p>\n</li>\n<li>\n<p>GRAPHIC / VARGRAPHIC</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>有关进一步介绍DB2数据类型的文档，请参考以下资源：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://www.ibm.com/support/knowledgecenter/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008483.html\">DB2 for LUW 11.5 data types</a></p>\n</li>\n<li>\n<p><a href=\"https://www.ibm.com/support/knowledgecenter/SSEPEK_12.0.0/sqlref/src/tpc/db2z_datatypesintro.html\">DB2 for z/OS 12.0 data types</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>元组解码在存储值时使用上述类型，并且在可能的情况下还对实际值进行即时转换：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool\n  .query(<span class=\"hljs-string\">&quot;SELECT an_int_column FROM exampleTable&quot;</span>)\n  .execute(ar -&gt; {\n  RowSet&lt;Row&gt; rowSet = ar.result();\n  Row row = rowSet.iterator().next();\n\n  <span class=\"hljs-comment\">// INTEGER 类型字段读取出来是 java.lang.Integer</span>\n  Object value = row.getValue(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-comment\">// 转换为 java.lang.Long</span>\n  Long longValue = row.getLong(<span class=\"hljs-number\">0</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_java_enum_types\"><a class=\"anchor\" href=\"#_using_java_enum_types\"></a>使用 Java 枚举类型</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以将Java的 <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">枚举类型</a>\n映射为下面的列类型：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Strings (VARCHAR, TEXT)</p>\n</li>\n<li>\n<p>Numbers (SMALLINT, INTEGER, BIGINT)</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.preparedQuery(<span class=\"hljs-string\">&quot;SELECT day_name FROM FINAL TABLE ( INSERT INTO days (day_name) VALUES (?), (?), (?) )&quot;</span>)\n.execute(Tuple.of(Days.FRIDAY, Days.SATURDAY, Days.SUNDAY), ar -&gt; {\n <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n  RowSet&lt;Row&gt; rows = ar.result();\n  System.out.println(<span class=\"hljs-string\">&quot;Inserted &quot;</span> + rows.rowCount() + <span class=\"hljs-string\">&quot; new rows&quot;</span>);\n  <span class=\"hljs-keyword\">for</span> (Row row : rows) {\n\t  System.out.println(<span class=\"hljs-string\">&quot;Day: &quot;</span> + row.get(Days.class, <span class=\"hljs-string\">&quot;day_name&quot;</span>));\n  }\n } <span class=\"hljs-keyword\">else</span> {\n  System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n }\n});\nclient.preparedQuery(<span class=\"hljs-string\">&quot;SELECT day_num FROM FINAL TABLE ( INSERT INTO days (day_num) VALUES (?), (?), (?) )&quot;</span>)\n   .execute(Tuple.of(Days.FRIDAY.ordinal(), Days.SATURDAY.ordinal(), Days.SUNDAY.ordinal()), ar -&gt; {\n   \t<span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n   \t\tRowSet&lt;Row&gt; rows = ar.result();\n   \t\tSystem.out.println(<span class=\"hljs-string\">&quot;Inserted &quot;</span> + rows.rowCount() + <span class=\"hljs-string\">&quot; new rows&quot;</span>);\n   \t\t<span class=\"hljs-keyword\">for</span> (Row row : rows) {\n   \t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;Day: &quot;</span> + row.get(Days.class, <span class=\"hljs-string\">&quot;day_num&quot;</span>));\n   \t\t}\n   \t} <span class=\"hljs-keyword\">else</span> {\n   \t\tSystem.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n   \t}\n   });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>String类型使用Java枚举 <code>name()</code> 方法返回的名字进行匹配。</p>\n</div>\n<div class=\"paragraph\">\n<p>数值类型使用Java枚举 <code>ordinal()</code> 方法返回的序数进行匹配，row.get() 方法获取到的是整型值对应Java枚举序数的枚举值的 <code>name()</code> 值。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_collector_queries\"><a class=\"anchor\" href=\"#_collector_queries\"></a>集合类查询</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以将查询API与Java集合类结合使用：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Collector&lt;Row, ?, Map&lt;Long, String&gt;&gt; collector = Collectors.toMap(\n  row -&gt; row.getLong(<span class=\"hljs-string\">&quot;id&quot;</span>),\n  row -&gt; row.getString(<span class=\"hljs-string\">&quot;last_name&quot;</span>));\n\n<span class=\"hljs-comment\">// 运行查询使用集合类</span>\nclient.query(<span class=\"hljs-string\">&quot;SELECT * FROM users&quot;</span>)\n  .collecting(collector)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    SqlResult&lt;Map&lt;Long, String&gt;&gt; result = ar.result();\n\n    <span class=\"hljs-comment\">// 获取用集合类创建的map</span>\n    Map&lt;Long, String&gt; map = result.value();\n    System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + map);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>集合类处理不能保留 <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code>\n的引用，因为只有一个 Row 对象用于处理整个集合。</p>\n</div>\n<div class=\"paragraph\">\n<p>Java <code>Collectors</code> 提供了许多有趣的预定义集合类，例如，\n您可以直接用 Row 中的集合轻松拼接成一个字符串：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Collector&lt;Row, ?, String&gt; collector = Collectors.mapping(\n  row -&gt; row.getString(<span class=\"hljs-string\">&quot;last_name&quot;</span>),\n  Collectors.joining(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;(&quot;</span>, <span class=\"hljs-string\">&quot;)&quot;</span>)\n);\n\n<span class=\"hljs-comment\">// 运行查询使用集合类</span>\nclient.query(<span class=\"hljs-string\">&quot;SELECT * FROM users&quot;</span>).collecting(collector).execute(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      SqlResult&lt;String&gt; result = ar.result();\n\n      <span class=\"hljs-comment\">// 获取用集合类创建的String</span>\n      String list = result.value();\n      System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + list);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_ssltls\"><a class=\"anchor\" href=\"#_using_ssltls\"></a>使用 SSL/TLS</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>配置客户端使用SSL连接, 您可以像 Vert.x <code>NetClient</code> 一样配置\n<code><a href=\"../../apidocs/io/vertx/db2client/DB2ConnectOptions.html\">DB2ConnectOptions</a></code> 。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2ConnectOptions options = <span class=\"hljs-keyword\">new</span> DB2ConnectOptions()\n  .setPort(<span class=\"hljs-number\">50001</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>)\n  .setSsl(<span class=\"hljs-keyword\">true</span>)\n  .setTrustStoreOptions(<span class=\"hljs-keyword\">new</span> JksOptions()\n      .setPath(<span class=\"hljs-string\">&quot;/path/to/keystore.p12&quot;</span>)\n      .setPassword(<span class=\"hljs-string\">&quot;keystoreSecret&quot;</span>));\n\nDB2Connection.connect(vertx, options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// 使用SSL进行连接</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Could not connect &quot;</span> + res.cause());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>更多详细信息，请参阅 <a href=\"http://vertx.io/docs/vertx-core/java/#ssl\">Vert.x 文档</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_a_proxy\"><a class=\"anchor\" href=\"#_using_a_proxy\"></a>使用代理</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>您可以配置客户端使用  HTTP/1.x 连接、SOCKS4a 或 SOCKS5 代理。</p>\n</div>\n<div class=\"paragraph\">\n<p>更多详细信息，请参阅 <a href=\"http://vertx.io/docs/vertx-core/java/#_using_a_proxy_for_client_connections\">Vert.x 文档</a>。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_advanced_pool_configuration\"><a class=\"anchor\" href=\"#_advanced_pool_configuration\"></a>高级连接池配置</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_server_load_balancing\"><a class=\"anchor\" href=\"#_server_load_balancing\"></a>数据库服务负载均衡</h3>\n<div class=\"paragraph\">\n<p>您可以使用包含多个数据库服务的列表来配置连接池而不是单个数据库服务。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DB2Pool pool = DB2Pool.pool(Arrays.asList(server1, server2, server3), options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>当一个连接创建时，连接池使用(round-robin)轮询调度算法做负载均衡以选择不同的数据库服务</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\n负载均衡是在创建连接时提供的，而不是在从连接池中获取连接时提供\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_pool_connection_initialization\"><a class=\"anchor\" href=\"#_pool_connection_initialization\"></a>连接初始化</h3>\n<div class=\"paragraph\">\n<p>您可以使用 <code><a href=\"../../apidocs/io/vertx/sqlclient/Pool.html#connectHandler-io.vertx.core.Handler-\">connectHandler</a></code>\n方法在连接创建后和连接释放回连接池之前来与数据库连接交互</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.connectHandler(conn -&gt; {\n  conn.query(sql).execute().onSuccess(res -&gt; {\n    <span class=\"hljs-comment\">//  将连接释放回连接池，以被该应用程序复用</span>\n    conn.close();\n  });\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>连接完成后，您应该释放该连接以通知连接池该数据库连接可以被使用</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::override/rxjava3.adoc[]</p>\n</div>\n</div>\n</div>\n</div>"},"__N_SSG":true}