{"pageProps":{"slug":"3.8.4/vertx-pg-client/groovy","title":"Reactive PostgreSQL Client","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">Usage</a></li>\n<li><a href=\"#_getting_started\">Getting started</a></li>\n<li><a href=\"#_connecting_to_postgresql\">Connecting to PostgreSQL</a></li>\n<li><a href=\"#_configuration\">Configuration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_object\">data object</a></li>\n<li><a href=\"#_connection_uri\">connection uri</a></li>\n<li><a href=\"#_environment_variables\">environment variables</a></li>\n</ul>\n</li>\n<li><a href=\"#_postgresql_type_mapping\">PostgreSQL type mapping</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_handling_json\">Handling JSON</a></li>\n<li><a href=\"#_handling_numeric\">Handling NUMERIC</a></li>\n</ul>\n</li>\n<li><a href=\"#_handling_arrays\">Handling arrays</a></li>\n<li><a href=\"#_handling_custom_types\">Handling custom types</a></li>\n<li><a href=\"#_handling_text_search\">Handling text search</a></li>\n<li><a href=\"#_collector_queries\">Collector queries</a></li>\n<li><a href=\"#_pubsub\">Pub/sub</a></li>\n<li><a href=\"#_cancelling_request\">Cancelling Request</a></li>\n<li><a href=\"#_using_ssltls\">Using SSL/TLS</a></li>\n<li><a href=\"#_using_a_proxy\">Using a proxy</a></li>\n</ul>\n</div>","contents":"<h1>Reactive PostgreSQL Client</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Reactive PostgreSQL Client is a client for PostgreSQL with a straightforward API focusing on\nscalability and low overhead.</p>\n</div>\n<div class=\"paragraph\">\n<p>The client is reactive and non blocking, allowing to handle many database connections with a single thread.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Event driven</p>\n</li>\n<li>\n<p>Lightweight</p>\n</li>\n<li>\n<p>Built-in connection pooling</p>\n</li>\n<li>\n<p>Prepared queries caching</p>\n</li>\n<li>\n<p>Publish / subscribe using PostgreSQL <code>NOTIFY/LISTEN</code></p>\n</li>\n<li>\n<p>Batch and cursor</p>\n</li>\n<li>\n<p>Row streaming</p>\n</li>\n<li>\n<p>Command pipeling</p>\n</li>\n<li>\n<p>RxJava 1 and RxJava 2</p>\n</li>\n<li>\n<p>Direct memory to object without unnecessary copies</p>\n</li>\n<li>\n<p>Java 8 Date and Time</p>\n</li>\n<li>\n<p>SSL/TLS</p>\n</li>\n<li>\n<p>Unix domain socket</p>\n</li>\n<li>\n<p>HTTP/1.x CONNECT, SOCKS4a or SOCKS5 proxy support</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Reactive PostgreSQL Client add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-lang-groovy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'io.vertx:vertx-lang-groovy:3.8.4'</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Here is the simplest way to connect, query and disconnect</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect options</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the client pool</span>\n<span class=\"hljs-keyword\">def</span> client = PgPool.pool(connectOptions, poolOptions)\n\n<span class=\"hljs-comment\">// A simple query</span>\nclient.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> result = ar.result()\n    println(<span class=\"hljs-string\">\"Got ${result.size()} rows \"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n\n  <span class=\"hljs-comment\">// Now close the pool</span>\n  client.close()\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connecting_to_postgresql\"><a class=\"anchor\" href=\"#_connecting_to_postgresql\"></a>Connecting to PostgreSQL</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Most of the time you will use a pool to connect to PostgreSQL:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect options</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\n<span class=\"hljs-keyword\">def</span> client = PgPool.pool(connectOptions, poolOptions)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The pooled client uses a connection pool and any operation will borrow a connection from the pool\nto execute the operation and release it to the pool.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are running with Vert.x you can pass it your Vertx instance:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect options</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n<span class=\"hljs-comment\">// Create the pooled client</span>\n<span class=\"hljs-keyword\">def</span> client = PgPool.pool(vertx, connectOptions, poolOptions)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You need to release the pool when you don&#8217;t need it anymore:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Close the pool and all the associated resources</span>\npool.close()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you need to execute several operations on the same connection, you need to use a client\n<code><a href=\"../../apidocs/io/vertx/pgclient/PgConnection.html\">connection</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can easily get one from the pool:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect options</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\n<span class=\"hljs-keyword\">def</span> client = PgPool.pool(vertx, connectOptions, poolOptions)\n\n<span class=\"hljs-comment\">// Get a connection from the pool</span>\nclient.getConnection({ ar1 -&gt;\n\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n\n    println(<span class=\"hljs-string\">\"Connected\"</span>)\n\n    <span class=\"hljs-comment\">// Obtain our connection</span>\n    <span class=\"hljs-keyword\">def</span> conn = ar1.result()\n\n    <span class=\"hljs-comment\">// All operations execute on the same connection</span>\n    conn.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>, { ar2 -&gt;\n      <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n        conn.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='emad'\"</span>, { ar3 -&gt;\n          <span class=\"hljs-comment\">// Release the connection to the pool</span>\n          conn.close()\n        })\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Release the connection to the pool</span>\n        conn.close()\n      }\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Could not connect: ${ar1.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you are done with the connection you must close it to release it to the pool, so it can be reused.</p>\n</div>\n<div class=\"paragraph\">\n<p>Sometimes you want to improve performance via Unix domain socket connection, we achieve this with Vert.x Native transports.</p>\n</div>\n<div class=\"paragraph\">\n<p>Make sure you have added the required <code>netty-transport-native</code> dependency in your classpath and enabled the Unix domain socket option.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect Options</span>\n<span class=\"hljs-comment\">// Socket file name will be /var/run/postgresql/.s.PGSQL.5432</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"/var/run/postgresql\"</span>,\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\n<span class=\"hljs-keyword\">def</span> client = PgPool.pool(connectOptions, poolOptions)\n\n<span class=\"hljs-comment\">// Create the pooled client with a vertx instance</span>\n<span class=\"hljs-comment\">// Make sure the vertx instance has enabled native transports</span>\n<span class=\"hljs-keyword\">def</span> client2 = PgPool.pool(vertx, connectOptions, poolOptions)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the [Vert.x documentation](<a href=\"https://vertx.io/docs/vertx-core/java/#_native_transports\" class=\"bare\">https://vertx.io/docs/vertx-core/java/#_native_transports</a>).</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuration\"><a class=\"anchor\" href=\"#_configuration\"></a>Configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are several alternatives for you to configure the client.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_object\"><a class=\"anchor\" href=\"#_data_object\"></a>data object</h3>\n<div class=\"paragraph\">\n<p>A simple way to configure the client is to specify a <code>PgConnectOptions</code> data object.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Data object</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool Options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the pool from the data object</span>\n<span class=\"hljs-keyword\">def</span> pool = PgPool.pool(vertx, connectOptions, poolOptions)\n\npool.getConnection({ ar -&gt;\n  <span class=\"hljs-comment\">// Handling your connection</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also configure the generic properties with the <code>setProperties</code> or <code>addProperty</code> methods. Note <code>setProperties</code> will override the default client properties.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, you can set a default schema for the connection with adding a <code>search_path</code> property.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information about the available properties can be found in the <a href=\"https://www.postgresql.org/docs/current/runtime-config-client.html\">PostgreSQL Manuals</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_connection_uri\"><a class=\"anchor\" href=\"#_connection_uri\"></a>connection uri</h3>\n<div class=\"paragraph\">\n<p>Apart from configuring with a <code>PgConnectOptions</code> data object, We also provide you an alternative way to connect when you want to configure with a connection URI:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connection URI</span>\n<span class=\"hljs-keyword\">def</span> connectionUri = <span class=\"hljs-string\">\"postgresql://dbuser:secretpassword@database.server.com:3211/mydb\"</span>\n\n<span class=\"hljs-comment\">// Create the pool from the connection URI</span>\n<span class=\"hljs-keyword\">def</span> pool = PgPool.pool(connectionUri)\n\n<span class=\"hljs-comment\">// Create the connection from the connection URI</span>\nPgConnection.connect(vertx, connectionUri, { res -&gt;\n  <span class=\"hljs-comment\">// Handling your connection</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information about connection string formats can be found in the <a href=\"https://www.postgresql.org/docs/9.6/static/libpq-connect.html#LIBPQ-CONNSTRING\">PostgreSQL Manuals</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Currently the client supports the following parameter key words in connection uri</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>host</p>\n</li>\n<li>\n<p>hostaddr</p>\n</li>\n<li>\n<p>port</p>\n</li>\n<li>\n<p>user</p>\n</li>\n<li>\n<p>password</p>\n</li>\n<li>\n<p>dbname</p>\n</li>\n<li>\n<p>sslmode</p>\n</li>\n<li>\n<p>properties including(application_name, fallback_application_name, search_path)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Note: configuring properties in connection URI will override the default properties.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_environment_variables\"><a class=\"anchor\" href=\"#_environment_variables\"></a>environment variables</h3>\n<div class=\"paragraph\">\n<p>You can also use environment variables to set default connection setting values, this is useful\nwhen you want to avoid hard-coding database connection information. You can refer to the <a href=\"https://www.postgresql.org/docs/9.6/static/libpq-envars.html\">official documentation</a>\nfor more details. The following parameters are supported:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>PGHOST</code></p>\n</li>\n<li>\n<p><code>PGHOSTADDR</code></p>\n</li>\n<li>\n<p><code>PGPORT</code></p>\n</li>\n<li>\n<p><code>PGDATABASE</code></p>\n</li>\n<li>\n<p><code>PGUSER</code></p>\n</li>\n<li>\n<p><code>PGPASSWORD</code></p>\n</li>\n<li>\n<p><code>PGSSLMODE</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>If you don&#8217;t specify a data object or a connection URI string to connect, environment variables will take precedence over them.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">$ PGUSER=user \\\n PGHOST=the-host \\\n PGPASSWORD=secret \\\n PGDATABASE=the-db \\\n PGPORT=<span class=\"hljs-number\">5432</span> \\\n PGSSLMODE=DISABLE</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Create the pool from the environment variables</span>\n<span class=\"hljs-keyword\">def</span> pool = PgPool.pool()\n\n<span class=\"hljs-comment\">// Create the connection from the environment variables</span>\nPgConnection.connect(vertx, { res -&gt;\n  <span class=\"hljs-comment\">// Handling your connection</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::queries.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>You can fetch generated keys with a 'RETURNING' clause in your query:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">client.preparedQuery(<span class=\"hljs-string\">\"INSERT INTO color (color_name) VALUES ($1), ($2), ($3) RETURNING color_id\"</span>, Tuple.of(<span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>), { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> rows = ar.result()\n    println(rows.rowCount())\n    rows.each { row -&gt;\n      println(<span class=\"hljs-string\">\"generated key: ${row.getInteger(\"</span>color_id<span class=\"hljs-string\">\")}\"</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::connections.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::transactions.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::cursor.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Note: PostreSQL destroys cursors at the end of a transaction, so the cursor API shall be used\nwithin a transaction, otherwise you will likely get the <code>34000</code> PostgreSQL error.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_postgresql_type_mapping\"><a class=\"anchor\" href=\"#_postgresql_type_mapping\"></a>PostgreSQL type mapping</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Currently the client supports the following PostgreSQL types</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>BOOLEAN (<code>java.lang.Boolean</code>)</p>\n</li>\n<li>\n<p>INT2 (<code>java.lang.Short</code>)</p>\n</li>\n<li>\n<p>INT4 (<code>java.lang.Integer</code>)</p>\n</li>\n<li>\n<p>INT8 (<code>java.lang.Long</code>)</p>\n</li>\n<li>\n<p>FLOAT4 (<code>java.lang.Float</code>)</p>\n</li>\n<li>\n<p>FLOAT8 (<code>java.lang.Double</code>)</p>\n</li>\n<li>\n<p>CHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>VARCHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>TEXT (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>ENUM (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>NAME (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>SERIAL2 (<code>java.lang.Short</code>)</p>\n</li>\n<li>\n<p>SERIAL4 (<code>java.lang.Integer</code>)</p>\n</li>\n<li>\n<p>SERIAL8 (<code>java.lang.Long</code>)</p>\n</li>\n<li>\n<p>NUMERIC (<code>io.vertx.sqlclient.data.Numeric</code>)</p>\n</li>\n<li>\n<p>UUID (<code>java.util.UUID</code>)</p>\n</li>\n<li>\n<p>DATE (<code>java.time.LocalDate</code>)</p>\n</li>\n<li>\n<p>TIME (<code>java.time.LocalTime</code>)</p>\n</li>\n<li>\n<p>TIMETZ (<code>java.time.OffsetTime</code>)</p>\n</li>\n<li>\n<p>TIMESTAMP (<code>java.time.LocalDateTime</code>)</p>\n</li>\n<li>\n<p>TIMESTAMPTZ (<code>java.time.OffsetDateTime</code>)</p>\n</li>\n<li>\n<p>INTERVAL (<code>io.vertx.pgclient.data.Interval</code>)</p>\n</li>\n<li>\n<p>BYTEA (<code>io.vertx.core.buffer.Buffer</code>)</p>\n</li>\n<li>\n<p>JSON (<code>io.vertx.core.json.JsonObject</code>, <code>io.vertx.core.json.JsonArray</code>, <code>Number</code>, <code>Boolean</code>, <code>String</code>, <code>io.vertx.sqlclient.Tuple#JSON_NULL</code>)</p>\n</li>\n<li>\n<p>JSONB (<code>io.vertx.core.json.JsonObject</code>, <code>io.vertx.core.json.JsonArray</code>, <code>Number</code>, <code>Boolean</code>, <code>String</code>, <code>io.vertx.sqlclient.Tuple#JSON_NULL</code>)</p>\n</li>\n<li>\n<p>POINT (<code>io.vertx.pgclient.data.Point</code>)</p>\n</li>\n<li>\n<p>LINE (<code>io.vertx.pgclient.data.Line</code>)</p>\n</li>\n<li>\n<p>LSEG (<code>io.vertx.pgclient.data.LineSegment</code>)</p>\n</li>\n<li>\n<p>BOX (<code>io.vertx.pgclient.data.Box</code>)</p>\n</li>\n<li>\n<p>PATH (<code>io.vertx.pgclient.data.Path</code>)</p>\n</li>\n<li>\n<p>POLYGON (<code>io.vertx.pgclient.data.Polygon</code>)</p>\n</li>\n<li>\n<p>CIRCLE (<code>io.vertx.pgclient.data.Circle</code>)</p>\n</li>\n<li>\n<p>TSVECTOR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>TSQUERY (<code>java.lang.String</code>)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Tuple decoding uses the above types when storing values, it also performs on the flu conversion the actual value when possible:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">pool.query(<span class=\"hljs-string\">\"SELECT 1::BIGINT \\\"VAL\\\"\"</span>, { ar -&gt;\n  <span class=\"hljs-keyword\">def</span> rowSet = ar.result()\n  <span class=\"hljs-keyword\">def</span> row = rowSet.iterator().next()\n\n  <span class=\"hljs-comment\">// Stored as java.lang.Long</span>\n  <span class=\"hljs-keyword\">def</span> value = row.getValue(<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-comment\">// Convert to java.lang.Integer</span>\n  <span class=\"hljs-keyword\">def</span> intValue = row.getInteger(<span class=\"hljs-number\">0</span>)\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Tuple encoding uses the above type mapping for encoding, unless the type is numeric in which case <code>java.lang.Number</code> is used instead:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">pool.query(<span class=\"hljs-string\">\"SELECT 1::BIGINT \\\"VAL\\\"\"</span>, { ar -&gt;\n  <span class=\"hljs-keyword\">def</span> rowSet = ar.result()\n  <span class=\"hljs-keyword\">def</span> row = rowSet.iterator().next()\n\n  <span class=\"hljs-comment\">// Stored as java.lang.Long</span>\n  <span class=\"hljs-keyword\">def</span> value = row.getValue(<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-comment\">// Convert to java.lang.Integer</span>\n  <span class=\"hljs-keyword\">def</span> intValue = row.getInteger(<span class=\"hljs-number\">0</span>)\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Arrays of these types are supported.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_json\"><a class=\"anchor\" href=\"#_handling_json\"></a>Handling JSON</h3>\n<div class=\"paragraph\">\n<p>PostgreSQL <code>JSON</code> and <code>JSONB</code> types are represented by the following Java types:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>String</code></p>\n</li>\n<li>\n<p><code>Number</code></p>\n</li>\n<li>\n<p><code>Boolean</code></p>\n</li>\n<li>\n<p><code>io.vertx.core.json.JsonObject</code></p>\n</li>\n<li>\n<p><code>io.vertx.core.json.JsonArray</code></p>\n</li>\n<li>\n<p><code>io.vertx.sqlclient.Tuple#JSON_NULL</code> for representing the JSON null literal</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_numeric\"><a class=\"anchor\" href=\"#_handling_numeric\"></a>Handling NUMERIC</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/sqlclient/data/Numeric.html\">Numeric</a></code> Java type is used to represent the PostgreSQL <code>NUMERIC</code> type.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> numeric = row.get(io.vertx.sqlclient.data.Numeric<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, 0)\n<span class=\"hljs-title\">if</span> (<span class=\"hljs-title\">numeric</span>.<span class=\"hljs-title\">isNaN</span>()) {</span>\n  <span class=\"hljs-comment\">// Handle NaN</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-keyword\">def</span> value = numeric.bigDecimalValue()\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_handling_arrays\"><a class=\"anchor\" href=\"#_handling_arrays\"></a>Handling arrays</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Arrays are available on <code><a href=\"../../apidocs/io/vertx/sqlclient/Tuple.html\">Tuple</a></code> and <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_handling_custom_types\"><a class=\"anchor\" href=\"#_handling_custom_types\"></a>Handling custom types</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Strings are used to represent custom types, both sent to and returned from Postgres.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can read from PostgreSQL and get the custom type as a string</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">client.preparedQuery(<span class=\"hljs-string\">\"SELECT address, (address).city FROM address_book WHERE id=$1\"</span>, Tuple.of(<span class=\"hljs-number\">3</span>), { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> rows = ar.result()\n    rows.each { row -&gt;\n      println(<span class=\"hljs-string\">\"Full Address ${row.getString(0)}, City ${row.getString(1)}\"</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also write to PostgreSQL by providing a string</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">client.preparedQuery(<span class=\"hljs-string\">\"INSERT INTO address_book (id, address) VALUES ($1, $2)\"</span>, Tuple.of(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"('Anytown', 'Second Ave', false)\"</span>), { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> rows = ar.result()\n    println(rows.rowCount())\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_handling_text_search\"><a class=\"anchor\" href=\"#_handling_text_search\"></a>Handling text search</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Text search is handling using java <code>String</code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">client.preparedQuery(<span class=\"hljs-string\">\"SELECT to_tsvector( $1 ) @@ to_tsquery( $2 )\"</span>, Tuple.of(<span class=\"hljs-string\">\"fat cats ate fat rats\"</span>, <span class=\"hljs-string\">\"fat &amp; rat\"</span>), { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> rows = ar.result()\n    rows.each { row -&gt;\n      println(<span class=\"hljs-string\">\"Match : ${row.getBoolean(0)}\"</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>tsvector</code> and <code>tsquery</code> can be fetched from db using java <code>String</code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">client.preparedQuery(<span class=\"hljs-string\">\"SELECT to_tsvector( $1 ), to_tsquery( $2 )\"</span>, Tuple.of(<span class=\"hljs-string\">\"fat cats ate fat rats\"</span>, <span class=\"hljs-string\">\"fat &amp; rat\"</span>), { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> rows = ar.result()\n    rows.each { row -&gt;\n      println(<span class=\"hljs-string\">\"Vector : ${row.getString(0)}, query : ${row.getString(1)}\"</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_collector_queries\"><a class=\"anchor\" href=\"#_collector_queries\"></a>Collector queries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can use Java collectors with the query API:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The collector processing must not keep a reference on the <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> as\nthere is a single row used for processing the entire set.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Java <code>Collectors</code> provides many interesting predefined collectors, for example you can\ncreate easily create a string directly from the row set:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pubsub\"><a class=\"anchor\" href=\"#_pubsub\"></a>Pub/sub</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>PostgreSQL supports pub/sub communication channels.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can set a <code><a href=\"../../apidocs/io/vertx/pgclient/PgConnection.html#notificationHandler-io.vertx.core.Handler-\">notificationHandler</a></code> to receive\nPostgreSQL notifications:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">connection.notificationHandler({ notification -&gt;\n  println(<span class=\"hljs-string\">\"Received ${notification.payload} on channel ${notification.channel}\"</span>)\n})\n\nconnection.query(<span class=\"hljs-string\">\"LISTEN some-channel\"</span>, { ar -&gt;\n  println(<span class=\"hljs-string\">\"Subscribed to channel\"</span>)\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/pgclient/pubsub/PgSubscriber.html\">PgSubscriber</a></code> is a channel manager managing a single connection that\nprovides per channel subscription:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> subscriber = PgSubscriber.subscriber(vertx, [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n])\n\n<span class=\"hljs-comment\">// You can set the channel before connect</span>\nsubscriber.channel(<span class=\"hljs-string\">\"channel1\"</span>).handler({ payload -&gt;\n  println(<span class=\"hljs-string\">\"Received ${payload}\"</span>)\n})\n\nsubscriber.connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n    <span class=\"hljs-comment\">// Or you can set the channel after connect</span>\n    subscriber.channel(<span class=\"hljs-string\">\"channel2\"</span>).handler({ payload -&gt;\n      println(<span class=\"hljs-string\">\"Received ${payload}\"</span>)\n    })\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The channel name that is given to the channel method will be the exact name of the channel as held by PostgreSQL for sending\nnotifications.  Note this is different than the representation of the channel name in SQL, and\ninternally <code><a href=\"../../apidocs/io/vertx/pgclient/pubsub/PgSubscriber.html\">PgSubscriber</a></code> will prepare the submitted channel name as a quoted identifier:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> subscriber = PgSubscriber.subscriber(vertx, [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n])\n\nsubscriber.connect({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-comment\">// Complex channel name - name in PostgreSQL requires a quoted ID</span>\n    subscriber.channel(<span class=\"hljs-string\">\"Complex.Channel.Name\"</span>).handler({ payload -&gt;\n      println(<span class=\"hljs-string\">\"Received ${payload}\"</span>)\n    })\n    subscriber.channel(<span class=\"hljs-string\">\"Complex.Channel.Name\"</span>).subscribeHandler({ subscribed -&gt;\n      subscriber.actualConnection().query(<span class=\"hljs-string\">\"NOTIFY \\\"Complex.Channel.Name\\\", 'msg'\"</span>, { notified -&gt;\n        println(<span class=\"hljs-string\">\"Notified \\\"Complex.Channel.Name\\\"\"</span>)\n      })\n    })\n\n    <span class=\"hljs-comment\">// PostgreSQL simple ID's are forced lower-case</span>\n    subscriber.channel(<span class=\"hljs-string\">\"simple_channel\"</span>).handler({ payload -&gt;\n      println(<span class=\"hljs-string\">\"Received ${payload}\"</span>)\n    })\n    subscriber.channel(<span class=\"hljs-string\">\"simple_channel\"</span>).subscribeHandler({ subscribed -&gt;\n      <span class=\"hljs-comment\">// The following simple channel identifier is forced to lower case</span>\n      subscriber.actualConnection().query(<span class=\"hljs-string\">\"NOTIFY Simple_CHANNEL, 'msg'\"</span>, { notified -&gt;\n        println(<span class=\"hljs-string\">\"Notified simple_channel\"</span>)\n      })\n    })\n\n    <span class=\"hljs-comment\">// The following channel name is longer than the current</span>\n    <span class=\"hljs-comment\">// (NAMEDATALEN = 64) - 1 == 63 character limit and will be truncated</span>\n    subscriber.channel(<span class=\"hljs-string\">\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbb\"</span>).handler({ payload -&gt;\n      println(<span class=\"hljs-string\">\"Received ${payload}\"</span>)\n    })\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can provide a reconnect policy as a function that takes the number of <code>retries</code> as argument and returns an <code>amountOfTime</code>\nvalue:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>when <code>amountOfTime &lt; 0</code>: the subscriber is closed and there is no retry</p>\n</li>\n<li>\n<p>when <code>amountOfTime = 0</code>: the subscriber retries to connect immediately</p>\n</li>\n<li>\n<p>when <code>amountOfTime &gt; 0</code>: the subscriber retries after <code>amountOfTime</code> milliseconds</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> subscriber = PgSubscriber.subscriber(vertx, [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n])\n\n<span class=\"hljs-comment\">// Reconnect at most 10 times after 100 ms each</span>\nsubscriber.reconnectPolicy({ retries -&gt;\n  <span class=\"hljs-keyword\">if</span> (retries &lt; <span class=\"hljs-number\">10</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">100</span>L\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>L\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The default policy is to not reconnect.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cancelling_request\"><a class=\"anchor\" href=\"#_cancelling_request\"></a>Cancelling Request</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>PostgreSQL supports cancellation of requests in progress. You can cancel inflight requests using <code><a href=\"../../apidocs/io/vertx/pgclient/PgConnection.html#cancelRequest-io.vertx.core.Handler-\">cancelRequest</a></code>. Cancelling a request opens a new connection to the server and cancels the request and then close the connection.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">connection.query(<span class=\"hljs-string\">\"SELECT pg_sleep(20)\"</span>, { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-comment\">// imagine this is a long query and is still running</span>\n    println(<span class=\"hljs-string\">\"Query success\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// the server will abort the current query after cancelling request</span>\n    println(<span class=\"hljs-string\">\"Failed to query due to ${ar.cause().getMessage()}\"</span>)\n  }\n})\nconnection.cancelRequest({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    println(<span class=\"hljs-string\">\"Cancelling request has been sent\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failed to send cancelling request\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>The cancellation signal might or might not have any effect — for example, if it arrives after the backend has finished processing the query, then it will have no effect. If the cancellation is effective, it results in the current command being terminated early with an error message.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the <a href=\"https://www.postgresql.org/docs/11/protocol-flow.html#id-1.10.5.7.9\">official documentation</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_ssltls\"><a class=\"anchor\" href=\"#_using_ssltls\"></a>Using SSL/TLS</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To configure the client to use SSL connection, you can configure the <code><a href=\"../../apidocs/io/vertx/pgclient/PgConnectOptions.html\">PgConnectOptions</a></code>\nlike a Vert.x <code>NetClient</code>.\nAll <a href=\"https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-PROTECTION\">SSL modes</a> are supported and you are able to configure <code>sslmode</code>. The client is in <code>DISABLE</code> SSL mode by default.\n<code>ssl</code> parameter is kept as a mere shortcut for setting <code>sslmode</code>. <code>setSsl(true)</code> is equivalent to <code>setSslMode(VERIFY_CA)</code> and <code>setSsl(false)</code> is equivalent to <code>setSslMode(DISABLE)</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> options = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">5432</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>,\n<span class=\"hljs-symbol\">  sslMode:</span><span class=\"hljs-string\">\"VERIFY_CA\"</span>,\n<span class=\"hljs-symbol\">  pemTrustOptions:</span>[\n<span class=\"hljs-symbol\">    certPaths:</span>[\n      <span class=\"hljs-string\">\"/path/to/cert.pem\"</span>\n    ]\n  ]\n]\n\nPgConnection.connect(vertx, options, { res -&gt;\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// Connected with SSL</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Could not connect ${res.cause()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the <a href=\"http://vertx.io/docs/vertx-core/java/#ssl\">Vert.x documentation</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_a_proxy\"><a class=\"anchor\" href=\"#_using_a_proxy\"></a>Using a proxy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can also configure the client to use an HTTP/1.x CONNECT, SOCKS4a or SOCKS5 proxy.</p>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the <a href=\"http://vertx.io/docs/vertx-core/java/#_using_a_proxy_for_client_connections\">Vert.x documentation</a>.</p>\n</div>\n</div>\n</div>"},"__N_SSG":true}