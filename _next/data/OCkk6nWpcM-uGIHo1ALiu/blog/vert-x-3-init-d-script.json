{"pageProps":{"categories":["releases","guides","news"],"post":{"meta":{"title":"Vert.x 3 init.d Script","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say you have a Vert.x 3 application you want to install on a Linux server. But you want the old school way (I mean not the Docker way)."},"date":"2015-07-02","slug":"vert-x-3-init-d-script","readingTime":{"text":"2 min read","minutes":1.845,"time":110700,"words":369},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let\\u2019s say you have a Vert.x 3 ap\\xADpli\\xADca\\xADtion you want to in\\xADstall on a Linux server. But you want the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"old school\"), \" way (I mean not the Docker way \", \"\\u263A\", \"). So, in other words, you need an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"init.d\"), \" script. This post pro\\xADposes an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"init.d\"), \" script that you can use to start/stop/restart a Vert.x 3 ap\\xADpli\\xADca\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"prerequisites\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#prerequisites\"\n  })), \"Prerequisites\"), mdx(\"p\", null, \"The pro\\xADposed script as\\xADsumes your ap\\xADpli\\xADca\\xADtion is pack\\xADaged as a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \". So, your ap\\xADpli\\xADca\\xADtion is going to be launched using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -jar your-fat-jar ...\"), \".\"), mdx(\"h2\", {\n    \"id\": \"the-script\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#the-script\"\n  })), \"The script\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"init.d\"), \" scripts have to reply to a set of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"com\\xADmands\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"start\"), \" : starts the ap\\xADpli\\xADca\\xADtion (if not yet started)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stop\"), \" : stops the ap\\xADpli\\xADca\\xADtion (if started)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"status\"), \" : let you know if the ap\\xADpli\\xADca\\xADtion is started or not\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"restart\"), \" : restart the ap\\xADpli\\xADca\\xADtion\")), mdx(\"p\", null, \"These \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"com\\xADmands\"), \" are in\\xADvoked using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"service my-service-script start\\nservice my-service-script stop\\nservice my-service-script status\\nservice my-service-script restart\\n\")), mdx(\"p\", null, \"In gen\\xADeral, ser\\xADvice scripts are hooked in the boot and shut\\xADdown se\\xADquences to start and stop au\\xADto\\xADmat\\xADi\\xADcally dur\\xADing the sys\\xADtem starts and stops.\"), mdx(\"p\", null, \"So, enough talks, let\\u2019s look at the script:\"), mdx(Gist, {\n    url: \"https://gist.github.com/cescoffier/ccc8b391787e93f4e6e0\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"using-the-script\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#using-the-script\"\n  })), \"Using the script\"), mdx(\"p\", null, \"First down\\xADload the script from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.githubusercontent.com/cescoffier/ccc8b391787e93f4e6e0/raw/my-vertx-application\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"You need to set a cou\\xADple of vari\\xADables lo\\xADcated at the be\\xADgin\\xADning of the file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-ini\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# The directory in which your application is installed\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"APPLICATION_DIR\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/opt/my-vertx-app\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# The fat jar containing your application\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"APPLICATION_JAR\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"maven-verticle-3.0.0-fat.jar\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# The application argument such as -cluster -cluster-host ...\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"APPLICATION_ARGS\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# vert.x options and system properties (-Dfoo=bar).\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"VERTX_OPTS\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# The path to the Java command to use to launch the application (must be java 8+)\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"JAVA\"), \"=/opt/java/java/bin/java\\n\")), mdx(\"p\", null, \"The rest of the script can stay as it is, but feel free to adapt it to your needs. Once you have set these vari\\xADables based on your en\\xADvi\\xADron\\xADment, move the file to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/init.d\"), \" and set it as ex\\xADe\\xADcutable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"sudo mv my-vertx-application /etc/init.d\\nsudo chmod +x my-vertx-application\\n\")), mdx(\"p\", null, \"Then, you should be able to start your ap\\xADpli\\xADca\\xADtion using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"sudo service my-vertx-application start\\n\")), mdx(\"p\", null, \"De\\xADpend\\xADing to your op\\xADer\\xADat\\xADing sys\\xADtem, adding the hooks to the boot and shut\\xADdown se\\xADquence dif\\xADfers. For in\\xADstance on Ubuntu you need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"update-rc.d\"), \" com\\xADmand while on Cen\\xADtOS \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chkconfig\"), \" is used\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"That\\u2019s all, enjoy !\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Let’s say you have a Vert.x 3 ap­pli­ca­tion you want to in­stall on a Linux server. But you want the <em>old school</em> way (I mean not the Docker way <!-- -->☺<!-- -->). So, in other words, you need an <em>init.d</em> script. This post pro­poses an <em>init.d</em> script that you can use to start/stop/restart a Vert.x 3 ap­pli­ca­tion.</p><h2 id=\"prerequisites\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#prerequisites\"></a>Prerequisites</h2><p>The pro­posed script as­sumes your ap­pli­ca­tion is pack­aged as a <em>fat jar</em>. So, your ap­pli­ca­tion is going to be launched using <code>java -jar your-fat-jar ...</code>.</p><h2 id=\"the-script\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#the-script\"></a>The script</h2><p>The <em>init.d</em> scripts have to reply to a set of <em>com­mands</em>:</p><ul><li><code>start</code> : starts the ap­pli­ca­tion (if not yet started)</li><li><code>stop</code> : stops the ap­pli­ca­tion (if started)</li><li><code>status</code> : let you know if the ap­pli­ca­tion is started or not</li><li><code>restart</code> : restart the ap­pli­ca­tion</li></ul><p>These <em>com­mands</em> are in­voked using:</p><pre><code class=\"hljs language-bash\">service my-service-script start\nservice my-service-script stop\nservice my-service-script status\nservice my-service-script restart\n</code></pre><p>In gen­eral, ser­vice scripts are hooked in the boot and shut­down se­quences to start and stop au­to­mat­i­cally dur­ing the sys­tem starts and stops.</p><p>So, enough talks, let’s look at the script:</p><div>...waiting for Gist...</div><h2 id=\"using-the-script\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#using-the-script\"></a>Using the script</h2><p>First down­load the script from the <a href=\"https://gist.githubusercontent.com/cescoffier/ccc8b391787e93f4e6e0/raw/my-vertx-application\">here</a>.</p><p>You need to set a cou­ple of vari­ables lo­cated at the be­gin­ning of the file:</p><pre><code class=\"hljs language-ini\"><span class=\"hljs-comment\"># The directory in which your application is installed</span>\n<span class=\"hljs-attr\">APPLICATION_DIR</span>=<span class=\"hljs-string\">&quot;/opt/my-vertx-app&quot;</span>\n<span class=\"hljs-comment\"># The fat jar containing your application</span>\n<span class=\"hljs-attr\">APPLICATION_JAR</span>=<span class=\"hljs-string\">&quot;maven-verticle-3.0.0-fat.jar&quot;</span>\n<span class=\"hljs-comment\"># The application argument such as -cluster -cluster-host ...</span>\n<span class=\"hljs-attr\">APPLICATION_ARGS</span>=<span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-comment\"># vert.x options and system properties (-Dfoo=bar).</span>\n<span class=\"hljs-attr\">VERTX_OPTS</span>=<span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-comment\"># The path to the Java command to use to launch the application (must be java 8+)</span>\n<span class=\"hljs-attr\">JAVA</span>=/opt/java/java/bin/java\n</code></pre><p>The rest of the script can stay as it is, but feel free to adapt it to your needs. Once you have set these vari­ables based on your en­vi­ron­ment, move the file to <code>/etc/init.d</code> and set it as ex­e­cutable:</p><pre><code class=\"hljs language-bash\">sudo mv my-vertx-application /etc/init.d\nsudo chmod +x my-vertx-application\n</code></pre><p>Then, you should be able to start your ap­pli­ca­tion using:</p><pre><code class=\"hljs language-bash\">sudo service my-vertx-application start\n</code></pre><p>De­pend­ing to your op­er­at­ing sys­tem, adding the hooks to the boot and shut­down se­quence dif­fers. For in­stance on Ubuntu you need to use the <code>update-rc.d</code> com­mand while on Cen­tOS <code>chkconfig</code> is used</p><p><strong>That’s all, enjoy !</strong></p>","scope":{}}},"prevPost":{"meta":{"title":"Vert.x 3 and PostgreSQL JSON type","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"One of the interesting features of NoSQL databases is their schema-less mode of operation. This feature is very useful during project prototyping and early development since at early the stages of development of projects all data structures are not clear or have been defined yet."},"date":"2015-07-03","slug":"vert-x3-and-postgresql-json-type"},"nextPost":{"meta":{"title":"Vert.x 3 Web easy as Pi","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"Vert.x Web distinguishes itself from traditional application servers like JavaEE by just being a simple extension toolkit to Vert.x, which makes it quite lightweight and small but nevertheless very powerful."},"date":"2015-07-01","slug":"vert-x3-web-easy-as-pi"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"date":"2015-10-19","slug":"using-the-asynchronous-sql-client"}]},"__N_SSG":true}