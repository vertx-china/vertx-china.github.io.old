{"pageProps":{"slug":"4.1.3/vertx-web-openapi/java","title":"Vert.x OpenAPI","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_openapi\">Using Vert.x OpenAPI</a></li>\n<li><a href=\"#_routerbuilder\"><code>RouterBuilder</code></a></li>\n<li><a href=\"#_access_to_operations\">Access to operations</a></li>\n<li><a href=\"#_configuring_authenticationhandlers_defined_in_the_openapi_document\">Configuring `AuthenticationHandler`s defined in the OpenAPI document</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_blocking_vs_nonblocking\">Blocking vs NonBlocking</a></li>\n</ul>\n</li>\n<li><a href=\"#_map_authenticationhandler_to_openapi_security_schemes\">Map <code>AuthenticationHandler</code> to OpenAPI security schemes</a></li>\n<li><a href=\"#_not_implemented_error\">Not Implemented Error</a></li>\n<li><a href=\"#_response_content_type_handler\">Response Content Type Handler</a></li>\n<li><a href=\"#_operation_model\">Operation model</a></li>\n<li><a href=\"#_body_handler\">Body Handler</a></li>\n<li><a href=\"#_multipartform_data_validation\"><code>multipart/form-data</code> validation</a></li>\n<li><a href=\"#_custom_global_handlers\">Custom global handlers</a></li>\n<li><a href=\"#_router_builder_handlers_mount_order\">Router builder handlers mount order</a></li>\n<li><a href=\"#_generate_the_router\">Generate the router</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x OpenAPI</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x OpenAPI extends Vert.x Web to support <a href=\"https://www.openapis.org/\">OpenAPI 3</a>, bringing to you a simple interface to build a Vert.x Web Router conforming your API contract.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x OpenAPI can:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Parse and validate the your OpenAPI 3 contract</p>\n</li>\n<li>\n<p>Generate a router according to your spec, with correct path &amp; methods</p>\n</li>\n<li>\n<p>Provide request parsing and validation based on your contract using <a href=\"https://vertx.io/docs/vertx-web-validation/java/\">Vert.x Web Validation</a></p>\n</li>\n<li>\n<p>Mount required security handlers</p>\n</li>\n<li>\n<p>Path conversion between OpenAPI style and Vert.x style</p>\n</li>\n<li>\n<p>Route requests to event bus using <a href=\"https://vertx.io/docs/vertx-web-api-service/java/\">Vert.x Web API Service</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_openapi\"><a class=\"anchor\" href=\"#_using_vert_x_openapi\"></a>Using Vert.x OpenAPI</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use Vert.x OpenAPI, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web-openapi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-web-openapi:4.1.3&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_routerbuilder\"><a class=\"anchor\" href=\"#_routerbuilder\"></a><code>RouterBuilder</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilder.html\">RouterBuilder</a></code> is the main element of this module: It provides the interface to mount request handlers and generates the final <code><a href=\"../../apidocs/io/vertx/ext/web/Router.html\">Router</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>To start using Vert.x Web OpenAPI, you must instantiate <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilder.html\">RouterBuilder</a></code> with your contract using\n<code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilder.html#create-io.vertx.core.Vertx-java.lang.String-io.vertx.core.Handler-\">RouterBuilder.create</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>For example to load a spec from the local filesystem:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">RouterBuilder.create(vertx, <span class=\"hljs-string\">&quot;src/main/resources/petstore.yaml&quot;</span>)\n  .onSuccess(routerBuilder -&gt; {\n    <span class=\"hljs-comment\">// Spec loaded with success</span>\n  })\n  .onFailure(err -&gt; {\n    <span class=\"hljs-comment\">// Something went wrong during router builder initialization</span>\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can construct a router builder from a remote spec:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">RouterBuilder.create(\n  vertx,\n  <span class=\"hljs-string\">&quot;https://raw.githubusercontent&quot;</span> +\n    <span class=\"hljs-string\">&quot;.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml&quot;</span>)\n  .onSuccess(routerBuilder -&gt; {\n    <span class=\"hljs-comment\">// Spec loaded with success</span>\n  })\n  .onFailure(err -&gt; {\n    <span class=\"hljs-comment\">// Something went wrong during router builder initialization</span>\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can access a private remote spec configuring <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/OpenAPILoaderOptions.html\">OpenAPILoaderOptions</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">OpenAPILoaderOptions loaderOptions = <span class=\"hljs-keyword\">new</span> OpenAPILoaderOptions()\n  .putAuthHeader(<span class=\"hljs-string\">&quot;Authorization&quot;</span>, <span class=\"hljs-string\">&quot;Bearer xx.yy.zz&quot;</span>);\nRouterBuilder.create(\n  vertx,\n  <span class=\"hljs-string\">&quot;https://raw.githubusercontent&quot;</span> +\n    <span class=\"hljs-string\">&quot;.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml&quot;</span>,\n  loaderOptions)\n  .onSuccess(routerBuilder -&gt; {\n    <span class=\"hljs-comment\">// Spec loaded with success</span>\n  })\n  .onFailure(err -&gt; {\n    <span class=\"hljs-comment\">// Something went wrong during router builder initialization</span>\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can modify different behaviours of the router builder with <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilderOptions.html\">RouterBuilderOptions</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder.setOptions(<span class=\"hljs-keyword\">new</span> RouterBuilderOptions());</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_access_to_operations\"><a class=\"anchor\" href=\"#_access_to_operations\"></a>Access to operations</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To access to an <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#operationObject\">Operation</a> defined in contract, use <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilder.html#operation-java.lang.String-\">operation</a></code>.\nThis method returns an <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/Operation.html\">Operation</a></code> instance that you can use to both access the model and assign handlers</p>\n</div>\n<div class=\"paragraph\">\n<p>To mount an handler to an operation use <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/Operation.html#handler-io.vertx.core.Handler-\">handler</a></code>,\nto mount a failure handler use <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/Operation.html#failureHandler-io.vertx.core.Handler-\">failureHandler</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>You can <strong>add multiple handlers to same operation</strong>, without overwrite the existing ones.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder\n  .operation(<span class=\"hljs-string\">&quot;awesomeOperation&quot;</span>)\n  .handler(routingContext -&gt; {\n    RequestParameters params =\n      routingContext.get(ValidationHandler.REQUEST_CONTEXT_KEY);\n    RequestParameter body = params.body();\n    JsonObject jsonBody = body.getJsonObject();\n    <span class=\"hljs-comment\">// Do something with body</span>\n  }).failureHandler(routingContext -&gt; {\n  <span class=\"hljs-comment\">// Handle failure</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>You can&#8217;t access to contract operations without <code>operationId</code>. The operations without <code>operationId</code> are ignored by the <code>RouterBuilder</code></p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x OpenAPI mounts the correct <code><a href=\"../../apidocs/io/vertx/ext/web/validation/ValidationHandler.html\">ValidationHandler</a></code> for you, so you can access to request parameters and request body.\nRefer to <a href=\"https://vertx.io/docs/vertx-web-validation/java/\">Vert.x Web Validation documentation</a> to learn how to get request parameters &amp; request body and how to manage validation failures</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuring_authenticationhandlers_defined_in_the_openapi_document\"><a class=\"anchor\" href=\"#_configuring_authenticationhandlers_defined_in_the_openapi_document\"></a>Configuring `AuthenticationHandler`s defined in the OpenAPI document</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Security is a important aspect of any API. OpenAPI defines how security is expected to be enforced in the api document.</p>\n</div>\n<div class=\"paragraph\">\n<p>All security scheme information resided under the <code>/components/securitySchemes</code> component. The information in this\nobject is different and specific for each type of authentication. To avoid double configuration, this module allows you\nto provide factories for authentication handlers that will receive the source configuration from the source document.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, given an document that defines <code>Basic Authentication</code> as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>openapi: 3.0.0\n...\ncomponents:\n securitySchemes:\n   basicAuth:     # &lt;-- arbitrary name for the security scheme\n     type: http\n     scheme: basic</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This can be configured with a factory as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder\n  .securityHandler(<span class=\"hljs-string\">&quot;basicAuth&quot;</span>)\n  .bindBlocking(config -&gt; BasicAuthHandler.create(authProvider));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>While this example is quite simple to configure, creating an authentication handler that requires the configuration\nsuch as the API Key handler can extract the config:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre> openapi: 3.0.0\n ...\n # 1) Define the key name and location\n components:\n   securitySchemes:\n     ApiKeyAuth:        # arbitrary name for the security scheme\n       type: apiKey\n       in: header       # can be \"header\", \"query\" or \"cookie\"\n       name: X-API-KEY  # name of the header, query parameter or cookie</pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder\n  .securityHandler(<span class=\"hljs-string\">&quot;ApiKeyAuth&quot;</span>)\n  .bindBlocking(config -&gt;\n    APIKeyHandler.create(authProvider)\n      .header(config.getString(<span class=\"hljs-string\">&quot;name&quot;</span>)));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or you can configure more complex scenarios such as OpenId Connect which require server discovery.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>openapi: 3.0.0\n...\n# 1) Define the security scheme type and attributes\ncomponents:\n securitySchemes:\n   openId:   # &lt;--- Arbitrary name for the security scheme. Used to refer to it from elsewhere.\n     type: openIdConnect\n     openIdConnectUrl: https://example.com/.well-known/openid-configuration</pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder\n  .securityHandler(<span class=\"hljs-string\">&quot;openId&quot;</span>)\n  .bind(config -&gt;\n    OpenIDConnectAuth\n      .discover(vertx, <span class=\"hljs-keyword\">new</span> OAuth2Options()\n        .setClientId(<span class=\"hljs-string\">&quot;client-id&quot;</span>) <span class=\"hljs-comment\">// user provided</span>\n        .setClientSecret(<span class=\"hljs-string\">&quot;client-secret&quot;</span>) <span class=\"hljs-comment\">// user provided</span>\n        .setSite(config.getString(<span class=\"hljs-string\">&quot;openIdConnectUrl&quot;</span>)))\n      .compose(authProvider -&gt; {\n        AuthenticationHandler handler =\n          OAuth2AuthHandler.create(vertx, authProvider);\n        <span class=\"hljs-keyword\">return</span> Future.succeededFuture(handler);\n      }))\n  .onSuccess(self -&gt; {\n    <span class=\"hljs-comment\">// Creation completed with success</span>\n  })\n  .onFailure(err -&gt; {\n    <span class=\"hljs-comment\">// Something went wrong</span>\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The API is designed to be fluent so it can be used in a short notation, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder\n  .securityHandler(<span class=\"hljs-string\">&quot;api_key&quot;</span>)\n  .bindBlocking(config -&gt; APIKeyHandler.create(authProvider))\n  .operation(<span class=\"hljs-string\">&quot;listPetsSingleSecurity&quot;</span>)\n  .handler(routingContext -&gt; {\n    routingContext\n      .response()\n      .setStatusCode(<span class=\"hljs-number\">200</span>)\n      .setStatusMessage(<span class=\"hljs-string\">&quot;Cats and Dogs&quot;</span>)\n      .end();\n  });\n\n<span class=\"hljs-comment\">// non-blocking bind</span>\nrouterBuilder\n  .securityHandler(<span class=\"hljs-string\">&quot;oauth&quot;</span>)\n  .bind(config -&gt; OpenIDConnectAuth.discover(vertx, <span class=\"hljs-keyword\">new</span> OAuth2Options(config))\n    .compose(oidc -&gt; Future.succeededFuture(\n      OAuth2AuthHandler.create(vertx, oidc))))\n\n  .onSuccess(self -&gt; {\n    self\n      .operation(<span class=\"hljs-string\">&quot;listPetsSingleSecurity&quot;</span>)\n      .handler(routingContext -&gt; {\n        routingContext\n          .response()\n          .setStatusCode(<span class=\"hljs-number\">200</span>)\n          .setStatusMessage(<span class=\"hljs-string\">&quot;Cats and Dogs&quot;</span>)\n          .end();\n      });\n  });</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_blocking_vs_nonblocking\"><a class=\"anchor\" href=\"#_blocking_vs_nonblocking\"></a>Blocking vs NonBlocking</h3>\n<div class=\"paragraph\">\n<p>From the examples above it is noticeable that handlers can be added in a blocking or not blocking way. The reason for\nnon blocking way usage is not just to support handlers like <code>OAuth2</code>. The non-blocking way can be useful for handlers\nlike JWT or basic authentication where the authentication provider requires loading of keys or configuration files.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is an example with JWT:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder\n  .securityHandler(<span class=\"hljs-string\">&quot;oauth&quot;</span>)\n  .bind(config -&gt;\n    <span class=\"hljs-comment\">// as we don&#x27;t want to block while reading the</span>\n    <span class=\"hljs-comment\">// public key, we use the non blocking bind</span>\n    vertx.fileSystem()\n      .readFile(<span class=\"hljs-string\">&quot;public.key&quot;</span>)\n      <span class=\"hljs-comment\">// we map the future to a authentication provider</span>\n      .map(key -&gt;\n        JWTAuth.create(vertx, <span class=\"hljs-keyword\">new</span> JWTAuthOptions()\n          .addPubSecKey(<span class=\"hljs-keyword\">new</span> PubSecKeyOptions()\n            .setAlgorithm(<span class=\"hljs-string\">&quot;RS256&quot;</span>)\n            .setBuffer(key))))\n      <span class=\"hljs-comment\">// and map again to create the final handler</span>\n      .map(JWTAuthHandler::create))\n\n  .onSuccess(self -&gt;\n    self\n      .operation(<span class=\"hljs-string\">&quot;listPetsSingleSecurity&quot;</span>)\n      .handler(routingContext -&gt; {\n        routingContext\n          .response()\n          .setStatusCode(<span class=\"hljs-number\">200</span>)\n          .setStatusMessage(<span class=\"hljs-string\">&quot;Cats and Dogs&quot;</span>)\n          .end();\n      }));</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_map_authenticationhandler_to_openapi_security_schemes\"><a class=\"anchor\" href=\"#_map_authenticationhandler_to_openapi_security_schemes\"></a>Map <code>AuthenticationHandler</code> to OpenAPI security schemes</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You have seen how you can map an <code><a href=\"../../apidocs/io/vertx/ext/web/handler/AuthenticationHandler.html\">AuthenticationHandler</a></code> to a security schema defined in the contract. The previous examples are validating and will fail your route builder if the configuration is missing.</p>\n</div>\n<div class=\"paragraph\">\n<p>There could be cases where the contract is incomplete and you explicitly want to define security handlers. In this case\nthe API is slightly different and will not enforce any contract validation. Yet, the security handlers will be available\nto the builder regardless.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, given your contract has a security schema named <code>security_scheme_name</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder.securityHandler(\n  <span class=\"hljs-string\">&quot;security_scheme_name&quot;</span>,\n  authenticationHandler);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can mount <code><a href=\"../../apidocs/io/vertx/ext/web/handler/AuthenticationHandler.html\">AuthenticationHandler</a></code> included in Vert.x Web, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">routerBuilder.securityHandler(<span class=\"hljs-string\">&quot;jwt_auth&quot;</span>,\n  JWTAuthHandler.create(jwtAuthProvider));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you generate the <code><a href=\"../../apidocs/io/vertx/ext/web/Router.html\">Router</a></code> the router builder will solve the security schemes required for an operation.\nIt fails if there is a missing <code>AuthenticationHandler</code> required by a configured operation.</p>\n</div>\n<div class=\"paragraph\">\n<p>For debugging/testing purpose you can disable this check with <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilderOptions.html#setRequireSecurityHandlers-boolean-\">setRequireSecurityHandlers</a></code></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_not_implemented_error\"><a class=\"anchor\" href=\"#_not_implemented_error\"></a>Not Implemented Error</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Router builder automatically mounts a default handler for operations without a specified handler.\nThis default handler fails the routing context with 405 <code>Method Not Allowed</code>/501 <code>Not Implemented</code> error.\nYou can enable/disable it with <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilderOptions.html#setMountNotImplementedHandler-boolean-\">setMountNotImplementedHandler</a></code>\nand you can customize this error handling with <code><a href=\"../../apidocs/io/vertx/ext/web/Router.html#errorHandler-int-io.vertx.core.Handler-\">errorHandler</a></code></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_response_content_type_handler\"><a class=\"anchor\" href=\"#_response_content_type_handler\"></a>Response Content Type Handler</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Router builder automatically mounts a <code><a href=\"../../apidocs/io/vertx/ext/web/handler/ResponseContentTypeHandler.html\">ResponseContentTypeHandler</a></code> handler when contract requires it.\nYou can disable this feature with <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilderOptions.html#setMountResponseContentTypeHandler-boolean-\">setMountResponseContentTypeHandler</a></code></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_operation_model\"><a class=\"anchor\" href=\"#_operation_model\"></a>Operation model</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you need to access to your operation model while handling the request,\nyou can configure the router builder to push it inside the <code>RoutingContext</code> with <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilderOptions.html#setOperationModelKey-java.lang.String-\">setOperationModelKey</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">options.setOperationModelKey(<span class=\"hljs-string\">&quot;operationModel&quot;</span>);\nrouterBuilder.setOptions(options);\n\n<span class=\"hljs-comment\">// Add an handler that uses the operation model</span>\nrouterBuilder\n  .operation(<span class=\"hljs-string\">&quot;listPets&quot;</span>)\n  .handler(\n    routingContext -&gt; {\n      JsonObject operation = routingContext.get(<span class=\"hljs-string\">&quot;operationModel&quot;</span>);\n\n      routingContext\n        .response()\n        .setStatusCode(<span class=\"hljs-number\">200</span>)\n        .setStatusMessage(<span class=\"hljs-string\">&quot;OK&quot;</span>)\n        <span class=\"hljs-comment\">// Write the response with operation id &quot;listPets&quot;</span>\n        .end(operation.getString(<span class=\"hljs-string\">&quot;operationId&quot;</span>));\n    });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_body_handler\"><a class=\"anchor\" href=\"#_body_handler\"></a>Body Handler</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Router builder automatically mounts a <code><a href=\"../../apidocs/io/vertx/ext/web/handler/BodyHandler.html\">BodyHandler</a></code> to manage request bodies.\nYou can configure the instance of <code><a href=\"../../apidocs/io/vertx/ext/web/handler/BodyHandler.html\">BodyHandler</a></code> (e.g. to change upload directory) with <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilder.html#bodyHandler-io.vertx.ext.web.handler.BodyHandler-\">bodyHandler</a></code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_multipartform_data_validation\"><a class=\"anchor\" href=\"#_multipartform_data_validation\"></a><code>multipart/form-data</code> validation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The validation handler separates file uploads and form attributes as explained:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>If the parameter doesn&#8217;t have an encoding associated field:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>If the parameter has <code>type: string</code> and <code>format: base64</code> or <code>format: binary</code> is a file upload with content-type <code>application/octet-stream</code></p>\n</li>\n<li>\n<p>Otherwise is a form attribute</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>If the parameter has the encoding associated field is a file upload</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The form attributes are parsed, converted in json and validated,\nwhile for file uploads the validation handler just checks the existence and the content type.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_custom_global_handlers\"><a class=\"anchor\" href=\"#_custom_global_handlers\"></a>Custom global handlers</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you need to mount handlers that must be executed for each operation in your router before the operation specific handlers, you can use <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilder.html#rootHandler-io.vertx.core.Handler-\">rootHandler</a></code></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_router_builder_handlers_mount_order\"><a class=\"anchor\" href=\"#_router_builder_handlers_mount_order\"></a>Router builder handlers mount order</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Handlers are loaded by the router builder in this order:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Body handler</p>\n</li>\n<li>\n<p>Custom global handlers</p>\n</li>\n<li>\n<p>Configured `<a href=\"../../apidocs/io/vertx/ext/web/handler/AuthenticationHandler.html\">AuthenticationHandler</a>`s</p>\n</li>\n<li>\n<p>Generated <code><a href=\"../../apidocs/io/vertx/ext/web/validation/ValidationHandler.html\">ValidationHandler</a></code></p>\n</li>\n<li>\n<p>User handlers or \"Not implemented\" handler (if enabled)</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_generate_the_router\"><a class=\"anchor\" href=\"#_generate_the_router\"></a>Generate the router</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you are ready, generate the router and use it:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Router router = routerBuilder.createRouter();\n\nHttpServer server =\n  vertx.createHttpServer(<span class=\"hljs-keyword\">new</span> HttpServerOptions().setPort(<span class=\"hljs-number\">8080</span>).setHost(\n    <span class=\"hljs-string\">&quot;localhost&quot;</span>));\nserver.requestHandler(router).listen();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This method can fail with a <code><a href=\"../../apidocs/io/vertx/ext/web/openapi/RouterBuilderException.html\">RouterBuilderException</a></code>.</p>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">提示</div>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>If you need to mount all the router generated by router builder under the same parent path, you can use <code><a href=\"../../apidocs/io/vertx/ext/web/Router.html#mountSubRouter-java.lang.String-io.vertx.ext.web.Router-\">mountSubRouter</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Router global = Router.router(vertx);\n\nRouter generated = routerBuilder.createRouter();\nglobal.mountSubRouter(<span class=\"hljs-string\">&quot;/v1&quot;</span>, generated);</code></pre>\n</div>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>","version":"4.1.3"},"__N_SSG":true}