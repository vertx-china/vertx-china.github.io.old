{"pageProps":{"slug":"4.2.0/vertx-web-api-service/java","title":"Vert.x Web API Service","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_api_service\">Using Vert.x API Service</a></li>\n<li><a href=\"#_proxy_an_http_request_to_a_web_api_service\">Proxy an HTTP Request to a Web API Service</a></li>\n<li><a href=\"#_define_your_web_api_service_interface\">Define your Web API Service interface</a></li>\n<li><a href=\"#_implement_your_web_api_service\">Implement your Web API Service</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_the_servicerequest_data_object\">The <code>ServiceRequest</code> data object</a></li>\n<li><a href=\"#_the_serviceresponse_data_object\">The <code>ServiceResponse</code> data object</a></li>\n</ul>\n</li>\n<li><a href=\"#_expose_your_web_api_service\">Expose your Web API Service</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Web API Service</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Web API Service helps you handling HTTP Requests using the Vert.x Event Bus.</p>\n</div>\n<div class=\"paragraph\">\n<p>Event Bus provides important features like load balancing and distribution of requests across different Vert.x instances.\nWe encourage you to give a look at <a href=\"https://vertx.io/docs/vertx-core/java/#event_bus\">Event Bus documentation</a> for more info.</p>\n</div>\n<div class=\"paragraph\">\n<p>This module gives you the ability to create a Web API Service, an event bus message consumer based on same concept of <a href=\"https://vertx.io/docs/vertx-service-proxy/java/\">Vert.x service proxy</a>.\nThen it provides an handler to proxy the request to these services.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_api_service\"><a class=\"anchor\" href=\"#_using_vert_x_api_service\"></a>Using Vert.x API Service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use Vert.x API Service, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-codegen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.0.Beta1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">classifier</span>&gt;</span>processor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">classifier</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web-api-service<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.0.Beta1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle &lt; 5 (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-codegen:4.2.0.Beta1:processor&#x27;</span>\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-web-api-service:4.2.0.Beta1&#x27;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle &gt;= 5 (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n annotationProcessor <span class=\"hljs-string\">&#x27;io.vertx:vertx-codegen:4.2.0.Beta1:processor&#x27;</span>\n annotationProcessor <span class=\"hljs-string\">&#x27;io.vertx:vertx-web-api-service:4.2.0.Beta1&#x27;</span>\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-web-api-service:4.2.0.Beta1&#x27;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You need to import <code>vertx-codegen</code> to trigger the code generation from annotated interfaces.\nIf you need only the <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/RouteToEBServiceHandler.html\">RouteToEBServiceHandler</a></code>, you don&#8217;t need it</p>\n</div>\n<div class=\"paragraph\">\n<p>If you want to use the interface you write in different languages, you will need to add the <em>language</em> dependency such as\n<code>vertx-lang-groovy</code> for Groovy.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_proxy_an_http_request_to_a_web_api_service\"><a class=\"anchor\" href=\"#_proxy_an_http_request_to_a_web_api_service\"></a>Proxy an HTTP Request to a Web API Service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To proxy a request to the event bus you can use <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/RouteToEBServiceHandler.html\">RouteToEBServiceHandler</a></code>.\nThis handler sends some data extracted from <code><a href=\"../../apidocs/io/vertx/ext/web/RoutingContext.html\">RoutingContext</a></code> inside a <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceRequest.html\">ServiceRequest</a></code> and expects a\n<code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceResponse.html\">ServiceResponse</a></code> as reply.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">router\n  .get(<span class=\"hljs-string\">&quot;/hello&quot;</span>)\n  .handler(validationHandler)\n  .handler(\n    RouteToEBServiceHandler\n      .build(eventBus, <span class=\"hljs-string\">&quot;greeters.myapplication&quot;</span>, <span class=\"hljs-string\">&quot;hello&quot;</span>)\n  );</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also define the <code><a href=\"../../apidocs/io/vertx/core/eventbus/DeliveryOptions.html\">DeliveryOptions</a></code> that will be used each time a message is sent through the event bus:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">router\n  .get(<span class=\"hljs-string\">&quot;/hello&quot;</span>)\n  .handler(validationHandler)\n  .handler(\n    RouteToEBServiceHandler\n      .build(eventBus, <span class=\"hljs-string\">&quot;greeters.myapplication&quot;</span>, <span class=\"hljs-string\">&quot;hello&quot;</span>, <span class=\"hljs-keyword\">new</span> DeliveryOptions().setSendTimeout(<span class=\"hljs-number\">1000</span>))\n  );</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">重要</div>\n</td>\n<td class=\"content\">\nBefore mounting the <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/RouteToEBServiceHandler.html\">RouteToEBServiceHandler</a></code>, you <strong>must</strong> mount a\n<code><a href=\"../../apidocs/io/vertx/ext/web/validation/ValidationHandler.html\">ValidationHandler</a></code> that extracts the request parameters. Otherwise, no request parameters will be sent.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_define_your_web_api_service_interface\"><a class=\"anchor\" href=\"#_define_your_web_api_service_interface\"></a>Define your Web API Service interface</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We encourage you to read <a href=\"https://vertx.io/docs/vertx-service-proxy/java/\">Service Proxy documentation</a> before going further</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s assume we have defined two different routes in our <code><a href=\"../../apidocs/io/vertx/ext/web/Router.html\">Router</a></code> as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">router.get(<span class=\"hljs-string\">&quot;/api/transactions&quot;</span>)\n  .handler(\n    ValidationHandlerBuilder.create(schemaParser)\n      .queryParameter(optionalParam(<span class=\"hljs-string\">&quot;from&quot;</span>, stringSchema()))\n      .queryParameter(optionalParam(<span class=\"hljs-string\">&quot;to&quot;</span>, stringSchema()))\n      .build()\n  ).handler(\n    RouteToEBServiceHandler.build(eventBus, <span class=\"hljs-string\">&quot;transactions.myapplication&quot;</span>, <span class=\"hljs-string\">&quot;getTransactionsList&quot;</span>)\n  );\nrouter.post(<span class=\"hljs-string\">&quot;/api/transactions&quot;</span>)\n  .handler(\n    ValidationHandlerBuilder.create(schemaParser)\n      .body(json(objectSchema()))\n      .build()\n  ).handler(\n    RouteToEBServiceHandler.build(eventBus, <span class=\"hljs-string\">&quot;transactions.myapplication&quot;</span>, <span class=\"hljs-string\">&quot;putTransaction&quot;</span>)\n  );</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>GET /api/transactions</code> receives two optional query parameters as input: <code>from</code> and <code>to</code>. <code>PUT /api/transactions</code> receives a <code><a href=\"../../apidocs/io/vertx/core/json/JsonObject.html\">JsonObject</a></code> as request body</p>\n</div>\n<div class=\"paragraph\">\n<p>Now we can build the interface <strong>TransactionService</strong> that handles those endpoints.\nFor each endpoint you need to write a method with name corresponding to <code>action</code> specified when you build the <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/RouteToEBServiceHandler.html\">RouteToEBServiceHandler</a></code>.\nThere are a couple of rules to follow for method parameters:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Last parameter must have type <code>Handler&lt;AsyncResult&lt;ServiceResponse&gt;&gt;</code></p>\n</li>\n<li>\n<p>Second to last parameter must have type <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceRequest.html\">ServiceRequest</a></code></p>\n</li>\n<li>\n<p>All parameters from first to second to last (excluded) are extracted from <code><a href=\"../../apidocs/io/vertx/ext/web/validation/RequestParameters.html\">RequestParameters</a></code> with specified type automatically, but they need to respect <a href=\"https://vertx.io/docs/vertx-service-proxy/java/#_restrictions_for_service_interface\">service proxy restrictions</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>A request parameter is identified only by the name of the method parameter and the special <code>body</code> method parameter name is used to extract the body of the request.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@WebApiServiceGen</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">TransactionService</span> </span>{\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getTransactionsList</span><span class=\"hljs-params\">(String from, String to, ServiceRequest context, Handler&lt;AsyncResult&lt;ServiceResponse&gt;&gt; resultHandler)</span></span>;\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putTransaction</span><span class=\"hljs-params\">(JsonObject body, ServiceRequest context, Handler&lt;AsyncResult&lt;ServiceResponse&gt;&gt; resultHandler)</span></span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you receive a request at <code>TransactionService#getTransactionsList</code> the generated service handler will automatically extract <code>from</code> and <code>to</code> parameter (if present) from <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceRequest.html\">ServiceRequest</a></code>.\nIn <code>TransactionService#putTransaction</code> we use the <code>body</code> parameter name to extract the json body.</p>\n</div>\n<div class=\"paragraph\">\n<p>The service handler is also capable to translate <code>JsonObject</code> to Vert.x data objects automatically, for example if you have a <code>Transaction</code> data object that matches the json schema above, you can rewrite the <code>putTransaction</code> signature as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putTransaction</span><span class=\"hljs-params\">(Transaction body, ServiceRequest context, Handler&lt;AsyncResult&lt;ServiceResponse&gt;&gt; resultHandler)</span></span>;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also use <code><a href=\"../../apidocs/io/vertx/ext/web/validation/RequestParameter.html\">RequestParameter</a></code> to extract parameters, like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putTransaction</span><span class=\"hljs-params\">(RequestParameter body, ServiceRequest context, Handler&lt;AsyncResult&lt;ServiceResponse&gt;&gt; resultHandler)</span></span>;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We encourage to extract with <code><a href=\"../../apidocs/io/vertx/ext/web/validation/RequestParameter.html\">RequestParameter</a></code> type the parameters that uses json schema allOf/anyOf/oneOf/not keywords because the extraction can produce undefined behaviours.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_implement_your_web_api_service\"><a class=\"anchor\" href=\"#_implement_your_web_api_service\"></a>Implement your Web API Service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now you can implement your service. Remember that <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceRequest.html\">ServiceRequest</a></code> object contains headers and parameters maps.</p>\n</div>\n<div class=\"paragraph\">\n<p>To write the request you must call the <code>resultHandler</code> with an <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceResponse.html\">ServiceResponse</a></code>.\nTo create an instance of <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceResponse.html\">ServiceResponse</a></code> you can use some handy methods like <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceResponse.html#completedWithJson-io.vertx.core.buffer.Buffer-\">ServiceResponse.completedWithJson</a></code> or <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceResponse.html#completedWithPlainText-io.vertx.core.buffer.Buffer-\">ServiceResponse.completedWithPlainText</a></code></p>\n</div>\n<div class=\"paragraph\">\n<p>For example the implementation of <code>TransactionService#getTransactionsList</code> looks like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">resultHandler.handle(\n  Future.succeededFuture(\n    ServiceResponse.completedWithJson(<span class=\"hljs-keyword\">new</span> JsonArray())\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or when it fails:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">resultHandler.handle(\n  Future.failedFuture(\n    <span class=\"hljs-keyword\">new</span> HttpException(<span class=\"hljs-number\">555</span>, <span class=\"hljs-string\">&quot;Something bad happened&quot;</span>)\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_the_servicerequest_data_object\"><a class=\"anchor\" href=\"#_the_servicerequest_data_object\"></a>The <code>ServiceRequest</code> data object</h3>\n<div class=\"paragraph\">\n<p><code>ServiceRequest</code> it&#8217;s a <em>serializable</em> version of <code>RoutingContext</code>, but It doesn&#8217;t contain all data of <code>RoutingContext</code>. It transports to your service:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceRequest.html#getHeaders--\">getHeaders</a></code>: Headers of the request</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceRequest.html#getParams--\">getParams</a></code>: Contains <code>routingContext.get(\"parsedParameters\")</code></p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceRequest.html#getUser--\">getUser</a></code>: Contains <code>routingContext.user().principal()</code>, null if no user is authenticated</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/api/service/ServiceRequest.html#getExtra--\">getExtra</a></code>: Contains an extra configurable payload</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>You can configure a lambda that builds the extra payload with <code><a href=\"../../apidocs/io/vertx/ext/web/api/service/RouteToEBServiceHandler.html#extraPayloadMapper-java.util.function.Function-\">extraPayloadMapper</a></code></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_the_serviceresponse_data_object\"><a class=\"anchor\" href=\"#_the_serviceresponse_data_object\"></a>The <code>ServiceResponse</code> data object</h3>\n<div class=\"paragraph\">\n<p><code>ServiceResponse</code> is composed by:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Headers of the response</p>\n</li>\n<li>\n<p>Status code/Status message</p>\n</li>\n<li>\n<p>Body as a payload. If you don&#8217;t set the payload/set as null no body will be sent</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_expose_your_web_api_service\"><a class=\"anchor\" href=\"#_expose_your_web_api_service\"></a>Expose your Web API Service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now you can register your service to event bus:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">TransactionService transactionService = <span class=\"hljs-keyword\">new</span> TransactionServiceImpl();\n\n<span class=\"hljs-comment\">// Mount the service on the event bus</span>\nServiceBinder transactionServiceBinder = <span class=\"hljs-keyword\">new</span> ServiceBinder(vertx);\ntransactionServiceBinder\n  .setAddress(<span class=\"hljs-string\">&quot;transactions.myapplication&quot;</span>)\n  .register(TransactionService.class, transactionService);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For more info on how to expose your service look at <a href=\"https://vertx.io/docs/vertx-service-proxy/java/#_exposing_your_service\">Vert.x service proxy documentation</a></p>\n</div>\n</div>\n</div>","version":"4.2.0"},"__N_SSG":true}