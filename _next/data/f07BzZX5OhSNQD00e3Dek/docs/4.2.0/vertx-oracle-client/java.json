{"pageProps":{"slug":"4.2.0/vertx-oracle-client/java","title":"Reactive Oracle Client","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">Usage</a></li>\n<li><a href=\"#_getting_started\">Getting started</a></li>\n<li><a href=\"#_connecting_to_oracle\">Connecting to Oracle</a></li>\n<li><a href=\"#_configuration\">Configuration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_object\">Data Object</a></li>\n</ul>\n</li>\n<li><a href=\"#_connect_retries\">Connect retries</a></li>\n<li><a href=\"#_tracing_queries\">Tracing queries</a></li>\n<li><a href=\"#_collector_queries\">Collector queries</a></li>\n</ul>\n</div>","contents":"<h1>Reactive Oracle Client</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Reactive Oracle Client is a client for Oracle with a straightforward API focusing on\nscalability and low overhead.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Features</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>todo</p>\n</li>\n</ul>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nthis module is in tech preview\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Reactive Oracle Client add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-oracle-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.2.0.Beta1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">&#x27;io.vertx:vertx-oracle-client:4.2.0.Beta1&#x27;</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Here is the simplest way to connect, query and disconnect</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">OracleConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> OracleConnectOptions()\n  .setPort(<span class=\"hljs-number\">1521</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the client pool</span>\nOraclePool client = OraclePool.pool(connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// A simple query</span>\nclient\n  .query(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=&#x27;julien&#x27;&quot;</span>)\n  .execute(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; result = ar.result();\n    System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + result.size() + <span class=\"hljs-string\">&quot; rows &quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n  }\n\n  <span class=\"hljs-comment\">// Now close the pool</span>\n  client.close();\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connecting_to_oracle\"><a class=\"anchor\" href=\"#_connecting_to_oracle\"></a>Connecting to Oracle</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Most of the time you will use a pool to connect to Oracle:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">OracleConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> OracleConnectOptions()\n  .setPort(<span class=\"hljs-number\">1521</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\nOraclePool client = OraclePool.pool(connectOptions, poolOptions);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The pooled client uses a connection pool and any operation will borrow a connection from the pool\nto execute the operation and release it to the pool.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are running with Vert.x you can pass it your Vertx instance:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">OracleConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> OracleConnectOptions()\n  .setPort(<span class=\"hljs-number\">1521</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-comment\">// Create the pooled client</span>\nOraclePool client = OraclePool.pool(vertx, connectOptions, poolOptions);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You need to release the pool when you don&#8217;t need it anymore:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.close();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you need to execute several operations on the same connection, you need to use a client\n<code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnection.html\">connection</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can easily get one from the pool:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">OracleConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> OracleConnectOptions()\n  .setPort(<span class=\"hljs-number\">1521</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\nOraclePool client = OraclePool.pool(vertx, connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// Get a connection from the pool</span>\nclient.getConnection().compose(conn -&gt; {\n  System.out.println(<span class=\"hljs-string\">&quot;Got a connection from the pool&quot;</span>);\n\n  <span class=\"hljs-comment\">// All operations execute on the same connection</span>\n  <span class=\"hljs-keyword\">return</span> conn\n    .query(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=&#x27;julien&#x27;&quot;</span>)\n    .execute()\n    .compose(res -&gt; conn\n      .query(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id=&#x27;emad&#x27;&quot;</span>)\n      .execute())\n    .onComplete(ar -&gt; {\n      <span class=\"hljs-comment\">// Release the connection to the pool</span>\n      conn.close();\n    });\n}).onComplete(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n    System.out.println(<span class=\"hljs-string\">&quot;Done&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you are done with the connection you must close it to release it to the pool, so it can be reused.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuration\"><a class=\"anchor\" href=\"#_configuration\"></a>Configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are several alternatives for you to configure the client.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_object\"><a class=\"anchor\" href=\"#_data_object\"></a>Data Object</h3>\n<div class=\"paragraph\">\n<p>A simple way to configure the client is to specify a <code>OracleConnectOptions</code> data object.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">OracleConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> OracleConnectOptions()\n  .setPort(<span class=\"hljs-number\">1521</span>)\n  .setHost(<span class=\"hljs-string\">&quot;the-host&quot;</span>)\n  .setDatabase(<span class=\"hljs-string\">&quot;the-db&quot;</span>)\n  .setUser(<span class=\"hljs-string\">&quot;user&quot;</span>)\n  .setPassword(<span class=\"hljs-string\">&quot;secret&quot;</span>);\n\n<span class=\"hljs-comment\">// Pool Options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions().setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pool from the data object</span>\nOraclePool pool = OraclePool.pool(vertx, connectOptions, poolOptions);\n\npool.getConnection(ar -&gt; {\n  <span class=\"hljs-comment\">// Handling your connection</span>\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connect_retries\"><a class=\"anchor\" href=\"#_connect_retries\"></a>Connect retries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can configure the client to retry when a connection fails to be established.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">options\n  .setReconnectAttempts(<span class=\"hljs-number\">2</span>)\n  .setReconnectInterval(<span class=\"hljs-number\">1000</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::queries.adoc[leveloffset=1]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::connections.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::transactions.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::cursor.adoc[]</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_tracing_queries\"><a class=\"anchor\" href=\"#_tracing_queries\"></a>Tracing queries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Unresolved directive in index.adoc - include::tracing.adoc[]</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_collector_queries\"><a class=\"anchor\" href=\"#_collector_queries\"></a>Collector queries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can use Java collectors with the query API:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Collector&lt;Row, ?, Map&lt;Long, String&gt;&gt; collector = Collectors.toMap(\n  row -&gt; row.getLong(<span class=\"hljs-string\">&quot;id&quot;</span>),\n  row -&gt; row.getString(<span class=\"hljs-string\">&quot;last_name&quot;</span>));\n\n<span class=\"hljs-comment\">// Run the query with the collector</span>\nclient.query(<span class=\"hljs-string\">&quot;SELECT * FROM users&quot;</span>).collecting(collector).execute(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      SqlResult&lt;Map&lt;Long, String&gt;&gt; result = ar.result();\n\n      <span class=\"hljs-comment\">// Get the map created by the collector</span>\n      Map&lt;Long, String&gt; map = result.value();\n      System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + map);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The collector processing must not keep a reference on the <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> as\nthere is a single row used for processing the entire set.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Java <code>Collectors</code> provides many interesting predefined collectors, for example you can\ncreate easily create a string directly from the row set:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Collector&lt;Row, ?, String&gt; collector = Collectors.mapping(\n  row -&gt; row.getString(<span class=\"hljs-string\">&quot;last_name&quot;</span>),\n  Collectors.joining(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;(&quot;</span>, <span class=\"hljs-string\">&quot;)&quot;</span>)\n);\n\n<span class=\"hljs-comment\">// Run the query with the collector</span>\nclient.query(<span class=\"hljs-string\">&quot;SELECT * FROM users&quot;</span>).collecting(collector).execute(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      SqlResult&lt;String&gt; result = ar.result();\n\n      <span class=\"hljs-comment\">// Get the string created by the collector</span>\n      String list = result.value();\n      System.out.println(<span class=\"hljs-string\">&quot;Got &quot;</span> + list);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.2.0"},"__N_SSG":true}