{"pageProps":{"slug":"4.2.0/vertx-opentracing/java","title":"Vertx OpenTracing","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_tracing_policy\">Tracing policy</a></li>\n<li><a href=\"#_http_tracing\">HTTP tracing</a></li>\n<li><a href=\"#_eventbus_tracing\">EventBus tracing</a></li>\n<li><a href=\"#_obtain_current_span\">Obtain current Span</a></li>\n<li><a href=\"#_coroutines_support\">Coroutines support</a></li>\n</ul>\n</div>","contents":"<h1>Vertx OpenTracing</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x integrates with OpenTracing thanks to the Jaeger client.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can configure Vert.x to use the Jaeger client configured via\n<a href=\"https://github.com/jaegertracing/jaeger-client-java/blob/master/jaeger-core/README.md#configuration-via-environment\">Environment</a></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions()\n  .setTracingOptions(\n    <span class=\"hljs-keyword\">new</span> OpenTracingOptions()\n  )\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also pass a custom <code>Tracer</code> allowing for greater control\nover the configuration.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Vertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions()\n  .setTracingOptions(\n    <span class=\"hljs-keyword\">new</span> OpenTracingOptions(tracer)\n  )\n);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_tracing_policy\"><a class=\"anchor\" href=\"#_tracing_policy\"></a>Tracing policy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The tracing policy defines the behavior of a component when tracing is enabled:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/core/tracing/TracingPolicy.html#PROPAGATE\">PROPAGATE</a></code>: the component reports a span in the active trace</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/core/tracing/TracingPolicy.html#ALWAYS\">ALWAYS</a></code>: the component reports a span in the active trace or creates a new active trace</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/core/tracing/TracingPolicy.html#IGNORE\">IGNORE</a></code>: the component will not be involved in any trace.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The tracing policy is usually configured in the component options.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_http_tracing\"><a class=\"anchor\" href=\"#_http_tracing\"></a>HTTP tracing</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Vert.x HTTP server and client reports span around HTTP requests:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>operationName</code>: the HTTP method</p>\n</li>\n<li>\n<p>tags</p>\n</li>\n<li>\n<p><code>http.method</code>: the HTTP method</p>\n</li>\n<li>\n<p><code>http.url</code>: the request URL</p>\n</li>\n<li>\n<p><code>http.status_code</code>: the HTTP status code</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The default HTTP server tracing policy is <code>ALWAYS</code>, you can configure the policy with <code><a href=\"../../apidocs/io/vertx/core/http/HttpServerOptions.html#setTracingPolicy-io.vertx.core.tracing.TracingPolicy-\">setTracingPolicy</a></code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HttpServer server = vertx.createHttpServer(<span class=\"hljs-keyword\">new</span> HttpServerOptions()\n  .setTracingPolicy(TracingPolicy.IGNORE)\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The default HTTP client tracing policy is <code>PROPAGATE</code>, you can configure the policy with <code><a href=\"../../apidocs/io/vertx/core/http/HttpClientOptions.html#setTracingPolicy-io.vertx.core.tracing.TracingPolicy-\">setTracingPolicy</a></code></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">HttpClient client = vertx.createHttpClient(<span class=\"hljs-keyword\">new</span> HttpClientOptions()\n  .setTracingPolicy(TracingPolicy.IGNORE)\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To initiate a trace for a client call, you need to create it first and make Vert.x\naware of it by using <code>OpenTracingUtil.setSpan</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Span span = tracer.buildSpan(<span class=\"hljs-string\">&quot;my-operation&quot;</span>)\n  .withTag(<span class=\"hljs-string\">&quot;some-key&quot;</span>, <span class=\"hljs-string\">&quot;some-value&quot;</span>)\n  .start();\nOpenTracingUtil.setSpan(span);\n<span class=\"hljs-comment\">// Do something, e.g. client request</span>\nspan.finish();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In an HTTP scenario between two Vert.x services, a span will be created client-side, then\nthe trace context will be propagated server-side and another span will be added to the trace.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_eventbus_tracing\"><a class=\"anchor\" href=\"#_eventbus_tracing\"></a>EventBus tracing</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Vert.x EventBus reports spans around message exchanges.</p>\n</div>\n<div class=\"paragraph\">\n<p>The default sending policy is <code>PROPAGATE</code>, you can configure the policy with <code><a href=\"../../apidocs/io/vertx/core/eventbus/DeliveryOptions.html#setTracingPolicy-io.vertx.core.tracing.TracingPolicy-\">setTracingPolicy</a></code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">DeliveryOptions options = <span class=\"hljs-keyword\">new</span> DeliveryOptions().setTracingPolicy(TracingPolicy.ALWAYS);\nvertx.eventBus().send(<span class=\"hljs-string\">&quot;the-address&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>, options);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_obtain_current_span\"><a class=\"anchor\" href=\"#_obtain_current_span\"></a>Obtain current Span</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x stores current <code>Span</code> object in local context.\nTo obtain it, use method <code>OpenTracingUtil.getSpan()</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>This method will work only on Vert.x threads (instances of <code>VertxThread</code>).\nObtaining from non-Vert.x thread doesn&#8217;t work by design, method will return null.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_coroutines_support\"><a class=\"anchor\" href=\"#_coroutines_support\"></a>Coroutines support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There is no direct support for coroutines, but it can be achieved with minimal instrumentation.</p>\n</div>\n<div class=\"paragraph\">\n<p>There are several steps to achieve this.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Use <code>CoroutineVerticle</code>.</p>\n</li>\n<li>\n<p>Convert <strong>every route handler</strong> you have to a coroutine.</p>\n</li>\n<li>\n<p>Use CoroutineContext to store <code>Tracer</code> and current <code>Span</code> object</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Example code:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TracedVerticle</span></span>(<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> tracer: Tracer): CoroutineVerticle() {\n   <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span> {\n       <span class=\"hljs-keyword\">val</span> router = Router.router(vertx)\n\n       router.route(<span class=\"hljs-string\">&quot;/hello1&quot;</span>)\n           .method(HttpMethod.GET)\n           .coroutineHandler { ctx -&gt;                          <span class=\"hljs-comment\">// (1)</span>\n               launch { println(<span class=\"hljs-string\">&quot;Hello to Console&quot;</span>) }\n               ctx.end(<span class=\"hljs-string\">&quot;Hello from coroutine handler&quot;</span>)\n           }\n\n       router.route(<span class=\"hljs-string\">&quot;/hello2&quot;</span>)\n           .method(HttpMethod.GET)\n           .coroutineHandler(::nonSuspendHandler)              <span class=\"hljs-comment\">// (2)</span>\n\n       vertx.createHttpServer()\n           .requestHandler(router)\n           .listen(<span class=\"hljs-number\">8080</span>)\n           .await()\n   }\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">nonSuspendHandler</span><span class=\"hljs-params\">(ctx: <span class=\"hljs-type\">RoutingContext</span>)</span></span> {\n       ctx.end(<span class=\"hljs-string\">&quot;Hello from usual handler&quot;</span>)\n   }\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> Route.<span class=\"hljs-title\">coroutineHandler</span><span class=\"hljs-params\">(handler: <span class=\"hljs-type\">Handler</span>&lt;<span class=\"hljs-type\">RoutingContext</span>&gt;)</span></span>: Route = <span class=\"hljs-comment\">// (3)</span>\n       <span class=\"hljs-keyword\">this</span>.coroutineHandler(handler::handle)\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> Route.<span class=\"hljs-title\">coroutineHandler</span><span class=\"hljs-params\">(                                           <span class=\"hljs-comment\">// (4)</span>\n       handler: <span class=\"hljs-type\">suspend</span> (<span class=\"hljs-type\">RoutingContext</span>) -&gt; (<span class=\"hljs-type\">Unit</span>)\n   )</span></span>: Route = handler { ctx -&gt;\n       <span class=\"hljs-keyword\">val</span> span: Span = OpenTracingUtil.getSpan()                                <span class=\"hljs-comment\">// (5)</span>\n       launch(ctx.vertx().dispatcher() + SpanElement(tracer, span)) {            <span class=\"hljs-comment\">// (6)</span>\n           <span class=\"hljs-keyword\">val</span> spanElem = coroutineContext[SpanElement]                          <span class=\"hljs-comment\">// (7)</span>\n           <span class=\"hljs-keyword\">if</span> (spanElem == <span class=\"hljs-literal\">null</span>) {\n               handler(ctx)\n           } <span class=\"hljs-keyword\">else</span> {\n               <span class=\"hljs-keyword\">val</span> span = spanElem.span\n               <span class=\"hljs-keyword\">val</span> tracer = spanElem.tracer\n               <span class=\"hljs-keyword\">val</span> childSpan = span                                                <span class=\"hljs-comment\">// (8)</span>\n               <span class=\"hljs-keyword\">try</span> {\n                   withContext(SpanElement(tracer, childSpan)) { handler(ctx) }    <span class=\"hljs-comment\">// (9)</span>\n               } <span class=\"hljs-keyword\">finally</span> {\n                   <span class=\"hljs-comment\">// childSpan.finish()                                           // (10)</span>\n               }\n           }\n           <span class=\"hljs-comment\">// OR create a helper method for further reuse</span>\n           withContextTraced(coroutineContext) {\n               <span class=\"hljs-keyword\">try</span> {\n                   handler(ctx)\n               } <span class=\"hljs-keyword\">catch</span> (t: Throwable) {\n                   ctx.fail(t)\n               }\n           }\n       }\n   }\n}</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Creates a coroutine handler with <code>coroutineHandler</code> extension method.</p>\n</li>\n<li>\n<p>Creates usual async handler, which is then wrapped to a coroutine.</p>\n</li>\n<li>\n<p>Extension method to convert <code>Handler&lt;RoutingContext&gt;</code> to suspendable function.</p>\n</li>\n<li>\n<p>Extension method which creates and launches a coroutine on Vert.x EventLoop.</p>\n</li>\n<li>\n<p>Get current <code>Span</code> from Vert.x local context (populated automatically).</p>\n</li>\n<li>\n<p>Create a wrapper coroutine, add current Span to <code>CoroutineContext</code>.</p>\n</li>\n<li>\n<p>Retrieve a <code>Span</code> from coroutine context.</p>\n</li>\n<li>\n<p>Either reuse <code>span</code> or create a new span with <code>tracer.buildSpan(\"\").asChildOf(span).start()</code>.</p>\n</li>\n<li>\n<p>Put a new <code>Span</code> to a context.</p>\n</li>\n<li>\n<p>Finish <code>childSpan</code>, if you created a new one.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Helper code, your implementation may vary:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\"><span class=\"hljs-comment\">/**\n* Keeps references to a tracer and current Span inside CoroutineContext\n*/</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SpanElement</span></span>(<span class=\"hljs-keyword\">val</span> tracer: Tracer, <span class=\"hljs-keyword\">val</span> span: Span) :\n   ThreadContextElement&lt;Scope&gt;,\n   AbstractCoroutineContextElement(SpanElement) {\n\n   <span class=\"hljs-keyword\">companion</span> <span class=\"hljs-keyword\">object</span> Key : CoroutineContext.Key&lt;SpanElement&gt;\n\n   <span class=\"hljs-comment\">/**\n   *  Will close current [Scope] after continuation&#x27;s pause.\n   */</span>\n   <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">restoreThreadContext</span><span class=\"hljs-params\">(context: <span class=\"hljs-type\">CoroutineContext</span>, oldState: <span class=\"hljs-type\">Scope</span>)</span></span> {\n       oldState.close()\n   }\n\n   <span class=\"hljs-comment\">/**\n   * Will create a new [Scope] after each continuation&#x27;s resume, scope is activated with provided [span] instance.\n   */</span>\n   <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">updateThreadContext</span><span class=\"hljs-params\">(context: <span class=\"hljs-type\">CoroutineContext</span>)</span></span>: Scope {\n       <span class=\"hljs-keyword\">return</span> tracer.activateSpan(span)\n   }\n}\n\n<span class=\"hljs-comment\">/**\n* Advanced helper method with a few options, also shows how to use MDCContext to pass a Span to a logger.\n*/</span>\n<span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T&gt;</span> <span class=\"hljs-title\">withContextTraced</span><span class=\"hljs-params\">(\n   context: <span class=\"hljs-type\">CoroutineContext</span>,\n   reuseParentSpan: <span class=\"hljs-type\">Boolean</span> = <span class=\"hljs-literal\">true</span>,\n   block: <span class=\"hljs-type\">suspend</span> <span class=\"hljs-type\">CoroutineScope</span>.() -&gt; <span class=\"hljs-type\">T</span>\n)</span></span>: T {\n   <span class=\"hljs-keyword\">return</span> coroutineScope {\n       <span class=\"hljs-keyword\">val</span> spanElem = <span class=\"hljs-keyword\">this</span>.coroutineContext[SpanElement]\n\n       <span class=\"hljs-keyword\">if</span> (spanElem == <span class=\"hljs-literal\">null</span>) {\n           logger.warn { <span class=\"hljs-string\">&quot;Calling &#x27;withTracer&#x27;, but no span found in context&quot;</span> }\n           withContext(context, block)\n       } <span class=\"hljs-keyword\">else</span> {\n           <span class=\"hljs-keyword\">val</span> childSpan = <span class=\"hljs-keyword\">if</span> (reuseParentSpan) spanElem.span\n           <span class=\"hljs-keyword\">else</span> spanElem.tracer.buildSpan(<span class=\"hljs-string\">&quot;&quot;</span>).asChildOf(spanElem.span).start()\n\n           <span class=\"hljs-keyword\">try</span> {\n               <span class=\"hljs-keyword\">val</span> mdcSpan = mapOf(MDC_SPAN_KEY to childSpan.toString())\n               withContext(context + SpanElement(spanElem.tracer, childSpan) + MDCContext(mdcSpan), block)\n           } <span class=\"hljs-keyword\">finally</span> {\n               <span class=\"hljs-keyword\">if</span> (!reuseParentSpan) childSpan.finish()\n           }\n       }\n   }\n}\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">val</span> MDC_SPAN_KEY = <span class=\"hljs-string\">&quot;request.span.id&quot;</span></code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.2.0"},"__N_SSG":true}