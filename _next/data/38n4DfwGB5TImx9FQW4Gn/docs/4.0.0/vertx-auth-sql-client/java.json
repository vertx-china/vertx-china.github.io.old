{"pageProps":{"slug":"4.0.0/vertx-auth-sql-client/java","title":"SQL Client Auth Provider","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_hashing_strategy\">Hashing Strategy</a></li>\n<li><a href=\"#_vertx_auth_jdbc_and_gdpr\">Vertx Auth JDBC and GDPR</a></li>\n<li><a href=\"#_hashing_passwords\">Hashing passwords</a></li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_authorisation_permission_role_model\">Authorisation - Permission-Role Model</a></li>\n</ul>\n</div>","contents":"<h1>SQL Client Auth Provider</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We provide an implementation of <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code> as well as\n<code><a href=\"../../apidocs/io/vertx/ext/auth/authorization/AuthorizationProvider.html\">AuthorizationProvider</a></code> which uses the Vert.x <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlClient.html\">SqlClient</a></code>\nto perform authentication and authorization against any SQL compliant database. To use this project,\nadd the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-auth-sql-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile <span class=\"hljs-string\">'io.vertx:vertx-auth-sql-client:4.0.0'</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To create an instance you first need an instance of <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlClient.html\">SqlClient</a></code>. To learn how to create one\nof those please consult the documentation for the SQL client.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you&#8217;ve got one of those you can create a <code><a href=\"../../apidocs/io/vertx/ext/auth/sqlclient/SqlAuthentication.html\">SqlAuthentication</a></code> instance as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">SqlAuthenticationOptions options = <span class=\"hljs-keyword\">new</span> SqlAuthenticationOptions();\n<span class=\"hljs-comment\">// SQL client can be any of the known implementations</span>\n<span class=\"hljs-comment\">// *. Postgres</span>\n<span class=\"hljs-comment\">// *. MySQL</span>\n<span class=\"hljs-comment\">// *. etc...</span>\nAuthenticationProvider authenticationProvider =\n  SqlAuthentication.create(sqlClient, options);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you&#8217;ve got your instance you can authenticate and authorize with it just like any <code><a href=\"../../apidocs/io/vertx/ext/auth/authentication/AuthenticationProvider.html\">AuthenticationProvider</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The out of the box config assumes certain queries for authentication and authorization, these can easily be changed with the operations\n<code><a href=\"../../apidocs/io/vertx/ext/auth/sqlclient/SqlAuthenticationOptions.html#setAuthenticationQuery-java.lang.String-\">setAuthenticationQuery</a></code>,\n<code><a href=\"../../apidocs/io/vertx/ext/auth/sqlclient/SqlAuthorizationOptions.html#setPermissionsQuery-java.lang.String-\">setPermissionsQuery</a></code> and\n<code><a href=\"../../apidocs/io/vertx/ext/auth/sqlclient/SqlAuthorizationOptions.html#setRolesQuery-java.lang.String-\">setRolesQuery</a></code>, if you want to use them with a different database schema.</p>\n</div>\n<div class=\"paragraph\">\n<p>The basic data definition for the storage should look like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sql\" data-lang=\"sql\"><span class=\"hljs-comment\">--</span>\n<span class=\"hljs-comment\">-- Take this script with a grain of salt and adapt it to your RDBMS</span>\n<span class=\"hljs-comment\">--</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">users</span> (\n username <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-keyword\">password</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n);\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> users_roles (\n username <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-keyword\">role</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n);\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> roles_perms (\n <span class=\"hljs-keyword\">role</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n perm <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n);\n\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">users</span> <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> pk_username PRIMARY <span class=\"hljs-keyword\">KEY</span> (username);\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> users_roles <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> pk_users_roles PRIMARY <span class=\"hljs-keyword\">KEY</span> (username, <span class=\"hljs-keyword\">role</span>);\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> roles_perms <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> pk_roles_perms PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-keyword\">role</span>, perm);\n\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> users_roles <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> fk_username <span class=\"hljs-keyword\">FOREIGN</span> <span class=\"hljs-keyword\">KEY</span> (username) <span class=\"hljs-keyword\">REFERENCES</span> <span class=\"hljs-keyword\">users</span>(username);</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_hashing_strategy\"><a class=\"anchor\" href=\"#_hashing_strategy\"></a>Hashing Strategy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The provider uses the &lt;a href=\"https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md\"&gt;phc sf spec&lt;/a&gt; to\nhash password.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nIf you already have a running legacy application switching the strategies will break your existing\npasswords. The new format will not for suffer from this. In order to upgrade request users to reset their password and\nupdate the record appropriately.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">警告</div>\n</td>\n<td class=\"content\">\nIt is advised to always store your passwords as hashes in your database tables which have been created\nwith a salt which should be stored in the row too. A strong hashing algorithm should be used. It is strongly advised\nnever to store your passwords as plain text.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_vertx_auth_jdbc_and_gdpr\"><a class=\"anchor\" href=\"#_vertx_auth_jdbc_and_gdpr\"></a>Vertx Auth JDBC and GDPR</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>GDPR is a regulation from the common European Union law. It overrides/supercedes national data protection laws and\nextents the previously existing directives. This section of the manual is by no means a thorough walkthrough of the\nregulation, it is just a small summary how this component adheres to the requirements. Companies not adhering to the\nrequirements can be fined on 4% of the turnover or 20 million euro. Therefore we want to make sure that as a user of\nVert.x Auth JDBC you&#8217;re are on the good track to comply.</p>\n</div>\n<div class=\"paragraph\">\n<p>The law defines certain terminology:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Data Subject - Person whose personal data is processed (e.g.: User)</p>\n</li>\n<li>\n<p>Personal Data - Any data about an identifiable or identified person</p>\n</li>\n<li>\n<p>Data Processing - Any operation (manual or automated) on personal data</p>\n</li>\n<li>\n<p>Controller - The entity (company) that requests and uses the data</p>\n</li>\n<li>\n<p>Processors - Any entity that processes data on behalf of a controller (e.g.: cloud service provider)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>GDPR defines the following functionality:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>\"Forget me\" - Right to erasure</p>\n</li>\n<li>\n<p>Mark profile as restricted - Right to restriction of processing</p>\n</li>\n<li>\n<p>Export data - Right to portability</p>\n</li>\n<li>\n<p>Allow profile editing - Right to rectification</p>\n</li>\n<li>\n<p>See all my data - Right to access</p>\n</li>\n<li>\n<p>Consent checkboxes</p>\n</li>\n<li>\n<p>Age checks</p>\n</li>\n<li>\n<p>Data destruction - Data minimization principle</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This module complies to the GDPR law by not storing any identifiable information about a data subject. The only\nreference is the username which is not linked to any personal data.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to add personal data to your application you should create your own data schema and use the username column\nas a foreign key to your data. As a tip you should have a boolean flag to mark the personal data as restricted to\ncomply to the right to restriction of processing which means that if you need to handle the data, e.g.: send a bulk\nemail from a mailing list you are not allowed to do so if the flag is true.</p>\n</div>\n<div class=\"paragraph\">\n<p>The right to erasure does not mean that you must wipe all records from your application, e.g.: in a bank this right\ncannot be used to erase a running loan or debt. You are allowed to keep your application data but must erase the\npersonal data. In case of Vert.x Auth SQL you should delete your table but can still use a foreign key to the\nusername as long as is not possible to link the username to the personal data.</p>\n</div>\n<div class=\"paragraph\">\n<p>Important note is that this must survive backups! As a tip backup the data, and data erasure on different archives so\nthey can be replayed individually.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_hashing_passwords\"><a class=\"anchor\" href=\"#_hashing_passwords\"></a>Hashing passwords</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Like any application there will be a time where you need to store new users into the database. Has you have learn\npasswords are not stored in plain text but hashed according to the hashing strategy. The same strategy is required\nto hash new password before storing it to the database. Doing it is a 3 step task.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Generate a salt string</p>\n</li>\n<li>\n<p>Hash the password given the salt string</p>\n</li>\n<li>\n<p>Store it to the database</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String hash = jdbcAuth.hash(\n  <span class=\"hljs-string\">\"pbkdf2\"</span>, <span class=\"hljs-comment\">// hashing algorithm (OWASP recommended)</span>\n  VertxContextPRNG.current().nextString(<span class=\"hljs-number\">32</span>), <span class=\"hljs-comment\">// secure random salt</span>\n  <span class=\"hljs-string\">\"sausages\"</span> <span class=\"hljs-comment\">// password</span>\n);\n\n<span class=\"hljs-comment\">// save to the database</span>\nsqlClient\n  .preparedQuery(<span class=\"hljs-string\">\"INSERT INTO user (username, password) VALUES (?, ?)\"</span>)\n  .execute(Tuple.of(<span class=\"hljs-string\">\"tim\"</span>, hash))\n  .onSuccess(rowset -&gt; {\n    <span class=\"hljs-comment\">// password updated</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When authenticating using this implementation, it assumes <code>username</code> and <code>password</code> fields are present in the\nauthentication info:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">JsonObject authInfo = <span class=\"hljs-keyword\">new</span> JsonObject()\n  .put(<span class=\"hljs-string\">\"username\"</span>, <span class=\"hljs-string\">\"tim\"</span>)\n  .put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"sausages\"</span>);\n\nauthProvider.authenticate(authInfo)\n  .onSuccess(user -&gt; System.out.println(<span class=\"hljs-string\">\"User: \"</span> + user.principal()))\n  .onFailure(err -&gt; {\n    <span class=\"hljs-comment\">// Failed!</span>\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authorisation_permission_role_model\"><a class=\"anchor\" href=\"#_authorisation_permission_role_model\"></a>Authorisation - Permission-Role Model</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Although Vert.x auth itself does not mandate any specific model of permissions (they are just opaque strings), this\nimplementation assumes a familiar user/role/permission model, where a user can have zero or more roles and a role\ncan have zero or more permissions.</p>\n</div>\n<div class=\"paragraph\">\n<p>If validating if a user has a particular permission simply match the user against a given permission as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">sqlAuthZ.getAuthorizations(user)\n  .onSuccess(v -&gt; {\n    <span class=\"hljs-keyword\">if</span> (PermissionBasedAuthorization.create(<span class=\"hljs-string\">\"commit_code\"</span>).match(user)) {\n      <span class=\"hljs-comment\">// Has permission!</span>\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>","version":"4.0.0"},"__N_SSG":true}