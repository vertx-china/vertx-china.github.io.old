{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"An Introduction to the Vert.x Context Object","category":"guides","authors":[{"name":"Jez Prime","github_id":"millross"}],"summary":"Under the hood, the vert.x Context class plays a critical part in maintaining the thread-safety guarantees of verticles. Most of the time, vert.x coders don't need to make use of Context objects directly."},"date":"2017-01-31","slug":"an-introduction-to-the-vert-x-context-object","readingTime":{"text":"6 min read","minutes":5.915,"time":354900,"words":1183},"content":{"compiledSource":"var p=Object.defineProperty,d=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var h=(t,a,n)=>a in t?p(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n,e=(t,a)=>{for(var n in a||(a={}))s.call(a,n)&&h(t,n,a[n]);if(r)for(var n of r(a))i.call(a,n)&&h(t,n,a[n]);return t},c=(t,a)=>d(t,m(a));var l=(t,a)=>{var n={};for(var o in t)s.call(t,o)&&a.indexOf(o)<0&&(n[o]=t[o]);if(t!=null&&r)for(var o of r(t))a.indexOf(o)<0&&i.call(t,o)&&(n[o]=t[o]);return n};const makeShortcode=t=>function(n){return console.warn(\"Component \"+t+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},n))},Alert=makeShortcode(\"Alert\"),Link=makeShortcode(\"Link\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var o=n,{components:t}=o,a=l(o,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Under the hood, the vert.x Con\\xADtext class plays a crit\\xADi\\xADcal part in main\\xADtain\\xADing the thread-\\u200Bsafety guar\\xADan\\xADtees of ver\\xADti\\xADcles. Most of the time, vert.x coders don\\u2019t need to make use of Con\\xADtext ob\\xADjects di\\xADrectly. How\\xADever, some\\xADtimes you may need to. This ar\\xADti\\xADcle pro\\xADvides a brief in\\xADtro\\xADduc\\xADtion to the vert.x Con\\xADtext class, which cov\\xADers why it\\u2019s im\\xADpor\\xADtant, and why and when you might wish to make use of the Con\\xADtext di\\xADrectly, based on the au\\xADthor\\u2019s ex\\xADpe\\xADri\\xADence of build\\xADing a generic async li\\xADbrary which can be used with vert.x.\"),mdx(Alert,{info:!0,mdxType:\"Alert\"},mdx(\"p\",null,\"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://www.millross-consultants.com/vertx_context_object.html\"}),\"blog post\"))),mdx(\"h2\",e({},{id:\"introduction\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#introduction\"})),\"Introduction\"),mdx(\"p\",null,\"Re\\xADcently I\\u2019ve been look\\xADing at the pos\\xADsi\\xADbil\\xADity of build\\xADing an asyn\\xADchro\\xADnous ver\\xADsion of the \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://www.pac4j.org\"}),\"pac4j\"),\" li\\xADbrary, with a view to then mi\\xADgrat\\xADing the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pac4j/vertx-pac4j\"}),\"vertx-\\u200Bpac4j\"),\" im\\xADple\\xADmen\\xADta\\xADtion to use the asyn\\xADchro\\xADnous ver\\xADsion of pac4j by de\\xADfault.\"),mdx(\"p\",null,\"I\\u2019m keen (for ob\\xADvi\\xADous rea\\xADsons) that the async ver\\xADsion of pac4j is not tightly cou\\xADpled to  one par\\xADtic\\xADu\\xADlar asyn\\xADchro\\xADnous/non-\\u200Bblocking frame\\xADwork, I de\\xADcided to ex\\xADpose the API via the \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html\"}),\"Com\\xADpletable\\xADFu\\xADture\"),\" class, using this to wrap val\\xADues which will be de\\xADter\\xADmined in the fu\\xADture. How\\xADever, I opted to use the \",mdx(Link,{href:\"/\",passHref:!0,mdxType:\"Link\"},mdx(\"a\",e({parentName:\"p\"},{href:\"\"}),\"vert.x\")),\" frame\\xADwork for my asyn\\xADchro\\xADnous test\\xADing as a way of test\\xADing the API as it emerged. This in turn has led me to learn some as\\xADpects of the vert.x \",mdx(Link,{href:\"/docs/apidocs/io/vertx/core/Context.html\",passHref:!0,mdxType:\"Link\"},mdx(\"a\",e({parentName:\"p\"},{href:\"\"}),\"Con\\xADtext\")),\" class which I didn\\u2019t re\\xADally un\\xADder\\xADstand be\\xADfore.\"),mdx(Alert,{info:!0,mdxType:\"Alert\"},mdx(\"p\",null,\"The in\\xADfor\\xADma\\xADtion pre\\xADsented re\\xADlates to Vert.x ver\\xADsion 3.3.3. It is con\\xADceiv\\xADable that later ver\\xADsions of vert.x could ren\\xADder as\\xADpects of this ar\\xADti\\xADcle in\\xADcor\\xADrect.\")),mdx(\"h2\",e({},{id:\"introduction-to-the-context-class\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#introduction-to-the-context-class\"})),\"Introduction to the Context class\"),mdx(\"p\",null,\"When\\xADever a vert.x \",mdx(Link,{href:\"/docs/apidocs/io/vertx/core/Handler.html\",passHref:!0,mdxType:\"Link\"},mdx(\"a\",e({parentName:\"p\"},{href:\"\"}),\"Han\\xADdler\")),\" is ex\\xADe\\xADcuted, or the start or step method of a ver\\xADti\\xADcle is called, then that ex\\xADe\\xADcu\\xADtion is as\\xADso\\xADci\\xADated with a spe\\xADcific con\\xADtext. Gen\\xADer\\xADally a con\\xADtext is an event-\\u200Bloop con\\xADtext and is there\\xADfore as\\xADso\\xADci\\xADated with an event loop thread (ex\\xADcep\\xADtions are cov\\xADered in the Fur\\xADther Read\\xADing ref\\xADer\\xADenced below). Con\\xADtexts are prop\\xADa\\xADgated. When a han\\xADdler is set by code run\\xADning on a spe\\xADcific con\\xADtext, then that han\\xADdler will also be ex\\xADe\\xADcuted on the same con\\xADtext. This means for ex\\xADam\\xADple, that if the start method of a ver\\xADti\\xADcle in\\xADstance sets a num\\xADber of event bus han\\xADdlers (as many do), then they will all run on the same con\\xADtext as the start method for that ver\\xADti\\xADcle (so all han\\xADdlers for that ver\\xADti\\xADcle in\\xADstance will share a com\\xADmon con\\xADtext). \"),mdx(\"p\",null,\"A schematic of the re\\xADla\\xADtion\\xADships be\\xADtween non-\\u200Bworker ver\\xADti\\xADcles, con\\xADtexts and event\\xADloop threads is shown in Fig\\xADure 1. \"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/images/blog/vertx3-intro-to-context-object/VertxContextRelationships.png\",alt:\"Vertx Context/Thread/Verticle Relationships\"}))),mdx(\"p\",null,\"Note that each ver\\xADti\\xADcle ef\\xADfec\\xADtively has only one con\\xADtext for han\\xADdlers cre\\xADated by its start method, and each con\\xADtext is bound to a sin\\xADgle event-\\u200Bloop thread. A given event-\\u200Bloop thread can, how\\xADever, have mul\\xADti\\xADple con\\xADtexts bound to it. \"),mdx(\"h2\",e({},{id:\"when-are-contexts-not-propagated\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#when-are-contexts-not-propagated\"})),\"When are contexts not propagated?\"),mdx(\"p\",null,\"When a ver\\xADti\\xADcle\\u2019s start method is called, a new con\\xADtext is cre\\xADated. If 4 iden\\xADti\\xADcal ver\\xADti\\xADcles are de\\xADployed via the in\\xADstances pa\\xADra\\xADme\\xADter on De\\xADploy\\xADmen\\xADtOp\\xADtions, the start method of each will be on a new con\\xADtext. This is log\\xADi\\xADcal as we may not want all non-\\u200Bworker ver\\xADti\\xADcles to be bound to a sin\\xADgle event\\xADloop thread when mul\\xADti\\xADple event\\xADloop threads are avail\\xADable. \"),mdx(\"h2\",e({},{id:\"threading-guarantees\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#threading-guarantees\"})),\"Threading Guarantees\"),mdx(\"p\",null,\"There are cer\\xADtain con\\xADse\\xADquences of the prop\\xADa\\xADga\\xADtion of con\\xADtexts to han\\xADdlers as men\\xADtioned above. The most im\\xADpor\\xADtant one is that since all han\\xADdlers in a given event\\xADloop ver\\xADti\\xADcle run on the same con\\xADtext (the one on which its start method ran), they all run on the same event\\xADloop thread. This gives rise to the thread\\xADing guar\\xADan\\xADtee within vert.x, that as long as a given ver\\xADti\\xADcle is the only one to ever ac\\xADcess a piece of state, then that state is being ac\\xADcessed by only one thread, so no syn\\xADchro\\xADniza\\xADtion will be nec\\xADes\\xADsary. \"),mdx(\"h2\",e({},{id:\"exception-handling\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#exception-handling\"})),\"Exception Handling\"),mdx(\"p\",null,\"Each con\\xADtext can have its own ex\\xADcep\\xADtion han\\xADdler at\\xADtached for han\\xADdling ex\\xADcep\\xADtions which occur dur\\xADing event loop pro\\xADcess\\xADing.\"),mdx(\"h3\",e({},{id:\"why-might-you-not-want-the-default-exception-handler\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#why-might-you-not-want-the-default-exception-handler\"})),\"Why might you not want the default exception handler?\"),mdx(\"p\",null,\"As one ex\\xADam\\xADple, you might have some ver\\xADti\\xADcles run\\xADning whose job it is to mon\\xADi\\xADtor other ver\\xADti\\xADcles, and if some\\xADthing ap\\xADpears to go wrong with them, un\\xADde\\xADploy and restart them, a fre\\xADquent pat\\xADtern in an actor-\\u200B or microservices-\\u200B style archic\\xADtec\\xADture. So one op\\xADtion could be that when a su\\xADper\\xADvised ver\\xADti\\xADcle en\\xADcoun\\xADters an un\\xADre\\xADcov\\xADer\\xADable error, it could sim\\xADply no\\xADtify its su\\xADper\\xADvi\\xADsor that it has gone wrong via an event\\xADbus mes\\xADsage, and its su\\xADper\\xADvi\\xADsor could then un\\xADde\\xADploy and re\\xADde\\xADploy (and after a num\\xADber of fail\\xADures in rapid suc\\xADces\\xADsion pos\\xADsi\\xADbly give up hope or es\\xADca\\xADlate to its own su\\xADper\\xADvi\\xADsor.\"),mdx(\"h2\",e({},{id:\"going-off-context-and-getting-back-onto-a-particular-context\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#going-off-context-and-getting-back-onto-a-particular-context\"})),\"Going off-context and getting back onto a particular context\"),mdx(\"p\",null,\"There are sev\\xADeral rea\\xADsons why you might ex\\xADe\\xADcute code off-\\u200Bcontext and then want to op\\xADer\\xADate back on a vert.x con\\xADtext when com\\xADplete. I\\u2019ll out\\xADline a cou\\xADple of sce\\xADnar\\xADios below\"),mdx(\"h3\",e({},{id:\"running-code-on-a-separate-thread\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#running-code-on-a-separate-thread\"})),\"Running code on a separate thread\"),mdx(\"p\",null,\"Firstly you might be using an asyn\\xADchro\\xADnous dri\\xADver which is en\\xADtirely vertx-\\u200Bunaware. Its code will run on non-\\u200Beventloop threads but it\\u2019s pos\\xADsi\\xADble you may then want to use the re\\xADsults of that code to up\\xADdate in\\xADfor\\xADma\\xADtion within your ver\\xADti\\xADcle. If you don\\u2019t get back onto the cor\\xADrect con\\xADtext, you can\\u2019t make any guar\\xADan\\xADtees about thread-\\u200Bsafety, so your sub\\xADse\\xADquent pro\\xADcess\\xADing needs to be run back on the cor\\xADrect event\\xADloop thread.\"),mdx(\"h3\",e({},{id:\"using-asynchronous-java-8-apis\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#using-asynchronous-java-8-apis\"})),\"Using asynchronous Java 8 APIs\"),mdx(\"p\",null,\"APIs such as Com\\xADpletable\\xADFu\\xADture are context-\\u200Bunaware. In one ex\\xADam\\xADple, I cre\\xADated an al\\xADready com\\xADpleted fu\\xADture on the vert.x event loop in a test. I then at\\xADtached sub\\xADse\\xADquent pro\\xADcess\\xADing to it via then run:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@RunWith(VertxUnitRunner.class)\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-class\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"ImmediateCompletionTest\"),\" \"),`{\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@Rule\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"final\"),\" RunTestOnContext rule = \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` RunTestOnContext();\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@Test\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"testImmediateCompletion\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),\"(TestContext context)\"),\" \"),`{\n\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"final\"),` Async async = context.async();\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"final\"),` Vertx vertx = rule.vertx();\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"final\"),\" CompletableFuture<Integer> toComplete = \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` CompletableFuture<>();\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-comment\"}),\"// delay future completion by 500 ms\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"final\"),` String threadName = Thread.currentThread().getName();\n        toComplete.complete(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"100\"),`);\n        toComplete.thenRun(() -> {\n            assertThat(Thread.currentThread().getName(), is(threadName));\n            async.complete();\n        });\n    }\n}\n`)),mdx(\"p\",null,\"Naively one might ex\\xADpect this to au\\xADto\\xADmat\\xADi\\xADcally run on the con\\xADtext, since it hasn\\u2019t left the event\\xADloop thread on which the fu\\xADture was com\\xADpleted, and in\\xADdeed it\\u2019s prov\\xADable that it is on the cor\\xADrect thread. How\\xADever, it will not be on the cor\\xADrect con\\xADtext. This would mean that it wouldn\\u2019t, for ex\\xADam\\xADple, in\\xADvoke any mod\\xADi\\xADfied ex\\xADcep\\xADtion han\\xADdler at\\xADtached to the con\\xADtext.\"),mdx(\"h3\",e({},{id:\"getting-back-on-context\"}),mdx(\"a\",e({parentName:\"h3\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#getting-back-on-context\"})),\"Getting back on context\"),mdx(\"p\",null,\"For\\xADtu\\xADnately, once we\\u2019ve left the con\\xADtext, it\\u2019s quite straight\\xADfor\\xADward to re\\xADturn to it. Prior to de\\xADf\\xADi\\xADn\\xADi\\xADtion of the code block within then\\xADRun, we can use Vertx.cur\\xADrent\\xADCon\\xADtext() or vertx.getOr\\xADCre\\xADate\\xADCon\\xADtext() to get a han\\xADdle to the con\\xADtext on which our event\\xADloop code is run\\xADning, We can then ex\\xADe\\xADcute the code block in\\xADside a call to Con\\xADtext::runOn\\xADCon\\xADtext, sim\\xADi\\xADlar to\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"final\"),` Context currentContext = vertx.getOrCreateContext();\ntoComplete.thenRun(() -> {\n        currentContext.runOnContext(v -> {\n        assertThat(Thread.currentThread().getName(), is(threadName));\n        async.complete();\n    }\n});\n`)),mdx(\"p\",null,\"While get\\xADting back onto the cor\\xADrect con\\xADtext may not be crit\\xADi\\xADcal if you have re\\xADmained on the event loop thread through\\xADout, it is crit\\xADi\\xADcal if you are going to in\\xADvoke sub\\xADse\\xADquent vert.x han\\xADdlers, up\\xADdate ver\\xADti\\xADcle state or any\\xADthing sim\\xADi\\xADlar, so it\\u2019s a sen\\xADsi\\xADble gen\\xADeral ap\\xADproach.\"),mdx(\"h2\",e({},{id:\"further-reading\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#further-reading\"})),\"Further Reading\"),mdx(\"p\",null,\"The vert.x team them\\xADselves offer an ex\\xADcel\\xADlent blog about the Vert.x event\\xADloop, with ex\\xADcel\\xADlent ma\\xADte\\xADr\\xADial on the con\\xADtext, on \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/vietj/vertx-materials/blob/master/src/main/asciidoc/Demystifying_the_event_loop.adoc\"}),\"Github\"),\".\"),mdx(\"h2\",e({},{id:\"thanks\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#thanks\"})),\"Thanks\"),mdx(\"p\",null,\"Thanks very much to the vert.x core team for their clear github pages on the event\\xADloop, and also to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://twitter.com/alexlehm?lang=en\"}),\"Alexan\\xADder Lehmann\"),\" for his an\\xADswers to my stu\\xADpid and naive ques\\xADtions on the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://groups.google.com/forum/#!forum/vertx\"}),\"Vert.x google group\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"prevPost":{"meta":{"title":"Vert.x 3.4.0.Beta1 release","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have released 3.4.0.Beta1, this release is the biggest since Vert.x 3.0.0 with plenty of great features."},"date":"2017-02-09","slug":"vert-x-3-4-0-beta1-release"},"nextPost":{"meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0"},"relatedPosts":[{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"}]},"__N_SSG":true}