{"pageProps":{"categories":["releases","guides","security","news"],"post":{"meta":{"title":"Using Hamcrest Matchers with Vert.x Unit","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x Unit is a very elegant library to test asynchronous applications developed with vert.x. However because of this asynchronous aspect, reporting test failures is not natural for JUnit users."},"date":"2016-01-18","slug":"using-hamcrest-matchers-with-vert-x-unit","readingTime":{"text":"5 min read","minutes":4.205,"time":252300,"words":841},"content":{"compiledSource":"var m=Object.defineProperty,d=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var l=(a,s,n)=>s in a?m(a,s,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[s]=n,e=(a,s)=>{for(var n in s||(s={}))r.call(s,n)&&l(a,n,s[n]);if(p)for(var n of p(s))o.call(s,n)&&l(a,n,s[n]);return a},c=(a,s)=>d(a,h(s));var i=(a,s)=>{var n={};for(var t in a)r.call(a,t)&&s.indexOf(t)<0&&(n[t]=a[t]);if(a!=null&&p)for(var t of p(a))s.indexOf(t)<0&&o.call(a,t)&&(n[t]=a[t]);return n};const makeShortcode=a=>function(n){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},n))},Link=makeShortcode(\"Link\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:a}=t,s=i(t,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),s),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Vert.x Unit is a very el\\xADe\\xADgant li\\xADbrary to test asyn\\xADchro\\xADnous ap\\xADpli\\xADca\\xADtions de\\xADvel\\xADoped with vert.x. How\\xADever be\\xADcause of this asyn\\xADchro\\xADnous as\\xADpect, re\\xADport\\xADing test fail\\xADures is not nat\\xADural for JUnit users.  This is be\\xADcause, the failed as\\xADser\\xADtions need to be re\\xADported to the \",mdx(\"em\",{parentName:\"p\"},\"test con\\xADtext\"),\", con\\xADtrol\\xADling the ex\\xADe\\xADcu\\xADtion (and so the out\\xADcome) of the test. In other words, in a Vert.x Unit test you can\\xADnot use the reg\\xADu\\xADlar Junit as\\xADser\\xADtions and as\\xADser\\xADtion li\\xADbraries. In this blog post, we pro\\xADpose a way to let you using Ham\\xADcrest match\\xADers in Vert.x Unit tests.\"),mdx(\"h2\",e({},{id:\"using-vertx-unit\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#using-vertx-unit\"})),\"Using Vert.x Unit\"),mdx(\"p\",null,\"Vert.x Unit is a test li\\xADbrary made to en\\xADsure the be\\xADhav\\xADior of vert.x ap\\xADpli\\xADca\\xADtions. It lets you im\\xADple\\xADment tests check\\xADing asyn\\xADchro\\xADnous be\\xADhav\\xADior.\"),mdx(\"p\",null,\"Vert.x Unit can be used with Junit. For this, you just need to add the fol\\xADlow\\xADing de\\xADpen\\xADdency to your project:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-xml\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"<\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"dependency\"),\">\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"<\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"groupId\"),\">\"),\"io.vertx\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"</\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"groupId\"),\">\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"<\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"artifactId\"),\">\"),\"vertx-unit\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"</\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"artifactId\"),\">\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"<\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"version\"),\">\"),\"3.2.0\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"</\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"version\"),\">\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"<\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"scope\"),\">\"),\"test\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"</\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"scope\"),\">\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-tag\"}),\"</\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-name\"}),\"dependency\"),\">\"),`\n`)),mdx(\"p\",null,\"If you are using Gra\\xADdle, the de\\xADpen\\xADdency is:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-gradle\"}),\"testCompile \\u2018io.vertx:vertx-unit:\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"3.2\"),\".\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"0\"),`\\u2019\n`)),mdx(\"p\",null,\"If you are using an IDE, just add the vertx-\\u200Bunit jar to your project class\\xADpath.\"),mdx(\"p\",null,\"Ob\\xADvi\\xADously, you would need to add JUnit too.\"),mdx(\"p\",null,\"No\\xADtice that vertx-\\u200Bunit does not need JUnit, and can be used with\\xADout it. Check the Vert.x Unit \",mdx(Link,{href:\"/docs/vertx-unit/java/\",passHref:!0,mdxType:\"Link\"},mdx(\"a\",e({parentName:\"p\"},{href:\"\"}),\"doc\\xADu\\xADmen\\xADta\\xADtion\")),\" for more de\\xADtails.\"),mdx(\"h2\",e({},{id:\"vertx-unit-example\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#vertx-unit-example\"})),\"Vert.x Unit example\"),mdx(\"p\",null,\"Let\\u2019s con\\xADsider this very sim\\xADple \",mdx(\"inlineCode\",{parentName:\"p\"},\"Verticle\"),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-class\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"MyFirstVerticle\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"extends\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"AbstractVerticle\"),\" \"),`{\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@Override\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"start\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),\"(\",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"final\"),\" Future future)\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"throws\"),\" Exception \"),`{\n    vertx.createHttpServer()\n        .requestHandler(req -> req.response().end(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"hello vert.x\"'),`))\n        .listen(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"8080\"),`, done -> {\n          `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"if\"),` (done.failed()) {\n            future.fail(done.cause());\n          } `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"else\"),` {\n            future.complete();\n          }\n        });\n  }\n}\n`)),mdx(\"p\",null,\"It just cre\\xADates a new HTTP server and when launched it no\\xADti\\xADfies the \",mdx(\"inlineCode\",{parentName:\"p\"},\"future\"),\" of the com\\xADple\\xADtion.\"),mdx(\"p\",null,\"To test this ver\\xADti\\xADcle with Vert.x Unit you would write some\\xADthing like:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@RunWith(VertxUnitRunner.class)\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-class\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"MyFirstVerticleTest\"),\" \"),`{\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"private\"),` Vertx vertx;\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@Before\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"setUp\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),\"(TestContext context)\"),\" \"),`{\n    vertx = Vertx.vertx();\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\n      context.asyncAssertSuccess());\n  }\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@Test\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"test\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),\"(TestContext context)\"),\" \"),`{\n    Async async = context.async();\n    vertx.createHttpClient().get(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"8080\"),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"localhost\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/\"'),`)\n      .handler(response -> {\n        context.assertEquals(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"200\"),`, response.statusCode());\n        response.bodyHandler(buffer -> {\n          context.assertEquals(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"hello vert.x\"'),\", buffer.toString(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"utf-8\"'),`));\n          async.complete();\n        });\n      })\n      .end();\n  }\n}\n`)),mdx(\"p\",null,\"First, the test class is an\\xADno\\xADtated with \",mdx(\"inlineCode\",{parentName:\"p\"},\"@RunWith(VertxUnitRunner.class)\"),\", in\\xADstruct\\xADing JUnit to use this spe\\xADcial run\\xADner. This run\\xADner lets you in\\xADject a \",mdx(\"inlineCode\",{parentName:\"p\"},\"TestContext\"),\" pa\\xADra\\xADme\\xADter into every test meth\\xADods (as well as \",mdx(\"inlineCode\",{parentName:\"p\"},\"@Before\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"@After\"),\") to han\\xADdle the asyn\\xADchro\\xADnous as\\xADpect of the test.\"),mdx(\"p\",null,\"In the \",mdx(\"inlineCode\",{parentName:\"p\"},\"setUp\"),\" method, it cre\\xADates a new in\\xADstance of \",mdx(\"inlineCode\",{parentName:\"p\"},\"Vertx\"),\" and de\\xADploy the ver\\xADti\\xADcle. Thanks to \",mdx(\"inlineCode\",{parentName:\"p\"},\"context.asyncAssertSuccess()\"),\", it waits until the suc\\xADcess\\xADful com\\xADple\\xADtion of the ver\\xADti\\xADcle de\\xADploy\\xADment. In\\xADdeed, the de\\xADploy\\xADment is asyn\\xADchro\\xADnous, and we must be sure that the ver\\xADti\\xADcle has been de\\xADployed and has com\\xADpleted its ini\\xADtial\\xADiza\\xADtion be\\xADfore start\\xADing to test it.\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"test()\"),\" method cre\\xADates an \",mdx(\"inlineCode\",{parentName:\"p\"},\"Async\"),\" ob\\xADject that will be used to re\\xADport when the test has been com\\xADpleted. Then it cre\\xADates an HTTP client to emit a re\\xADquest on the server from our ver\\xADti\\xADcle and check that:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"the HTTP code is \",mdx(\"inlineCode\",{parentName:\"li\"},\"200 (OK)\")),mdx(\"li\",{parentName:\"ol\"},\"the body is \",mdx(\"inlineCode\",{parentName:\"li\"},\"hello vert.x\"))),mdx(\"p\",null,\"As you can see, to im\\xADple\\xADment the checks, the as\\xADser\\xADtions method are called on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"TestContext\"),\" ob\\xADject, which con\\xADtrol the test ex\\xADe\\xADcu\\xADtion. When every\\xADthing has been tested, we call \",mdx(\"inlineCode\",{parentName:\"p\"},\"async.complete()\"),\" to end the test. If an as\\xADser\\xADtion failed, the test is ob\\xADvi\\xADously stopped. This would not be the case if you would use reg\\xADu\\xADlar Junit as\\xADser\\xADtions.\"),mdx(\"h2\",e({},{id:\"using-the-hamcrest-matchers\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#using-the-hamcrest-matchers\"})),\"Using the Hamcrest Matchers\"),mdx(\"p\",null,\"In the pre\\xADvi\\xADous ex\\xADam\\xADple, we used the the as\\xADser\\xADtions avail\\xADable from the \",mdx(\"inlineCode\",{parentName:\"p\"},\"TestContext\"),\" in\\xADstance. How\\xADever it pro\\xADvides a lim\\xADited set of meth\\xADods. Ham\\xADcrest is a li\\xADbrary of match\\xADers, which can be com\\xADbined in to cre\\xADate flex\\xADi\\xADble ex\\xADpres\\xADsions of in\\xADtent in tests. It is very con\\xADve\\xADnient when test\\xADing com\\xADplex ap\\xADpli\\xADca\\xADtions.\"),mdx(\"p\",null,\"Ham\\xADcrest can\\xADnot be used di\\xADrectly as it would not re\\xADport the fail\\xADure on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"TestContext\"),\". For this pur\\xADpose we cre\\xADate a \",mdx(\"inlineCode\",{parentName:\"p\"},\"VertxMatcherAssert\"),\" class:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-class\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"VertxMatcherAssert\"),\" \"),`{\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"static\"),\" <T> \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"assertThat\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),`(TestContext context, T actual,\n    Matcher<? `,mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"super\"),\" T> matcher)\"),\" \"),`{\n    assertThat(context, `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"\"'),`, actual, matcher);\n  }\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"static\"),\" <T> \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"assertThat\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),`(TestContext context, String reason,\n    T actual, Matcher<? `,mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"super\"),\" T> matcher)\"),\" \"),`{\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"if\"),` (!matcher.matches(actual)) {\n      Description description = `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"new\"),` StringDescription();\n      description.appendText(reason)\n          .appendText(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"\\\\nExpected: \"'),`)\n          .appendDescriptionOf(matcher)\n          .appendText(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"\\\\n     but: \"'),`);\n      matcher.describeMismatch(actual, description);\n      context.fail(description.toString());\n    }\n  }\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"static\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"assertThat\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),`(TestContext context, String reason,\n    `,mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"boolean\"),\" assertion)\"),\" \"),`{\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"if\"),` (!assertion) {\n      context.fail(reason);\n    }\n  }\n}\n`)),mdx(\"p\",null,\"This class pro\\xADvides \",mdx(\"inlineCode\",{parentName:\"p\"},\"assertThat\"),\" method that re\\xADports error on the given \",mdx(\"inlineCode\",{parentName:\"p\"},\"TestContext\"),\". The com\\xADplete code is avail\\xADable \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://gist.github.com/cescoffier/5cbf4c69aa094ac9b1a6\"}),\"here\"),\".\"),mdx(\"p\",null,\"With this class, we can re-\\u200Bimplement our test as fol\\xADlows:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-meta\"}),\"@Test\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"public\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-keyword\"}),\"void\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-title\"}),\"testWithHamcrest\"),mdx(\"span\",e({parentName:\"span\"},{className:\"hljs-params\"}),\"(TestContext context)\"),\" \"),`{\n  Async async = context.async();\n  vertx.createHttpClient().get(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"8080\"),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"localhost\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"/\"'),`).handler(response -> {\n    assertThat(context, response.statusCode(), is(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-number\"}),\"200\"),`));\n    response.bodyHandler(buffer -> {\n      assertThat(context, buffer.toString(`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"utf-8\"'),\"), is(\",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-string\"}),'\"hello vert.x\"'),`));\n      async.complete();\n    });\n  }).end();\n}\n`)),mdx(\"p\",null,\"To ease the usage, I\\u2019ve added two \",mdx(\"em\",{parentName:\"p\"},\"im\\xADport sta\\xADtic\"),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"hljs language-java\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"static\"),` io.vertx.unit.example.VertxMatcherAssert.assertThat;\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"hljs-keyword\"}),\"static\"),` org.hamcrest.core.Is.is;\n`)),mdx(\"p\",null,\"You can use any Ham\\xADcrest matcher, or even im\\xADple\\xADment your own as soon as you use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"assertThat\"),\" method pro\\xADvided by \",mdx(\"inlineCode\",{parentName:\"p\"},\"VertxMatcherAssert\"),\".\"),mdx(\"h2\",e({},{id:\"conclusion\"}),mdx(\"a\",e({parentName:\"h2\"},{\"aria-hidden\":!0,tabIndex:-1,className:\"heading-anchor\",href:\"#conclusion\"})),\"Conclusion\"),mdx(\"p\",null,\"In this post we have seen how you can com\\xADbine Ham\\xADcrest and Vert.x Unit. So, you are not lim\\xADited any\\xADmore by the set of as\\xADsert meth\\xADods pro\\xADvided by Vert.x Unit, and can use the whole ex\\xADpres\\xADsive\\xADness of Ham\\xADcrest Match\\xADers.\"),mdx(\"p\",null,\"Don\\u2019t for\\xADget that you still can\\u2019t use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"assert\"),\" meth\\xADods from Junit, as they don\\u2019t re\\xADport on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"TestContext\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"prevPost":{"meta":{"title":"Intro to Vert.x Shell","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Vert.x Shell provides an extensible command line for Vert.x, accessible via SSH, Telnet or a nice Web interface. Vert.x Shell comes out of the box with plenty of commands."},"date":"2016-01-25","slug":"intro-to-vert-x-shell"},"nextPost":{"meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x"},"relatedPosts":[{"meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"date":"2015-08-03","slug":"unit-and-integration-tests"},{"meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"date":"2015-07-14","slug":"my-first-vert-x-3-application"},{"meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"date":"2015-07-27","slug":"some-rest-with-vert-x"}]},"__N_SSG":true}