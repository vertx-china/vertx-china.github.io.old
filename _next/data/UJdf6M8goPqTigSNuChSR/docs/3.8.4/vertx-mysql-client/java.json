{"pageProps":{"slug":"3.8.4/vertx-mysql-client/java","title":"Reactive MySQL Client","fallbackGitHubStars":null,"toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">Usage</a></li>\n<li><a href=\"#_getting_started\">Getting started</a></li>\n<li><a href=\"#_connecting_to_mysql\">Connecting to MySQL</a></li>\n<li><a href=\"#_configuration\">Configuration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_object\">Data Object</a></li>\n<li><a href=\"#_connection_uri\">connection URI</a></li>\n</ul>\n</li>\n<li><a href=\"#_running_queries\">Running queries</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_prepared_queries\">Prepared queries</a></li>\n<li><a href=\"#_batches\">Batches</a></li>\n</ul>\n</li>\n<li><a href=\"#_mysql_last_insert_id\">MySQL LAST_INSERT_ID</a></li>\n<li><a href=\"#_using_connections\">Using connections</a></li>\n<li><a href=\"#_using_transactions\">Using transactions</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_transactions_with_connections\">Transactions with connections</a></li>\n<li><a href=\"#_simplified_transaction_api\">Simplified transaction API</a></li>\n</ul>\n</li>\n<li><a href=\"#_cursors_and_streaming\">Cursors and streaming</a></li>\n<li><a href=\"#_mysql_type_mapping\">MySQL type mapping</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_handling_boolean\">Handling BOOLEAN</a></li>\n<li><a href=\"#_handling_json\">Handling JSON</a></li>\n<li><a href=\"#_handling_numeric\">Handling NUMERIC</a></li>\n</ul>\n</li>\n<li><a href=\"#_collector_queries\">Collector queries</a></li>\n<li><a href=\"#_mysql_stored_procedure\">MySQL Stored Procedure</a></li>\n<li><a href=\"#_mysql_local_infile\">MySQL LOCAL INFILE</a></li>\n<li><a href=\"#_authentication\">Authentication</a></li>\n<li><a href=\"#_using_ssltls\">Using SSL/TLS</a></li>\n<li><a href=\"#_mysql_utility_command\">MySQL utility command</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_com_ping\">COM_PING</a></li>\n<li><a href=\"#_com_reset_connection\">COM_RESET_CONNECTION</a></li>\n<li><a href=\"#_com_change_user\">COM_CHANGE_USER</a></li>\n<li><a href=\"#_com_init_db\">COM_INIT_DB</a></li>\n<li><a href=\"#_com_statistics\">COM_STATISTICS</a></li>\n<li><a href=\"#_com_debug\">COM_DEBUG</a></li>\n<li><a href=\"#_com_set_option\">COM_SET_OPTION</a></li>\n</ul>\n</li>\n<li><a href=\"#_mysql_and_mariadb_version_support_matrix\">MySQL and MariaDB version support matrix</a></li>\n</ul>\n</div>","contents":"<h1>Reactive MySQL Client</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Reactive MySQL Client is a client for MySQL with a straightforward API focusing on\nscalability and low overhead.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Features</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Event driven</p>\n</li>\n<li>\n<p>Lightweight</p>\n</li>\n<li>\n<p>Built-in connection pooling</p>\n</li>\n<li>\n<p>Prepared queries caching</p>\n</li>\n<li>\n<p>Cursor support</p>\n</li>\n<li>\n<p>Row streaming</p>\n</li>\n<li>\n<p>RxJava 1 and RxJava 2</p>\n</li>\n<li>\n<p>Direct memory to object without unnecessary copies</p>\n</li>\n<li>\n<p>Java 8 Date and Time</p>\n</li>\n<li>\n<p>Stored Procedures support</p>\n</li>\n<li>\n<p>TLS/SSL support</p>\n</li>\n<li>\n<p>MySQL utilities commands support</p>\n</li>\n<li>\n<p>Working with MySQL and MariaDB</p>\n</li>\n<li>\n<p>Rich collation and charset support</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Reactive MySQL Client add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-mysql-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'io.vertx:vertx-mysql-client:3.8.4'</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Here is the simplest way to connect, query and disconnect</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions()\n  .setPort(<span class=\"hljs-number\">3306</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the client pool</span>\nMySQLPool client = MySQLPool.pool(connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// A simple query</span>\nclient.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; result = ar.result();\n    System.out.println(<span class=\"hljs-string\">\"Got \"</span> + result.size() + <span class=\"hljs-string\">\" rows \"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n\n  <span class=\"hljs-comment\">// Now close the pool</span>\n  client.close();\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connecting_to_mysql\"><a class=\"anchor\" href=\"#_connecting_to_mysql\"></a>Connecting to MySQL</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Most of the time you will use a pool to connect to MySQL:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions()\n  .setPort(<span class=\"hljs-number\">3306</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\nMySQLPool client = MySQLPool.pool(connectOptions, poolOptions);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The pooled client uses a connection pool and any operation will borrow a connection from the pool\nto execute the operation and release it to the pool.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are running with Vert.x you can pass it your Vertx instance:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions()\n  .setPort(<span class=\"hljs-number\">3306</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-comment\">// Create the pooled client</span>\nMySQLPool client = MySQLPool.pool(vertx, connectOptions, poolOptions);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You need to release the pool when you don&#8217;t need it anymore:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.close();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you need to execute several operations on the same connection, you need to use a client\n<code><a href=\"../../apidocs/io/vertx/mysqlclient/MySQLConnection.html\">connection</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can easily get one from the pool:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions()\n  .setPort(<span class=\"hljs-number\">3306</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions()\n  .setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\nMySQLPool client = MySQLPool.pool(vertx, connectOptions, poolOptions);\n\n<span class=\"hljs-comment\">// Get a connection from the pool</span>\nclient.getConnection(ar1 -&gt; {\n\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n\n    System.out.println(<span class=\"hljs-string\">\"Connected\"</span>);\n\n    <span class=\"hljs-comment\">// Obtain our connection</span>\n    SqlConnection conn = ar1.result();\n\n    <span class=\"hljs-comment\">// All operations execute on the same connection</span>\n    conn.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>, ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n        conn.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='emad'\"</span>, ar3 -&gt; {\n          <span class=\"hljs-comment\">// Release the connection to the pool</span>\n          conn.close();\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Release the connection to the pool</span>\n        conn.close();\n      }\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Could not connect: \"</span> + ar1.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you are done with the connection you must close it to release it to the pool, so it can be reused.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuration\"><a class=\"anchor\" href=\"#_configuration\"></a>Configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are several alternatives for you to configure the client.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_object\"><a class=\"anchor\" href=\"#_data_object\"></a>Data Object</h3>\n<div class=\"paragraph\">\n<p>A simple way to configure the client is to specify a <code>MySQLConnectOptions</code> data object.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions()\n  .setPort(<span class=\"hljs-number\">3306</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>);\n\n<span class=\"hljs-comment\">// Pool Options</span>\nPoolOptions poolOptions = <span class=\"hljs-keyword\">new</span> PoolOptions().setMaxSize(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Create the pool from the data object</span>\nMySQLPool pool = MySQLPool.pool(vertx, connectOptions, poolOptions);\n\npool.getConnection(ar -&gt; {\n  <span class=\"hljs-comment\">// Handling your connection</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_collations_and_character_sets\"><a class=\"anchor\" href=\"#_collations_and_character_sets\"></a>collations and character sets</h4>\n<div class=\"paragraph\">\n<p>The Reactive MySQL client supports configuring collations or character sets and map them to a correlative <code>java.nio.charset.Charset</code>.\nFor example, you can specify charset for a connection like</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions();\n\n<span class=\"hljs-comment\">// set connection character set to utf8 instead of the default charset utf8mb4</span>\nconnectOptions.setCharset(<span class=\"hljs-string\">\"utf8\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also specify collation for a connection like</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions();\n\n<span class=\"hljs-comment\">// set connection collation to utf8_general_ci instead of the default collation utf8mb4_general_ci</span>\n<span class=\"hljs-comment\">// setting a collation will override the charset option</span>\nconnectOptions.setCharset(<span class=\"hljs-string\">\"gbk\"</span>);\nconnectOptions.setCollation(<span class=\"hljs-string\">\"utf8_general_ci\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>MySQL will take <code>utf8mb4</code> as the default charset. Note setting a collation on the data object will override the charset option.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can execute SQL <code>SHOW COLLATION;</code> or <code>SHOW CHARACTER SET;</code> to get the supported collations and charsets.</p>\n</div>\n<div class=\"paragraph\">\n<p>More information about MySQL charsets and collations can be found in the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/charset.html\">MySQL Reference Manual</a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_connection_attributes\"><a class=\"anchor\" href=\"#_connection_attributes\"></a>connection attributes</h4>\n<div class=\"paragraph\">\n<p>You can also configure the connection attributes with the <code>setProperties</code> or <code>addProperty</code> methods. Note <code>setProperties</code> will override the default client properties.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions connectOptions = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions();\n\n<span class=\"hljs-comment\">// Add a connection attribute</span>\nconnectOptions.addProperty(<span class=\"hljs-string\">\"_java_version\"</span>, <span class=\"hljs-string\">\"1.8.0_212\"</span>);\n\n<span class=\"hljs-comment\">// Override the attributes</span>\nMap&lt;String, String&gt; attributes = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\nattributes.put(<span class=\"hljs-string\">\"_client_name\"</span>, <span class=\"hljs-string\">\"myapp\"</span>);\nattributes.put(<span class=\"hljs-string\">\"_client_version\"</span>, <span class=\"hljs-string\">\"1.0.0\"</span>);\nconnectOptions.setProperties(attributes);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information about client connection attributes can be found in the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/performance-schema-connection-attribute-tables.html\">MySQL Reference Manual</a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_useaffectedrows\"><a class=\"anchor\" href=\"#_useaffectedrows\"></a>useAffectedRows</h4>\n<div class=\"paragraph\">\n<p>You can configure the <code>useAffectedRows</code> option to decide whether to set <code>CLIENT_FOUND_ROWS</code> flag when connecting to the server. If the <code>CLIENT_FOUND_ROWS</code> flag is specified then the affected rows count is the numeric value of rows found rather than affected.</p>\n</div>\n<div class=\"paragraph\">\n<p>More information about this can be found in the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-affected-rows.html\">MySQL Reference Manual</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_connection_uri\"><a class=\"anchor\" href=\"#_connection_uri\"></a>connection URI</h3>\n<div class=\"paragraph\">\n<p>Apart from configuring with a <code>MySQLConnectOptions</code> data object, We also provide you an alternative way to connect when you want to configure with a connection URI:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String connectionUri = <span class=\"hljs-string\">\"mysql://dbuser:secretpassword@database.server.com:3211/mydb\"</span>;\n\n<span class=\"hljs-comment\">// Create the pool from the connection URI</span>\nMySQLPool pool = MySQLPool.pool(connectionUri);\n\n<span class=\"hljs-comment\">// Create the connection from the connection URI</span>\nMySQLConnection.connect(vertx, connectionUri, res -&gt; {\n  <span class=\"hljs-comment\">// Handling your connection</span>\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information about connection string formats can be found in the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/connecting-using-uri-or-key-value-pairs.html#connecting-using-uri\">MySQL Reference Manual</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Currently the client supports the following parameter key words in connection uri(keys are case-insensitive)</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>host</p>\n</li>\n<li>\n<p>port</p>\n</li>\n<li>\n<p>user</p>\n</li>\n<li>\n<p>password</p>\n</li>\n<li>\n<p>schema</p>\n</li>\n<li>\n<p>socket</p>\n</li>\n<li>\n<p>useAffectedRows</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_running_queries\"><a class=\"anchor\" href=\"#_running_queries\"></a>Running queries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you don&#8217;t need a transaction or run single queries, you can run queries directly on the pool; the pool\nwill use one of its connection to run the query and return the result to you.</p>\n</div>\n<div class=\"paragraph\">\n<p>Here is how to run simple queries:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; result = ar.result();\n    System.out.println(<span class=\"hljs-string\">\"Got \"</span> + result.size() + <span class=\"hljs-string\">\" rows \"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_prepared_queries\"><a class=\"anchor\" href=\"#_prepared_queries\"></a>Prepared queries</h3>\n<div class=\"paragraph\">\n<p>You can do the same with prepared queries.</p>\n</div>\n<div class=\"paragraph\">\n<p>The SQL string can refer to parameters by position, using the database syntax `?`</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.preparedQuery(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id=?\"</span>, Tuple.of(<span class=\"hljs-string\">\"julien\"</span>), ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    System.out.println(<span class=\"hljs-string\">\"Got \"</span> + rows.size() + <span class=\"hljs-string\">\" rows \"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Query methods provides an asynchronous <code><a href=\"../../apidocs/io/vertx/sqlclient/RowSet.html\">RowSet</a></code> instance that works for <em>SELECT</em> queries</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.preparedQuery(<span class=\"hljs-string\">\"SELECT first_name, last_name FROM users\"</span>, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    <span class=\"hljs-keyword\">for</span> (Row row : rows) {\n      System.out.println(<span class=\"hljs-string\">\"User \"</span> + row.getString(<span class=\"hljs-number\">0</span>) + <span class=\"hljs-string\">\" \"</span> + row.getString(<span class=\"hljs-number\">1</span>));\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or <em>UPDATE</em>/<em>INSERT</em> queries:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.preparedQuery(<span class=\"hljs-string\">\"INSERT INTO users (first_name, last_name) VALUES (?, ?)\"</span>, Tuple.of(<span class=\"hljs-string\">\"Julien\"</span>, <span class=\"hljs-string\">\"Viet\"</span>), ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    System.out.println(rows.rowCount());\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> gives you access to your data by index</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">System.out.println(<span class=\"hljs-string\">\"User \"</span> + row.getString(<span class=\"hljs-number\">0</span>) + <span class=\"hljs-string\">\" \"</span> + row.getString(<span class=\"hljs-number\">1</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>or by name</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">System.out.println(<span class=\"hljs-string\">\"User \"</span> + row.getString(<span class=\"hljs-string\">\"first_name\"</span>) + <span class=\"hljs-string\">\" \"</span> + row.getString(<span class=\"hljs-string\">\"last_name\"</span>));</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The client will not do any magic here and the column name is identified with the name in the table regardless of how your SQL text is.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can access a wide variety of of types</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">String firstName = row.getString(<span class=\"hljs-string\">\"first_name\"</span>);\nBoolean male = row.getBoolean(<span class=\"hljs-string\">\"male\"</span>);\nInteger age = row.getInteger(<span class=\"hljs-string\">\"age\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can cache prepared queries:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connectOptions.setCachePreparedStatements(<span class=\"hljs-keyword\">true</span>);</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_batches\"><a class=\"anchor\" href=\"#_batches\"></a>Batches</h3>\n<div class=\"paragraph\">\n<p>You can execute prepared batch</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">List&lt;Tuple&gt; batch = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\nbatch.add(Tuple.of(<span class=\"hljs-string\">\"julien\"</span>, <span class=\"hljs-string\">\"Julien Viet\"</span>));\nbatch.add(Tuple.of(<span class=\"hljs-string\">\"emad\"</span>, <span class=\"hljs-string\">\"Emad Alblueshi\"</span>));\n\n<span class=\"hljs-comment\">// Execute the prepared batch</span>\nclient.preparedBatch(<span class=\"hljs-string\">\"INSERT INTO USERS (id, name) VALUES (?, ?)\"</span>, batch, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n\n    <span class=\"hljs-comment\">// Process rows</span>\n    RowSet&lt;Row&gt; rows = res.result();\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Batch failed \"</span> + res.cause());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mysql_last_insert_id\"><a class=\"anchor\" href=\"#_mysql_last_insert_id\"></a>MySQL LAST_INSERT_ID</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can get the auto incremented value if you insert a record into the table.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.query(<span class=\"hljs-string\">\"INSERT INTO test(val) VALUES ('v1')\"</span>, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rows = ar.result();\n    <span class=\"hljs-keyword\">int</span> lastInsertId = rows.property(MySQLClient.LAST_INSERTED_ID);\n    System.out.println(<span class=\"hljs-string\">\"Last inserted id is: \"</span> + lastInsertId);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in <a href=\"https://dev.mysql.com/doc/refman/8.0/en/getting-unique-id.html\">How to Get the Unique ID for the Last Inserted Row</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_connections\"><a class=\"anchor\" href=\"#_using_connections\"></a>Using connections</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you need to execute sequential queries (without a transaction), you can create a new connection\nor borrow one from the pool:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.getConnection(ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    SqlConnection connection = ar1.result();\n\n    connection.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>, ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n        connection.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='paulo'\"</span>, ar3 -&gt; {\n          <span class=\"hljs-comment\">// Do something with rows and return the connection to the pool</span>\n          connection.close();\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Return the connection to the pool</span>\n        connection.close();\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Prepared queries can be created:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">\"SELECT * FROM users WHERE first_name LIKE ?\"</span>, ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    PreparedQuery pq = ar1.result();\n    pq.execute(Tuple.of(<span class=\"hljs-string\">\"julien\"</span>), ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n        <span class=\"hljs-comment\">// All rows</span>\n        RowSet&lt;Row&gt; rows = ar2.result();\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nprepared query caching depends on the <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnectOptions.html#setCachePreparedStatements-boolean-\">setCachePreparedStatements</a></code> and\ndoes not depend on whether you are creating prepared queries or use <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlClient.html#preparedQuery-java.lang.String-io.vertx.core.Handler-\">direct prepared queries</a></code>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><code><a href=\"../../apidocs/io/vertx/sqlclient/PreparedQuery.html\">PreparedQuery</a></code> can perform efficient batching:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">\"INSERT INTO USERS (id, name) VALUES (?, ?)\"</span>, ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    PreparedQuery prepared = ar1.result();\n\n    <span class=\"hljs-comment\">// Create a query : bind parameters</span>\n    List&lt;Tuple&gt; batch = <span class=\"hljs-keyword\">new</span> ArrayList();\n\n    <span class=\"hljs-comment\">// Add commands to the createBatch</span>\n    batch.add(Tuple.of(<span class=\"hljs-string\">\"julien\"</span>, <span class=\"hljs-string\">\"Julien Viet\"</span>));\n    batch.add(Tuple.of(<span class=\"hljs-string\">\"emad\"</span>, <span class=\"hljs-string\">\"Emad Alblueshi\"</span>));\n\n    prepared.batch(batch, res -&gt; {\n      <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n\n        <span class=\"hljs-comment\">// Process rows</span>\n        RowSet&lt;Row&gt; rows = res.result();\n      } <span class=\"hljs-keyword\">else</span> {\n        System.out.println(<span class=\"hljs-string\">\"Batch failed \"</span> + res.cause());\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_transactions\"><a class=\"anchor\" href=\"#_using_transactions\"></a>Using transactions</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_transactions_with_connections\"><a class=\"anchor\" href=\"#_transactions_with_connections\"></a>Transactions with connections</h3>\n<div class=\"paragraph\">\n<p>You can execute transaction using SQL <code>BEGIN</code>/<code>COMMIT</code>/<code>ROLLBACK</code>, if you do so you must use\na <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnection.html\">SqlConnection</a></code> and manage it yourself.</p>\n</div>\n<div class=\"paragraph\">\n<p>Or you can use the transaction API of <code><a href=\"../../apidocs/io/vertx/sqlclient/SqlConnection.html\">SqlConnection</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.getConnection(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n\n    <span class=\"hljs-comment\">// Transaction must use a connection</span>\n    SqlConnection conn = res.result();\n\n    <span class=\"hljs-comment\">// Begin the transaction</span>\n    Transaction tx = conn.begin();\n\n    <span class=\"hljs-comment\">// Various statements</span>\n    conn.query(<span class=\"hljs-string\">\"INSERT INTO Users (first_name,last_name) VALUES ('Julien','Viet')\"</span>, ar1 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n        conn.query(<span class=\"hljs-string\">\"INSERT INTO Users (first_name,last_name) VALUES ('Emad','Alblueshi')\"</span>, ar2 -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n            <span class=\"hljs-comment\">// Commit the transaction</span>\n            tx.commit(ar3 -&gt; {\n              <span class=\"hljs-keyword\">if</span> (ar3.succeeded()) {\n                System.out.println(<span class=\"hljs-string\">\"Transaction succeeded\"</span>);\n              } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">\"Transaction failed \"</span> + ar3.cause().getMessage());\n              }\n              <span class=\"hljs-comment\">// Return the connection to the pool</span>\n              conn.close();\n            });\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Return the connection to the pool</span>\n            conn.close();\n          }\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Return the connection to the pool</span>\n        conn.close();\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When PostgreSQL reports the current transaction is failed (e.g the infamous <em>current transaction is aborted, commands ignored until\nend of transaction block</em>), the transaction is rollbacked and the <code><a href=\"../../apidocs/io/vertx/sqlclient/Transaction.html#abortHandler-io.vertx.core.Handler-\">abortHandler</a></code>\nis called:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">tx.abortHandler(v -&gt; {\n  System.out.println(<span class=\"hljs-string\">\"Transaction failed =&gt; rollbacked\"</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_simplified_transaction_api\"><a class=\"anchor\" href=\"#_simplified_transaction_api\"></a>Simplified transaction API</h3>\n<div class=\"paragraph\">\n<p>When you use a pool, you can start a transaction directly on the pool.</p>\n</div>\n<div class=\"paragraph\">\n<p>It borrows a connection from the pool, begins the transaction and releases the connection to the pool when the transaction ends.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">pool.begin(res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n\n    <span class=\"hljs-comment\">// Get the transaction</span>\n    Transaction tx = res.result();\n\n    <span class=\"hljs-comment\">// Various statements</span>\n    tx.query(<span class=\"hljs-string\">\"INSERT INTO Users (first_name,last_name) VALUES ('Julien','Viet')\"</span>, ar1 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n        tx.query(<span class=\"hljs-string\">\"INSERT INTO Users (first_name,last_name) VALUES ('Emad','Alblueshi')\"</span>, ar2 -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n            <span class=\"hljs-comment\">// Commit the transaction</span>\n            <span class=\"hljs-comment\">// the connection will automatically return to the pool</span>\n            tx.commit(ar3 -&gt; {\n              <span class=\"hljs-keyword\">if</span> (ar3.succeeded()) {\n                System.out.println(<span class=\"hljs-string\">\"Transaction succeeded\"</span>);\n              } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">\"Transaction failed \"</span> + ar3.cause().getMessage());\n              }\n            });\n          }\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// No need to close connection as transaction will abort and be returned to the pool</span>\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">注意</div>\n</td>\n<td class=\"content\">\nthis code will not close the connection because it will always be released back to the pool when the transaction\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cursors_and_streaming\"><a class=\"anchor\" href=\"#_cursors_and_streaming\"></a>Cursors and streaming</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>By default prepared query execution fetches all rows, you can use a\n<code><a href=\"../../apidocs/io/vertx/sqlclient/Cursor.html\">Cursor</a></code> to control the amount of rows you want to read:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">\"SELECT * FROM users WHERE age &gt; ?\"</span>, ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    PreparedQuery pq = ar1.result();\n\n    <span class=\"hljs-comment\">// Create a cursor</span>\n    Cursor cursor = pq.cursor(Tuple.of(<span class=\"hljs-number\">18</span>));\n\n    <span class=\"hljs-comment\">// Read 50 rows</span>\n    cursor.read(<span class=\"hljs-number\">50</span>, ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n        RowSet&lt;Row&gt; rows = ar2.result();\n\n        <span class=\"hljs-comment\">// Check for more ?</span>\n        <span class=\"hljs-keyword\">if</span> (cursor.hasMore()) {\n          <span class=\"hljs-comment\">// Repeat the process...</span>\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-comment\">// No more rows - close the cursor</span>\n          cursor.close();\n        }\n      }\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Cursors shall be closed when they are released prematurely:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">cursor.read(<span class=\"hljs-number\">50</span>, ar2 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n    <span class=\"hljs-comment\">// Close the cursor</span>\n    cursor.close();\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>A stream API is also available for cursors, which can be more convenient, specially with the Rxified version.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.prepare(<span class=\"hljs-string\">\"SELECT * FROM users WHERE age &gt; ?\"</span>, ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    PreparedQuery pq = ar1.result();\n\n    <span class=\"hljs-comment\">// Fetch 50 rows at a time</span>\n    RowStream&lt;Row&gt; stream = pq.createStream(<span class=\"hljs-number\">50</span>, Tuple.of(<span class=\"hljs-number\">18</span>));\n\n    <span class=\"hljs-comment\">// Use the stream</span>\n    stream.exceptionHandler(err -&gt; {\n      System.out.println(<span class=\"hljs-string\">\"Error: \"</span> + err.getMessage());\n    });\n    stream.endHandler(v -&gt; {\n      System.out.println(<span class=\"hljs-string\">\"End of stream\"</span>);\n    });\n    stream.handler(row -&gt; {\n      System.out.println(<span class=\"hljs-string\">\"User: \"</span> + row.getString(<span class=\"hljs-string\">\"last_name\"</span>));\n    });\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The stream read the rows by batch of <code>50</code> and stream them, when the rows have been passed to the handler,\na new batch of <code>50</code> is read and so on.</p>\n</div>\n<div class=\"paragraph\">\n<p>The stream can be resumed or paused, the loaded rows will remain in memory until they are delivered and the cursor\nwill stop iterating.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mysql_type_mapping\"><a class=\"anchor\" href=\"#_mysql_type_mapping\"></a>MySQL type mapping</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Currently the client supports the following MySQL types</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>BOOL,BOOLEAN (<code>java.lang.Byte</code>)</p>\n</li>\n<li>\n<p>TINYINT (<code>java.lang.Byte</code>)</p>\n</li>\n<li>\n<p>SMALLINT (<code>java.lang.Short</code>)</p>\n</li>\n<li>\n<p>MEDIUMINT (<code>java.lang.Integer</code>)</p>\n</li>\n<li>\n<p>INT,INTEGER (<code>java.lang.Integer</code>)</p>\n</li>\n<li>\n<p>BIGINT (<code>java.lang.Long</code>)</p>\n</li>\n<li>\n<p>FLOAT (<code>java.lang.Float</code>)</p>\n</li>\n<li>\n<p>DOUBLE (<code>java.lang.Double</code>)</p>\n</li>\n<li>\n<p>NUMERIC (<code>io.vertx.sqlclient.data.Numeric</code>)</p>\n</li>\n<li>\n<p>DATE (<code>java.time.LocalDate</code>)</p>\n</li>\n<li>\n<p>DATETIME (<code>java.time.LocalDateTime</code>)</p>\n</li>\n<li>\n<p>TIME (<code>java.time.Duration</code>)</p>\n</li>\n<li>\n<p>TIMESTAMP (<code>java.time.LocalDateTime</code>)</p>\n</li>\n<li>\n<p>YEAR (<code>java.lang.Short</code>)</p>\n</li>\n<li>\n<p>CHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>VARCHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>BINARY (<code>io.vertx.core.buffer.Buffer</code>)</p>\n</li>\n<li>\n<p>VARBINARY (<code>io.vertx.core.buffer.Buffer</code>)</p>\n</li>\n<li>\n<p>TINYBLOB (<code>io.vertx.core.buffer.Buffer</code>)</p>\n</li>\n<li>\n<p>TINYTEXT (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>BLOB (<code>io.vertx.core.buffer.Buffer</code>)</p>\n</li>\n<li>\n<p>TEXT (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>MEDIUMBLOB (<code>io.vertx.core.buffer.Buffer</code>)</p>\n</li>\n<li>\n<p>MEDIUMTEXT (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>LONGBLOB (<code>io.vertx.core.buffer.Buffer</code>)</p>\n</li>\n<li>\n<p>LONGTEXT (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>ENUM (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>SET (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>JSON (<code>io.vertx.core.json.JsonObject</code>, <code>io.vertx.core.json.JsonArray</code>, <code>Number</code>, <code>Boolean</code>, <code>String</code>, <code>io.vertx.sqlclient.Tuple#JSON_NULL</code>)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Tuple decoding uses the above types when storing values</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_boolean\"><a class=\"anchor\" href=\"#_handling_boolean\"></a>Handling BOOLEAN</h3>\n<div class=\"paragraph\">\n<p>In MySQL <code>BOOLEAN</code> and <code>BOOL</code> data types are synonyms for <code>TINYINT(1)</code>. A value of zero is considered false, non-zero values are considered true.\nA <code>BOOLEAN</code> data type value is stored in <code>Row</code> or <code>Tuple</code> as <code>java.lang.Byte</code> type, you can call <code>Row#getValue</code> to retrieve it as a <code>java.lang.Byte</code> value,\nor you can call <code>Row#getBoolean</code> to retrieve it as <code>java.lang.Boolean</code> value.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.query(<span class=\"hljs-string\">\"SELECT graduated FROM students WHERE id = 0\"</span>, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    RowSet&lt;Row&gt; rowSet = ar.result();\n    <span class=\"hljs-keyword\">for</span> (Row row : rowSet) {\n      <span class=\"hljs-keyword\">int</span> pos = row.getColumnIndex(<span class=\"hljs-string\">\"graduated\"</span>);\n      Byte value = row.get(Byte<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">pos</span>)</span>;\n      Boolean graduated = row.getBoolean(<span class=\"hljs-string\">\"graduated\"</span>);\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you want to execute a prepared statement with a param of a <code>BOOLEAN</code> value, you can simply add the <code>java.lang.Boolean</code> value to the params list.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.preparedQuery(<span class=\"hljs-string\">\"UPDATE students SET graduated = ? WHERE id = 0\"</span>, Tuple.of(<span class=\"hljs-keyword\">true</span>), ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Updated with the boolean value\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_json\"><a class=\"anchor\" href=\"#_handling_json\"></a>Handling JSON</h3>\n<div class=\"paragraph\">\n<p>MySQL <code>JSON</code> data type is represented by the following Java types:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>String</code></p>\n</li>\n<li>\n<p><code>Number</code></p>\n</li>\n<li>\n<p><code>Boolean</code></p>\n</li>\n<li>\n<p><code>io.vertx.core.json.JsonObject</code></p>\n</li>\n<li>\n<p><code>io.vertx.core.json.JsonArray</code></p>\n</li>\n<li>\n<p><code>io.vertx.sqlclient.Tuple#JSON_NULL</code> for representing the JSON null literal</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Tuple tuple = Tuple.of(\n  Tuple.JSON_NULL,\n  <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"bar\"</span>),\n  <span class=\"hljs-number\">3</span>);\n\n<span class=\"hljs-comment\">// Retrieving json</span>\nObject value = tuple.getValue(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// Expect JSON_NULL</span>\n\n<span class=\"hljs-comment\">//</span>\nvalue = tuple.get(JsonObject<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, 1)</span>; <span class=\"hljs-comment\">// Expect JSON object</span>\n\n<span class=\"hljs-comment\">//</span>\nvalue = tuple.get(Integer<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, 2)</span>; <span class=\"hljs-comment\">// Expect 3</span>\nvalue = tuple.getInteger(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// Expect 3</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_handling_numeric\"><a class=\"anchor\" href=\"#_handling_numeric\"></a>Handling NUMERIC</h3>\n<div class=\"paragraph\">\n<p>The <code><a href=\"../../apidocs/io/vertx/sqlclient/data/Numeric.html\">Numeric</a></code> Java type is used to represent the MySQL <code>NUMERIC</code> type.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Numeric numeric = row.get(Numeric<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, 0)</span>;\n<span class=\"hljs-keyword\">if</span> (numeric.isNaN()) {\n  <span class=\"hljs-comment\">// Handle NaN</span>\n} <span class=\"hljs-keyword\">else</span> {\n  BigDecimal value = numeric.bigDecimalValue();\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_collector_queries\"><a class=\"anchor\" href=\"#_collector_queries\"></a>Collector queries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can use Java collectors with the query API:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Collector&lt;Row, ?, Map&lt;Long, String&gt;&gt; collector = Collectors.toMap(\n  row -&gt; row.getLong(<span class=\"hljs-string\">\"id\"</span>),\n  row -&gt; row.getString(<span class=\"hljs-string\">\"last_name\"</span>));\n\n<span class=\"hljs-comment\">// Run the query with the collector</span>\nclient.query(<span class=\"hljs-string\">\"SELECT * FROM users\"</span>,\n  collector,\n  ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      SqlResult&lt;Map&lt;Long, String&gt;&gt; result = ar.result();\n\n      <span class=\"hljs-comment\">// Get the map created by the collector</span>\n      Map&lt;Long, String&gt; map = result.value();\n      System.out.println(<span class=\"hljs-string\">\"Got \"</span> + map);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The collector processing must not keep a reference on the <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> as\nthere is a single row used for processing the entire set.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Java <code>Collectors</code> provides many interesting predefined collectors, for example you can\ncreate easily create a string directly from the row set:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Collector&lt;Row, ?, String&gt; collector = Collectors.mapping(\n  row -&gt; row.getString(<span class=\"hljs-string\">\"last_name\"</span>),\n  Collectors.joining(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\"(\"</span>, <span class=\"hljs-string\">\")\"</span>)\n);\n\n<span class=\"hljs-comment\">// Run the query with the collector</span>\nclient.query(<span class=\"hljs-string\">\"SELECT * FROM users\"</span>,\n  collector,\n  ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n      SqlResult&lt;String&gt; result = ar.result();\n\n      <span class=\"hljs-comment\">// Get the string created by the collector</span>\n      String list = result.value();\n      System.out.println(<span class=\"hljs-string\">\"Got \"</span> + list);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n    }\n  });</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mysql_stored_procedure\"><a class=\"anchor\" href=\"#_mysql_stored_procedure\"></a>MySQL Stored Procedure</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can run stored procedures in queries. The result will be retrieved from the server following the <a href=\"https://dev.mysql.com/doc/dev/mysql-server/8.0.12/page_protocol_command_phase_sp.html\">MySQL protocol</a> without any magic here.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">client.query(<span class=\"hljs-string\">\"CREATE PROCEDURE multi() BEGIN\\n\"</span> +\n  <span class=\"hljs-string\">\"  SELECT 1;\\n\"</span> +\n  <span class=\"hljs-string\">\"  SELECT 1;\\n\"</span> +\n  <span class=\"hljs-string\">\"  INSERT INTO ins VALUES (1);\\n\"</span> +\n  <span class=\"hljs-string\">\"  INSERT INTO ins VALUES (2);\\n\"</span> +\n  <span class=\"hljs-string\">\"END;\"</span>, ar1 -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar1.succeeded()) {\n    <span class=\"hljs-comment\">// create stored procedure success</span>\n    client.query(<span class=\"hljs-string\">\"CALL multi();\"</span>, ar2 -&gt; {\n      <span class=\"hljs-keyword\">if</span> (ar2.succeeded()) {\n        <span class=\"hljs-comment\">// handle the result</span>\n        RowSet&lt;Row&gt; result1 = ar2.result();\n        Row row1 = result1.iterator().next();\n        System.out.println(<span class=\"hljs-string\">\"First result: \"</span> + row1.getInteger(<span class=\"hljs-number\">0</span>));\n\n        RowSet&lt;Row&gt; result2 = result1.next();\n        Row row2 = result2.iterator().next();\n        System.out.println(<span class=\"hljs-string\">\"Second result: \"</span> + row2.getInteger(<span class=\"hljs-number\">0</span>));\n\n        RowSet&lt;Row&gt; result3 = result2.next();\n        System.out.println(<span class=\"hljs-string\">\"Affected rows: \"</span> + result3.rowCount());\n      } <span class=\"hljs-keyword\">else</span> {\n        System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar2.cause().getMessage());\n      }\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar1.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note: Prepared statements binding OUT parameters is not supported for now.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mysql_local_infile\"><a class=\"anchor\" href=\"#_mysql_local_infile\"></a>MySQL LOCAL INFILE</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This client supports for handling the LOCAL INFILE Request, if you want to load data from a local file into the server, you can use query\n<code>LOAD DATA LOCAL INFILE '&lt;filename&gt;' INTO TABLE &lt;table&gt;;</code>. More information can be found in the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/load-data.html\">MySQL Reference Manual</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_authentication\"><a class=\"anchor\" href=\"#_authentication\"></a>Authentication</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>MySQL 8.0 introduces a new authentication method named <code>caching_sha2_password</code> and it&#8217;s the default one to authenticate.\nIn order to connect to the server using this new authentication method, you need either use a secure connection(i.e. enable TLS/SSL) or exchange the encrypted password using an RSA key pair to avoid leaks of password. The RSA key pair is automatically exchanged during the communication, but the server RSA public key may be hacked during the process since it&#8217;s transferred on a insecure connection.\nSo if you&#8217;re on a insecure connection and want to avoid the risk of exposing the server RSA public key, you can set the server RSA public key like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions options1 = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions()\n  .setPort(<span class=\"hljs-number\">3306</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>)\n  .setServerRsaPublicKeyPath(<span class=\"hljs-string\">\"tls/files/public_key.pem\"</span>); <span class=\"hljs-comment\">// configure with path of the public key</span>\n\nMySQLConnectOptions options2 = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions()\n  .setPort(<span class=\"hljs-number\">3306</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>)\n  .setServerRsaPublicKeyValue(Buffer.buffer(<span class=\"hljs-string\">\"-----BEGIN PUBLIC KEY-----\\n\"</span> +\n    <span class=\"hljs-string\">\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3yvG5s0qrV7jxVlp0sMj\\n\"</span> +\n    <span class=\"hljs-string\">\"xP0a6BuLKCMjb0o88hDsJ3xz7PpHNKazuEAfPxiRFVAV3edqfSiXoQw+lJf4haEG\\n\"</span> +\n    <span class=\"hljs-string\">\"HQe12Nfhs+UhcAeTKXRlZP/JNmI+BGoBduQ1rCId9bKYbXn4pvyS/a1ft7SwFkhx\\n\"</span> +\n    <span class=\"hljs-string\">\"aogCur7iIB0WUWvwkQ0fEj/Mlhw93lLVyx7hcGFq4FOAKFYr3A0xrHP1IdgnD8QZ\\n\"</span> +\n    <span class=\"hljs-string\">\"0fUbgGLWWLOossKrbUP5HWko1ghLPIbfmU6o890oj1ZWQewj1Rs9Er92/UDj/JXx\\n\"</span> +\n    <span class=\"hljs-string\">\"7ha1P+ZOgPBlV037KDQMS6cUh9vTablEHsMLhDZanymXzzjBkL+wH/b9cdL16LkQ\\n\"</span> +\n    <span class=\"hljs-string\">\"5QIDAQAB\\n\"</span> +\n    <span class=\"hljs-string\">\"-----END PUBLIC KEY-----\\n\"</span>)); <span class=\"hljs-comment\">// configure with buffer of the public key</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information about the <code>caching_sha2_password</code> authentication method can be found in the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html\">MySQL Reference Manual</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_ssltls\"><a class=\"anchor\" href=\"#_using_ssltls\"></a>Using SSL/TLS</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To configure the client to use SSL connection, you can configure the <code><a href=\"../../apidocs/io/vertx/mysqlclient/MySQLConnectOptions.html\">MySQLConnectOptions</a></code>\nlike a Vert.x <code>NetClient</code>.\nAll <a href=\"https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#option_general_ssl-mode\">SSL modes</a> are supported and you are able to configure <code>sslmode</code>. The client is in <code>DISABLED</code> SSL mode by default.\n<code>ssl</code> parameter is kept as a mere shortcut for setting <code>sslmode</code>. <code>setSsl(true)</code> is equivalent to <code>setSslMode(VERIFY_CA)</code> and <code>setSsl(false)</code> is equivalent to <code>setSslMode(DISABLED)</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLConnectOptions options = <span class=\"hljs-keyword\">new</span> MySQLConnectOptions()\n  .setPort(<span class=\"hljs-number\">3306</span>)\n  .setHost(<span class=\"hljs-string\">\"the-host\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"the-db\"</span>)\n  .setUser(<span class=\"hljs-string\">\"user\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"secret\"</span>)\n  .setSslMode(SslMode.VERIFY_CA)\n  .setPemTrustOptions(<span class=\"hljs-keyword\">new</span> PemTrustOptions().addCertPath(<span class=\"hljs-string\">\"/path/to/cert.pem\"</span>));\n\nMySQLConnection.connect(vertx, options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// Connected with SSL</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Could not connect \"</span> + res.cause());\n  }\n});</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the <a href=\"http://vertx.io/docs/vertx-core/java/#ssl\">Vert.x documentation</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mysql_utility_command\"><a class=\"anchor\" href=\"#_mysql_utility_command\"></a>MySQL utility command</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Sometimes you want to use MySQL utility commands and we provide support for this.\nMore information can be found in the <a href=\"https://dev.mysql.com/doc/dev/mysql-server/8.0.12/page_protocol_command_phase_utility.html\">MySQL utility commands</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_com_ping\"><a class=\"anchor\" href=\"#_com_ping\"></a>COM_PING</h3>\n<div class=\"paragraph\">\n<p>You can use <code>COM_PING</code> command to check if the server is alive. The handler will be notified if the server responds to the PING, otherwise the handler will never be called.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.ping(ar -&gt; {\n  System.out.println(<span class=\"hljs-string\">\"The server has responded to the PING\"</span>);\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_com_reset_connection\"><a class=\"anchor\" href=\"#_com_reset_connection\"></a>COM_RESET_CONNECTION</h3>\n<div class=\"paragraph\">\n<p>You can reset the session state with <code>COM_RESET_CONNECTION</code> command, this will reset the connection state like:\n- user variables\n- temporary tables\n- prepared statements</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.resetConnection(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Connection has been reset now\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_com_change_user\"><a class=\"anchor\" href=\"#_com_change_user\"></a>COM_CHANGE_USER</h3>\n<div class=\"paragraph\">\n<p>You can change the user of the current connection, this will perform a re-authentication and reset the connection state like <code>COM_RESET_CONNECTION</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">MySQLAuthOptions authenticationOptions = <span class=\"hljs-keyword\">new</span> MySQLAuthOptions()\n  .setUser(<span class=\"hljs-string\">\"newuser\"</span>)\n  .setPassword(<span class=\"hljs-string\">\"newpassword\"</span>)\n  .setDatabase(<span class=\"hljs-string\">\"newdatabase\"</span>);\nconnection.changeUser(authenticationOptions, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"User of current connection has been changed.\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_com_init_db\"><a class=\"anchor\" href=\"#_com_init_db\"></a>COM_INIT_DB</h3>\n<div class=\"paragraph\">\n<p>You can use <code>COM_INIT_DB</code> command to change the default schema of the connection.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.specifySchema(<span class=\"hljs-string\">\"newschema\"</span>, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Default schema changed to newschema\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_com_statistics\"><a class=\"anchor\" href=\"#_com_statistics\"></a>COM_STATISTICS</h3>\n<div class=\"paragraph\">\n<p>You can use <code>COM_STATISTICS</code> command to get a human readable string of some internal status variables in MySQL server.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.getInternalStatistics(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Statistics: \"</span> + ar.result());\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_com_debug\"><a class=\"anchor\" href=\"#_com_debug\"></a>COM_DEBUG</h3>\n<div class=\"paragraph\">\n<p>You can use <code>COM_DEBUG</code> command to dump debug info to the MySQL server&#8217;s STDOUT.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.debug(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"Debug info dumped to server's STDOUT\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_com_set_option\"><a class=\"anchor\" href=\"#_com_set_option\"></a>COM_SET_OPTION</h3>\n<div class=\"paragraph\">\n<p>You can use <code>COM_SET_OPTION</code> command to set options for the current connection. Currently only <code>CLIENT_MULTI_STATEMENTS</code> can be set.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, you can disable <code>CLIENT_MULTI_STATEMENTS</code> with this command.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">connection.setOption(MySQLSetOption.MYSQL_OPTION_MULTI_STATEMENTS_OFF, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">\"CLIENT_MULTI_STATEMENTS is off now\"</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    System.out.println(<span class=\"hljs-string\">\"Failure: \"</span> + ar.cause().getMessage());\n  }\n});</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_mysql_and_mariadb_version_support_matrix\"><a class=\"anchor\" href=\"#_mysql_and_mariadb_version_support_matrix\"></a>MySQL and MariaDB version support matrix</h2>\n<div class=\"sectionbody\">\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 25%;\">\n<col style=\"width: 25%;\">\n<col style=\"width: 25%;\">\n<col style=\"width: 25%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-center valign-top\" colspan=\"2\">MySQL</th>\n<th class=\"tableblock halign-center valign-top\" colspan=\"2\">MariaDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">Version</p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">Supported</p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">Version</p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">Supported</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\"><code>5.5</code></p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">&#10004;</p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\"><code>10.1</code></p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">&#10004;</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\"><code>5.6</code></p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">&#10004;</p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\"><code>10.2</code></p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">&#10004;</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\"><code>5.7</code></p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">&#10004;</p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\"><code>10.3</code></p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">&#10004;</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\"><code>8.0</code></p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">&#10004;</p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\"><code>10.4</code></p></td>\n<td class=\"tableblock halign-center valign-top\"><p class=\"tableblock\">&#10004;</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\">\n<p>Known issues:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Reset connection utility command does not work in MySQL 5.5, 5.6 and MariaDB 10.1</p>\n</li>\n<li>\n<p>Change user utility command is not supported with MariaDB 10.2 and 10.3</p>\n</li>\n</ul>\n</div>\n</div>\n</div>"},"__N_SSG":true}